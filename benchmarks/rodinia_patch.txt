diff -ruN rodinia_3.1/common/make.config rodinia_backup/common/make.config
--- rodinia_3.1/common/make.config	2015-12-11 07:46:19.000000000 -0800
+++ rodinia_backup/common/make.config	2024-09-26 12:55:55.235230740 -0700
@@ -30,4 +30,24 @@
 #     ifeq ($(shell if test -d $(OPENCL_DIR)/lib/x86_64/; then echo T; else echo F; fi), T)
 #     	OPENCL_LIB = $(OPENCL_DIR)/lib/x86_64/
 #     endif
-#endif
\ No newline at end of file
+#endif
+
+RANDINT = $(shell python3 -c 'from random import randint; print(randint(1000000000, 9999999999));')
+
+ifndef $(INJECT_CODE_CLANG)
+INJECT_CODE_CLANG = 0
+endif
+
+ifeq ($(INJECT_CODE_CLANG), 1)
+INST_FLAGS = -g -c -emit-llvm -include ${HOME}/hipec/inst_pass/Inst/InstStub.h -DRANDINT=${RANDINT} -DEXP_FLAG_TOTAL=0x5F2F0 -Xclang -load -Xclang ${HOME}/hipec/clang-examples/hipec-plugin/hipec-plugin.so -Xclang -plugin -Xclang inject-fp-exception 
+else
+INST_FLAGS = -g -include ${HOME}/hipec/inst_pass/Inst/InstStub.h -DRANDINT=${RANDINT} -DEXP_FLAG_TOTAL=0x5F2F0 #-fpass-plugin=${HOME}/hipec/inst_pass/libInstPass.so
+endif
+
+ifndef $(INJECT_CODE_LLVM)
+INJECT_CODE_LLVM = 0
+endif
+
+ifeq ($(INJECT_CODE_LLVM), 1)
+INST_FLAGS += -fpass-plugin=${HOME}/hipec/inst_pass/libInstPass.so
+endif
\ No newline at end of file
Binary files rodinia_3.1/cuda/backprop/backprop and rodinia_backup/cuda/backprop/backprop differ
diff -ruN rodinia_3.1/cuda/backprop/backprop_cuda.cu rodinia_backup/cuda/backprop/backprop_cuda.cu
--- rodinia_3.1/cuda/backprop/backprop_cuda.cu	2015-12-11 07:46:15.000000000 -0800
+++ rodinia_backup/cuda/backprop/backprop_cuda.cu	2024-09-26 12:55:55.235230740 -0700
@@ -5,7 +5,7 @@
 #include <stdio.h>
 #include <string.h>
 #include <math.h>
-#include <cuda.h>
+#include <hip/hip_runtime.h>
 #include <sys/time.h>
 
 // includes, kernels
@@ -94,10 +94,10 @@
     }
   }
   
-  cudaMalloc((void**) &input_cuda, (in + 1) * sizeof(float));
-  cudaMalloc((void**) &output_hidden_cuda, (hid + 1) * sizeof(float));
-  cudaMalloc((void**) &input_hidden_cuda, (in + 1) * (hid + 1) * sizeof(float));
-  cudaMalloc((void**) &hidden_partial_sum, num_blocks * WIDTH * sizeof(float));
+  hipMalloc((void**) &input_cuda, (in + 1) * sizeof(float));
+  hipMalloc((void**) &output_hidden_cuda, (hid + 1) * sizeof(float));
+  hipMalloc((void**) &input_hidden_cuda, (in + 1) * (hid + 1) * sizeof(float));
+  hipMalloc((void**) &hidden_partial_sum, num_blocks * WIDTH * sizeof(float));
   
   
 #endif
@@ -115,8 +115,8 @@
   
   //printf("in= %d, hid = %d, numblocks = %d\n", in, hid, num_blocks);
   
-  cudaMemcpy(input_cuda, net->input_units, (in + 1) * sizeof(float), cudaMemcpyHostToDevice);
-  cudaMemcpy(input_hidden_cuda, input_weights_one_dim, (in + 1) * (hid + 1) * sizeof(float), cudaMemcpyHostToDevice);
+  hipMemcpy(input_cuda, net->input_units, (in + 1) * sizeof(float), hipMemcpyHostToDevice);
+  hipMemcpy(input_hidden_cuda, input_weights_one_dim, (in + 1) * (hid + 1) * sizeof(float), hipMemcpyHostToDevice);
 
   
   
@@ -127,15 +127,15 @@
 											  in,
 											  hid);
  
-  cudaThreadSynchronize();
+  hipDeviceSynchronize();
   
-  cudaError_t error = cudaGetLastError();
-	if (error != cudaSuccess) {
-		printf("bpnn kernel error: %s\n", cudaGetErrorString(error));
+  hipError_t error = hipGetLastError();
+	if (error != hipSuccess) {
+		printf("bpnn kernel error: %s\n", hipGetErrorString(error));
 		exit(EXIT_FAILURE);
 	}
   
-  cudaMemcpy(partial_sum, hidden_partial_sum, num_blocks * WIDTH * sizeof(float), cudaMemcpyDeviceToHost);
+  hipMemcpy(partial_sum, hidden_partial_sum, num_blocks * WIDTH * sizeof(float), hipMemcpyDeviceToHost);
      
   for (int j = 1; j <= hid; j++) {
     sum = 0.0;
@@ -161,12 +161,12 @@
 
 #ifdef GPU
 
-  cudaMalloc((void**) &hidden_delta_cuda, (hid + 1) * sizeof(float));
-  cudaMalloc((void**) &input_prev_weights_cuda, (in + 1) * (hid + 1) * sizeof(float));
+  hipMalloc((void**) &hidden_delta_cuda, (hid + 1) * sizeof(float));
+  hipMalloc((void**) &input_prev_weights_cuda, (in + 1) * (hid + 1) * sizeof(float));
 
-  cudaMemcpy(hidden_delta_cuda, net->hidden_delta, (hid + 1) * sizeof(float), cudaMemcpyHostToDevice);
-  cudaMemcpy(input_prev_weights_cuda, input_weights_prev_one_dim, (in + 1) * (hid + 1) * sizeof(float), cudaMemcpyHostToDevice);
-  cudaMemcpy(input_hidden_cuda, input_weights_one_dim, (in + 1) * (hid + 1) * sizeof(float), cudaMemcpyHostToDevice);
+  hipMemcpy(hidden_delta_cuda, net->hidden_delta, (hid + 1) * sizeof(float), hipMemcpyHostToDevice);
+  hipMemcpy(input_prev_weights_cuda, input_weights_prev_one_dim, (in + 1) * (hid + 1) * sizeof(float), hipMemcpyHostToDevice);
+  hipMemcpy(input_hidden_cuda, input_weights_one_dim, (in + 1) * (hid + 1) * sizeof(float), hipMemcpyHostToDevice);
 
 
   bpnn_adjust_weights_cuda<<< grid, threads >>>(hidden_delta_cuda,  
@@ -177,15 +177,15 @@
 												input_prev_weights_cuda
 												);
 
-  cudaMemcpy(net->input_units, input_cuda, (in + 1) * sizeof(float), cudaMemcpyDeviceToHost);
-  cudaMemcpy(input_weights_one_dim, input_hidden_cuda, (in + 1) * (hid + 1) * sizeof(float), cudaMemcpyDeviceToHost);
+  hipMemcpy(net->input_units, input_cuda, (in + 1) * sizeof(float), hipMemcpyDeviceToHost);
+  hipMemcpy(input_weights_one_dim, input_hidden_cuda, (in + 1) * (hid + 1) * sizeof(float), hipMemcpyDeviceToHost);
     
-  cudaFree(input_cuda);
-  cudaFree(output_hidden_cuda);
-  cudaFree(input_hidden_cuda);
-  cudaFree(hidden_partial_sum);
-  cudaFree(input_prev_weights_cuda);
-  cudaFree(hidden_delta_cuda);
+  hipFree(input_cuda);
+  hipFree(output_hidden_cuda);
+  hipFree(input_hidden_cuda);
+  hipFree(hidden_partial_sum);
+  hipFree(input_prev_weights_cuda);
+  hipFree(hidden_delta_cuda);
   
   free(partial_sum);
   free(input_weights_one_dim);
diff -ruN rodinia_3.1/cuda/backprop/backprop_cuda_kernel.cu rodinia_backup/cuda/backprop/backprop_cuda_kernel.cu
--- rodinia_3.1/cuda/backprop/backprop_cuda_kernel.cu	2015-12-11 07:46:15.000000000 -0800
+++ rodinia_backup/cuda/backprop/backprop_cuda_kernel.cu	2024-09-26 12:55:55.235230740 -0700
@@ -6,7 +6,7 @@
 #include <stdio.h>
 #include "backprop.h"
 #include "math.h"
-#include "cuda.h"
+#include "hip/hip_runtime.h"
 
 
 __global__ void
Binary files rodinia_3.1/cuda/backprop/backprop_cuda.o and rodinia_backup/cuda/backprop/backprop_cuda.o differ
Binary files rodinia_3.1/cuda/backprop/backprop.o and rodinia_backup/cuda/backprop/backprop.o differ
Binary files rodinia_3.1/cuda/backprop/facetrain.o and rodinia_backup/cuda/backprop/facetrain.o differ
Binary files rodinia_3.1/cuda/backprop/imagenet.o and rodinia_backup/cuda/backprop/imagenet.o differ
diff -ruN rodinia_3.1/cuda/backprop/Makefile rodinia_backup/cuda/backprop/Makefile
--- rodinia_3.1/cuda/backprop/Makefile	2015-12-11 07:46:15.000000000 -0800
+++ rodinia_backup/cuda/backprop/Makefile	2024-09-26 12:55:55.235230740 -0700
@@ -5,8 +5,8 @@
 CC_FLAGS = -g  -O2
 
 # CUDA compiler
-NVCC = $(CUDA_DIR)/bin/nvcc
-NVCC_FLAGS = -I$(CUDA_DIR)/include
+NVCC = hipcc
+NVCC_FLAGS = $(INST_FLAGS)
 
 # 'make dbg=1' enables NVCC debugging
 ifeq ($(dbg),1)
@@ -20,9 +20,8 @@
 	NVCC_FLAGS += -deviceemu
 endif
 
-
 backprop: backprop.o facetrain.o imagenet.o backprop_cuda.o 
-	$(CC) $(CC_FLAGS) backprop.o facetrain.o imagenet.o backprop_cuda.o -o backprop -L$(CUDA_LIB_DIR) -lcuda -lcudart -lm
+	$(NVCC) $(CC_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o backprop.o facetrain.o imagenet.o backprop_cuda.o -o backprop -lm
 
 %.o: %.[ch]
 	$(CC) $(CC_FLAGS) $< -c
diff -ruN rodinia_3.1/cuda/backprop/setup.ini rodinia_backup/cuda/backprop/setup.ini
--- rodinia_3.1/cuda/backprop/setup.ini	1969-12-31 16:00:00.000000000 -0800
+++ rodinia_backup/cuda/backprop/setup.ini	2024-09-26 12:55:55.236230789 -0700
@@ -0,0 +1,7 @@
+[DEFAULT]
+compile = make
+run = ./backprop 65536
+use_clang_plugin = false
+clang_convert = make INJECT_CODE_CLANG=1
+llvm_pass = make INJECT_CODE_LLVM=1
+clean = make clean
\ No newline at end of file
diff -ruN rodinia_3.1/cuda/cfd/euler3d.cu rodinia_backup/cuda/cfd/euler3d.cu
--- rodinia_3.1/cuda/cfd/euler3d.cu	2015-12-11 07:46:05.000000000 -0800
+++ rodinia_backup/cuda/cfd/euler3d.cu	2024-09-26 12:55:55.236230789 -0700
@@ -2,8 +2,10 @@
 // This code is from the AIAA-2009-4001 paper
 
 //#include <cutil.h>
-#include <helper_cuda.h>
-#include <helper_timer.h>
+
+#include <hip/hip_runtime.h>
+#include "helper_cuda.h"
+#include "helper_timer.h"
 #include <iostream>
 #include <fstream>
 
@@ -102,32 +104,32 @@
 T* alloc(int N)
 {
 	T* t;
-	checkCudaErrors(cudaMalloc((void**)&t, sizeof(T)*N));
+	checkCudaErrors(hipMalloc((void**)&t, sizeof(T)*N));
 	return t;
 }
 
 template <typename T>
 void dealloc(T* array)
 {
-	checkCudaErrors(cudaFree((void*)array));
+	checkCudaErrors(hipFree((void*)array));
 }
 
 template <typename T>
 void copy(T* dst, T* src, int N)
 {
-	checkCudaErrors(cudaMemcpy((void*)dst, (void*)src, N*sizeof(T), cudaMemcpyDeviceToDevice));
+	checkCudaErrors(hipMemcpy((void*)dst, (void*)src, N*sizeof(T), hipMemcpyDeviceToDevice));
 }
 
 template <typename T>
 void upload(T* dst, T* src, int N)
 {
-	checkCudaErrors(cudaMemcpy((void*)dst, (void*)src, N*sizeof(T), cudaMemcpyHostToDevice));
+	checkCudaErrors(hipMemcpy((void*)dst, (void*)src, N*sizeof(T), hipMemcpyHostToDevice));
 }
 
 template <typename T>
 void download(T* dst, T* src, int N)
 {
-	checkCudaErrors(cudaMemcpy((void*)dst, (void*)src, N*sizeof(T), cudaMemcpyDeviceToHost));
+	checkCudaErrors(hipMemcpy((void*)dst, (void*)src, N*sizeof(T), hipMemcpyDeviceToHost));
 }
 
 void dump(float* variables, int nel, int nelr)
@@ -427,12 +429,12 @@
 	}
 	const char* data_file_name = argv[1];
 	
-	cudaDeviceProp prop;
+	hipDeviceProp_t prop;
 	int dev;
 	
-	checkCudaErrors(cudaSetDevice(0));
-	checkCudaErrors(cudaGetDevice(&dev));
-	checkCudaErrors(cudaGetDeviceProperties(&prop, dev));
+	checkCudaErrors(hipSetDevice(0));
+	checkCudaErrors(hipGetDevice(&dev));
+	checkCudaErrors(hipGetDeviceProperties(&prop, dev));
 	
 	printf("Name:                     %s\n", prop.name);
 
@@ -469,12 +471,12 @@
 		compute_flux_contribution(h_ff_variable[VAR_DENSITY], h_ff_momentum, h_ff_variable[VAR_DENSITY_ENERGY], ff_pressure, ff_velocity, h_ff_flux_contribution_momentum_x, h_ff_flux_contribution_momentum_y, h_ff_flux_contribution_momentum_z, h_ff_flux_contribution_density_energy);
 
 		// copy far field conditions to the gpu
-		checkCudaErrors( cudaMemcpyToSymbol(ff_variable,          h_ff_variable,          NVAR*sizeof(float)) );
-		checkCudaErrors( cudaMemcpyToSymbol(ff_flux_contribution_momentum_x, &h_ff_flux_contribution_momentum_x, sizeof(float3)) );
-		checkCudaErrors( cudaMemcpyToSymbol(ff_flux_contribution_momentum_y, &h_ff_flux_contribution_momentum_y, sizeof(float3)) );
-		checkCudaErrors( cudaMemcpyToSymbol(ff_flux_contribution_momentum_z, &h_ff_flux_contribution_momentum_z, sizeof(float3)) );
+		checkCudaErrors( hipMemcpyToSymbol(HIP_SYMBOL(ff_variable),          h_ff_variable,          NVAR*sizeof(float)) );
+		checkCudaErrors( hipMemcpyToSymbol(HIP_SYMBOL(ff_flux_contribution_momentum_x), &h_ff_flux_contribution_momentum_x, sizeof(float3)) );
+		checkCudaErrors( hipMemcpyToSymbol(HIP_SYMBOL(ff_flux_contribution_momentum_y), &h_ff_flux_contribution_momentum_y, sizeof(float3)) );
+		checkCudaErrors( hipMemcpyToSymbol(HIP_SYMBOL(ff_flux_contribution_momentum_z), &h_ff_flux_contribution_momentum_z, sizeof(float3)) );
 		
-		checkCudaErrors( cudaMemcpyToSymbol(ff_flux_contribution_density_energy, &h_ff_flux_contribution_density_energy, sizeof(float3)) );		
+		checkCudaErrors( hipMemcpyToSymbol(HIP_SYMBOL(ff_flux_contribution_density_energy), &h_ff_flux_contribution_density_energy, sizeof(float3)) );		
 	}
 	int nel;
 	int nelr;
@@ -550,9 +552,9 @@
 	// make sure all memory is floatly allocated before we start timing
 	initialize_variables(nelr, old_variables);
 	initialize_variables(nelr, fluxes);
-	cudaMemset( (void*) step_factors, 0, sizeof(float)*nelr );
+	hipMemset( (void*) step_factors, 0, sizeof(float)*nelr );
 	// make sure CUDA isn't still doing something before we start timing
-	cudaThreadSynchronize();
+	hipDeviceSynchronize();
 
 	// these need to be computed the first time in order to compute time step
 	std::cout << "Starting..." << std::endl;
@@ -582,7 +584,7 @@
 		}
 	}
 
-	cudaThreadSynchronize();
+	hipDeviceSynchronize();
 	//	CUT_SAFE_CALL( cutStopTimer(timer) );  
 	sdkStopTimer(&timer); 
 
diff -ruN rodinia_3.1/cuda/cfd/euler3d_double.cu rodinia_backup/cuda/cfd/euler3d_double.cu
--- rodinia_3.1/cuda/cfd/euler3d_double.cu	2015-12-11 07:46:05.000000000 -0800
+++ rodinia_backup/cuda/cfd/euler3d_double.cu	2024-09-26 12:55:55.251231531 -0700
@@ -2,18 +2,13 @@
 // This code is from the AIAA-2009-4001 paper
 
 // #include <cutil.h>
-#include <helper_cuda.h>
-#include <helper_timer.h>
+
+#include <hip/hip_runtime.h>
+#include "helper_cuda.h"
+#include "helper_timer.h"
 #include <iostream>
 #include <fstream>
 
-#if CUDART_VERSION < 3000
-struct double3
-{
-	double x, y, z;
-};
-#endif
-
 /*
  * Options 
  * 
@@ -54,32 +49,32 @@
 T* alloc(int N)
 {
 	T* t;
-	checkCudaErrors(cudaMalloc((void**)&t, sizeof(T)*N));
+	checkCudaErrors(hipMalloc((void**)&t, sizeof(T)*N));
 	return t;
 }
 
 template <typename T>
 void dealloc(T* array)
 {
-	checkCudaErrors(cudaFree((void*)array));
+	checkCudaErrors(hipFree((void*)array));
 }
 
 template <typename T>
 void copy(T* dst, T* src, int N)
 {
-	checkCudaErrors(cudaMemcpy((void*)dst, (void*)src, N*sizeof(T), cudaMemcpyDeviceToDevice));
+	checkCudaErrors(hipMemcpy((void*)dst, (void*)src, N*sizeof(T), hipMemcpyDeviceToDevice));
 }
 
 template <typename T>
 void upload(T* dst, T* src, int N)
 {
-	checkCudaErrors(cudaMemcpy((void*)dst, (void*)src, N*sizeof(T), cudaMemcpyHostToDevice));
+	checkCudaErrors(hipMemcpy((void*)dst, (void*)src, N*sizeof(T), hipMemcpyHostToDevice));
 }
 
 template <typename T>
 void download(T* dst, T* src, int N)
 {
-	checkCudaErrors(cudaMemcpy((void*)dst, (void*)src, N*sizeof(T), cudaMemcpyDeviceToHost));
+	checkCudaErrors(hipMemcpy((void*)dst, (void*)src, N*sizeof(T), hipMemcpyDeviceToHost));
 }
 
 void dump(double* variables, int nel, int nelr)
@@ -132,10 +127,10 @@
 {
 	dim3 Dg(nelr / block_length), Db(block_length);
 	cuda_initialize_variables<<<Dg, Db>>>(nelr, variables);
-	cudaError_t error = cudaGetLastError();
-	if (error != cudaSuccess) 
+	hipError_t error = hipGetLastError();
+	if (error != hipSuccess) 
 	  {
-	    fprintf(stderr,"GPUassert: %s Initializing variables\n", cudaGetErrorString(error));
+	    fprintf(stderr,"GPUassert: %s Initializing variables\n", hipGetErrorString(error));
 	    exit(-1);
 	  }
 }
@@ -207,10 +202,10 @@
 {
 	dim3 Dg(nelr / block_length), Db(block_length);
 	cuda_compute_step_factor<<<Dg, Db>>>(nelr, variables, areas, step_factors);
-	cudaError_t error = cudaGetLastError();		
-	if (error != cudaSuccess) 
+	hipError_t error = hipGetLastError();		
+	if (error != hipSuccess) 
 	  {
-	    fprintf(stderr,"GPUassert: %s compute_step_factor failed\n", cudaGetErrorString(error));
+	    fprintf(stderr,"GPUassert: %s compute_step_factor failed\n", hipGetErrorString(error));
 	    exit(-1);
 	  }
 
@@ -354,10 +349,10 @@
 {
 	dim3 Dg(nelr / block_length), Db(block_length);
 	cuda_compute_flux<<<Dg,Db>>>(nelr, elements_surrounding_elements, normals, variables, fluxes);
-	cudaError_t error = cudaGetLastError();
-	if (error != cudaSuccess) 
+	hipError_t error = hipGetLastError();
+	if (error != hipSuccess) 
 	  {
-	    fprintf(stderr,"GPUassert: %s compute_flux failed\n", cudaGetErrorString(error));
+	    fprintf(stderr,"GPUassert: %s compute_flux failed\n", hipGetErrorString(error));
 	    exit(-1);
 	  }
 
@@ -379,10 +374,10 @@
 {
 	dim3 Dg(nelr / block_length), Db(block_length);
 	cuda_time_step<<<Dg,Db>>>(j, nelr, old_variables, variables, step_factors, fluxes);
-	cudaError_t error = cudaGetLastError();
-	if (error != cudaSuccess) 
+	hipError_t error = hipGetLastError();
+	if (error != hipSuccess) 
 	  {
-	    fprintf(stderr,"GPUassert: %s update failed\n", cudaGetErrorString(error));
+	    fprintf(stderr,"GPUassert: %s update failed\n", hipGetErrorString(error));
 	    exit(-1);
 	  }
 
@@ -400,16 +395,16 @@
 	}
 	const char* data_file_name = argv[1];
 	
-	cudaDeviceProp prop;
+	hipDeviceProp_t prop;
 	int dev;
 	
 	// CUDA_SAFE_CALL(cudaSetDevice(0));
 	// CUDA_SAFE_CALL(cudaGetDevice(&dev));
 	// CUDA_SAFE_CALL(cudaGetDeviceProperties(&prop, dev));
 
-	checkCudaErrors(cudaSetDevice(0));
-	checkCudaErrors(cudaGetDevice(&dev));
-	checkCudaErrors(cudaGetDeviceProperties(&prop, dev));
+	checkCudaErrors(hipSetDevice(0));
+	checkCudaErrors(hipGetDevice(&dev));
+	checkCudaErrors(hipGetDeviceProperties(&prop, dev));
 	
 
 	printf("Name:                     %s\n", prop.name);
@@ -447,12 +442,12 @@
 		compute_flux_contribution(h_ff_variable[VAR_DENSITY], h_ff_momentum, h_ff_variable[VAR_DENSITY_ENERGY], ff_pressure, ff_velocity, h_ff_flux_contribution_momentum_x, h_ff_flux_contribution_momentum_y, h_ff_flux_contribution_momentum_z, h_ff_flux_contribution_density_energy);
 
 		// copy far field conditions to the gpu
-		checkCudaErrors( cudaMemcpyToSymbol(ff_variable,          h_ff_variable,          NVAR*sizeof(double)) );
-		checkCudaErrors( cudaMemcpyToSymbol(ff_flux_contribution_momentum_x, &h_ff_flux_contribution_momentum_x, sizeof(double3)) );
-		checkCudaErrors( cudaMemcpyToSymbol(ff_flux_contribution_momentum_y, &h_ff_flux_contribution_momentum_y, sizeof(double3)) );
-		checkCudaErrors( cudaMemcpyToSymbol(ff_flux_contribution_momentum_z, &h_ff_flux_contribution_momentum_z, sizeof(double3)) );
+		checkCudaErrors( hipMemcpyToSymbol(HIP_SYMBOL(ff_variable),          h_ff_variable,          NVAR*sizeof(double)) );
+		checkCudaErrors( hipMemcpyToSymbol(HIP_SYMBOL(ff_flux_contribution_momentum_x), &h_ff_flux_contribution_momentum_x, sizeof(double3)) );
+		checkCudaErrors( hipMemcpyToSymbol(HIP_SYMBOL(ff_flux_contribution_momentum_y), &h_ff_flux_contribution_momentum_y, sizeof(double3)) );
+		checkCudaErrors( hipMemcpyToSymbol(HIP_SYMBOL(ff_flux_contribution_momentum_z), &h_ff_flux_contribution_momentum_z, sizeof(double3)) );
 		
-		checkCudaErrors( cudaMemcpyToSymbol(ff_flux_contribution_density_energy, &h_ff_flux_contribution_density_energy, sizeof(double3)) );		
+		checkCudaErrors( hipMemcpyToSymbol(HIP_SYMBOL(ff_flux_contribution_density_energy), &h_ff_flux_contribution_density_energy, sizeof(double3)) );		
 	}
 	int nel;
 	int nelr;
@@ -528,14 +523,14 @@
 	// make sure all memory is doublely allocated before we start timing
 	initialize_variables(nelr, old_variables);
 	initialize_variables(nelr, fluxes);
-	cudaMemset( (void*) step_factors, 0, sizeof(double)*nelr );
+	hipMemset( (void*) step_factors, 0, sizeof(double)*nelr );
 	// make sure CUDA isn't still doing something before we start timing
-	cudaThreadSynchronize();
+	hipDeviceSynchronize();
 
 	// these need to be computed the first time in order to compute time step
 	std::cout << "Starting..." << std::endl;
 
-	cudaError_t error;
+	hipError_t error;
 	StopWatchInterface *timer = NULL;
 
 	sdkCreateTimer( &timer);
@@ -548,10 +543,10 @@
 		
 		// for the first iteration we compute the time step
 		compute_step_factor(nelr, variables, areas, step_factors);
-		error = cudaGetLastError();
-		if (error != cudaSuccess) 
+		error = hipGetLastError();
+		if (error != hipSuccess) 
 		  {
-		    fprintf(stderr,"GPUassert: %s compute_step_factor failed\n", cudaGetErrorString(error));
+		    fprintf(stderr,"GPUassert: %s compute_step_factor failed\n", hipGetErrorString(error));
 		    exit(-1);
 		  }
 
@@ -559,25 +554,25 @@
 		for(int j = 0; j < RK; j++)
 		  {
 		    compute_flux(nelr, elements_surrounding_elements, normals, variables, fluxes);
-		    error = cudaGetLastError();
-		    if (error != cudaSuccess) 
+		    error = hipGetLastError();
+		    if (error != hipSuccess) 
 		      {
-			fprintf(stderr,"GPUassert: %s compute_flux failed\n", cudaGetErrorString(error));
+			fprintf(stderr,"GPUassert: %s compute_flux failed\n", hipGetErrorString(error));
 			exit(-1);
 		      }
 
 		    time_step(j, nelr, old_variables, variables, step_factors, fluxes);
-		    error = cudaGetLastError();
-		    if (error != cudaSuccess) 
+		    error = hipGetLastError();
+		    if (error != hipSuccess) 
 		      {
-			fprintf(stderr,"GPUassert: %s time_step failed\n", cudaGetErrorString(error));
+			fprintf(stderr,"GPUassert: %s time_step failed\n", hipGetErrorString(error));
 			exit(-1);
 		      }
 
 		  }
 	}
 
-	cudaThreadSynchronize();
+	hipDeviceSynchronize();
 	sdkStopTimer(&timer);  
 
 	std::cout  << (sdkGetAverageTimerValue(&timer)/1000.0)  / iterations << " seconds per iteration" << std::endl;
diff -ruN rodinia_3.1/cuda/cfd/exception.h rodinia_backup/cuda/cfd/exception.h
--- rodinia_3.1/cuda/cfd/exception.h	1969-12-31 16:00:00.000000000 -0800
+++ rodinia_backup/cuda/cfd/exception.h	2024-09-26 12:55:55.251231531 -0700
@@ -0,0 +1,151 @@
+/*
+* Copyright 1993-2013 NVIDIA Corporation.  All rights reserved.
+*
+* Please refer to the NVIDIA end user license agreement (EULA) associated
+* with this source code for terms and conditions that govern your use of
+* this software. Any use, reproduction, disclosure, or distribution of
+* this software and related documentation outside the terms of the EULA
+* is strictly prohibited.
+*
+*/
+
+/* CUda UTility Library */
+#ifndef _EXCEPTION_H_
+#define _EXCEPTION_H_
+
+// includes, system
+#include <exception>
+#include <stdexcept>
+#include <iostream>
+#include <stdlib.h>
+
+//! Exception wrapper.
+//! @param Std_Exception Exception out of namespace std for easy typing.
+template<class Std_Exception>
+class Exception : public Std_Exception
+{
+    public:
+
+        //! @brief Static construction interface
+        //! @return Alwayss throws ( Located_Exception<Exception>)
+        //! @param file file in which the Exception occurs
+        //! @param line line in which the Exception occurs
+        //! @param detailed details on the code fragment causing the Exception
+        static void throw_it(const char *file,
+                             const int line,
+                             const char *detailed = "-");
+
+        //! Static construction interface
+        //! @return Alwayss throws ( Located_Exception<Exception>)
+        //! @param file file in which the Exception occurs
+        //! @param line line in which the Exception occurs
+        //! @param detailed details on the code fragment causing the Exception
+        static void throw_it(const char *file,
+                             const int line,
+                             const std::string &detailed);
+
+        //! Destructor
+        virtual ~Exception() throw();
+
+    private:
+
+        //! Constructor, default (private)
+        Exception();
+
+        //! Constructor, standard
+        //! @param str string returned by what()
+        Exception(const std::string &str);
+
+};
+
+////////////////////////////////////////////////////////////////////////////////
+//! Exception handler function for arbitrary exceptions
+//! @param ex exception to handle
+////////////////////////////////////////////////////////////////////////////////
+template<class Exception_Typ>
+inline void
+handleException(const Exception_Typ &ex)
+{
+    std::cerr << ex.what() << std::endl;
+
+    exit(EXIT_FAILURE);
+}
+
+//! Convenience macros
+
+//! Exception caused by dynamic program behavior, e.g. file does not exist
+#define RUNTIME_EXCEPTION( msg) \
+    Exception<std::runtime_error>::throw_it( __FILE__, __LINE__, msg)
+
+//! Logic exception in program, e.g. an assert failed
+#define LOGIC_EXCEPTION( msg) \
+    Exception<std::logic_error>::throw_it( __FILE__, __LINE__, msg)
+
+//! Out of range exception
+#define RANGE_EXCEPTION( msg) \
+    Exception<std::range_error>::throw_it( __FILE__, __LINE__, msg)
+
+////////////////////////////////////////////////////////////////////////////////
+//! Implementation
+
+// includes, system
+#include <sstream>
+
+////////////////////////////////////////////////////////////////////////////////
+//! Static construction interface.
+//! @param  Exception causing code fragment (file and line) and detailed infos.
+////////////////////////////////////////////////////////////////////////////////
+/*static*/ template<class Std_Exception>
+void
+Exception<Std_Exception>::
+throw_it(const char *file, const int line, const char *detailed)
+{
+    std::stringstream s;
+
+    // Quiet heavy-weight but exceptions are not for
+    // performance / release versions
+    s << "Exception in file '" << file << "' in line " << line << "\n"
+      << "Detailed description: " << detailed << "\n";
+
+    throw Exception(s.str());
+}
+
+////////////////////////////////////////////////////////////////////////////////
+//! Static construction interface.
+//! @param  Exception causing code fragment (file and line) and detailed infos.
+////////////////////////////////////////////////////////////////////////////////
+/*static*/ template<class Std_Exception>
+void
+Exception<Std_Exception>::
+throw_it(const char *file, const int line, const std::string &msg)
+{
+    throw_it(file, line, msg.c_str());
+}
+
+////////////////////////////////////////////////////////////////////////////////
+//! Constructor, default (private).
+////////////////////////////////////////////////////////////////////////////////
+template<class Std_Exception>
+Exception<Std_Exception>::Exception() :
+    Std_Exception("Unknown Exception.\n")
+{ }
+
+////////////////////////////////////////////////////////////////////////////////
+//! Constructor, standard (private).
+//! String returned by what().
+////////////////////////////////////////////////////////////////////////////////
+template<class Std_Exception>
+Exception<Std_Exception>::Exception(const std::string &s) :
+    Std_Exception(s)
+{ }
+
+////////////////////////////////////////////////////////////////////////////////
+//! Destructor
+////////////////////////////////////////////////////////////////////////////////
+template<class Std_Exception>
+Exception<Std_Exception>::~Exception() throw() { }
+
+// functions, exported
+
+#endif // #ifndef _EXCEPTION_H_
+
diff -ruN rodinia_3.1/cuda/cfd/helper_cuda.h rodinia_backup/cuda/cfd/helper_cuda.h
--- rodinia_3.1/cuda/cfd/helper_cuda.h	1969-12-31 16:00:00.000000000 -0800
+++ rodinia_backup/cuda/cfd/helper_cuda.h	2024-09-26 12:55:55.251231531 -0700
@@ -0,0 +1,1041 @@
+/**
+ * Copyright 1993-2014 NVIDIA Corporation.  All rights reserved.
+ *
+ * Please refer to the NVIDIA end user license agreement (EULA) associated
+ * with this source code for terms and conditions that govern your use of
+ * this software. Any use, reproduction, disclosure, or distribution of
+ * this software and related documentation outside the terms of the EULA
+ * is strictly prohibited.
+ *
+ */
+
+////////////////////////////////////////////////////////////////////////////////
+// These are CUDA Helper functions for initialization and error checking
+
+#ifndef HELPER_CUDA_H
+#define HELPER_CUDA_H
+
+#pragma once
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+
+#include "helper_string.h"
+
+/*
+inline void __ExitInTime(int seconds)
+{
+    fprintf(stdout, "> exiting in %d seconds: ", seconds);
+    fflush(stdout);
+    time_t t;
+    int count;
+
+    for (t=time(0)+seconds, count=seconds; time(0) < t; count--) {
+        fprintf(stdout, "%d...", count);
+#if defined(WIN32)
+        Sleep(1000);
+#else
+        sleep(1);
+#endif
+    }
+
+    fprintf(stdout,"done!\n\n");
+    fflush(stdout);
+}
+
+#define EXIT_TIME_DELAY 2
+
+inline void EXIT_DELAY(int return_code)
+{
+    __ExitInTime(EXIT_TIME_DELAY);
+    exit(return_code);
+}
+*/
+
+#ifndef EXIT_WAIVED
+#define EXIT_WAIVED 2
+#endif
+
+// Note, it is required that your SDK sample to include the proper header files, please
+// refer the CUDA examples for examples of the needed CUDA headers, which may change depending
+// on which CUDA functions are used.
+
+// CUDA Runtime error messages
+#ifdef __DRIVER_TYPES_H__
+static const char *_cudaGetErrorEnum(cudaError_t error)
+{
+    switch (error)
+    {
+        case cudaSuccess:
+            return "cudaSuccess";
+
+        case cudaErrorMissingConfiguration:
+            return "cudaErrorMissingConfiguration";
+
+        case cudaErrorMemoryAllocation:
+            return "cudaErrorMemoryAllocation";
+
+        case cudaErrorInitializationError:
+            return "cudaErrorInitializationError";
+
+        case cudaErrorLaunchFailure:
+            return "cudaErrorLaunchFailure";
+
+        case cudaErrorPriorLaunchFailure:
+            return "cudaErrorPriorLaunchFailure";
+
+        case cudaErrorLaunchTimeout:
+            return "cudaErrorLaunchTimeout";
+
+        case cudaErrorLaunchOutOfResources:
+            return "cudaErrorLaunchOutOfResources";
+
+        case cudaErrorInvalidDeviceFunction:
+            return "cudaErrorInvalidDeviceFunction";
+
+        case cudaErrorInvalidConfiguration:
+            return "cudaErrorInvalidConfiguration";
+
+        case cudaErrorInvalidDevice:
+            return "cudaErrorInvalidDevice";
+
+        case cudaErrorInvalidValue:
+            return "cudaErrorInvalidValue";
+
+        case cudaErrorInvalidPitchValue:
+            return "cudaErrorInvalidPitchValue";
+
+        case cudaErrorInvalidSymbol:
+            return "cudaErrorInvalidSymbol";
+
+        case cudaErrorMapBufferObjectFailed:
+            return "cudaErrorMapBufferObjectFailed";
+
+        case cudaErrorUnmapBufferObjectFailed:
+            return "cudaErrorUnmapBufferObjectFailed";
+
+        case cudaErrorInvalidHostPointer:
+            return "cudaErrorInvalidHostPointer";
+
+        case cudaErrorInvalidDevicePointer:
+            return "cudaErrorInvalidDevicePointer";
+
+        case cudaErrorInvalidTexture:
+            return "cudaErrorInvalidTexture";
+
+        case cudaErrorInvalidTextureBinding:
+            return "cudaErrorInvalidTextureBinding";
+
+        case cudaErrorInvalidChannelDescriptor:
+            return "cudaErrorInvalidChannelDescriptor";
+
+        case cudaErrorInvalidMemcpyDirection:
+            return "cudaErrorInvalidMemcpyDirection";
+
+        case cudaErrorAddressOfConstant:
+            return "cudaErrorAddressOfConstant";
+
+        case cudaErrorTextureFetchFailed:
+            return "cudaErrorTextureFetchFailed";
+
+        case cudaErrorTextureNotBound:
+            return "cudaErrorTextureNotBound";
+
+        case cudaErrorSynchronizationError:
+            return "cudaErrorSynchronizationError";
+
+        case cudaErrorInvalidFilterSetting:
+            return "cudaErrorInvalidFilterSetting";
+
+        case cudaErrorInvalidNormSetting:
+            return "cudaErrorInvalidNormSetting";
+
+        case cudaErrorMixedDeviceExecution:
+            return "cudaErrorMixedDeviceExecution";
+
+        case cudaErrorCudartUnloading:
+            return "cudaErrorCudartUnloading";
+
+        case cudaErrorUnknown:
+            return "cudaErrorUnknown";
+
+        case cudaErrorNotYetImplemented:
+            return "cudaErrorNotYetImplemented";
+
+        case cudaErrorMemoryValueTooLarge:
+            return "cudaErrorMemoryValueTooLarge";
+
+        case cudaErrorInvalidResourceHandle:
+            return "cudaErrorInvalidResourceHandle";
+
+        case cudaErrorNotReady:
+            return "cudaErrorNotReady";
+
+        case cudaErrorInsufficientDriver:
+            return "cudaErrorInsufficientDriver";
+
+        case cudaErrorSetOnActiveProcess:
+            return "cudaErrorSetOnActiveProcess";
+
+        case cudaErrorInvalidSurface:
+            return "cudaErrorInvalidSurface";
+
+        case cudaErrorNoDevice:
+            return "cudaErrorNoDevice";
+
+        case cudaErrorECCUncorrectable:
+            return "cudaErrorECCUncorrectable";
+
+        case cudaErrorSharedObjectSymbolNotFound:
+            return "cudaErrorSharedObjectSymbolNotFound";
+
+        case cudaErrorSharedObjectInitFailed:
+            return "cudaErrorSharedObjectInitFailed";
+
+        case cudaErrorUnsupportedLimit:
+            return "cudaErrorUnsupportedLimit";
+
+        case cudaErrorDuplicateVariableName:
+            return "cudaErrorDuplicateVariableName";
+
+        case cudaErrorDuplicateTextureName:
+            return "cudaErrorDuplicateTextureName";
+
+        case cudaErrorDuplicateSurfaceName:
+            return "cudaErrorDuplicateSurfaceName";
+
+        case cudaErrorDevicesUnavailable:
+            return "cudaErrorDevicesUnavailable";
+
+        case cudaErrorInvalidKernelImage:
+            return "cudaErrorInvalidKernelImage";
+
+        case cudaErrorNoKernelImageForDevice:
+            return "cudaErrorNoKernelImageForDevice";
+
+        case cudaErrorIncompatibleDriverContext:
+            return "cudaErrorIncompatibleDriverContext";
+
+        case cudaErrorPeerAccessAlreadyEnabled:
+            return "cudaErrorPeerAccessAlreadyEnabled";
+
+        case cudaErrorPeerAccessNotEnabled:
+            return "cudaErrorPeerAccessNotEnabled";
+
+        case cudaErrorDeviceAlreadyInUse:
+            return "cudaErrorDeviceAlreadyInUse";
+
+        case cudaErrorProfilerDisabled:
+            return "cudaErrorProfilerDisabled";
+
+        case cudaErrorProfilerNotInitialized:
+            return "cudaErrorProfilerNotInitialized";
+
+        case cudaErrorProfilerAlreadyStarted:
+            return "cudaErrorProfilerAlreadyStarted";
+
+        case cudaErrorProfilerAlreadyStopped:
+            return "cudaErrorProfilerAlreadyStopped";
+
+#if __CUDA_API_VERSION >= 0x4000
+
+        case cudaErrorAssert:
+            return "cudaErrorAssert";
+
+        case cudaErrorTooManyPeers:
+            return "cudaErrorTooManyPeers";
+
+        case cudaErrorHostMemoryAlreadyRegistered:
+            return "cudaErrorHostMemoryAlreadyRegistered";
+
+        case cudaErrorHostMemoryNotRegistered:
+            return "cudaErrorHostMemoryNotRegistered";
+#endif
+
+        case cudaErrorStartupFailure:
+            return "cudaErrorStartupFailure";
+
+        case cudaErrorApiFailureBase:
+            return "cudaErrorApiFailureBase";
+
+        default:
+            return "<unknown>";
+    }
+
+    return "<unknown>";
+}
+#endif
+
+#ifdef __cuda_cuda_h__
+// CUDA Driver API errors
+static const char *_cudaGetErrorEnum(CUresult error)
+{
+    switch (error)
+    {
+        case CUDA_SUCCESS:
+            return "CUDA_SUCCESS";
+
+        case CUDA_ERROR_INVALID_VALUE:
+            return "CUDA_ERROR_INVALID_VALUE";
+
+        case CUDA_ERROR_OUT_OF_MEMORY:
+            return "CUDA_ERROR_OUT_OF_MEMORY";
+
+        case CUDA_ERROR_NOT_INITIALIZED:
+            return "CUDA_ERROR_NOT_INITIALIZED";
+
+        case CUDA_ERROR_DEINITIALIZED:
+            return "CUDA_ERROR_DEINITIALIZED";
+
+        case CUDA_ERROR_PROFILER_DISABLED:
+            return "CUDA_ERROR_PROFILER_DISABLED";
+
+        case CUDA_ERROR_PROFILER_NOT_INITIALIZED:
+            return "CUDA_ERROR_PROFILER_NOT_INITIALIZED";
+
+        case CUDA_ERROR_PROFILER_ALREADY_STARTED:
+            return "CUDA_ERROR_PROFILER_ALREADY_STARTED";
+
+        case CUDA_ERROR_PROFILER_ALREADY_STOPPED:
+            return "CUDA_ERROR_PROFILER_ALREADY_STOPPED";
+
+        case CUDA_ERROR_NO_DEVICE:
+            return "CUDA_ERROR_NO_DEVICE";
+
+        case CUDA_ERROR_INVALID_DEVICE:
+            return "CUDA_ERROR_INVALID_DEVICE";
+
+        case CUDA_ERROR_INVALID_IMAGE:
+            return "CUDA_ERROR_INVALID_IMAGE";
+
+        case CUDA_ERROR_INVALID_CONTEXT:
+            return "CUDA_ERROR_INVALID_CONTEXT";
+
+        case CUDA_ERROR_CONTEXT_ALREADY_CURRENT:
+            return "CUDA_ERROR_CONTEXT_ALREADY_CURRENT";
+
+        case CUDA_ERROR_MAP_FAILED:
+            return "CUDA_ERROR_MAP_FAILED";
+
+        case CUDA_ERROR_UNMAP_FAILED:
+            return "CUDA_ERROR_UNMAP_FAILED";
+
+        case CUDA_ERROR_ARRAY_IS_MAPPED:
+            return "CUDA_ERROR_ARRAY_IS_MAPPED";
+
+        case CUDA_ERROR_ALREADY_MAPPED:
+            return "CUDA_ERROR_ALREADY_MAPPED";
+
+        case CUDA_ERROR_NO_BINARY_FOR_GPU:
+            return "CUDA_ERROR_NO_BINARY_FOR_GPU";
+
+        case CUDA_ERROR_ALREADY_ACQUIRED:
+            return "CUDA_ERROR_ALREADY_ACQUIRED";
+
+        case CUDA_ERROR_NOT_MAPPED:
+            return "CUDA_ERROR_NOT_MAPPED";
+
+        case CUDA_ERROR_NOT_MAPPED_AS_ARRAY:
+            return "CUDA_ERROR_NOT_MAPPED_AS_ARRAY";
+
+        case CUDA_ERROR_NOT_MAPPED_AS_POINTER:
+            return "CUDA_ERROR_NOT_MAPPED_AS_POINTER";
+
+        case CUDA_ERROR_ECC_UNCORRECTABLE:
+            return "CUDA_ERROR_ECC_UNCORRECTABLE";
+
+        case CUDA_ERROR_UNSUPPORTED_LIMIT:
+            return "CUDA_ERROR_UNSUPPORTED_LIMIT";
+
+        case CUDA_ERROR_CONTEXT_ALREADY_IN_USE:
+            return "CUDA_ERROR_CONTEXT_ALREADY_IN_USE";
+
+        case CUDA_ERROR_INVALID_SOURCE:
+            return "CUDA_ERROR_INVALID_SOURCE";
+
+        case CUDA_ERROR_FILE_NOT_FOUND:
+            return "CUDA_ERROR_FILE_NOT_FOUND";
+
+        case CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND:
+            return "CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND";
+
+        case CUDA_ERROR_SHARED_OBJECT_INIT_FAILED:
+            return "CUDA_ERROR_SHARED_OBJECT_INIT_FAILED";
+
+        case CUDA_ERROR_OPERATING_SYSTEM:
+            return "CUDA_ERROR_OPERATING_SYSTEM";
+
+        case CUDA_ERROR_INVALID_HANDLE:
+            return "CUDA_ERROR_INVALID_HANDLE";
+
+        case CUDA_ERROR_NOT_FOUND:
+            return "CUDA_ERROR_NOT_FOUND";
+
+        case CUDA_ERROR_NOT_READY:
+            return "CUDA_ERROR_NOT_READY";
+
+        case CUDA_ERROR_LAUNCH_FAILED:
+            return "CUDA_ERROR_LAUNCH_FAILED";
+
+        case CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES:
+            return "CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES";
+
+        case CUDA_ERROR_LAUNCH_TIMEOUT:
+            return "CUDA_ERROR_LAUNCH_TIMEOUT";
+
+        case CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING:
+            return "CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING";
+
+        case CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED:
+            return "CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED";
+
+        case CUDA_ERROR_PEER_ACCESS_NOT_ENABLED:
+            return "CUDA_ERROR_PEER_ACCESS_NOT_ENABLED";
+
+        case CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE:
+            return "CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE";
+
+        case CUDA_ERROR_CONTEXT_IS_DESTROYED:
+            return "CUDA_ERROR_CONTEXT_IS_DESTROYED";
+
+        case CUDA_ERROR_ASSERT:
+            return "CUDA_ERROR_ASSERT";
+
+        case CUDA_ERROR_TOO_MANY_PEERS:
+            return "CUDA_ERROR_TOO_MANY_PEERS";
+
+        case CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED:
+            return "CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED";
+
+        case CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED:
+            return "CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED";
+
+        case CUDA_ERROR_UNKNOWN:
+            return "CUDA_ERROR_UNKNOWN";
+
+        default:
+            return "<unknown>";
+    }
+
+    return "<unknown>";
+}
+#endif
+
+#ifdef CUBLAS_API_H_
+// cuBLAS API errors
+static const char *_cudaGetErrorEnum(cublasStatus_t error)
+{
+    switch (error)
+    {
+        case CUBLAS_STATUS_SUCCESS:
+            return "CUBLAS_STATUS_SUCCESS";
+
+        case CUBLAS_STATUS_NOT_INITIALIZED:
+            return "CUBLAS_STATUS_NOT_INITIALIZED";
+
+        case CUBLAS_STATUS_ALLOC_FAILED:
+            return "CUBLAS_STATUS_ALLOC_FAILED";
+
+        case CUBLAS_STATUS_INVALID_VALUE:
+            return "CUBLAS_STATUS_INVALID_VALUE";
+
+        case CUBLAS_STATUS_ARCH_MISMATCH:
+            return "CUBLAS_STATUS_ARCH_MISMATCH";
+
+        case CUBLAS_STATUS_MAPPING_ERROR:
+            return "CUBLAS_STATUS_MAPPING_ERROR";
+
+        case CUBLAS_STATUS_EXECUTION_FAILED:
+            return "CUBLAS_STATUS_EXECUTION_FAILED";
+
+        case CUBLAS_STATUS_INTERNAL_ERROR:
+            return "CUBLAS_STATUS_INTERNAL_ERROR";
+    }
+
+    return "<unknown>";
+}
+#endif
+
+#ifdef _CUFFT_H_
+// cuFFT API errors
+static const char *_cudaGetErrorEnum(cufftResult error)
+{
+    switch (error)
+    {
+        case CUFFT_SUCCESS:
+            return "CUFFT_SUCCESS";
+
+        case CUFFT_INVALID_PLAN:
+            return "CUFFT_INVALID_PLAN";
+
+        case CUFFT_ALLOC_FAILED:
+            return "CUFFT_ALLOC_FAILED";
+
+        case CUFFT_INVALID_TYPE:
+            return "CUFFT_INVALID_TYPE";
+
+        case CUFFT_INVALID_VALUE:
+            return "CUFFT_INVALID_VALUE";
+
+        case CUFFT_INTERNAL_ERROR:
+            return "CUFFT_INTERNAL_ERROR";
+
+        case CUFFT_EXEC_FAILED:
+            return "CUFFT_EXEC_FAILED";
+
+        case CUFFT_SETUP_FAILED:
+            return "CUFFT_SETUP_FAILED";
+
+        case CUFFT_INVALID_SIZE:
+            return "CUFFT_INVALID_SIZE";
+
+        case CUFFT_UNALIGNED_DATA:
+            return "CUFFT_UNALIGNED_DATA";
+    }
+
+    return "<unknown>";
+}
+#endif
+
+
+#ifdef CUSPARSEAPI
+// cuSPARSE API errors
+static const char *_cudaGetErrorEnum(cusparseStatus_t error)
+{
+    switch (error)
+    {
+        case CUSPARSE_STATUS_SUCCESS:
+            return "CUSPARSE_STATUS_SUCCESS";
+
+        case CUSPARSE_STATUS_NOT_INITIALIZED:
+            return "CUSPARSE_STATUS_NOT_INITIALIZED";
+
+        case CUSPARSE_STATUS_ALLOC_FAILED:
+            return "CUSPARSE_STATUS_ALLOC_FAILED";
+
+        case CUSPARSE_STATUS_INVALID_VALUE:
+            return "CUSPARSE_STATUS_INVALID_VALUE";
+
+        case CUSPARSE_STATUS_ARCH_MISMATCH:
+            return "CUSPARSE_STATUS_ARCH_MISMATCH";
+
+        case CUSPARSE_STATUS_MAPPING_ERROR:
+            return "CUSPARSE_STATUS_MAPPING_ERROR";
+
+        case CUSPARSE_STATUS_EXECUTION_FAILED:
+            return "CUSPARSE_STATUS_EXECUTION_FAILED";
+
+        case CUSPARSE_STATUS_INTERNAL_ERROR:
+            return "CUSPARSE_STATUS_INTERNAL_ERROR";
+
+        case CUSPARSE_STATUS_MATRIX_TYPE_NOT_SUPPORTED:
+            return "CUSPARSE_STATUS_MATRIX_TYPE_NOT_SUPPORTED";
+    }
+
+    return "<unknown>";
+}
+#endif
+
+#ifdef CURAND_H_
+// cuRAND API errors
+static const char *_cudaGetErrorEnum(curandStatus_t error)
+{
+    switch (error)
+    {
+        case CURAND_STATUS_SUCCESS:
+            return "CURAND_STATUS_SUCCESS";
+
+        case CURAND_STATUS_VERSION_MISMATCH:
+            return "CURAND_STATUS_VERSION_MISMATCH";
+
+        case CURAND_STATUS_NOT_INITIALIZED:
+            return "CURAND_STATUS_NOT_INITIALIZED";
+
+        case CURAND_STATUS_ALLOCATION_FAILED:
+            return "CURAND_STATUS_ALLOCATION_FAILED";
+
+        case CURAND_STATUS_TYPE_ERROR:
+            return "CURAND_STATUS_TYPE_ERROR";
+
+        case CURAND_STATUS_OUT_OF_RANGE:
+            return "CURAND_STATUS_OUT_OF_RANGE";
+
+        case CURAND_STATUS_LENGTH_NOT_MULTIPLE:
+            return "CURAND_STATUS_LENGTH_NOT_MULTIPLE";
+
+        case CURAND_STATUS_DOUBLE_PRECISION_REQUIRED:
+            return "CURAND_STATUS_DOUBLE_PRECISION_REQUIRED";
+
+        case CURAND_STATUS_LAUNCH_FAILURE:
+            return "CURAND_STATUS_LAUNCH_FAILURE";
+
+        case CURAND_STATUS_PREEXISTING_FAILURE:
+            return "CURAND_STATUS_PREEXISTING_FAILURE";
+
+        case CURAND_STATUS_INITIALIZATION_FAILED:
+            return "CURAND_STATUS_INITIALIZATION_FAILED";
+
+        case CURAND_STATUS_ARCH_MISMATCH:
+            return "CURAND_STATUS_ARCH_MISMATCH";
+
+        case CURAND_STATUS_INTERNAL_ERROR:
+            return "CURAND_STATUS_INTERNAL_ERROR";
+    }
+
+    return "<unknown>";
+}
+#endif
+
+#ifdef NV_NPPIDEFS_H
+// NPP API errors
+static const char *_cudaGetErrorEnum(NppStatus error)
+{
+    switch (error)
+    {
+        case NPP_NOT_SUPPORTED_MODE_ERROR:
+            return "NPP_NOT_SUPPORTED_MODE_ERROR";
+
+        case NPP_ROUND_MODE_NOT_SUPPORTED_ERROR:
+            return "NPP_ROUND_MODE_NOT_SUPPORTED_ERROR";
+
+        case NPP_RESIZE_NO_OPERATION_ERROR:
+            return "NPP_RESIZE_NO_OPERATION_ERROR";
+
+        case NPP_NOT_SUFFICIENT_COMPUTE_CAPABILITY:
+            return "NPP_NOT_SUFFICIENT_COMPUTE_CAPABILITY";
+
+#if ((NPP_VERSION_MAJOR << 12) + (NPP_VERSION_MINOR << 4)) <= 0x5000
+
+        case NPP_BAD_ARG_ERROR:
+            return "NPP_BAD_ARGUMENT_ERROR";
+
+        case NPP_COEFF_ERROR:
+            return "NPP_COEFFICIENT_ERROR";
+
+        case NPP_RECT_ERROR:
+            return "NPP_RECTANGLE_ERROR";
+
+        case NPP_QUAD_ERROR:
+            return "NPP_QUADRANGLE_ERROR";
+
+        case NPP_MEM_ALLOC_ERR:
+            return "NPP_MEMORY_ALLOCATION_ERROR";
+
+        case NPP_HISTO_NUMBER_OF_LEVELS_ERROR:
+            return "NPP_HISTOGRAM_NUMBER_OF_LEVELS_ERROR";
+
+        case NPP_INVALID_INPUT:
+            return "NPP_INVALID_INPUT";
+
+        case NPP_POINTER_ERROR:
+            return "NPP_POINTER_ERROR";
+
+        case NPP_WARNING:
+            return "NPP_WARNING";
+
+        case NPP_ODD_ROI_WARNING:
+            return "NPP_ODD_ROI_WARNING";
+#else
+
+            // These are for CUDA 5.5 or higher
+        case NPP_BAD_ARGUMENT_ERROR:
+            return "NPP_BAD_ARGUMENT_ERROR";
+
+        case NPP_COEFFICIENT_ERROR:
+            return "NPP_COEFFICIENT_ERROR";
+
+        case NPP_RECTANGLE_ERROR:
+            return "NPP_RECTANGLE_ERROR";
+
+        case NPP_QUADRANGLE_ERROR:
+            return "NPP_QUADRANGLE_ERROR";
+
+        case NPP_MEMORY_ALLOCATION_ERR:
+            return "NPP_MEMORY_ALLOCATION_ERROR";
+
+        case NPP_HISTOGRAM_NUMBER_OF_LEVELS_ERROR:
+            return "NPP_HISTOGRAM_NUMBER_OF_LEVELS_ERROR";
+
+        case NPP_INVALID_HOST_POINTER_ERROR:
+            return "NPP_INVALID_HOST_POINTER_ERROR";
+
+        case NPP_INVALID_DEVICE_POINTER_ERROR:
+            return "NPP_INVALID_DEVICE_POINTER_ERROR";
+#endif
+
+        case NPP_LUT_NUMBER_OF_LEVELS_ERROR:
+            return "NPP_LUT_NUMBER_OF_LEVELS_ERROR";
+
+        case NPP_TEXTURE_BIND_ERROR:
+            return "NPP_TEXTURE_BIND_ERROR";
+
+        case NPP_WRONG_INTERSECTION_ROI_ERROR:
+            return "NPP_WRONG_INTERSECTION_ROI_ERROR";
+
+        case NPP_NOT_EVEN_STEP_ERROR:
+            return "NPP_NOT_EVEN_STEP_ERROR";
+
+        case NPP_INTERPOLATION_ERROR:
+            return "NPP_INTERPOLATION_ERROR";
+
+        case NPP_RESIZE_FACTOR_ERROR:
+            return "NPP_RESIZE_FACTOR_ERROR";
+
+        case NPP_HAAR_CLASSIFIER_PIXEL_MATCH_ERROR:
+            return "NPP_HAAR_CLASSIFIER_PIXEL_MATCH_ERROR";
+
+
+#if ((NPP_VERSION_MAJOR << 12) + (NPP_VERSION_MINOR << 4)) <= 0x5000
+
+        case NPP_MEMFREE_ERR:
+            return "NPP_MEMFREE_ERR";
+
+        case NPP_MEMSET_ERR:
+            return "NPP_MEMSET_ERR";
+
+        case NPP_MEMCPY_ERR:
+            return "NPP_MEMCPY_ERROR";
+
+        case NPP_MIRROR_FLIP_ERR:
+            return "NPP_MIRROR_FLIP_ERR";
+#else
+
+        case NPP_MEMFREE_ERROR:
+            return "NPP_MEMFREE_ERROR";
+
+        case NPP_MEMSET_ERROR:
+            return "NPP_MEMSET_ERROR";
+
+        case NPP_MEMCPY_ERROR:
+            return "NPP_MEMCPY_ERROR";
+
+        case NPP_MIRROR_FLIP_ERROR:
+            return "NPP_MIRROR_FLIP_ERROR";
+#endif
+
+        case NPP_ALIGNMENT_ERROR:
+            return "NPP_ALIGNMENT_ERROR";
+
+        case NPP_STEP_ERROR:
+            return "NPP_STEP_ERROR";
+
+        case NPP_SIZE_ERROR:
+            return "NPP_SIZE_ERROR";
+
+        case NPP_NULL_POINTER_ERROR:
+            return "NPP_NULL_POINTER_ERROR";
+
+        case NPP_CUDA_KERNEL_EXECUTION_ERROR:
+            return "NPP_CUDA_KERNEL_EXECUTION_ERROR";
+
+        case NPP_NOT_IMPLEMENTED_ERROR:
+            return "NPP_NOT_IMPLEMENTED_ERROR";
+
+        case NPP_ERROR:
+            return "NPP_ERROR";
+
+        case NPP_SUCCESS:
+            return "NPP_SUCCESS";
+
+        case NPP_WRONG_INTERSECTION_QUAD_WARNING:
+            return "NPP_WRONG_INTERSECTION_QUAD_WARNING";
+
+        case NPP_MISALIGNED_DST_ROI_WARNING:
+            return "NPP_MISALIGNED_DST_ROI_WARNING";
+
+        case NPP_AFFINE_QUAD_INCORRECT_WARNING:
+            return "NPP_AFFINE_QUAD_INCORRECT_WARNING";
+
+        case NPP_DOUBLE_SIZE_WARNING:
+            return "NPP_DOUBLE_SIZE_WARNING";
+
+        case NPP_WRONG_INTERSECTION_ROI_WARNING:
+            return "NPP_WRONG_INTERSECTION_ROI_WARNING";
+    }
+
+    return "<unknown>";
+}
+#endif
+
+#ifdef __DRIVER_TYPES_H__
+#ifndef DEVICE_RESET
+#define DEVICE_RESET cudaDeviceReset();
+#endif
+#else
+#ifndef DEVICE_RESET
+#define DEVICE_RESET
+#endif
+#endif
+
+template< typename T >
+void check(T result, char const *const func, const char *const file, int const line)
+{
+    if (result)
+    {
+        DEVICE_RESET
+        // Make sure we call CUDA Device Reset before exiting
+        exit(EXIT_FAILURE);
+    }
+}
+
+#if 1//def __DRIVER_TYPES_H__
+// This will output the proper CUDA error strings in the event that a CUDA host call returns an error
+#define checkCudaErrors(val)           check ( (val), #val, __FILE__, __LINE__ )
+
+// This will output the proper error string when calling cudaGetLastError
+#define getLastCudaError(msg)      __getLastCudaError (msg, __FILE__, __LINE__)
+
+inline void __getLastCudaError(const char *errorMessage, const char *file, const int line)
+{
+
+}
+#endif
+
+#ifndef MAX
+#define MAX(a,b) (a > b ? a : b)
+#endif
+
+// Beginning of GPU Architecture definitions
+inline int _ConvertSMVer2Cores(int major, int minor)
+{
+    // Defines for GPU Architecture types (using the SM version to determine the # of cores per SM
+    typedef struct
+    {
+        int SM; // 0xMm (hexidecimal notation), M = SM Major version, and m = SM minor version
+        int Cores;
+    } sSMtoCores;
+
+    sSMtoCores nGpuArchCoresPerSM[] =
+    {
+        { 0x10,  8 }, // Tesla Generation (SM 1.0) G80 class
+        { 0x11,  8 }, // Tesla Generation (SM 1.1) G8x class
+        { 0x12,  8 }, // Tesla Generation (SM 1.2) G9x class
+        { 0x13,  8 }, // Tesla Generation (SM 1.3) GT200 class
+        { 0x20, 32 }, // Fermi Generation (SM 2.0) GF100 class
+        { 0x21, 48 }, // Fermi Generation (SM 2.1) GF10x class
+        { 0x30, 192}, // Kepler Generation (SM 3.0) GK10x class
+        { 0x32, 192}, // Kepler Generation (SM 3.2) GK10x class
+        { 0x35, 192}, // Kepler Generation (SM 3.5) GK11x class
+        { 0x50, 128}, // Maxwell Generation (SM 5.0) GM10x class
+        {   -1, -1 }
+    };
+
+    int index = 0;
+
+    while (nGpuArchCoresPerSM[index].SM != -1)
+    {
+        if (nGpuArchCoresPerSM[index].SM == ((major << 4) + minor))
+        {
+            return nGpuArchCoresPerSM[index].Cores;
+        }
+
+        index++;
+    }
+
+    // If we don't find the values, we default use the previous one to run properly
+    printf("MapSMtoCores for SM %d.%d is undefined.  Default to use %d Cores/SM\n", major, minor, nGpuArchCoresPerSM[7].Cores);
+    return nGpuArchCoresPerSM[7].Cores;
+}
+// end of GPU Architecture definitions
+
+#ifdef __CUDA_RUNTIME_H__
+// General GPU Device CUDA Initialization
+inline int gpuDeviceInit(int devID)
+{
+    int device_count;
+    checkCudaErrors(cudaGetDeviceCount(&device_count));
+
+    if (device_count == 0)
+    {
+        fprintf(stderr, "gpuDeviceInit() CUDA error: no devices supporting CUDA.\n");
+        exit(EXIT_FAILURE);
+    }
+
+    if (devID < 0)
+    {
+        devID = 0;
+    }
+
+    if (devID > device_count-1)
+    {
+        fprintf(stderr, "\n");
+        fprintf(stderr, ">> %d CUDA capable GPU device(s) detected. <<\n", device_count);
+        fprintf(stderr, ">> gpuDeviceInit (-device=%d) is not a valid GPU device. <<\n", devID);
+        fprintf(stderr, "\n");
+        return -devID;
+    }
+
+    cudaDeviceProp deviceProp;
+    checkCudaErrors(cudaGetDeviceProperties(&deviceProp, devID));
+
+    if (deviceProp.computeMode == cudaComputeModeProhibited)
+    {
+        fprintf(stderr, "Error: device is running in <Compute Mode Prohibited>, no threads can use ::cudaSetDevice().\n");
+        return -1;
+    }
+
+    if (deviceProp.major < 1)
+    {
+        fprintf(stderr, "gpuDeviceInit(): GPU device does not support CUDA.\n");
+        exit(EXIT_FAILURE);
+    }
+
+    checkCudaErrors(cudaSetDevice(devID));
+    printf("gpuDeviceInit() CUDA Device [%d]: \"%s\n", devID, deviceProp.name);
+
+    return devID;
+}
+
+// This function returns the best GPU (with maximum GFLOPS)
+inline int gpuGetMaxGflopsDeviceId()
+{
+    int current_device     = 0, sm_per_multiproc  = 0;
+    int max_perf_device    = 0;
+    int device_count       = 0, best_SM_arch      = 0;
+    
+    unsigned long long max_compute_perf = 0;
+    cudaDeviceProp deviceProp;
+    cudaGetDeviceCount(&device_count);
+    
+    checkCudaErrors(cudaGetDeviceCount(&device_count));
+
+    if (device_count == 0)
+    {
+        fprintf(stderr, "gpuGetMaxGflopsDeviceId() CUDA error: no devices supporting CUDA.\n");
+        exit(EXIT_FAILURE);
+    }
+
+    // Find the best major SM Architecture GPU device
+    while (current_device < device_count)
+    {
+        cudaGetDeviceProperties(&deviceProp, current_device);
+
+        // If this GPU is not running on Compute Mode prohibited, then we can add it to the list
+        if (deviceProp.computeMode != cudaComputeModeProhibited)
+        {
+            if (deviceProp.major > 0 && deviceProp.major < 9999)
+            {
+                best_SM_arch = MAX(best_SM_arch, deviceProp.major);
+            }
+        }
+
+        current_device++;
+    }
+
+    // Find the best CUDA capable GPU device
+    current_device = 0;
+
+    while (current_device < device_count)
+    {
+        cudaGetDeviceProperties(&deviceProp, current_device);
+
+        // If this GPU is not running on Compute Mode prohibited, then we can add it to the list
+        if (deviceProp.computeMode != cudaComputeModeProhibited)
+        {
+            if (deviceProp.major == 9999 && deviceProp.minor == 9999)
+            {
+                sm_per_multiproc = 1;
+            }
+            else
+            {
+                sm_per_multiproc = _ConvertSMVer2Cores(deviceProp.major, deviceProp.minor);
+            }
+
+            unsigned long long compute_perf  = (unsigned long long) deviceProp.multiProcessorCount * sm_per_multiproc * deviceProp.clockRate;
+
+            if (compute_perf  > max_compute_perf)
+            {
+                // If we find GPU with SM major > 2, search only these
+                if (best_SM_arch > 2)
+                {
+                    // If our device==dest_SM_arch, choose this, or else pass
+                    if (deviceProp.major == best_SM_arch)
+                    {
+                        max_compute_perf  = compute_perf;
+                        max_perf_device   = current_device;
+                    }
+                }
+                else
+                {
+                    max_compute_perf  = compute_perf;
+                    max_perf_device   = current_device;
+                }
+            }
+        }
+
+        ++current_device;
+    }
+
+    return max_perf_device;
+}
+
+
+// Initialization code to find the best CUDA Device
+inline int findCudaDevice(int argc, const char **argv)
+{
+    cudaDeviceProp deviceProp;
+    int devID = 0;
+
+    // If the command-line has a device number specified, use it
+    if (checkCmdLineFlag(argc, argv, "device"))
+    {
+        devID = getCmdLineArgumentInt(argc, argv, "device=");
+
+        if (devID < 0)
+        {
+            printf("Invalid command line parameter\n ");
+            exit(EXIT_FAILURE);
+        }
+        else
+        {
+            devID = gpuDeviceInit(devID);
+
+            if (devID < 0)
+            {
+                printf("exiting...\n");
+                exit(EXIT_FAILURE);
+            }
+        }
+    }
+    else
+    {
+        // Otherwise pick the device with highest Gflops/s
+        devID = gpuGetMaxGflopsDeviceId();
+        checkCudaErrors(cudaSetDevice(devID));
+        checkCudaErrors(cudaGetDeviceProperties(&deviceProp, devID));
+        printf("GPU Device %d: \"%s\" with compute capability %d.%d\n\n", devID, deviceProp.name, deviceProp.major, deviceProp.minor);
+    }
+
+    return devID;
+}
+
+// General check for CUDA GPU SM Capabilities
+inline bool checkCudaCapabilities(int major_version, int minor_version)
+{
+    cudaDeviceProp deviceProp;
+    deviceProp.major = 0;
+    deviceProp.minor = 0;
+    int dev;
+
+    checkCudaErrors(cudaGetDevice(&dev));
+    checkCudaErrors(cudaGetDeviceProperties(&deviceProp, dev));
+
+    if ((deviceProp.major > major_version) ||
+        (deviceProp.major == major_version && deviceProp.minor >= minor_version))
+    {
+        printf("  GPU Device %d: <%16s >, Compute SM %d.%d detected\n", dev, deviceProp.name, deviceProp.major, deviceProp.minor);
+        return true;
+    }
+    else
+    {
+        printf("  No GPU device was found that can support CUDA compute capability %d.%d.\n", major_version, minor_version);
+        return false;
+    }
+}
+#endif
+
+// end of CUDA Helper Functions
+
+
+#endif
diff -ruN rodinia_3.1/cuda/cfd/helper_string.h rodinia_backup/cuda/cfd/helper_string.h
--- rodinia_3.1/cuda/cfd/helper_string.h	1969-12-31 16:00:00.000000000 -0800
+++ rodinia_backup/cuda/cfd/helper_string.h	2024-09-26 12:55:55.251231531 -0700
@@ -0,0 +1,492 @@
+/**
+ * Copyright 1993-2013 NVIDIA Corporation.  All rights reserved.
+ *
+ * Please refer to the NVIDIA end user license agreement (EULA) associated
+ * with this source code for terms and conditions that govern your use of
+ * this software. Any use, reproduction, disclosure, or distribution of
+ * this software and related documentation outside the terms of the EULA
+ * is strictly prohibited.
+ *
+ */
+
+// These are helper functions for the SDK samples (string parsing, timers, etc)
+#ifndef STRING_HELPER_H
+#define STRING_HELPER_H
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <fstream>
+#include <string>
+
+#if defined(WIN32) || defined(_WIN32) || defined(WIN64) || defined(_WIN64)
+#ifndef _CRT_SECURE_NO_DEPRECATE
+#define _CRT_SECURE_NO_DEPRECATE
+#endif
+#ifndef STRCASECMP
+#define STRCASECMP  _stricmp
+#endif
+#ifndef STRNCASECMP
+#define STRNCASECMP _strnicmp
+#endif
+#ifndef STRCPY
+#define STRCPY(sFilePath, nLength, sPath) strcpy_s(sFilePath, nLength, sPath)
+#endif
+
+#ifndef FOPEN
+#define FOPEN(fHandle,filename,mode) fopen_s(&fHandle, filename, mode)
+#endif
+#ifndef FOPEN_FAIL
+#define FOPEN_FAIL(result) (result != 0)
+#endif
+#ifndef SSCANF
+#define SSCANF sscanf_s
+#endif
+#ifndef SPRINTF
+#define SPRINTF sprintf_s
+#endif
+#else // Linux Includes
+#include <string.h>
+#include <strings.h>
+
+#ifndef STRCASECMP
+#define STRCASECMP  strcasecmp
+#endif
+#ifndef STRNCASECMP
+#define STRNCASECMP strncasecmp
+#endif
+#ifndef STRCPY
+#define STRCPY(sFilePath, nLength, sPath) strcpy(sFilePath, sPath)
+#endif
+
+#ifndef FOPEN
+#define FOPEN(fHandle,filename,mode) (fHandle = fopen(filename, mode))
+#endif
+#ifndef FOPEN_FAIL
+#define FOPEN_FAIL(result) (result == NULL)
+#endif
+#ifndef SSCANF
+#define SSCANF sscanf
+#endif
+#ifndef SPRINTF
+#define SPRINTF sprintf
+#endif
+#endif
+
+#ifndef EXIT_WAIVED
+#define EXIT_WAIVED 2
+#endif
+
+// CUDA Utility Helper Functions
+inline int stringRemoveDelimiter(char delimiter, const char *string)
+{
+    int string_start = 0;
+
+    while (string[string_start] == delimiter)
+    {
+        string_start++;
+    }
+
+    if (string_start >= (int)strlen(string)-1)
+    {
+        return 0;
+    }
+
+    return string_start;
+}
+
+inline int getFileExtension(char *filename, char **extension)
+{
+    int string_length = (int)strlen(filename);
+
+    while (filename[string_length--] != '.')
+    {
+        if (string_length == 0)
+            break;
+    }
+
+    if (string_length > 0) string_length += 2;
+
+    if (string_length == 0)
+        *extension = NULL;
+    else
+        *extension = &filename[string_length];
+
+    return string_length;
+}
+
+
+inline bool checkCmdLineFlag(const int argc, const char **argv, const char *string_ref)
+{
+    bool bFound = false;
+
+    if (argc >= 1)
+    {
+        for (int i=1; i < argc; i++)
+        {
+            int string_start = stringRemoveDelimiter('-', argv[i]);
+            const char *string_argv = &argv[i][string_start];
+
+            const char *equal_pos = strchr(string_argv, '=');
+            int argv_length = (int)(equal_pos == 0 ? strlen(string_argv) : equal_pos - string_argv);
+
+            int length = (int)strlen(string_ref);
+
+            if (length == argv_length && !STRNCASECMP(string_argv, string_ref, length))
+            {
+                bFound = true;
+                continue;
+            }
+        }
+    }
+
+    return bFound;
+}
+
+// This function wraps the CUDA Driver API into a template function
+template <class T>
+inline bool getCmdLineArgumentValue(const int argc, const char **argv, const char *string_ref, T *value)
+{
+    bool bFound = false;
+
+    if (argc >= 1)
+    {
+        for (int i=1; i < argc; i++)
+        {
+            int string_start = stringRemoveDelimiter('-', argv[i]);
+            const char *string_argv = &argv[i][string_start];
+            int length = (int)strlen(string_ref);
+
+            if (!STRNCASECMP(string_argv, string_ref, length))
+            {
+                if (length+1 <= (int)strlen(string_argv))
+                {
+                    int auto_inc = (string_argv[length] == '=') ? 1 : 0;
+                    *value = (T)atoi(&string_argv[length + auto_inc]);
+                }
+
+                bFound = true;
+                i=argc;
+            }
+        }
+    }
+
+    return bFound;
+}
+
+inline int getCmdLineArgumentInt(const int argc, const char **argv, const char *string_ref)
+{
+    bool bFound = false;
+    int value = -1;
+
+    if (argc >= 1)
+    {
+        for (int i=1; i < argc; i++)
+        {
+            int string_start = stringRemoveDelimiter('-', argv[i]);
+            const char *string_argv = &argv[i][string_start];
+            int length = (int)strlen(string_ref);
+
+            if (!STRNCASECMP(string_argv, string_ref, length))
+            {
+                if (length+1 <= (int)strlen(string_argv))
+                {
+                    int auto_inc = (string_argv[length] == '=') ? 1 : 0;
+                    value = atoi(&string_argv[length + auto_inc]);
+                }
+                else
+                {
+                    value = 0;
+                }
+
+                bFound = true;
+                continue;
+            }
+        }
+    }
+
+    if (bFound)
+    {
+        return value;
+    }
+    else
+    {
+        return 0;
+    }
+}
+
+inline float getCmdLineArgumentFloat(const int argc, const char **argv, const char *string_ref)
+{
+    bool bFound = false;
+    float value = -1;
+
+    if (argc >= 1)
+    {
+        for (int i=1; i < argc; i++)
+        {
+            int string_start = stringRemoveDelimiter('-', argv[i]);
+            const char *string_argv = &argv[i][string_start];
+            int length = (int)strlen(string_ref);
+
+            if (!STRNCASECMP(string_argv, string_ref, length))
+            {
+                if (length+1 <= (int)strlen(string_argv))
+                {
+                    int auto_inc = (string_argv[length] == '=') ? 1 : 0;
+                    value = (float)atof(&string_argv[length + auto_inc]);
+                }
+                else
+                {
+                    value = 0.f;
+                }
+
+                bFound = true;
+                continue;
+            }
+        }
+    }
+
+    if (bFound)
+    {
+        return value;
+    }
+    else
+    {
+        return 0;
+    }
+}
+
+inline bool getCmdLineArgumentString(const int argc, const char **argv,
+                                     const char *string_ref, char **string_retval)
+{
+    bool bFound = false;
+
+    if (argc >= 1)
+    {
+        for (int i=1; i < argc; i++)
+        {
+            int string_start = stringRemoveDelimiter('-', argv[i]);
+            char *string_argv = (char *)&argv[i][string_start];
+            int length = (int)strlen(string_ref);
+
+            if (!STRNCASECMP(string_argv, string_ref, length))
+            {
+                *string_retval = &string_argv[length+1];
+                bFound = true;
+                continue;
+            }
+        }
+    }
+
+    if (!bFound)
+    {
+        *string_retval = NULL;
+    }
+
+    return bFound;
+}
+
+//////////////////////////////////////////////////////////////////////////////
+//! Find the path for a file assuming that
+//! files are found in the searchPath.
+//!
+//! @return the path if succeeded, otherwise 0
+//! @param filename         name of the file
+//! @param executable_path  optional absolute path of the executable
+//////////////////////////////////////////////////////////////////////////////
+inline char *sdkFindFilePath(const char *filename, const char *executable_path)
+{
+    // <executable_name> defines a variable that is replaced with the name of the executable
+
+    // Typical relative search paths to locate needed companion files (e.g. sample input data, or JIT source files)
+    // The origin for the relative search may be the .exe file, a .bat file launching an .exe, a browser .exe launching the .exe or .bat, etc
+    const char *searchPath[] =
+    {
+        "./",                                       // same dir
+        "./common/",                                // "/common/" subdir
+        "./common/data/",                           // "/common/data/" subdir
+        "./data/",                                  // "/data/" subdir
+        "./src/",                                   // "/src/" subdir
+        "./src/<executable_name>/data/",            // "/src/<executable_name>/data/" subdir
+        "./inc/",                                   // "/inc/" subdir
+        "./0_Simple/",                              // "/0_Simple/" subdir
+        "./1_Utilities/",                           // "/1_Utilities/" subdir
+        "./2_Graphics/",                            // "/2_Graphics/" subdir
+        "./3_Imaging/",                             // "/3_Imaging/" subdir
+        "./4_Financial/",                           // "/4_Financial/" subdir
+        "./5_Simulations/",                         // "/5_Simulations/" subdir
+        "./6_Advanced/",                            // "/6_Advanced/" subdir
+        "./7_CUDALibraries/",                       // "/7_CUDALibraries/" subdir
+        "./samples/",                               // "/samples/" subdir
+
+        "../",                                      // up 1 in tree
+        "../common/",                               // up 1 in tree, "/common/" subdir
+        "../common/data/",                          // up 1 in tree, "/common/data/" subdir
+        "../data/",                                 // up 1 in tree, "/data/" subdir
+        "../src/",                                  // up 1 in tree, "/src/" subdir
+        "../inc/",                                  // up 1 in tree, "/inc/" subdir
+
+        "../0_Simple/<executable_name>/data/",       // up 1 in tree, "/0_Simple/<executable_name>/" subdir
+        "../1_Utilities/<executable_name>/data/",    // up 1 in tree, "/1_Utilities/<executable_name>/" subdir
+        "../2_Graphics/<executable_name>/data/",     // up 1 in tree, "/2_Graphics/<executable_name>/" subdir
+        "../3_Imaging/<executable_name>/data/",      // up 1 in tree, "/3_Imaging/<executable_name>/" subdir
+        "../4_Financial/<executable_name>/data/",    // up 1 in tree, "/4_Financial/<executable_name>/" subdir
+        "../5_Simulations/<executable_name>/data/",  // up 1 in tree, "/5_Simulations/<executable_name>/" subdir
+        "../6_Advanced/<executable_name>/data/",     // up 1 in tree, "/6_Advanced/<executable_name>/" subdir
+        "../7_CUDALibraries/<executable_name>/data/",// up 1 in tree, "/7_CUDALibraries/<executable_name>/" subdir
+        "../samples/<executable_name>/data/",        // up 1 in tree, "/samples/<executable_name>/" subdir
+        "../../",                                        // up 2 in tree
+        "../../common/",                                 // up 2 in tree, "/common/" subdir
+        "../../common/data/",                            // up 2 in tree, "/common/data/" subdir
+        "../../data/",                                   // up 2 in tree, "/data/" subdir
+        "../../src/",                                    // up 2 in tree, "/src/" subdir
+        "../../inc/",                                    // up 2 in tree, "/inc/" subdir
+        "../../sandbox/<executable_name>/data/",         // up 2 in tree, "/sandbox/<executable_name>/" subdir
+        "../../0_Simple/<executable_name>/data/",        // up 2 in tree, "/0_Simple/<executable_name>/" subdir
+        "../../1_Utilities/<executable_name>/data/",     // up 2 in tree, "/1_Utilities/<executable_name>/" subdir
+        "../../2_Graphics/<executable_name>/data/",      // up 2 in tree, "/2_Graphics/<executable_name>/" subdir
+        "../../3_Imaging/<executable_name>/data/",       // up 2 in tree, "/3_Imaging/<executable_name>/" subdir
+        "../../4_Financial/<executable_name>/data/",     // up 2 in tree, "/4_Financial/<executable_name>/" subdir
+        "../../5_Simulations/<executable_name>/data/",   // up 2 in tree, "/5_Simulations/<executable_name>/" subdir
+        "../../6_Advanced/<executable_name>/data/",      // up 2 in tree, "/6_Advanced/<executable_name>/" subdir
+        "../../7_CUDALibraries/<executable_name>/data/", // up 2 in tree, "/7_CUDALibraries/<executable_name>/" subdir
+        "../../samples/<executable_name>/data/",         // up 2 in tree, "/samples/<executable_name>/" subdir
+        "../../../",                                        // up 3 in tree
+        "../../../src/<executable_name>/",                  // up 3 in tree, "/src/<executable_name>/" subdir
+        "../../../src/<executable_name>/data/",             // up 3 in tree, "/src/<executable_name>/data/" subdir
+        "../../../src/<executable_name>/src/",              // up 3 in tree, "/src/<executable_name>/src/" subdir
+        "../../../src/<executable_name>/inc/",              // up 3 in tree, "/src/<executable_name>/inc/" subdir
+        "../../../sandbox/<executable_name>/",              // up 3 in tree, "/sandbox/<executable_name>/" subdir
+        "../../../sandbox/<executable_name>/data/",         // up 3 in tree, "/sandbox/<executable_name>/data/" subdir
+        "../../../sandbox/<executable_name>/src/",          // up 3 in tree, "/sandbox/<executable_name>/src/" subdir
+        "../../../sandbox/<executable_name>/inc/",          // up 3 in tree, "/sandbox/<executable_name>/inc/" subdir
+        "../../../0_Simple/<executable_name>/data/",        // up 3 in tree, "/0_Simple/<executable_name>/" subdir
+        "../../../1_Utilities/<executable_name>/data/",     // up 3 in tree, "/1_Utilities/<executable_name>/" subdir
+        "../../../2_Graphics/<executable_name>/data/",      // up 3 in tree, "/2_Graphics/<executable_name>/" subdir
+        "../../../3_Imaging/<executable_name>/data/",       // up 3 in tree, "/3_Imaging/<executable_name>/" subdir
+        "../../../4_Financial/<executable_name>/data/",     // up 3 in tree, "/4_Financial/<executable_name>/" subdir
+        "../../../5_Simulations/<executable_name>/data/",   // up 3 in tree, "/5_Simulations/<executable_name>/" subdir
+        "../../../6_Advanced/<executable_name>/data/",      // up 3 in tree, "/6_Advanced/<executable_name>/" subdir
+        "../../../7_CUDALibraries/<executable_name>/data/", // up 3 in tree, "/7_CUDALibraries/<executable_name>/" subdir
+        "../../../samples/<executable_name>/data/",         // up 3 in tree, "/samples/<executable_name>/" subdir
+        "../../../common/",                                 // up 3 in tree, "../../../common/" subdir
+        "../../../common/data/",                            // up 3 in tree, "../../../common/data/" subdir
+        "../../../data/",                                   // up 3 in tree, "../../../data/" subdir
+        "../../../../",                                // up 4 in tree
+        "../../../../src/<executable_name>/",          // up 4 in tree, "/src/<executable_name>/" subdir
+        "../../../../src/<executable_name>/data/",     // up 4 in tree, "/src/<executable_name>/data/" subdir
+        "../../../../src/<executable_name>/src/",      // up 4 in tree, "/src/<executable_name>/src/" subdir
+        "../../../../src/<executable_name>/inc/",      // up 4 in tree, "/src/<executable_name>/inc/" subdir
+        "../../../../sandbox/<executable_name>/",      // up 4 in tree, "/sandbox/<executable_name>/" subdir
+        "../../../../sandbox/<executable_name>/data/", // up 4 in tree, "/sandbox/<executable_name>/data/" subdir
+        "../../../../sandbox/<executable_name>/src/",  // up 4 in tree, "/sandbox/<executable_name>/src/" subdir
+        "../../../../sandbox/<executable_name>/inc/",   // up 4 in tree, "/sandbox/<executable_name>/inc/" subdir
+        "../../../../0_Simple/<executable_name>/data/",     // up 4 in tree, "/0_Simple/<executable_name>/" subdir
+        "../../../../1_Utilities/<executable_name>/data/",  // up 4 in tree, "/1_Utilities/<executable_name>/" subdir
+        "../../../../2_Graphics/<executable_name>/data/",   // up 4 in tree, "/2_Graphics/<executable_name>/" subdir
+        "../../../../3_Imaging/<executable_name>/data/",    // up 4 in tree, "/3_Imaging/<executable_name>/" subdir
+        "../../../../4_Financial/<executable_name>/data/",  // up 4 in tree, "/4_Financial/<executable_name>/" subdir
+        "../../../../5_Simulations/<executable_name>/data/",// up 4 in tree, "/5_Simulations/<executable_name>/" subdir
+        "../../../../6_Advanced/<executable_name>/data/",   // up 4 in tree, "/6_Advanced/<executable_name>/" subdir
+        "../../../../7_CUDALibraries/<executable_name>/data/", // up 4 in tree, "/7_CUDALibraries/<executable_name>/" subdir
+        "../../../../samples/<executable_name>/data/",      // up 4 in tree, "/samples/<executable_name>/" subdir
+        "../../../../common/",                              // up 4 in tree, "../../../common/" subdir
+        "../../../../common/data/",                         // up 4 in tree, "../../../common/data/" subdir
+        "../../../../data/",                                // up 4 in tree, "../../../data/" subdir
+        "../../../../../",                                // up 5 in tree
+        "../../../../../src/<executable_name>/",          // up 5 in tree, "/src/<executable_name>/" subdir
+        "../../../../../src/<executable_name>/data/",     // up 5 in tree, "/src/<executable_name>/data/" subdir
+        "../../../../../src/<executable_name>/src/",      // up 5 in tree, "/src/<executable_name>/src/" subdir
+        "../../../../../src/<executable_name>/inc/",      // up 5 in tree, "/src/<executable_name>/inc/" subdir
+        "../../../../../sandbox/<executable_name>/",      // up 5 in tree, "/sandbox/<executable_name>/" subdir
+        "../../../../../sandbox/<executable_name>/data/", // up 5 in tree, "/sandbox/<executable_name>/data/" subdir
+        "../../../../../sandbox/<executable_name>/src/",  // up 5 in tree, "/sandbox/<executable_name>/src/" subdir
+        "../../../../../sandbox/<executable_name>/inc/",   // up 5 in tree, "/sandbox/<executable_name>/inc/" subdir
+        "../../../../../0_Simple/<executable_name>/data/",     // up 5 in tree, "/0_Simple/<executable_name>/" subdir
+        "../../../../../1_Utilities/<executable_name>/data/",  // up 5 in tree, "/1_Utilities/<executable_name>/" subdir
+        "../../../../../2_Graphics/<executable_name>/data/",   // up 5 in tree, "/2_Graphics/<executable_name>/" subdir
+        "../../../../../3_Imaging/<executable_name>/data/",    // up 5 in tree, "/3_Imaging/<executable_name>/" subdir
+        "../../../../../4_Financial/<executable_name>/data/",  // up 5 in tree, "/4_Financial/<executable_name>/" subdir
+        "../../../../../5_Simulations/<executable_name>/data/",// up 5 in tree, "/5_Simulations/<executable_name>/" subdir
+        "../../../../../6_Advanced/<executable_name>/data/",   // up 5 in tree, "/6_Advanced/<executable_name>/" subdir
+        "../../../../../7_CUDALibraries/<executable_name>/data/", // up 5 in tree, "/7_CUDALibraries/<executable_name>/" subdir
+        "../../../../../samples/<executable_name>/data/",      // up 5 in tree, "/samples/<executable_name>/" subdir
+        "../../../../../common/",                         // up 5 in tree, "../../../common/" subdir
+        "../../../../../common/data/",                    // up 5 in tree, "../../../common/data/" subdir
+    };
+
+    // Extract the executable name
+    std::string executable_name;
+
+    if (executable_path != 0)
+    {
+        executable_name = std::string(executable_path);
+
+#if defined(WIN32) || defined(_WIN32) || defined(WIN64) || defined(_WIN64)
+        // Windows path delimiter
+        size_t delimiter_pos = executable_name.find_last_of('\\');
+        executable_name.erase(0, delimiter_pos + 1);
+
+        if (executable_name.rfind(".exe") != std::string::npos)
+        {
+            // we strip .exe, only if the .exe is found
+            executable_name.resize(executable_name.size() - 4);
+        }
+
+#else
+        // Linux & OSX path delimiter
+        size_t delimiter_pos = executable_name.find_last_of('/');
+        executable_name.erase(0,delimiter_pos+1);
+#endif
+    }
+
+    // Loop over all search paths and return the first hit
+    for (unsigned int i = 0; i < sizeof(searchPath)/sizeof(char *); ++i)
+    {
+        std::string path(searchPath[i]);
+        size_t executable_name_pos = path.find("<executable_name>");
+
+        // If there is executable_name variable in the searchPath
+        // replace it with the value
+        if (executable_name_pos != std::string::npos)
+        {
+            if (executable_path != 0)
+            {
+                path.replace(executable_name_pos, strlen("<executable_name>"), executable_name);
+            }
+            else
+            {
+                // Skip this path entry if no executable argument is given
+                continue;
+            }
+        }
+
+#ifdef _DEBUG
+        printf("sdkFindFilePath <%s> in %s\n", filename, path.c_str());
+#endif
+
+        // Test if the file exists
+        path.append(filename);
+        FILE *fp;
+        FOPEN(fp, path.c_str(), "rb");
+
+        if (fp != NULL)
+        {
+            fclose(fp);
+            // File found
+            // returning an allocated array here for backwards compatibility reasons
+            char *file_path = (char *) malloc(path.length() + 1);
+            STRCPY(file_path, path.length() + 1, path.c_str());
+            return file_path;
+        }
+
+        if (fp)
+        {
+            fclose(fp);
+        }
+    }
+
+    // File not found
+    return 0;
+}
+
+#endif
diff -ruN rodinia_3.1/cuda/cfd/helper_timer.h rodinia_backup/cuda/cfd/helper_timer.h
--- rodinia_3.1/cuda/cfd/helper_timer.h	1969-12-31 16:00:00.000000000 -0800
+++ rodinia_backup/cuda/cfd/helper_timer.h	2024-09-26 12:55:55.251231531 -0700
@@ -0,0 +1,499 @@
+/**
+ * Copyright 1993-2013 NVIDIA Corporation.  All rights reserved.
+ *
+ * Please refer to the NVIDIA end user license agreement (EULA) associated
+ * with this source code for terms and conditions that govern your use of
+ * this software. Any use, reproduction, disclosure, or distribution of
+ * this software and related documentation outside the terms of the EULA
+ * is strictly prohibited.
+ *
+ */
+
+// Helper Timing Functions
+#ifndef HELPER_TIMER_H
+#define HELPER_TIMER_H
+
+#ifndef EXIT_WAIVED
+#define EXIT_WAIVED 2
+#endif
+
+// includes, system
+#include <vector>
+
+// includes, project
+#include "exception.h"
+
+// Definition of the StopWatch Interface, this is used if we don't want to use the CUT functions
+// But rather in a self contained class interface
+class StopWatchInterface
+{
+    public:
+        StopWatchInterface() {};
+        virtual ~StopWatchInterface() {};
+
+    public:
+        //! Start time measurement
+        virtual void start() = 0;
+
+        //! Stop time measurement
+        virtual void stop() = 0;
+
+        //! Reset time counters to zero
+        virtual void reset() = 0;
+
+        //! Time in msec. after start. If the stop watch is still running (i.e. there
+        //! was no call to stop()) then the elapsed time is returned, otherwise the
+        //! time between the last start() and stop call is returned
+        virtual float getTime() = 0;
+
+        //! Mean time to date based on the number of times the stopwatch has been
+        //! _stopped_ (ie finished sessions) and the current total time
+        virtual float getAverageTime() = 0;
+};
+
+
+//////////////////////////////////////////////////////////////////
+// Begin Stopwatch timer class definitions for all OS platforms //
+//////////////////////////////////////////////////////////////////
+#if defined(WIN32) || defined(_WIN32) || defined(WIN64) || defined(_WIN64)
+// includes, system
+#define WINDOWS_LEAN_AND_MEAN
+#include <windows.h>
+#undef min
+#undef max
+
+//! Windows specific implementation of StopWatch
+class StopWatchWin : public StopWatchInterface
+{
+    public:
+        //! Constructor, default
+        StopWatchWin() :
+            start_time(),     end_time(),
+            diff_time(0.0f),  total_time(0.0f),
+            running(false), clock_sessions(0), freq(0), freq_set(false)
+        {
+            if (! freq_set)
+            {
+                // helper variable
+                LARGE_INTEGER temp;
+
+                // get the tick frequency from the OS
+                QueryPerformanceFrequency((LARGE_INTEGER *) &temp);
+
+                // convert to type in which it is needed
+                freq = ((double) temp.QuadPart) / 1000.0;
+
+                // rememeber query
+                freq_set = true;
+            }
+        };
+
+        // Destructor
+        ~StopWatchWin() { };
+
+    public:
+        //! Start time measurement
+        inline void start();
+
+        //! Stop time measurement
+        inline void stop();
+
+        //! Reset time counters to zero
+        inline void reset();
+
+        //! Time in msec. after start. If the stop watch is still running (i.e. there
+        //! was no call to stop()) then the elapsed time is returned, otherwise the
+        //! time between the last start() and stop call is returned
+        inline float getTime();
+
+        //! Mean time to date based on the number of times the stopwatch has been
+        //! _stopped_ (ie finished sessions) and the current total time
+        inline float getAverageTime();
+
+    private:
+        // member variables
+
+        //! Start of measurement
+        LARGE_INTEGER  start_time;
+        //! End of measurement
+        LARGE_INTEGER  end_time;
+
+        //! Time difference between the last start and stop
+        float  diff_time;
+
+        //! TOTAL time difference between starts and stops
+        float  total_time;
+
+        //! flag if the stop watch is running
+        bool running;
+
+        //! Number of times clock has been started
+        //! and stopped to allow averaging
+        int clock_sessions;
+
+        //! tick frequency
+        double  freq;
+
+        //! flag if the frequency has been set
+        bool  freq_set;
+};
+
+// functions, inlined
+
+////////////////////////////////////////////////////////////////////////////////
+//! Start time measurement
+////////////////////////////////////////////////////////////////////////////////
+inline void
+StopWatchWin::start()
+{
+    QueryPerformanceCounter((LARGE_INTEGER *) &start_time);
+    running = true;
+}
+
+////////////////////////////////////////////////////////////////////////////////
+//! Stop time measurement and increment add to the current diff_time summation
+//! variable. Also increment the number of times this clock has been run.
+////////////////////////////////////////////////////////////////////////////////
+inline void
+StopWatchWin::stop()
+{
+    QueryPerformanceCounter((LARGE_INTEGER *) &end_time);
+    diff_time = (float)
+                (((double) end_time.QuadPart - (double) start_time.QuadPart) / freq);
+
+    total_time += diff_time;
+    clock_sessions++;
+    running = false;
+}
+
+////////////////////////////////////////////////////////////////////////////////
+//! Reset the timer to 0. Does not change the timer running state but does
+//! recapture this point in time as the current start time if it is running.
+////////////////////////////////////////////////////////////////////////////////
+inline void
+StopWatchWin::reset()
+{
+    diff_time = 0;
+    total_time = 0;
+    clock_sessions = 0;
+
+    if (running)
+    {
+        QueryPerformanceCounter((LARGE_INTEGER *) &start_time);
+    }
+}
+
+
+////////////////////////////////////////////////////////////////////////////////
+//! Time in msec. after start. If the stop watch is still running (i.e. there
+//! was no call to stop()) then the elapsed time is returned added to the
+//! current diff_time sum, otherwise the current summed time difference alone
+//! is returned.
+////////////////////////////////////////////////////////////////////////////////
+inline float
+StopWatchWin::getTime()
+{
+    // Return the TOTAL time to date
+    float retval = total_time;
+
+    if (running)
+    {
+        LARGE_INTEGER temp;
+        QueryPerformanceCounter((LARGE_INTEGER *) &temp);
+        retval += (float)
+                  (((double)(temp.QuadPart - start_time.QuadPart)) / freq);
+    }
+
+    return retval;
+}
+
+////////////////////////////////////////////////////////////////////////////////
+//! Time in msec. for a single run based on the total number of COMPLETED runs
+//! and the total time.
+////////////////////////////////////////////////////////////////////////////////
+inline float
+StopWatchWin::getAverageTime()
+{
+    return (clock_sessions > 0) ? (total_time/clock_sessions) : 0.0f;
+}
+#else
+// Declarations for Stopwatch on Linux and Mac OSX
+// includes, system
+#include <ctime>
+#include <sys/time.h>
+
+//! Windows specific implementation of StopWatch
+class StopWatchLinux : public StopWatchInterface
+{
+    public:
+        //! Constructor, default
+        StopWatchLinux() :
+            start_time(), diff_time(0.0), total_time(0.0),
+            running(false), clock_sessions(0)
+        { };
+
+        // Destructor
+        virtual ~StopWatchLinux()
+        { };
+
+    public:
+        //! Start time measurement
+        inline void start();
+
+        //! Stop time measurement
+        inline void stop();
+
+        //! Reset time counters to zero
+        inline void reset();
+
+        //! Time in msec. after start. If the stop watch is still running (i.e. there
+        //! was no call to stop()) then the elapsed time is returned, otherwise the
+        //! time between the last start() and stop call is returned
+        inline float getTime();
+
+        //! Mean time to date based on the number of times the stopwatch has been
+        //! _stopped_ (ie finished sessions) and the current total time
+        inline float getAverageTime();
+
+    private:
+
+        // helper functions
+
+        //! Get difference between start time and current time
+        inline float getDiffTime();
+
+    private:
+
+        // member variables
+
+        //! Start of measurement
+        struct timeval  start_time;
+
+        //! Time difference between the last start and stop
+        float  diff_time;
+
+        //! TOTAL time difference between starts and stops
+        float  total_time;
+
+        //! flag if the stop watch is running
+        bool running;
+
+        //! Number of times clock has been started
+        //! and stopped to allow averaging
+        int clock_sessions;
+};
+
+// functions, inlined
+
+////////////////////////////////////////////////////////////////////////////////
+//! Start time measurement
+////////////////////////////////////////////////////////////////////////////////
+inline void
+StopWatchLinux::start()
+{
+    gettimeofday(&start_time, 0);
+    running = true;
+}
+
+////////////////////////////////////////////////////////////////////////////////
+//! Stop time measurement and increment add to the current diff_time summation
+//! variable. Also increment the number of times this clock has been run.
+////////////////////////////////////////////////////////////////////////////////
+inline void
+StopWatchLinux::stop()
+{
+    diff_time = getDiffTime();
+    total_time += diff_time;
+    running = false;
+    clock_sessions++;
+}
+
+////////////////////////////////////////////////////////////////////////////////
+//! Reset the timer to 0. Does not change the timer running state but does
+//! recapture this point in time as the current start time if it is running.
+////////////////////////////////////////////////////////////////////////////////
+inline void
+StopWatchLinux::reset()
+{
+    diff_time = 0;
+    total_time = 0;
+    clock_sessions = 0;
+
+    if (running)
+    {
+        gettimeofday(&start_time, 0);
+    }
+}
+
+////////////////////////////////////////////////////////////////////////////////
+//! Time in msec. after start. If the stop watch is still running (i.e. there
+//! was no call to stop()) then the elapsed time is returned added to the
+//! current diff_time sum, otherwise the current summed time difference alone
+//! is returned.
+////////////////////////////////////////////////////////////////////////////////
+inline float
+StopWatchLinux::getTime()
+{
+    // Return the TOTAL time to date
+    float retval = total_time;
+
+    if (running)
+    {
+        retval += getDiffTime();
+    }
+
+    return retval;
+}
+
+////////////////////////////////////////////////////////////////////////////////
+//! Time in msec. for a single run based on the total number of COMPLETED runs
+//! and the total time.
+////////////////////////////////////////////////////////////////////////////////
+inline float
+StopWatchLinux::getAverageTime()
+{
+    return (clock_sessions > 0) ? (total_time/clock_sessions) : 0.0f;
+}
+////////////////////////////////////////////////////////////////////////////////
+
+////////////////////////////////////////////////////////////////////////////////
+inline float
+StopWatchLinux::getDiffTime()
+{
+    struct timeval t_time;
+    gettimeofday(&t_time, 0);
+
+    // time difference in milli-seconds
+    return (float)(1000.0 * (t_time.tv_sec - start_time.tv_sec)
+                   + (0.001 * (t_time.tv_usec - start_time.tv_usec)));
+}
+#endif // WIN32
+
+////////////////////////////////////////////////////////////////////////////////
+//! Timer functionality exported
+
+////////////////////////////////////////////////////////////////////////////////
+//! Create a new timer
+//! @return true if a time has been created, otherwise false
+//! @param  name of the new timer, 0 if the creation failed
+////////////////////////////////////////////////////////////////////////////////
+inline bool
+sdkCreateTimer(StopWatchInterface **timer_interface)
+{
+    //printf("sdkCreateTimer called object %08x\n", (void *)*timer_interface);
+#if defined(WIN32) || defined(_WIN32) || defined(WIN64) || defined(_WIN64)
+    *timer_interface = (StopWatchInterface *)new StopWatchWin();
+#else
+    *timer_interface = (StopWatchInterface *)new StopWatchLinux();
+#endif
+    return (*timer_interface != NULL) ? true : false;
+}
+
+
+////////////////////////////////////////////////////////////////////////////////
+//! Delete a timer
+//! @return true if a time has been deleted, otherwise false
+//! @param  name of the timer to delete
+////////////////////////////////////////////////////////////////////////////////
+inline bool
+sdkDeleteTimer(StopWatchInterface **timer_interface)
+{
+    //printf("sdkDeleteTimer called object %08x\n", (void *)*timer_interface);
+    if (*timer_interface)
+    {
+        delete *timer_interface;
+        *timer_interface = NULL;
+    }
+
+    return true;
+}
+
+////////////////////////////////////////////////////////////////////////////////
+//! Start the time with name \a name
+//! @param name  name of the timer to start
+////////////////////////////////////////////////////////////////////////////////
+inline bool
+sdkStartTimer(StopWatchInterface **timer_interface)
+{
+    //printf("sdkStartTimer called object %08x\n", (void *)*timer_interface);
+    if (*timer_interface)
+    {
+        (*timer_interface)->start();
+    }
+
+    return true;
+}
+
+////////////////////////////////////////////////////////////////////////////////
+//! Stop the time with name \a name. Does not reset.
+//! @param name  name of the timer to stop
+////////////////////////////////////////////////////////////////////////////////
+inline bool
+sdkStopTimer(StopWatchInterface **timer_interface)
+{
+    // printf("sdkStopTimer called object %08x\n", (void *)*timer_interface);
+    if (*timer_interface)
+    {
+        (*timer_interface)->stop();
+    }
+
+    return true;
+}
+
+////////////////////////////////////////////////////////////////////////////////
+//! Resets the timer's counter.
+//! @param name  name of the timer to reset.
+////////////////////////////////////////////////////////////////////////////////
+inline bool
+sdkResetTimer(StopWatchInterface **timer_interface)
+{
+    // printf("sdkResetTimer called object %08x\n", (void *)*timer_interface);
+    if (*timer_interface)
+    {
+        (*timer_interface)->reset();
+    }
+
+    return true;
+}
+
+////////////////////////////////////////////////////////////////////////////////
+//! Return the average time for timer execution as the total time
+//! for the timer dividied by the number of completed (stopped) runs the timer
+//! has made.
+//! Excludes the current running time if the timer is currently running.
+//! @param name  name of the timer to return the time of
+////////////////////////////////////////////////////////////////////////////////
+inline float
+sdkGetAverageTimerValue(StopWatchInterface **timer_interface)
+{
+    //  printf("sdkGetAverageTimerValue called object %08x\n", (void *)*timer_interface);
+    if (*timer_interface)
+    {
+        return (*timer_interface)->getAverageTime();
+    }
+    else
+    {
+        return 0.0f;
+    }
+}
+
+////////////////////////////////////////////////////////////////////////////////
+//! Total execution time for the timer over all runs since the last reset
+//! or timer creation.
+//! @param name  name of the timer to obtain the value of.
+////////////////////////////////////////////////////////////////////////////////
+inline float
+sdkGetTimerValue(StopWatchInterface **timer_interface)
+{
+    // printf("sdkGetTimerValue called object %08x\n", (void *)*timer_interface);
+    if (*timer_interface)
+    {
+        return (*timer_interface)->getTime();
+    }
+    else
+    {
+        return 0.0f;
+    }
+}
+
+#endif // HELPER_TIMER_H
diff -ruN rodinia_3.1/cuda/cfd/Makefile rodinia_backup/cuda/cfd/Makefile
--- rodinia_3.1/cuda/cfd/Makefile	2015-12-11 07:46:05.000000000 -0800
+++ rodinia_backup/cuda/cfd/Makefile	2024-09-26 12:55:55.251231531 -0700
@@ -11,21 +11,21 @@
 endif
 
 
-all: euler3d euler3d_double  pre_euler3d  pre_euler3d_double 
+all: euler3d #euler3d_double  pre_euler3d  pre_euler3d_double 
 
 euler3d: euler3d.cu
-	nvcc $(KERNEL_DIM) -O2 -Xptxas -v --gpu-architecture=compute_20 --gpu-code=compute_20 euler3d.cu -o euler3d -I$(CUDA_SDK_PATH)/common/inc  -L$(CUDA_SDK_PATH)/lib $(CUTIL_LIB)
+	hipcc $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o $(KERNEL_DIM) -g -O2 euler3d.cu -o euler3d
 
 euler3d_double: euler3d_double.cu
-	nvcc -Xptxas -v -O3 --gpu-architecture=compute_20 --gpu-code=compute_20 euler3d_double.cu -o euler3d_double -I$(CUDA_SDK_PATH)/common/inc  -L$(CUDA_SDK_PATH)/lib $(CUTIL_LIB)
+	hipcc $(INST_FLAGS) -O3 euler3d_double.cu -o euler3d_double 
 
 
 pre_euler3d: pre_euler3d.cu
-	nvcc -Xptxas -v -O3 --gpu-architecture=compute_20 --gpu-code=compute_20 pre_euler3d.cu -o pre_euler3d -I$(CUDA_SDK_PATH)/common/inc  -L$(CUDA_SDK_PATH)/lib $(CUTIL_LIB)
+	hipcc $(INST_FLAGS) -O3 pre_euler3d.cu -o pre_euler3d 
 
 pre_euler3d_double: pre_euler3d_double.cu
-	nvcc -Xptxas -v -O3 --gpu-architecture=compute_20 --gpu-code=compute_20 pre_euler3d_double.cu -o pre_euler3d_double -I$(CUDA_SDK_PATH)/common/inc  -L$(CUDA_SDK_PATH)/lib $(CUTIL_LIB)
+	hipcc $(INST_FLAGS) -O3 pre_euler3d_double.cu -o pre_euler3d_double 
 
 
 clean:
-	rm -f euler3d euler3d_double pre_euler3d pre_euler3d_double *.linkinfo
+	rm -f euler3d euler3d_double pre_euler3d pre_euler3d_double *.linkinfo *.o *.bc density density_energy momentum
diff -ruN rodinia_3.1/cuda/cfd/pre_euler3d.cu rodinia_backup/cuda/cfd/pre_euler3d.cu
--- rodinia_3.1/cuda/cfd/pre_euler3d.cu	2015-12-11 07:46:05.000000000 -0800
+++ rodinia_backup/cuda/cfd/pre_euler3d.cu	2024-09-26 12:55:55.251231531 -0700
@@ -2,8 +2,10 @@
 // This code is from the AIAA-2009-4001 paper
 
 // #include <cutil.h>
-#include <helper_cuda.h>
-#include <helper_timer.h>
+
+#include <hip/hip_runtime.h>
+#include "helper_cuda.h"
+#include "helper_timer.h"
 
 #include <iostream>
 #include <fstream>
@@ -50,32 +52,32 @@
 T* alloc(int N)
 {
 	T* t;
-	checkCudaErrors(cudaMalloc((void**)&t, sizeof(T)*N));
+	checkCudaErrors(hipMalloc((void**)&t, sizeof(T)*N));
 	return t;
 }
 
 template <typename T>
 void dealloc(T* array)
 {
-	checkCudaErrors(cudaFree((void*)array));
+	checkCudaErrors(hipFree((void*)array));
 }
 
 template <typename T>
 void copy(T* dst, T* src, int N)
 {
-	checkCudaErrors(cudaMemcpy((void*)dst, (void*)src, N*sizeof(T), cudaMemcpyDeviceToDevice));
+	checkCudaErrors(hipMemcpy((void*)dst, (void*)src, N*sizeof(T), hipMemcpyDeviceToDevice));
 }
 
 template <typename T>
 void upload(T* dst, T* src, int N)
 {
-	checkCudaErrors(cudaMemcpy((void*)dst, (void*)src, N*sizeof(T), cudaMemcpyHostToDevice));
+	checkCudaErrors(hipMemcpy((void*)dst, (void*)src, N*sizeof(T), hipMemcpyHostToDevice));
 }
 
 template <typename T>
 void download(T* dst, T* src, int N)
 {
-	checkCudaErrors(cudaMemcpy((void*)dst, (void*)src, N*sizeof(T), cudaMemcpyDeviceToHost));
+	checkCudaErrors(hipMemcpy((void*)dst, (void*)src, N*sizeof(T), hipMemcpyDeviceToHost));
 }
 
 void dump(float* variables, int nel, int nelr)
@@ -127,12 +129,12 @@
 void initialize_variables(int nelr, float* variables)
 {
 	dim3 Dg(nelr / block_length), Db(block_length);
-	cudaError_t error;
+	hipError_t error;
 	cuda_initialize_variables<<<Dg, Db>>>(nelr, variables);
-	error = cudaGetLastError();
-		    if (error != cudaSuccess) 
+	error = hipGetLastError();
+		    if (error != hipSuccess) 
 		      {
-			fprintf(stderr,"GPUassert: %s initialize variables \n", cudaGetErrorString(error));
+			fprintf(stderr,"GPUassert: %s initialize variables \n", hipGetErrorString(error));
 			exit(-1);
 		      }
 
@@ -203,12 +205,12 @@
 }
 void compute_step_factor(int nelr, float* variables, float* areas, float* step_factors)
 {
-  	cudaError_t error;
+  	hipError_t error;
 	dim3 Dg(nelr / block_length), Db(block_length);
-	cuda_compute_step_factor<<<Dg, Db>>>(nelr, variables, areas, step_factors);			    error = cudaGetLastError();
-		    if (error != cudaSuccess) 
+	cuda_compute_step_factor<<<Dg, Db>>>(nelr, variables, areas, step_factors);			    error = hipGetLastError();
+		    if (error != hipSuccess) 
 		      {
-			fprintf(stderr,"GPUassert: %s compute_step_factor failed\n", cudaGetErrorString(error));
+			fprintf(stderr,"GPUassert: %s compute_step_factor failed\n", hipGetErrorString(error));
 			exit(-1);
 		      }
 	
@@ -255,12 +257,12 @@
 void compute_flux_contributions(int nelr, float* variables, float* fc_momentum_x, float* fc_momentum_y, float* fc_momentum_z, float* fc_density_energy)
 {
 	dim3 Dg(nelr / block_length), Db(block_length);
-	cudaError_t error;
+	hipError_t error;
 	cuda_compute_flux_contributions<<<Dg,Db>>>(nelr, variables, fc_momentum_x, fc_momentum_y, fc_momentum_z, fc_density_energy);
-		    error = cudaGetLastError();
-		    if (error != cudaSuccess) 
+		    error = hipGetLastError();
+		    if (error != hipSuccess) 
 		      {
-			fprintf(stderr,"GPUassert: %s compute_flux_contribution failed\n", cudaGetErrorString(error));
+			fprintf(stderr,"GPUassert: %s compute_flux_contribution failed\n", hipGetErrorString(error));
 			exit(-1);
 		      }
 
@@ -430,13 +432,13 @@
 }
 void compute_flux(int nelr, int* elements_surrounding_elements, float* normals, float* variables, float* fc_momentum_x, float* fc_momentum_y, float* fc_momentum_z, float* fc_density_energy, float* fluxes)
 {
-	cudaError_t error;
+	hipError_t error;
 	dim3 Dg(nelr / block_length), Db(block_length);
 	cuda_compute_flux<<<Dg,Db>>>(nelr, elements_surrounding_elements, normals, variables, fc_momentum_x, fc_momentum_y, fc_momentum_z, fc_density_energy, fluxes);
-		    error = cudaGetLastError();
-		    if (error != cudaSuccess) 
+		    error = hipGetLastError();
+		    if (error != hipSuccess) 
 		      {
-			fprintf(stderr,"GPUassert: %s compute_flux failed\n", cudaGetErrorString(error));
+			fprintf(stderr,"GPUassert: %s compute_flux failed\n", hipGetErrorString(error));
 			exit(-1);
 		      }
 
@@ -456,13 +458,13 @@
 }
 void time_step(int j, int nelr, float* old_variables, float* variables, float* step_factors, float* fluxes)
 {
-	cudaError_t error;
+	hipError_t error;
 	dim3 Dg(nelr / block_length), Db(block_length);
 	cuda_time_step<<<Dg,Db>>>(j, nelr, old_variables, variables, step_factors, fluxes);
-		    error = cudaGetLastError();
-		    if (error != cudaSuccess) 
+		    error = hipGetLastError();
+		    if (error != hipSuccess) 
 		      {
-			fprintf(stderr,"GPUassert: %s update failed\n", cudaGetErrorString(error));
+			fprintf(stderr,"GPUassert: %s update failed\n", hipGetErrorString(error));
 			exit(-1);
 		      }
 
@@ -480,12 +482,12 @@
 	}
 	const char* data_file_name = argv[1];
 	
-	cudaDeviceProp prop;
+	hipDeviceProp_t prop;
 	int dev;
 	
-	checkCudaErrors(cudaSetDevice(0));
-	checkCudaErrors(cudaGetDevice(&dev));
-	checkCudaErrors(cudaGetDeviceProperties(&prop, dev));
+	checkCudaErrors(hipSetDevice(0));
+	checkCudaErrors(hipGetDevice(&dev));
+	checkCudaErrors(hipGetDeviceProperties(&prop, dev));
 	
 	printf("Name:                     %s\n", prop.name);
 
@@ -522,12 +524,12 @@
 		compute_flux_contribution(h_ff_variable[VAR_DENSITY], h_ff_momentum, h_ff_variable[VAR_DENSITY_ENERGY], ff_pressure, ff_velocity, h_ff_fc_momentum_x, h_ff_fc_momentum_y, h_ff_fc_momentum_z, h_ff_fc_density_energy);
 
 		// copy far field conditions to the gpu
-		checkCudaErrors( cudaMemcpyToSymbol(ff_variable,          h_ff_variable,          NVAR*sizeof(float)) );
-		checkCudaErrors( cudaMemcpyToSymbol(ff_fc_momentum_x, &h_ff_fc_momentum_x, sizeof(float3)) );
-		checkCudaErrors( cudaMemcpyToSymbol(ff_fc_momentum_y, &h_ff_fc_momentum_y, sizeof(float3)) );
-		checkCudaErrors( cudaMemcpyToSymbol(ff_fc_momentum_z, &h_ff_fc_momentum_z, sizeof(float3)) );
+		checkCudaErrors( hipMemcpyToSymbol(HIP_SYMBOL(ff_variable),          h_ff_variable,          NVAR*sizeof(float)) );
+		checkCudaErrors( hipMemcpyToSymbol(HIP_SYMBOL(ff_fc_momentum_x), &h_ff_fc_momentum_x, sizeof(float3)) );
+		checkCudaErrors( hipMemcpyToSymbol(HIP_SYMBOL(ff_fc_momentum_y), &h_ff_fc_momentum_y, sizeof(float3)) );
+		checkCudaErrors( hipMemcpyToSymbol(HIP_SYMBOL(ff_fc_momentum_z), &h_ff_fc_momentum_z, sizeof(float3)) );
 		
-		checkCudaErrors( cudaMemcpyToSymbol(ff_fc_density_energy, &h_ff_fc_density_energy, sizeof(float3)) );		
+		checkCudaErrors( hipMemcpyToSymbol(HIP_SYMBOL(ff_fc_density_energy), &h_ff_fc_density_energy, sizeof(float3)) );		
 	}
 	int nel;
 	int nelr;
@@ -608,9 +610,9 @@
 	// make sure all memory is floatly allocated before we start timing
 	initialize_variables(nelr, old_variables);
 	initialize_variables(nelr, fluxes);
-	cudaMemset( (void*) step_factors, 0, sizeof(float)*nelr );
+	hipMemset( (void*) step_factors, 0, sizeof(float)*nelr );
 	// make sure CUDA isn't still doing something before we start timing
-	cudaThreadSynchronize();
+	hipDeviceSynchronize();
 
 	// these need to be computed the first time in order to compute time step
 	std::cout << "Starting..." << std::endl;
@@ -619,7 +621,7 @@
 	sdkCreateTimer(&timer);
 	sdkStartTimer(&timer);
 
-	cudaError_t error;
+	hipError_t error;
 	// Begin iterations
 	for(int i = 0; i < iterations; i++)
 	  {
@@ -627,10 +629,10 @@
 		
 	    // for the first iteration we compute the time step
 	    compute_step_factor(nelr, variables, areas, step_factors);
-	    error = cudaGetLastError();
-	    if (error != cudaSuccess) 
+	    error = hipGetLastError();
+	    if (error != hipSuccess) 
 	      {
-		fprintf(stderr,"GPUassert: %s compute_step_factor failed\n", cudaGetErrorString(error));
+		fprintf(stderr,"GPUassert: %s compute_step_factor failed\n", hipGetErrorString(error));
 		exit(-1);
 	      }
 
@@ -638,33 +640,33 @@
 	    for(int j = 0; j < RK; j++)
 	      {
 		compute_flux_contributions(nelr, variables, fc_momentum_x, fc_momentum_y, fc_momentum_z, fc_density_energy);
-		error = cudaGetLastError();
-		if (error != cudaSuccess) 
+		error = hipGetLastError();
+		if (error != hipSuccess) 
 		  {
-		    fprintf(stderr,"GPUassert: %s compute_flux_contributions failed\n", cudaGetErrorString(error));
+		    fprintf(stderr,"GPUassert: %s compute_flux_contributions failed\n", hipGetErrorString(error));
 		    exit(-1);
 		  }
 
 		compute_flux(nelr, elements_surrounding_elements, normals, variables, fc_momentum_x, fc_momentum_y, fc_momentum_z, fc_density_energy, fluxes);
-		error = cudaGetLastError();
-		if (error != cudaSuccess) 
+		error = hipGetLastError();
+		if (error != hipSuccess) 
 		  {
-		    fprintf(stderr,"GPUassert: %s compute_flux failed\n", cudaGetErrorString(error));
+		    fprintf(stderr,"GPUassert: %s compute_flux failed\n", hipGetErrorString(error));
 		    exit(-1);
 		  }
 
 		time_step(j, nelr, old_variables, variables, step_factors, fluxes);
-		error = cudaGetLastError();
-		if (error != cudaSuccess) 
+		error = hipGetLastError();
+		if (error != hipSuccess) 
 		  {
-		    fprintf(stderr,"GPUassert: %s time_step\n", cudaGetErrorString(error));
+		    fprintf(stderr,"GPUassert: %s time_step\n", hipGetErrorString(error));
 		    exit(-1);
 		  }
 
 	      }
 	  }
 
-	cudaThreadSynchronize();
+	hipDeviceSynchronize();
 	sdkStopTimer(&timer);  
 
 	std::cout  << (sdkGetAverageTimerValue(&timer)/1000.0)  / iterations << " seconds per iteration" << std::endl;
diff -ruN rodinia_3.1/cuda/cfd/pre_euler3d_double.cu rodinia_backup/cuda/cfd/pre_euler3d_double.cu
--- rodinia_3.1/cuda/cfd/pre_euler3d_double.cu	2015-12-11 07:46:05.000000000 -0800
+++ rodinia_backup/cuda/cfd/pre_euler3d_double.cu	2024-09-26 12:55:55.251231531 -0700
@@ -1,19 +1,13 @@
 // Copyright 2009, Andrew Corrigan, acorriga@gmu.edu
 // This code is from the AIAA-2009-4001 paper
 
-#include <helper_cuda.h>
-#include <helper_timer.h>
+
+#include <hip/hip_runtime.h>
+#include "helper_cuda.h"
+#include "helper_timer.h"
 
 #include <iostream>
 #include <fstream>
-
-#if CUDART_VERSION < 3000
-struct double3
-{
-	double x, y, z;
-};
-#endif
-
 /*
  * Options 
  * 
@@ -54,32 +48,32 @@
 T* alloc(int N)
 {
 	T* t;
-	checkCudaErrors(cudaMalloc((void**)&t, sizeof(T)*N));
+	checkCudaErrors(hipMalloc((void**)&t, sizeof(T)*N));
 	return t;
 }
 
 template <typename T>
 void dealloc(T* array)
 {
-	checkCudaErrors(cudaFree((void*)array));
+	checkCudaErrors(hipFree((void*)array));
 }
 
 template <typename T>
 void copy(T* dst, T* src, int N)
 {
-	checkCudaErrors(cudaMemcpy((void*)dst, (void*)src, N*sizeof(T), cudaMemcpyDeviceToDevice));
+	checkCudaErrors(hipMemcpy((void*)dst, (void*)src, N*sizeof(T), hipMemcpyDeviceToDevice));
 }
 
 template <typename T>
 void upload(T* dst, T* src, int N)
 {
-	checkCudaErrors(cudaMemcpy((void*)dst, (void*)src, N*sizeof(T), cudaMemcpyHostToDevice));
+	checkCudaErrors(hipMemcpy((void*)dst, (void*)src, N*sizeof(T), hipMemcpyHostToDevice));
 }
 
 template <typename T>
 void download(T* dst, T* src, int N)
 {
-	checkCudaErrors(cudaMemcpy((void*)dst, (void*)src, N*sizeof(T), cudaMemcpyDeviceToHost));
+	checkCudaErrors(hipMemcpy((void*)dst, (void*)src, N*sizeof(T), hipMemcpyDeviceToHost));
 }
 
 void dump(double* variables, int nel, int nelr)
@@ -131,12 +125,12 @@
 void initialize_variables(int nelr, double* variables)
 {
 	dim3 Dg(nelr / block_length), Db(block_length);
-	cudaError_t error;
+	hipError_t error;
 	cuda_initialize_variables<<<Dg, Db>>>(nelr, variables);
-	error = cudaGetLastError();
-		    if (error != cudaSuccess) 
+	error = hipGetLastError();
+		    if (error != hipSuccess) 
 		      {
-			fprintf(stderr,"GPUassert: %s initialize variables \n", cudaGetErrorString(error));
+			fprintf(stderr,"GPUassert: %s initialize variables \n", hipGetErrorString(error));
 			exit(-1);
 		      }
 
@@ -207,12 +201,12 @@
 }
 void compute_step_factor(int nelr, double* variables, double* areas, double* step_factors)
 {
-  	cudaError_t error;
+  	hipError_t error;
 	dim3 Dg(nelr / block_length), Db(block_length);
-	cuda_compute_step_factor<<<Dg, Db>>>(nelr, variables, areas, step_factors);			    error = cudaGetLastError();
-		    if (error != cudaSuccess) 
+	cuda_compute_step_factor<<<Dg, Db>>>(nelr, variables, areas, step_factors);			    error = hipGetLastError();
+		    if (error != hipSuccess) 
 		      {
-			fprintf(stderr,"GPUassert: %s compute_step_factor failed\n", cudaGetErrorString(error));
+			fprintf(stderr,"GPUassert: %s compute_step_factor failed\n", hipGetErrorString(error));
 			exit(-1);
 		      }
 	
@@ -261,12 +255,12 @@
 void compute_flux_contributions(int nelr, double* variables, double* fc_momentum_x, double* fc_momentum_y, double* fc_momentum_z, double* fc_density_energy)
 {
 	dim3 Dg(nelr / block_length), Db(block_length);
-	cudaError_t error;
+	hipError_t error;
 	cuda_compute_flux_contributions<<<Dg,Db>>>(nelr, variables, fc_momentum_x, fc_momentum_y, fc_momentum_z, fc_density_energy);
-		    error = cudaGetLastError();
-		    if (error != cudaSuccess) 
+		    error = hipGetLastError();
+		    if (error != hipSuccess) 
 		      {
-			fprintf(stderr,"GPUassert: %s compute_flux_contribution failed\n", cudaGetErrorString(error));
+			fprintf(stderr,"GPUassert: %s compute_flux_contribution failed\n", hipGetErrorString(error));
 			exit(-1);
 		      }
 
@@ -441,12 +435,12 @@
 void compute_flux(int nelr, int* elements_surrounding_elements, double* normals, double* variables, double* fc_momentum_x, double* fc_momentum_y, double* fc_momentum_z, double* fc_density_energy, double* fluxes)
 {
 	dim3 Dg(nelr / block_length), Db(block_length);
-	cudaError_t error;
+	hipError_t error;
 	cuda_compute_flux<<<Dg,Db>>>(nelr, elements_surrounding_elements, normals, variables, fc_momentum_x, fc_momentum_y, fc_momentum_z, fc_density_energy, fluxes);
-		    error = cudaGetLastError();
-		    if (error != cudaSuccess) 
+		    error = hipGetLastError();
+		    if (error != hipSuccess) 
 		      {
-			fprintf(stderr,"GPUassert: %s compute_flux failed\n", cudaGetErrorString(error));
+			fprintf(stderr,"GPUassert: %s compute_flux failed\n", hipGetErrorString(error));
 			exit(-1);
 		      }
 
@@ -467,13 +461,13 @@
 }
 void time_step(int j, int nelr, double* old_variables, double* variables, double* step_factors, double* fluxes)
 {
-	cudaError_t error;
+	hipError_t error;
 	dim3 Dg(nelr / block_length), Db(block_length);
 	cuda_time_step<<<Dg,Db>>>(j, nelr, old_variables, variables, step_factors, fluxes);
-		    error = cudaGetLastError();
-		    if (error != cudaSuccess) 
+		    error = hipGetLastError();
+		    if (error != hipSuccess) 
 		      {
-			fprintf(stderr,"GPUassert: %s update failed\n", cudaGetErrorString(error));
+			fprintf(stderr,"GPUassert: %s update failed\n", hipGetErrorString(error));
 			exit(-1);
 		      }
 
@@ -493,12 +487,12 @@
 	}
 	const char* data_file_name = argv[1];
 	
-	cudaDeviceProp prop;
+	hipDeviceProp_t prop;
 	int dev;
 	
-	checkCudaErrors(cudaSetDevice(0));
-	checkCudaErrors(cudaGetDevice(&dev));
-	checkCudaErrors(cudaGetDeviceProperties(&prop, dev));
+	checkCudaErrors(hipSetDevice(0));
+	checkCudaErrors(hipGetDevice(&dev));
+	checkCudaErrors(hipGetDeviceProperties(&prop, dev));
 	
 	printf("Name:                     %s\n", prop.name);
 
@@ -535,12 +529,12 @@
 		compute_flux_contribution(h_ff_variable[VAR_DENSITY], h_ff_momentum, h_ff_variable[VAR_DENSITY_ENERGY], ff_pressure, ff_velocity, h_ff_fc_momentum_x, h_ff_fc_momentum_y, h_ff_fc_momentum_z, h_ff_fc_density_energy);
 
 		// copy far field conditions to the gpu
-		checkCudaErrors( cudaMemcpyToSymbol(ff_variable,          h_ff_variable,          NVAR*sizeof(double)) );
-		checkCudaErrors( cudaMemcpyToSymbol(ff_fc_momentum_x, &h_ff_fc_momentum_x, sizeof(double3)) );
-		checkCudaErrors( cudaMemcpyToSymbol(ff_fc_momentum_y, &h_ff_fc_momentum_y, sizeof(double3)) );
-		checkCudaErrors( cudaMemcpyToSymbol(ff_fc_momentum_z, &h_ff_fc_momentum_z, sizeof(double3)) );
+		checkCudaErrors( hipMemcpyToSymbol(HIP_SYMBOL(ff_variable),          h_ff_variable,          NVAR*sizeof(double)) );
+		checkCudaErrors( hipMemcpyToSymbol(HIP_SYMBOL(ff_fc_momentum_x), &h_ff_fc_momentum_x, sizeof(double3)) );
+		checkCudaErrors( hipMemcpyToSymbol(HIP_SYMBOL(ff_fc_momentum_y), &h_ff_fc_momentum_y, sizeof(double3)) );
+		checkCudaErrors( hipMemcpyToSymbol(HIP_SYMBOL(ff_fc_momentum_z), &h_ff_fc_momentum_z, sizeof(double3)) );
 		
-		checkCudaErrors( cudaMemcpyToSymbol(ff_fc_density_energy, &h_ff_fc_density_energy, sizeof(double3)) );		
+		checkCudaErrors( hipMemcpyToSymbol(HIP_SYMBOL(ff_fc_density_energy), &h_ff_fc_density_energy, sizeof(double3)) );		
 	}
 	int nel;
 	int nelr;
@@ -620,9 +614,9 @@
 	// make sure all memory is doublely allocated before we start timing
 	initialize_variables(nelr, old_variables);
 	initialize_variables(nelr, fluxes);
-	cudaMemset( (void*) step_factors, 0, sizeof(double)*nelr );
+	hipMemset( (void*) step_factors, 0, sizeof(double)*nelr );
 	// make sure CUDA isn't still doing something before we start timing
-	cudaThreadSynchronize();
+	hipDeviceSynchronize();
 
 	// these need to be computed the first time in order to compute time step
 	std::cout << "Starting..." << std::endl;
@@ -647,7 +641,7 @@
 		}
 	}
 
-	cudaThreadSynchronize();
+	hipDeviceSynchronize();
 	sdkStopTimer(&timer);  
 
 	std::cout  << (sdkGetAverageTimerValue(&timer)/1000.0)  / iterations << " seconds per iteration" << std::endl;
diff -ruN rodinia_3.1/cuda/cfd/setup.ini rodinia_backup/cuda/cfd/setup.ini
--- rodinia_3.1/cuda/cfd/setup.ini	1969-12-31 16:00:00.000000000 -0800
+++ rodinia_backup/cuda/cfd/setup.ini	2024-09-26 12:55:55.251231531 -0700
@@ -0,0 +1,6 @@
+[DEFAULT]
+compile = make
+run = ./euler3d fvcorr.domn.097K;./euler3d .fvcorr.domn.193K;./euler3d missile.domn.0.2M  
+use_clang_plugin = true
+clang_convert = make INJECT_CODE_CLANG=1
+clean = make clean
\ No newline at end of file
diff -ruN rodinia_3.1/cuda/dwt2d/autorun.sh rodinia_backup/cuda/dwt2d/autorun.sh
--- rodinia_3.1/cuda/dwt2d/autorun.sh	2015-12-11 07:46:14.000000000 -0800
+++ rodinia_backup/cuda/dwt2d/autorun.sh	1969-12-31 16:00:00.000000000 -0800
@@ -1 +0,0 @@
-./dwt RGB_color_solid_cube_1.bmp -d 1024x1024 -f -5
\ No newline at end of file
diff -ruN rodinia_3.1/cuda/dwt2d/common.h rodinia_backup/cuda/dwt2d/common.h
--- rodinia_3.1/cuda/dwt2d/common.h	2015-12-11 07:46:14.000000000 -0800
+++ rodinia_backup/cuda/dwt2d/common.h	1969-12-31 16:00:00.000000000 -0800
@@ -1,62 +0,0 @@
-/* 
- * Copyright (c) 2009, Jiri Matela
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- *     * Redistributions of source code must retain the above copyright
- *       notice, this list of conditions and the following disclaimer.
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- */
-
-#ifndef _COMMON_H
-#define _COMMON_H
-
-//24-bit multiplication is faster on G80,
-//but we must be sure to multiply integers
-//only within [-8M, 8M - 1] range
-#define IMUL(a, b) __mul24(a, b)
-
-////cuda timing macros
-//#define CTIMERINIT  cudaEvent_t cstart, cstop; \
-//                    cudaEventCreate(&cstart); \
-//                    cudaEventCreate(&cstop); \
-//                    float elapsedTime
-//#define CTIMERSTART(cstart) cudaEventRecord(cstart,0)
-//#define CTIMERSTOP(cstop) cudaEventRecord(cstop,0); \
-//                          cudaEventSynchronize(cstop); \
-//                          cudaEventElapsedTime(&elapsedTime, cstart, cstop)
-
-//divide and round up macro
-#define DIVANDRND(a, b) ((((a) % (b)) != 0) ? ((a) / (b) + 1) : ((a) / (b)))
-
-#  define cudaCheckError( msg ) {                                            \
-    cudaError_t err = cudaGetLastError();                                    \
-    if( cudaSuccess != err) {                                                \
-        fprintf(stderr, "%s: %i: %s: %s.\n",                                 \
-                __FILE__, __LINE__, msg, cudaGetErrorString( err) );         \
-        exit(-1);                                                            \
-    } }
-
-#  define cudaCheckAsyncError( msg ) {                                       \
-    cudaThreadSynchronize();                                                 \
-    cudaCheckError( msg );                                                   \
-    }
-
-
-#endif
diff -ruN rodinia_3.1/cuda/dwt2d/components.cu rodinia_backup/cuda/dwt2d/components.cu
--- rodinia_3.1/cuda/dwt2d/components.cu	2015-12-11 07:46:14.000000000 -0800
+++ rodinia_backup/cuda/dwt2d/components.cu	1969-12-31 16:00:00.000000000 -0800
@@ -1,193 +0,0 @@
-/* 
- * Copyright (c) 2009, Jiri Matela
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- *     * Redistributions of source code must retain the above copyright
- *       notice, this list of conditions and the following disclaimer.
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- */
- 
-#include <unistd.h>
-#include <error.h>
-#include <stdio.h>
-#include <stdlib.h>
-#include <errno.h>
-#include <assert.h>
-
-#include "components.h"
-#include "common.h"
-
-#define THREADS 256
-
-/* Store 3 RGB float components */
-__device__ void storeComponents(float *d_r, float *d_g, float *d_b, float r, float g, float b, int pos)
-{
-    d_r[pos] = (r/255.0f) - 0.5f;
-    d_g[pos] = (g/255.0f) - 0.5f;
-    d_b[pos] = (b/255.0f) - 0.5f;
-}
-
-/* Store 3 RGB intege components */
-__device__ void storeComponents(int *d_r, int *d_g, int *d_b, int r, int g, int b, int pos)
-{
-    d_r[pos] = r - 128;
-    d_g[pos] = g - 128;
-    d_b[pos] = b - 128;
-} 
-
-/* Store float component */
-__device__ void storeComponent(float *d_c, float c, int pos)
-{
-    d_c[pos] = (c/255.0f) - 0.5f;
-}
-
-/* Store integer component */
-__device__ void storeComponent(int *d_c, int c, int pos)
-{
-    d_c[pos] = c - 128;
-}
-
-/* Copy img src data into three separated component buffers */
-template<typename T>
-__global__ void c_CopySrcToComponents(T *d_r, T *d_g, T *d_b, 
-                                  unsigned char * d_src, 
-                                  int pixels)
-{
-    int x  = threadIdx.x;
-    int gX = blockDim.x*blockIdx.x;
-
-    __shared__ unsigned char sData[THREADS*3];
-
-    /* Copy data to shared mem by 4bytes 
-       other checks are not necessary, since 
-       d_src buffer is aligned to sharedDataSize */
-    if ( (x*4) < THREADS*3 ) {
-        float *s = (float *)d_src;
-        float *d = (float *)sData;
-        d[x] = s[((gX*3)>>2) + x];
-    }
-    __syncthreads();
-
-    T r, g, b;
-
-    int offset = x*3;
-    r = (T)(sData[offset]);
-    g = (T)(sData[offset+1]);
-    b = (T)(sData[offset+2]);
-
-    int globalOutputPosition = gX + x;
-    if (globalOutputPosition < pixels) {
-        storeComponents(d_r, d_g, d_b, r, g, b, globalOutputPosition);
-    }
-}
-
-/* Copy img src data into three separated component buffers */
-template<typename T>
-__global__ void c_CopySrcToComponent(T *d_c, unsigned char * d_src, int pixels)
-{
-    int x  = threadIdx.x;
-    int gX = blockDim.x*blockIdx.x;
-
-    __shared__ unsigned char sData[THREADS];
-
-    /* Copy data to shared mem by 4bytes 
-       other checks are not necessary, since 
-       d_src buffer is aligned to sharedDataSize */
-    if ( (x*4) < THREADS) {
-        float *s = (float *)d_src;
-        float *d = (float *)sData;
-        d[x] = s[(gX>>2) + x];
-    }
-    __syncthreads();
-
-    T c;
-
-    c = (T)(sData[x]);
-
-    int globalOutputPosition = gX + x;
-    if (globalOutputPosition < pixels) {
-        storeComponent(d_c, c, globalOutputPosition);
-    }
-}
-
-
-/* Separate compoents of 8bit RGB source image */
-template<typename T>
-void rgbToComponents(T *d_r, T *d_g, T *d_b, unsigned char * src, int width, int height)
-{
-    unsigned char * d_src;
-    int pixels      = width*height;
-    int alignedSize =  DIVANDRND(width*height, THREADS) * THREADS * 3; //aligned to thread block size -- THREADS
-
-    /* Alloc d_src buffer */
-    cudaMalloc((void **)&d_src, alignedSize);
-    cudaCheckAsyncError("Cuda malloc")
-    cudaMemset(d_src, 0, alignedSize);
-
-    /* Copy data to device */
-    cudaMemcpy(d_src, src, pixels*3, cudaMemcpyHostToDevice);
-    cudaCheckError("Copy data to device")
-
-    /* Kernel */
-    dim3 threads(THREADS);
-    dim3 grid(alignedSize/(THREADS*3));
-    assert(alignedSize%(THREADS*3) == 0);
-    c_CopySrcToComponents<<<grid, threads>>>(d_r, d_g, d_b, d_src, pixels);
-    cudaCheckAsyncError("CopySrcToComponents kernel")
-
-    /* Free Memory */
-    cudaFree(d_src);
-    cudaCheckAsyncError("Free memory")
-}
-template void rgbToComponents<float>(float *d_r, float *d_g, float *d_b, unsigned char * src, int width, int height);
-template void rgbToComponents<int>(int *d_r, int *d_g, int *d_b, unsigned char * src, int width, int height);
-
-
-/* Copy a 8bit source image data into a color compoment of type T */
-template<typename T>
-void bwToComponent(T *d_c, unsigned char * src, int width, int height)
-{
-    unsigned char * d_src;
-    int pixels      = width*height;
-    int alignedSize =  DIVANDRND(pixels, THREADS) * THREADS; //aligned to thread block size -- THREADS
-
-    /* Alloc d_src buffer */
-    cudaMalloc((void **)&d_src, alignedSize);
-    cudaCheckAsyncError("Cuda malloc")
-    cudaMemset(d_src, 0, alignedSize);
-
-    /* Copy data to device */
-    cudaMemcpy(d_src, src, pixels, cudaMemcpyHostToDevice);
-    cudaCheckError("Copy data to device")
-
-    /* Kernel */
-    dim3 threads(THREADS);
-    dim3 grid(alignedSize/(THREADS));
-    assert(alignedSize%(THREADS) == 0);
-    c_CopySrcToComponent<<<grid, threads>>>(d_c, d_src, pixels);
-    cudaCheckAsyncError("CopySrcToComponent kernel")
-
-    /* Free Memory */
-    cudaFree(d_src);
-    cudaCheckAsyncError("Free memory")
-}
-
-template void bwToComponent<float>(float *d_c, unsigned char *src, int width, int height);
-template void bwToComponent<int>(int *d_c, unsigned char *src, int width, int height);
diff -ruN rodinia_3.1/cuda/dwt2d/components.h rodinia_backup/cuda/dwt2d/components.h
--- rodinia_3.1/cuda/dwt2d/components.h	2015-12-11 07:46:14.000000000 -0800
+++ rodinia_backup/cuda/dwt2d/components.h	1969-12-31 16:00:00.000000000 -0800
@@ -1,38 +0,0 @@
-/* 
- * Copyright (c) 2009, Jiri Matela
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- *     * Redistributions of source code must retain the above copyright
- *       notice, this list of conditions and the following disclaimer.
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- */
-
-#ifndef _COMPONENTS_H
-#define _COMPONENTS_H
-
-/* Separate compoents of source 8bit RGB image */
-template<typename T>
-void rgbToComponents(T *d_r, T *d_g, T *d_b, unsigned char * src, int width, int height);
-
-/* Copy a 8bit source image data into a color compoment of type T */
-template<typename T>
-void bwToComponent(T *d_c, unsigned char * src, int width, int height);
-
-#endif
diff -ruN rodinia_3.1/cuda/dwt2d/dwt.cu rodinia_backup/cuda/dwt2d/dwt.cu
--- rodinia_3.1/cuda/dwt2d/dwt.cu	2015-12-11 07:46:14.000000000 -0800
+++ rodinia_backup/cuda/dwt2d/dwt.cu	1969-12-31 16:00:00.000000000 -0800
@@ -1,359 +0,0 @@
-/* 
- * Copyright (c) 2009, Jiri Matela
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- *     * Redistributions of source code must retain the above copyright
- *       notice, this list of conditions and the following disclaimer.
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- */
-
-#include <stdio.h>
-#include <fcntl.h>
-#include <assert.h>
-#include <errno.h>
-#include <sys/time.h>
-#include <unistd.h>
-#include <error.h>
-#include "dwt_cuda/dwt.h"
-#include "dwt_cuda/common.h"
-#include "dwt.h"
-#include "common.h"
-
-inline void fdwt(float *in, float *out, int width, int height, int levels)
-{
-        dwt_cuda::fdwt97(in, out, width, height, levels);
-}
-/*
-inline void fdwt(float *in, float *out, int width, int height, int levels, float *diffOut)
-{
-        dwt_cuda::fdwt97(in, out, width, height, levels, diffOut);
-}
-*/
-
-
-
-inline void fdwt(int *in, int *out, int width, int height, int levels)
-{
-        dwt_cuda::fdwt53(in, out, width, height, levels);
-}
-/*
-inline void fdwt(int *in, int *out, int width, int height, int levels, int *diffOut)
-{
-        dwt_cuda::fdwt53(in, out, width, height, levels, diffOut);
-}
-*/
-
-
-
-inline void rdwt(float *in, float *out, int width, int height, int levels)
-{
-        dwt_cuda::rdwt97(in, out, width, height, levels);
-}
-
-inline void rdwt(int *in, int *out, int width, int height, int levels)
-{
-        dwt_cuda::rdwt53(in, out, width, height, levels);
-}
-
-template<typename T>
-int nStage2dDWT(T * in, T * out, T * backup, int pixWidth, int pixHeight, int stages, bool forward)
-{
-    printf("\n*** %d stages of 2D forward DWT:\n", stages);
-    
-    /* create backup of input, because each test iteration overwrites it */
-    const int size = pixHeight * pixWidth * sizeof(T);
-    cudaMemcpy(backup, in, size, cudaMemcpyDeviceToDevice);
-    cudaCheckError("Memcopy device to device");
-    
-    /* Measure time of individual levels. */
-    if(forward)
-        fdwt(in, out, pixWidth, pixHeight, stages);
-    else
-        rdwt(in, out, pixWidth, pixHeight, stages);
-    
-    // Measure overall time of DWT. 
-/*    #ifdef GPU_DWT_TESTING_1
-	
-    dwt_cuda::CudaDWTTester tester;
-    for(int i = tester.getNumIterations(); i--; ) {
-        // Recover input and measure one overall DWT run. 
-        cudaMemcpy(in, backup, size, cudaMemcpyDeviceToDevice); 
-        cudaCheckError("Memcopy device to device");
-        tester.beginTestIteration();
-        if(forward)
-            fdwt(in, out, pixWidth, pixHeight, stages);
-        else
-            rdwt(in, out, pixWidth, pixHeight, stages);
-        tester.endTestIteration();
-    }
-    tester.showPerformance("   Overall DWT", pixWidth, pixHeight);
-    #endif  // GPU_DWT_TESTING 
-    
-    cudaCheckAsyncError("DWT Kernel calls");
-*/    return 0;
-}
-template int nStage2dDWT<float>(float*, float*, float*, int, int, int, bool);
-template int nStage2dDWT<int>(int*, int*, int*, int, int, int, bool);
-
-
-
-/*
-template<typename T>
-int nStage2dDWT(T * in, T * out, T * backup, int pixWidth, int pixHeight, int stages, bool forward, T * diffOut)
-{
-    printf("*** %d stages of 2D forward DWT:\n", stages);
-    
-    // create backup of input, because each test iteration overwrites it 
-    const int size = pixHeight * pixWidth * sizeof(T);
-    cudaMemcpy(backup, in, size, cudaMemcpyDeviceToDevice);
-    cudaCheckError("Memcopy device to device");
-    
-    // Measure time of individual levels. 
-    if(forward)
-        fdwt(in, out, pixWidth, pixHeight, stages, diffOut);
-    else
-        rdwt(in, out, pixWidth, pixHeight, stages);
-    
-    // Measure overall time of DWT. 
-    #ifdef GPU_DWT_TESTING_1
-	
-    dwt_cuda::CudaDWTTester tester;
-    for(int i = tester.getNumIterations(); i--; ) {
-        // Recover input and measure one overall DWT run. 
-        cudaMemcpy(in, backup, size, cudaMemcpyDeviceToDevice); 
-        cudaCheckError("Memcopy device to device");
-        tester.beginTestIteration();
-        if(forward)
-            fdwt(in, out, pixWidth, pixHeight, stages, diffOut);
-        else
-            rdwt(in, out, pixWidth, pixHeight, stages);
-        tester.endTestIteration();
-    }
-    tester.showPerformance("   Overall DWT", pixWidth, pixHeight);
-    #endif  // GPU_DWT_TESTING 
-    
-    cudaCheckAsyncError("DWT Kernel calls");
-    return 0;
-}
-template int nStage2dDWT<float>(float*, float*, float*, int, int, int, bool, float*);
-template int nStage2dDWT<int>(int*, int*, int*, int, int, int, bool, int*);
-
-*/
-
-void samplesToChar(unsigned char * dst, float * src, int samplesNum)
-{
-    int i;
-
-    for(i = 0; i < samplesNum; i++) {
-        float r = (src[i]+0.5f) * 255;
-        if (r > 255) r = 255; 
-        if (r < 0)   r = 0; 
-        dst[i] = (unsigned char)r;
-    }
-}
-
-void samplesToChar(unsigned char * dst, int * src, int samplesNum)
-{
-    int i;
-
-    for(i = 0; i < samplesNum; i++) {
-        int r = src[i]+128;
-        if (r > 255) r = 255;
-        if (r < 0)   r = 0; 
-        dst[i] = (unsigned char)r;
-    }
-}
-
-///* Write output linear orderd*/
-template<typename T>
-int writeLinear(T *component_cuda, int pixWidth, int pixHeight,
-                const char * filename, const char * suffix)
-{
-    unsigned char * result;
-    T *gpu_output;
-    int i;
-    int size;
-    int samplesNum = pixWidth*pixHeight;
-
-    size = samplesNum*sizeof(T);
-    cudaMallocHost((void **)&gpu_output, size);
-    cudaCheckError("Malloc host");
-    memset(gpu_output, 0, size);
-    result = (unsigned char *)malloc(samplesNum);
-    cudaMemcpy(gpu_output, component_cuda, size, cudaMemcpyDeviceToHost);
-    cudaCheckError("Memcopy device to host");
-
-    /* T to char */
-    samplesToChar(result, gpu_output, samplesNum);
-
-    /* Write component */
-    char outfile[strlen(filename)+strlen(suffix)];
-    strcpy(outfile, filename);
-    strcpy(outfile+strlen(filename), suffix);
-    i = open(outfile, O_CREAT|O_WRONLY, 0644);
-    if (i == -1) {
-        error(0,errno,"cannot access %s", outfile);
-        return -1;
-    }
-    printf("\nWriting to %s (%d x %d)\n", outfile, pixWidth, pixHeight);
-    ssize_t x ;
-    x = write(i, result, samplesNum);
-    close(i);
-
-    /* Clean up */
-    cudaFreeHost(gpu_output);
-    cudaCheckError("Cuda free host memory");
-    free(result);
-    if(x == 0) return 1;
-    return 0;
-}
-template int writeLinear<float>(float *component_cuda, int pixWidth, int pixHeight, const char * filename, const char * suffix); 
-template int writeLinear<int>(int *component_cuda, int pixWidth, int pixHeight, const char * filename, const char * suffix); 
-
-/* Write output visual ordered */
-template<typename T>
-int writeNStage2DDWT(T *component_cuda, int pixWidth, int pixHeight, 
-                     int stages, const char * filename, const char * suffix) 
-{
-    struct band {
-        int dimX; 
-        int dimY;
-    };
-    struct dimensions {
-        struct band LL;
-        struct band HL;
-        struct band LH;
-        struct band HH;
-    };
-
-    unsigned char * result;
-    T *src, *dst;
-    int i,s;
-    int size;
-    int offset;
-    int yOffset;
-    int samplesNum = pixWidth*pixHeight;
-    struct dimensions * bandDims;
-
-    bandDims = (struct dimensions *)malloc(stages * sizeof(struct dimensions));
-
-    bandDims[0].LL.dimX = DIVANDRND(pixWidth,2);
-    bandDims[0].LL.dimY = DIVANDRND(pixHeight,2);
-    bandDims[0].HL.dimX = pixWidth - bandDims[0].LL.dimX;
-    bandDims[0].HL.dimY = bandDims[0].LL.dimY;
-    bandDims[0].LH.dimX = bandDims[0].LL.dimX;
-    bandDims[0].LH.dimY = pixHeight - bandDims[0].LL.dimY;
-    bandDims[0].HH.dimX = bandDims[0].HL.dimX;
-    bandDims[0].HH.dimY = bandDims[0].LH.dimY;
-
-    for (i = 1; i < stages; i++) {
-        bandDims[i].LL.dimX = DIVANDRND(bandDims[i-1].LL.dimX,2);
-        bandDims[i].LL.dimY = DIVANDRND(bandDims[i-1].LL.dimY,2);
-        bandDims[i].HL.dimX = bandDims[i-1].LL.dimX - bandDims[i].LL.dimX;
-        bandDims[i].HL.dimY = bandDims[i].LL.dimY;
-        bandDims[i].LH.dimX = bandDims[i].LL.dimX;
-        bandDims[i].LH.dimY = bandDims[i-1].LL.dimY - bandDims[i].LL.dimY;
-        bandDims[i].HH.dimX = bandDims[i].HL.dimX;
-        bandDims[i].HH.dimY = bandDims[i].LH.dimY;
-    }
-
-#if 0
-    printf("Original image pixWidth x pixHeight: %d x %d\n", pixWidth, pixHeight);
-    for (i = 0; i < stages; i++) {
-        printf("Stage %d: LL: pixWidth x pixHeight: %d x %d\n", i, bandDims[i].LL.dimX, bandDims[i].LL.dimY);
-        printf("Stage %d: HL: pixWidth x pixHeight: %d x %d\n", i, bandDims[i].HL.dimX, bandDims[i].HL.dimY);
-        printf("Stage %d: LH: pixWidth x pixHeight: %d x %d\n", i, bandDims[i].LH.dimX, bandDims[i].LH.dimY);
-        printf("Stage %d: HH: pixWidth x pixHeight: %d x %d\n", i, bandDims[i].HH.dimX, bandDims[i].HH.dimY);
-    }
-#endif
-    
-    size = samplesNum*sizeof(T);
-    cudaMallocHost((void **)&src, size);
-    cudaCheckError("Malloc host");
-    dst = (T*)malloc(size);
-    memset(src, 0, size);
-    memset(dst, 0, size);
-    result = (unsigned char *)malloc(samplesNum);
-    cudaMemcpy(src, component_cuda, size, cudaMemcpyDeviceToHost);
-    cudaCheckError("Memcopy device to host");
-
-    // LL Band
-    size = bandDims[stages-1].LL.dimX * sizeof(T);
-    for (i = 0; i < bandDims[stages-1].LL.dimY; i++) {
-        memcpy(dst+i*pixWidth, src+i*bandDims[stages-1].LL.dimX, size);
-    }
-
-    for (s = stages - 1; s >= 0; s--) {
-        // HL Band
-        size = bandDims[s].HL.dimX * sizeof(T);
-        offset = bandDims[s].LL.dimX * bandDims[s].LL.dimY;
-        for (i = 0; i < bandDims[s].HL.dimY; i++) {
-            memcpy(dst+i*pixWidth+bandDims[s].LL.dimX,
-                src+offset+i*bandDims[s].HL.dimX, 
-                size);
-        }
-
-        // LH band
-        size = bandDims[s].LH.dimX * sizeof(T);
-        offset += bandDims[s].HL.dimX * bandDims[s].HL.dimY;
-        yOffset = bandDims[s].LL.dimY;
-        for (i = 0; i < bandDims[s].HL.dimY; i++) {
-            memcpy(dst+(yOffset+i)*pixWidth,
-                src+offset+i*bandDims[s].LH.dimX, 
-                size);
-        }
-
-        //HH band
-        size = bandDims[s].HH.dimX * sizeof(T);
-        offset += bandDims[s].LH.dimX * bandDims[s].LH.dimY;
-        yOffset = bandDims[s].HL.dimY;
-        for (i = 0; i < bandDims[s].HH.dimY; i++) {
-            memcpy(dst+(yOffset+i)*pixWidth+bandDims[s].LH.dimX,
-                src+offset+i*bandDims[s].HH.dimX, 
-                size);
-        }
-    }
-
-    /* Write component */
-    samplesToChar(result, dst, samplesNum);
-
-    char outfile[strlen(filename)+strlen(suffix)];
-    strcpy(outfile, filename);
-    strcpy(outfile+strlen(filename), suffix);
-    i = open(outfile, O_CREAT|O_WRONLY, 0644);
-    if (i == -1) {
-        error(0,errno,"cannot access %s", outfile);
-        return -1;
-    }
-    printf("\nWriting to %s (%d x %d)\n", outfile, pixWidth, pixHeight);
-    ssize_t x;
-    x = write(i, result, samplesNum);
-    close(i);
-
-    cudaFreeHost(src);
-    cudaCheckError("Cuda free host memory");
-    free(dst);
-    free(result);
-    free(bandDims);
-    if (x == 0) return 1;
-    return 0;
-}
-template int writeNStage2DDWT<float>(float *component_cuda, int pixWidth, int pixHeight, int stages, const char * filename, const char * suffix); 
-template int writeNStage2DDWT<int>(int *component_cuda, int pixWidth, int pixHeight, int stages, const char * filename, const char * suffix); 
diff -ruN rodinia_3.1/cuda/dwt2d/dwt_cuda/common.cu rodinia_backup/cuda/dwt2d/dwt_cuda/common.cu
--- rodinia_3.1/cuda/dwt2d/dwt_cuda/common.cu	2015-12-11 07:46:15.000000000 -0800
+++ rodinia_backup/cuda/dwt2d/dwt_cuda/common.cu	1969-12-31 16:00:00.000000000 -0800
@@ -1,35 +0,0 @@
-///  
-/// @file    common.cu
-/// @author  Martin Jirman (207962@mail.muni.cz)
-/// @date    2011-01-20 14:37
-///
-/// Copyright (c) 2011 Martin Jirman
-/// All rights reserved.
-/// 
-/// Redistribution and use in source and binary forms, with or without
-/// modification, are permitted provided that the following conditions are met:
-/// 
-///     * Redistributions of source code must retain the above copyright
-///       notice, this list of conditions and the following disclaimer.
-///     * Redistributions in binary form must reproduce the above copyright
-///       notice, this list of conditions and the following disclaimer in the
-///       documentation and/or other materials provided with the distribution.
-/// 
-/// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-/// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-/// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-/// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
-/// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-/// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-/// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-/// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-/// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-/// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-/// POSSIBILITY OF SUCH DAMAGE.
-///
- 
-#include "common.h"
-
-namespace dwt_cuda {
-  bool CudaDWTTester::testRunning = false;
-}
diff -ruN rodinia_3.1/cuda/dwt2d/dwt_cuda/common.h rodinia_backup/cuda/dwt2d/dwt_cuda/common.h
--- rodinia_3.1/cuda/dwt2d/dwt_cuda/common.h	2015-12-11 07:46:14.000000000 -0800
+++ rodinia_backup/cuda/dwt2d/dwt_cuda/common.h	1969-12-31 16:00:00.000000000 -0800
@@ -1,254 +0,0 @@
-///  
-/// @file    common.h
-/// @author  Martin Jirman (207962@mail.muni.cz)
-/// @brief   Common stuff for all CUDA dwt functions.
-/// @date    2011-01-20 14:19
-///
-/// Copyright (c) 2011 Martin Jirman
-/// All rights reserved.
-/// 
-/// Redistribution and use in source and binary forms, with or without
-/// modification, are permitted provided that the following conditions are met:
-/// 
-///     * Redistributions of source code must retain the above copyright
-///       notice, this list of conditions and the following disclaimer.
-///     * Redistributions in binary form must reproduce the above copyright
-///       notice, this list of conditions and the following disclaimer in the
-///       documentation and/or other materials provided with the distribution.
-/// 
-/// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-/// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-/// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-/// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
-/// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-/// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-/// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-/// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-/// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-/// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-/// POSSIBILITY OF SUCH DAMAGE.
-///
-
-
-#ifndef DWT_COMMON_H
-#define	DWT_COMMON_H
-
-
-#include <cstdio>
-#include <algorithm>
-#include <vector>
-
-
-
-// compile time minimum macro
-#define CTMIN(a,b) (((a) < (b)) ? (a) : (b))
-
-
-
-// performance testing macros
-#if defined(GPU_DWT_TESTING)
-  #define PERF_BEGIN  \
-  { \
-    dwt_cuda::CudaDWTTester PERF_TESTER; \
-    for(int PERF_N = PERF_TESTER.getNumIterations(); PERF_N--; ) \
-    { \
-      PERF_TESTER.beginTestIteration();
-
-  #define PERF_END(PERF_NAME, PERF_W, PERF_H)  \
-      PERF_TESTER.endTestIteration(); \
-    } \
-    PERF_TESTER.showPerformance(PERF_NAME, PERF_W, PERF_H); \
-  }
-#else // GPU_DWT_TESTING
-  #define PERF_BEGIN
-  #define PERF_END(PERF_NAME, PERF_W, PERF_H)
-#endif // GPU_DWT_TESTING
-
-
-
-namespace dwt_cuda {
-  
-  
-  /// Divide and round up.
-  template <typename T>
-  __device__ __host__ inline T divRndUp(const T & n, const T & d) {
-    return (n / d) + ((n % d) ? 1 : 0);
-  }
-  
-  
-  // 9/7 forward DWT lifting schema coefficients
-  const float f97Predict1 = -1.586134342;   ///< forward 9/7 predict 1
-  const float f97Update1 = -0.05298011854;  ///< forward 9/7 update 1
-  const float f97Predict2 = 0.8829110762;   ///< forward 9/7 predict 2
-  const float f97Update2 = 0.4435068522;    ///< forward 9/7 update 2
-
-
-  // 9/7 reverse DWT lifting schema coefficients
-  const float r97update2 = -f97Update2;    ///< undo 9/7 update 2
-  const float r97predict2 = -f97Predict2;  ///< undo 9/7 predict 2
-  const float r97update1 = -f97Update1;    ///< undo 9/7 update 1
-  const float r97Predict1 = -f97Predict1;  ///< undo 9/7 predict 1
-  
-  // FDWT 9/7 scaling coefficients
-  const float scale97Mul = 1.23017410491400f;
-  const float scale97Div = 1.0 / scale97Mul;
-  
-  
-  // 5/3 forward DWT lifting schema coefficients
-  const float forward53Predict = -0.5f;   /// forward 5/3 predict
-  const float forward53Update = 0.25f;    /// forward 5/3 update
-  
-  // 5/3 forward DWT lifting schema coefficients
-  const float reverse53Update = -forward53Update;    /// undo 5/3 update
-  const float reverse53Predict = -forward53Predict;  /// undo 5/3 predict
-  
-  
-  
-  /// Functor which adds scaled sum of neighbors to given central pixel.
-  struct AddScaledSum {
-    const float scale;  // scale of neighbors
-    __device__ AddScaledSum(const float scale) : scale(scale) {}
-    __device__ void operator()(const float p, float & c, const float n) const {
-      c += scale * (p + n);
-    }
-  };
-  
-  
-  
-  /// Returns index ranging from 0 to num threads, such that first half
-  /// of threads get even indices and others get odd indices. Each thread
-  /// gets different index.
-  /// Example: (for 8 threads)   threadIdx.x:   0  1  2  3  4  5  6  7
-  ///                              parityIdx:   0  2  4  6  1  3  5  7
-  /// @tparam THREADS  total count of participating threads
-  /// @return parity-separated index of thread
-  template <int THREADS>
-  __device__ inline int parityIdx() {
-    return (threadIdx.x * 2) - (THREADS - 1) * (threadIdx.x / (THREADS / 2));
-  }
-  
-          
-  
-  /// size of shared memory
-  #if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 200)
-  const int SHM_SIZE = 48 * 1024;
-  #else
-  const int SHM_SIZE = 16 * 1024;
-  #endif
-  
-  
-  
-  /// Perrformance and return code tester.
-  class CudaDWTTester {
-  private:
-    static bool testRunning;    ///< true if any test is currently running
-    cudaEvent_t beginEvent;     ///< begin CUDA event
-    cudaEvent_t endEvent;       ///< end CUDA event
-    std::vector<float> times;   ///< collected times
-    const bool disabled;        ///< true if this object is disabled
-  public:
-    /// Checks CUDA related error.
-    /// @param status   return code to be checked
-    /// @param message  message to be shown if there was an error
-    /// @return true if there was no error, false otherwise
-    static bool check(const cudaError_t & status, const char * message) {
-      #if defined(GPU_DWT_TESTING)
-      if((!testRunning) && status != cudaSuccess) {
-        const char * errorString = cudaGetErrorString(status);
-        fprintf(stderr, "CUDA ERROR: '%s': %s\n", message, errorString);
-        fflush(stderr);
-        return false;
-      }
-      #endif // GPU_DWT_TESTING
-      return true;
-    }
-
-    /// Checks last kernel call for errors.
-    /// @param message  description of the kernel call
-    /// @return true if there was no error, false otherwise
-    static bool checkLastKernelCall(const char * message) {
-      #if defined(GPU_DWT_TESTING)
-      return testRunning ? true : check(cudaThreadSynchronize(), message);
-      #else // GPU_DWT_TESTING
-      return true;
-      #endif // GPU_DWT_TESTING
-    }
-    
-    /// Initializes DWT tester for time measurement
-    CudaDWTTester() : disabled(testRunning) {}
-    
-    /// Gets rpefered number of iterations
-    int getNumIterations() {
-      return disabled ? 1 : 31;
-    }
-    
-    /// Starts one test iteration.
-    void beginTestIteration() {
-      if(!disabled) {
-        cudaEventCreate(&beginEvent);
-        cudaEventCreate(&endEvent);
-        cudaEventRecord(beginEvent, 0);
-        testRunning = true;
-      }
-    }
-    
-    /// Ends on etest iteration.
-    void endTestIteration() {
-      if(!disabled) {
-        float time;
-        testRunning = false;
-        cudaEventRecord(endEvent, 0);
-        cudaEventSynchronize(endEvent);
-        cudaEventElapsedTime(&time, beginEvent, endEvent);
-        cudaEventDestroy(beginEvent);
-        cudaEventDestroy(endEvent);
-        times.push_back(time);
-      }
-    }
-    
-    /// Shows brief info about all iterations.
-    /// @param name   name of processing method
-    /// @param sizeX  width of processed image
-    /// @param sizeY  height of processed image
-    void showPerformance(const char * name, const int sizeX, const int sizeY) {
-      if(!disabled) {
-        // compute mean and median
-        std::sort(times.begin(), times.end());
-        double sum = 0;
-        for(int i = times.size(); i--; ) {
-          sum += times[i];
-        }
-        const double median = (times[times.size() / 2]
-                             + times[(times.size() - 1) / 2]) * 0.5f;
-        printf("  %s:   %7.3f ms (mean)   %7.3f ms (median)   %7.3f ms (max)  "
-               "(%d x %d)\n", name, (sum / times.size()), median, 
-               times[times.size() - 1], sizeX, sizeY);
-      }
-    }
-  };
-  
-  
-  
-  /// Simple cudaMemcpy wrapped in performance tester.
-  /// @param dest  destination bufer
-  /// @param src   source buffer
-  /// @param sx    width of copied image
-  /// @param sy    height of copied image
-  template <typename T>
-  inline void memCopy(T * const dest, const T * const src,
-                      const size_t sx, const size_t sy) {
-    cudaError_t status;
-    PERF_BEGIN
-    status = cudaMemcpy(dest, src, sx*sy*sizeof(T), cudaMemcpyDeviceToDevice);
-    PERF_END("        memcpy", sx, sy)
-    CudaDWTTester::check(status, "memcpy device > device");
-  }
-  
-  
-  
-} // end of namespace dwt_cuda
-
-
-
-#endif	// DWT_COMMON_CUDA_H
-
diff -ruN rodinia_3.1/cuda/dwt2d/dwt_cuda/dwt.h rodinia_backup/cuda/dwt2d/dwt_cuda/dwt.h
--- rodinia_3.1/cuda/dwt2d/dwt_cuda/dwt.h	2015-12-11 07:46:15.000000000 -0800
+++ rodinia_backup/cuda/dwt2d/dwt_cuda/dwt.h	1969-12-31 16:00:00.000000000 -0800
@@ -1,112 +0,0 @@
-/// 
-/// @file    dwt.h
-/// @author  Martin Jirman (207962@mail.muni.cz)
-/// @brief   Entry points for CUDA implementaion of 9/7 and 5/3 DWT.
-/// @date    2011-01-20 11:41
-///
-///
-///
-/// Copyright (c) 2011 Martin Jirman
-/// All rights reserved.
-/// 
-/// Redistribution and use in source and binary forms, with or without
-/// modification, are permitted provided that the following conditions are met:
-/// 
-///     * Redistributions of source code must retain the above copyright
-///       notice, this list of conditions and the following disclaimer.
-///     * Redistributions in binary form must reproduce the above copyright
-///       notice, this list of conditions and the following disclaimer in the
-///       documentation and/or other materials provided with the distribution.
-/// 
-/// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-/// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-/// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-/// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
-/// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-/// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-/// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-/// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-/// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-/// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-/// POSSIBILITY OF SUCH DAMAGE.
-///
-///
-///
-/// Following conditions are common for all four DWT functions:
-/// - Both input and output images are stored in GPU memory with no padding
-///   of lines or interleaving of pixels.
-/// - DWT coefficients are stored as follows: Each band is saved as one
-///   consecutive chunk (no padding/stride/interleaving). Deepest level bands
-///   (smallest ones) are stored first (at the beginning of the input/output
-///   buffers), less deep bands follow. There is no padding between stored
-///   bands in the buffer. Order of bands of the same level in the buffer is
-///   following: Low-low band (or deeper level subbands) is stored first.
-///   Vertical-low/horizontal-high band follows. Vertical-high/horizonal-low
-///   band is saved next and finally, the high-high band is saved. Out of all
-///   low-low bands, only th edeepest one is saved (right at the beginning of
-///   the buffer), others are replaced with deeper level subbands.
-/// - Input images of all functions won't be preserved (will be overwritten).
-/// - Input and output buffers can't overlap.
-/// - Size of output buffer must be greater or equal to size of input buffer.
-///
-/// There are no common compile time settings (buffer size, etc...) for
-/// all DWTs, because each DTW type needs different amount of GPU resources.
-/// Instead, each DWT type has its own compile time settings, which can be
-/// found in *.cu file, where it is implemented.
-///
-
-#ifndef DWT_CUDA_H
-#define	DWT_CUDA_H
-
-
-namespace dwt_cuda {
-  
-  
-  /// Forward 5/3 2D DWT. See common rules (above) for more details.
-  /// @param in      Expected to be normalized into range [-128, 127].
-  ///                Will not be preserved (will be overwritten).
-  /// @param out     output buffer on GPU
-  /// @param sizeX   width of input image (in pixels)
-  /// @param sizeY   height of input image (in pixels)
-  /// @param levels  number of recursive DWT levels
-  void fdwt53(int * in, int * out, int sizeX, int sizeY, int levels);
-  
-  
-  /// Reverse 5/3 2D DWT. See common rules (above) for more details.
-  /// @param in      Input DWT coefficients. Format described in common rules.
-  ///                Will not be preserved (will be overwritten).
-  /// @param out     output buffer on GPU - will contain original image
-  ///                in normalized range [-128, 127].
-  /// @param sizeX   width of input image (in pixels)
-  /// @param sizeY   height of input image (in pixels)
-  /// @param levels  number of recursive DWT levels
-  void rdwt53(int * in, int * out, int sizeX, int sizeY, int levels);
-  
-  
-  /// Forward 9/7 2D DWT. See common rules (above) for more details.
-  /// @param in      Input DWT coefficients. Should be normalized (in range 
-  ///                [-0.5, 0.5]). Will not be preserved (will be overwritten).
-  /// @param out     output buffer on GPU - format specified in common rules
-  /// @param sizeX   width of input image (in pixels)
-  /// @param sizeY   height of input image (in pixels)
-  /// @param levels  number of recursive DWT levels
-  void fdwt97(float * in, float * out, int sizeX, int sizeY, int levels);
-  
-  
-  /// Reverse 9/7 2D DWT. See common rules (above) for more details.
-  /// @param in      Input DWT coefficients. Format described in common rules.
-  ///                Will not be preserved (will be overwritten).
-  /// @param out     output buffer on GPU - will contain original image
-  ///                in normalized range [-0.5, 0.5].
-  /// @param sizeX   width of input image (in pixels)
-  /// @param sizeY   height of input image (in pixels)
-  /// @param levels  number of recursive DWT levels
-  void rdwt97(float * in, float * out, int sizeX, int sizeY, int levels);
-  
-  
-} // namespace dwt_cuda
-
-
-
-#endif	// DWT_CUDA_H
-
diff -ruN rodinia_3.1/cuda/dwt2d/dwt_cuda/fdwt53.cu rodinia_backup/cuda/dwt2d/dwt_cuda/fdwt53.cu
--- rodinia_3.1/cuda/dwt2d/dwt_cuda/fdwt53.cu	2015-12-11 07:46:15.000000000 -0800
+++ rodinia_backup/cuda/dwt2d/dwt_cuda/fdwt53.cu	1969-12-31 16:00:00.000000000 -0800
@@ -1,395 +0,0 @@
-/// @file    fdwt53.cu
-/// @brief   CUDA implementation of forward 5/3 2D DWT.
-/// @author  Martin Jirman (207962@mail.muni.cz)
-/// @date    2011-02-04 13:23
-///
-///
-/// Copyright (c) 2011 Martin Jirman
-/// All rights reserved.
-/// 
-/// Redistribution and use in source and binary forms, with or without
-/// modification, are permitted provided that the following conditions are met:
-/// 
-///     * Redistributions of source code must retain the above copyright
-///       notice, this list of conditions and the following disclaimer.
-///     * Redistributions in binary form must reproduce the above copyright
-///       notice, this list of conditions and the following disclaimer in the
-///       documentation and/or other materials provided with the distribution.
-/// 
-/// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-/// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-/// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-/// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
-/// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-/// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-/// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-/// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-/// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-/// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-/// POSSIBILITY OF SUCH DAMAGE.
-///
-
-
-#include "common.h"
-#include "transform_buffer.h"
-#include "io.h"
-
-namespace dwt_cuda {
-
-
-  /// Wraps buffer and methods needed for computing one level of 5/3 FDWT
-  /// using sliding window approach.
-  /// @tparam WIN_SIZE_X  width of sliding window
-  /// @tparam WIN_SIZE_Y  height of sliding window
-  template <int WIN_SIZE_X, int WIN_SIZE_Y>
-  class FDWT53 {
-  private:
-    
-    /// Info needed for processing of one input column.
-    /// @tparam CHECKED_LOADER  true if column's loader should check boundaries
-    ///                         false if there are no near boudnaries to check
-    template <bool CHECKED_LOADER>
-    struct FDWT53Column {
-      /// loader for the column
-      VerticalDWTPixelLoader<int, CHECKED_LOADER> loader;
-      
-      /// offset of the column in shared buffer
-      int offset;                   
-      
-      // backup of first 3 loaded pixels (not transformed)
-      int pixel0, pixel1, pixel2;
-      
-      /// Sets all fields to anything to prevent 'uninitialized' warnings.
-      __device__ void clear() {
-        offset = pixel0 = pixel1 = pixel2 = 0;
-        loader.clear();
-      }
-    };
-
-
-    /// Type of shared memory buffer for 5/3 FDWT transforms.
-    typedef TransformBuffer<int, WIN_SIZE_X, WIN_SIZE_Y + 3, 2> FDWT53Buffer;
-
-    /// Actual shared buffer used for forward 5/3 DWT.
-    FDWT53Buffer buffer;
-
-    /// Difference between indices of two vertical neighbors in buffer.
-    enum { STRIDE = FDWT53Buffer::VERTICAL_STRIDE };
-
-
-    /// Forward 5/3 DWT predict operation.
-    struct Forward53Predict {
-      __device__ void operator() (const int p, int & c, const int n) const {
-        // c = n;
-        c -= (p + n) / 2;      // F.8, page 126, ITU-T Rec. T.800 final draft the real one
-      }
-    };
-
-
-    /// Forward 5/3 DWT update operation.
-    struct Forward53Update {
-      __device__ void operator() (const int p, int & c, const int n) const {
-        c += (p + n + 2) / 4;  // F.9, page 126, ITU-T Rec. T.800 final draft
-      }
-    };
-
-
-    /// Initializes one column: computes offset of the column in shared memory
-    /// buffer, initializes loader and finally uses it to load first 3 pixels.
-    /// @tparam CHECKED  true if loader of the column checks boundaries
-    /// @param column    (uninitialized) column info to be initialized
-    /// @param input     input image
-    /// @param sizeX     width of the input image
-    /// @param sizeY     height of the input image
-    /// @param colIndex  x-axis coordinate of the column (relative to the left
-    ///                  side of this threadblock's block of input pixels)
-    /// @param firstY    y-axis coordinate of first image row to be transformed
-	
-	template <bool CHECKED>
-    __device__ void initColumn(FDWT53Column<CHECKED> & column,
-                               const int * const input,
-                               const int sizeX, const int sizeY,
-                               const int colIndex, const int firstY) {
-      // get offset of the column with index 'cId'
-      column.offset = buffer.getColumnOffset(colIndex);
-
-      // coordinates of the first pixel to be loaded
-      const int firstX = blockIdx.x * WIN_SIZE_X + colIndex;
-
-      if(blockIdx.y == 0) {
-        // topmost block - apply mirroring rules when loading first 3 rows
-        column.loader.init(sizeX, sizeY, firstX, firstY);
-
-        // load pixels in mirrored way
-        column.pixel2 = column.loader.loadFrom(input);  // loaded pixel #0
-        column.pixel1 = column.loader.loadFrom(input);  // loaded pixel #1
-        column.pixel0 = column.loader.loadFrom(input);  // loaded pixel #2
-
-        // reinitialize loader to start with pixel #1 again
-        column.loader.init(sizeX, sizeY, firstX, firstY + 1);
-      } else {
-        // non-topmost row - regular loading:
-        column.loader.init(sizeX, sizeY, firstX, firstY - 2);
-
-        // load 3 rows into the column
-        column.pixel0 = column.loader.loadFrom(input);
-        column.pixel1 = column.loader.loadFrom(input);
-        column.pixel2 = column.loader.loadFrom(input);
-        // Now, the next pixel, which will be loaded by loader, is pixel #1.
-      }
-		
-	}
-
-
-    /// Loads and vertically transforms given column. Assumes that first 3
-    /// pixels are already loaded in column fields pixel0 ... pixel2.
-    /// @tparam CHECKED  true if loader of the column checks boundaries
-    /// @param column    column to be loaded and vertically transformed
-    /// @param input     pointer to input image data
-    template <bool CHECKED>
-    __device__ void loadAndVerticallyTransform(FDWT53Column<CHECKED> & column,
-                                               const int * const input) {
-	  // take 3 loaded pixels and put them into shared memory transform buffer
-      buffer[column.offset + 0 * STRIDE] = column.pixel0;
-      buffer[column.offset + 1 * STRIDE] = column.pixel1;
-      buffer[column.offset + 2 * STRIDE] = column.pixel2;
-	
-      // load remaining pixels to be able to vertically transform the window
-
-      for(int i = 3; i < (3 + WIN_SIZE_Y); i++) 
-      {
-        buffer[column.offset + i * STRIDE] = column.loader.loadFrom(input);
-      }
- 
-      // remember last 3 pixels for use in next iteration
-      column.pixel0 = buffer[column.offset + (WIN_SIZE_Y + 0) * STRIDE];
-      column.pixel1 = buffer[column.offset + (WIN_SIZE_Y + 1) * STRIDE];
-      column.pixel2 = buffer[column.offset + (WIN_SIZE_Y + 2) * STRIDE];
-
-      // vertically transform the column in transform buffer
-	  buffer.forEachVerticalOdd(column.offset, Forward53Predict());
-      buffer.forEachVerticalEven(column.offset, Forward53Update());
-	  
-    }
-
-
-    /// Actual implementation of 5/3 FDWT.
-    /// @tparam CHECK_LOADS   true if input loader must check boundaries
-    /// @tparam CHECK_WRITES  true if output writer must check boundaries
-    /// @param in        input image
-    /// @param out       output buffer
-    /// @param sizeX     width of the input image 
-    /// @param sizeY     height of the input image
-    /// @param winSteps  number of sliding window steps
-    template <bool CHECK_LOADS, bool CHECK_WRITES>
-    __device__ void transform(const int * const in, int * const out,
-                              const int sizeX, const int sizeY,
-                              const int winSteps) {
-      // info about one main and one boundary columns processed by this thread
-      FDWT53Column<CHECK_LOADS> column;    
-      FDWT53Column<CHECK_LOADS> boundaryColumn;  // only few threads use this
-
-      // Initialize all column info: initialize loaders, compute offset of 
-      // column in shared buffer and initialize loader of column.
-      const int firstY = blockIdx.y * WIN_SIZE_Y * winSteps;
-	  initColumn(column, in, sizeX, sizeY, threadIdx.x, firstY); //has been checked Mar 9th
-
-	  
-      // first 3 threads initialize boundary columns, others do not use them
-      boundaryColumn.clear();
-      if(threadIdx.x < 3) {
-        // index of boundary column (relative x-axis coordinate of the column)
-        const int colId = threadIdx.x + ((threadIdx.x == 0) ? WIN_SIZE_X : -3);
-
-        // initialize the column
-        initColumn(boundaryColumn, in, sizeX, sizeY, colId, firstY);
-
-      }
-	  
-	  
-      // index of column which will be written into output by this thread      
-	  const int outColumnIndex = parityIdx<WIN_SIZE_X>();
-
-      // offset of column which will be written by this thread into output
-      const int outColumnOffset = buffer.getColumnOffset(outColumnIndex);
-
-      // initialize output writer for this thread
-      const int outputFirstX = blockIdx.x * WIN_SIZE_X + outColumnIndex;
-      VerticalDWTBandWriter<int, CHECK_WRITES> writer;
-	  writer.init(sizeX, sizeY, outputFirstX, firstY);
-		
-	  
-      // Sliding window iterations:
-      // Each iteration assumes that first 3 pixels of each column are loaded.
-     for(int w = 0; w < winSteps; w++) {
-
-	 // For each column (including boundary columns): load and vertically
-        // transform another WIN_SIZE_Y lines.
-        loadAndVerticallyTransform(column, in);
-        if(threadIdx.x < 3) { 
-          loadAndVerticallyTransform(boundaryColumn, in); 
-        }
- 		
-        // wait for all columns to be vertically transformed and transform all
-        // output rows horizontally
-        __syncthreads();
-		
-
-		buffer.forEachHorizontalOdd(2, WIN_SIZE_Y, Forward53Predict());
-        __syncthreads();
-		
-        buffer.forEachHorizontalEven(2, WIN_SIZE_Y, Forward53Update());
-
-        // wait for all output rows to be transformed horizontally and write
-        // them into output buffer
-        __syncthreads();	
-
-
-        for(int r = 2; r < (2 + WIN_SIZE_Y); r += 2) {
-          // Write low coefficients from output column into low band ...
-			writer.writeLowInto(out, buffer[outColumnOffset + r * STRIDE]);
-          // ... and high coeficients into the high band.
-			writer.writeHighInto(out, buffer[outColumnOffset + (r+1) * STRIDE]);
-        }
-
-        // before proceeding to next iteration, wait for all output columns
-        // to be written into the output
-        __syncthreads();
-			
-	}
-	
-    }
-
-    
-  public:
-    /// Determines, whether this block's pixels touch boundary and selects
-    /// right version of algorithm according to it - for many threadblocks, it
-    /// selects version which does not deal with boundary mirroring and thus is 
-    /// slightly faster.
-    /// @param in     input image
-    /// @param out    output buffer
-    /// @param sx     width of the input image 
-    /// @param sy     height of the input image
-    /// @param steps  number of sliding window steps
-    __device__ static void run(const int * const in, int * const out,
-                               const int sx, const int sy, const int steps) {
-        // if(blockIdx.x==0 && blockIdx.y ==11 && threadIdx.x >=0&&threadIdx.x <64){
-      // object with transform buffer in shared memory
-      __shared__ FDWT53<WIN_SIZE_X, WIN_SIZE_Y> fdwt53;
-
-	  // Compute limits of this threadblock's block of pixels and use them to
-      // determine, whether this threadblock will have to deal with boundary.
-      // (1 in next expressions is for radius of impulse response of 9/7 FDWT.)
-      const int maxX = (blockIdx.x + 1) * WIN_SIZE_X + 1;
-      const int maxY = (blockIdx.y + 1) * WIN_SIZE_Y * steps + 1;
-      const bool atRightBoudary = maxX >= sx;
-      const bool atBottomBoudary = maxY >= sy;
-
-      // Select specialized version of code according to distance of this
-      // threadblock's pixels from image boundary.
-      if(atBottomBoudary) 
-      {
-        // near bottom boundary => check both writing and reading
-        fdwt53.transform<true, true>(in, out, sx, sy, steps);
-      } else if(atRightBoudary) 
-      {
-        // near right boundary only => check writing only
-        fdwt53.transform<false, true>(in, out, sx, sy, steps);
-      } else 
-      {
-        // no nearby boundary => check nothing
-        fdwt53.transform<false, false>(in, out, sx, sy, steps);
-      }
-    }
-    // }
-    
-  }; // end of class FDWT53
-  
-  
-  
-  /// Main GPU 5/3 FDWT entry point.
-  /// @tparam WIN_SX   width of sliding window to be used
-  /// @tparam WIN_SY   height of sliding window to be used
-  /// @param input     input image
-  /// @param output    output buffer
-  /// @param sizeX     width of the input image 
-  /// @param sizeY     height of the input image
-  /// @param winSteps  number of sliding window steps
-  template <int WIN_SX, int WIN_SY>
-  __launch_bounds__(WIN_SX, CTMIN(SHM_SIZE/sizeof(FDWT53<WIN_SX, WIN_SY>), 8))
-  __global__ void fdwt53Kernel(const int * const input, int * const output,
-                               const int sizeX, const int sizeY,
-                               const int winSteps) {
-    FDWT53<WIN_SX, WIN_SY>::run(input, output, sizeX, sizeY, winSteps);
-  }
-
-  
-
-  /// Only computes optimal number of sliding window steps, 
-  /// number of threadblocks and then lanches the 5/3 FDWT kernel.
-  /// @tparam WIN_SX  width of sliding window
-  /// @tparam WIN_SY  height of sliding window
-  /// @param in       input image
-  /// @param out      output buffer
-  /// @param sx       width of the input image 
-  /// @param sy       height of the input image
-  template <int WIN_SX, int WIN_SY>
-  void launchFDWT53Kernel (int * in, int * out, int sx, int sy) {
-    // compute optimal number of steps of each sliding window
-	
-    const int steps = divRndUp(sy, 15 * WIN_SY);
-
-	int gx = divRndUp(sx, WIN_SX);
-	int gy = divRndUp(sy, WIN_SY * steps);
-
-	printf("\n sliding steps = %d , gx = %d , gy = %d \n", steps, gx, gy);
-
-    // prepare grid size
-    dim3 gSize(divRndUp(sx, WIN_SX), divRndUp(sy, WIN_SY * steps));
-    // printf("\n globalx=%d, globaly=%d, blocksize=%d\n", gSize.x, gSize.y, WIN_SX);
-    
-    // run kernel, possibly measure time and finally check the call
-    // PERF_BEGIN
-    fdwt53Kernel<WIN_SX, WIN_SY><<<gSize, WIN_SX>>>(in, out, sx, sy, steps);
-    // PERF_END("        FDWT53", sx, sy)
-    // CudaDWTTester::checkLastKernelCall("FDWT 5/3 kernel");
-    printf("fdwt53Kernel in launchFDWT53Kernel has finished");
-	
-  }
-  
-  
-  
-  /// Forward 5/3 2D DWT. See common rules (above) for more details.
-  /// @param in      Expected to be normalized into range [-128, 127].
-  ///                Will not be preserved (will be overwritten).
-  /// @param out     output buffer on GPU
-  /// @param sizeX   width of input image (in pixels)
-  /// @param sizeY   height of input image (in pixels)
-  /// @param levels  number of recursive DWT levels
-  void fdwt53(int * in, int * out, int sizeX, int sizeY, int levels) {
-    // select right width of kernel for the size of the image
-	
-    if(sizeX >= 960) {
-      launchFDWT53Kernel<192, 8>(in, out, sizeX, sizeY);
-    } else if (sizeX >= 480) {
-      launchFDWT53Kernel<128, 8>(in, out, sizeX, sizeY);
-    } else {
-      launchFDWT53Kernel<64, 8>(in, out, sizeX, sizeY);
-    }
-    
-    // if this was not the last level, continue recursively with other levels
-    if(levels > 1) {
-      // copy output's LL band back into input buffer
-      const int llSizeX = divRndUp(sizeX, 2); 
-      const int llSizeY = divRndUp(sizeY, 2);
-	 // printf("\n llSizeX = %d , llSizeY = %d \n", llSizeX, llSizeY);
-      memCopy(in, out, llSizeX, llSizeY); //the function memCopy in cuda_dwt/common.h line 238
-      
-      // run remaining levels of FDWT
-      fdwt53(in, out, llSizeX, llSizeY, levels - 1);
-    }
-  }
-  
-  
-
-} // end of namespace dwt_cuda
diff -ruN rodinia_3.1/cuda/dwt2d/dwt_cuda/fdwt97.cu rodinia_backup/cuda/dwt2d/dwt_cuda/fdwt97.cu
--- rodinia_3.1/cuda/dwt2d/dwt_cuda/fdwt97.cu	2015-12-11 07:46:14.000000000 -0800
+++ rodinia_backup/cuda/dwt2d/dwt_cuda/fdwt97.cu	1969-12-31 16:00:00.000000000 -0800
@@ -1,368 +0,0 @@
-/// 
-/// @file    fdwt97.cu
-/// @brief   CUDA implementation of forward 9/7 2D DWT.
-/// @author  Martin Jirman (207962@mail.muni.cz)
-/// @date    2011-01-20 13:18
-///
-///
-/// Copyright (c) 2011 Martin Jirman
-/// All rights reserved.
-/// 
-/// Redistribution and use in source and binary forms, with or without
-/// modification, are permitted provided that the following conditions are met:
-/// 
-///     * Redistributions of source code must retain the above copyright
-///       notice, this list of conditions and the following disclaimer.
-///     * Redistributions in binary form must reproduce the above copyright
-///       notice, this list of conditions and the following disclaimer in the
-///       documentation and/or other materials provided with the distribution.
-/// 
-/// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-/// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-/// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-/// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
-/// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-/// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-/// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-/// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-/// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-/// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-/// POSSIBILITY OF SUCH DAMAGE.
-///
-
-
-#include "common.h"
-#include "transform_buffer.h"
-#include "io.h"
-
-
-namespace dwt_cuda {
-
- 
-  
-  /// Wraps a buffer and methods for computing 9/7 FDWT with sliding window
-  /// of specified size. Template arguments specify this size.
-  /// @tparam WIN_SIZE_X  width of sliding window
-  /// @tparam WIN_SIZE_Y  height of sliding window
-  template <int WIN_SIZE_X, int WIN_SIZE_Y>
-  class FDWT97 {
-  private:
-    /// Type of shared memory buffer used for 9/7 DWT.
-    typedef TransformBuffer<float, WIN_SIZE_X, WIN_SIZE_Y + 7, 4> FDWT97Buffer;
-
-    /// Actual shared buffer used for forward 9/7 DWT.
-    FDWT97Buffer buffer;
-
-    /// Difference of indices of two vertically neighboring items in buffer.
-    enum { STRIDE = FDWT97Buffer::VERTICAL_STRIDE };
-
-
-    /// One thread's info about loading input image
-    /// @tparam CHECKED  true if loader should check for image boundaries
-    template <bool CHECKED>
-    struct FDWT97ColumnLoadingInfo {
-      /// Loader of pixels from some input image.
-      VerticalDWTPixelLoader<float, CHECKED> loader;  
-      
-      /// Offset of column loaded by loader. (Offset in shared buffer.)
-      int offset;
-    };
-
-
-    /// Horizontal 9/7 FDWT on specified lines of transform buffer.
-    /// @param lines      number of lines to be transformed
-    /// @param firstLine  index of the first line to be transformed
-    __device__ void horizontalFDWT97(const int lines, const int firstLine) {
-      __syncthreads();
-      buffer.forEachHorizontalOdd(firstLine, lines, AddScaledSum(f97Predict1));
-      __syncthreads();
-      buffer.forEachHorizontalEven(firstLine, lines, AddScaledSum(f97Update1));
-      __syncthreads();
-      buffer.forEachHorizontalOdd(firstLine, lines, AddScaledSum(f97Predict2));
-      __syncthreads();
-      buffer.forEachHorizontalEven(firstLine, lines, AddScaledSum(f97Update2));
-      __syncthreads();
-      buffer.scaleHorizontal(scale97Div, scale97Mul, firstLine, lines);
-      __syncthreads();
-    }
-
-
-    /// Initializes one column of shared transform buffer with 7 input pixels.
-    /// Those 7 pixels will not be transformed. Also initializes given loader.
-    /// @tparam CHECKED     true if loader should check for image boundaries
-    /// @param column       (uninitialized) object for loading input pixels
-    /// @param columnIndex  index (not offset!) of the column to be loaded
-    ///                     (relative to threadblock's first column)
-    /// @param input        pointer to input image in GPU memory
-    /// @param sizeX        width of the input image
-    /// @param sizeY        height of the input image
-    /// @param firstY       index of first row to be loaded from image
-    template <bool CHECKED>
-    __device__ void initColumn(FDWT97ColumnLoadingInfo<CHECKED> & column,
-                              const int columnIndex, const float * const input, 
-                              const int sizeX, const int sizeY,
-                              const int firstY) {
-      // get offset of the column with index 'columnIndex'
-      column.offset = buffer.getColumnOffset(columnIndex);
-
-      // x-coordinate of the first pixel to be loaded by given loader
-      const int firstX = blockIdx.x * WIN_SIZE_X + columnIndex;
-      
-      if(blockIdx.y == 0) {
-        // topmost block - apply mirroring rules when loading first 7 rows
-        column.loader.init(sizeX, sizeY, firstX, firstY);
-
-        // load pixels in mirrored way
-        buffer[column.offset + 4 * STRIDE] = column.loader.loadFrom(input);
-        buffer[column.offset + 3 * STRIDE] =
-        buffer[column.offset + 5 * STRIDE] = column.loader.loadFrom(input);
-        buffer[column.offset + 2 * STRIDE] =
-        buffer[column.offset + 6 * STRIDE] = column.loader.loadFrom(input);
-        buffer[column.offset + 1 * STRIDE] = column.loader.loadFrom(input);
-        buffer[column.offset + 0 * STRIDE] = column.loader.loadFrom(input);
-
-        // reinitialize loader to start with pixel #3 again
-        column.loader.init(sizeX, sizeY, firstX, firstY + 3);
-      } else {
-        // non-topmost row - regular loading:
-        column.loader.init(sizeX, sizeY, firstX, firstY - 4);
-
-        // load 7 rows into the transform buffer
-        for(int i = 0; i < 7; i++) {
-          buffer[column.offset + i * STRIDE] = column.loader.loadFrom(input);
-        }
-      }
-      // Now, the next pixel, which will be loaded by loader, is pixel #3.
-    }
-
-
-    /// Loads another WIN_SIZE_Y pixels into given column using given loader.
-    /// @tparam CHECKED  true if loader should check for image boundaries
-    /// @param input     input image to load from
-    /// @param column    loader and offset of loaded column in shared buffer
-    template <bool CHECKED>
-    inline __device__ void loadWindowIntoColumn(const float * const input,
-                                  FDWT97ColumnLoadingInfo<CHECKED> & column) {
-      for(int i = 7; i < (7 + WIN_SIZE_Y); i++) {
-        buffer[column.offset + i * STRIDE] = column.loader.loadFrom(input);
-      }
-    }
-
-
-    /// Main GPU 9/7 FDWT entry point.
-    /// @tparam CHECK_LOADS   true if boundaries should be checked when loading
-    /// @tparam CHECK_WRITES  true if boundaries should be checked when writing
-    /// @param in        input image
-    /// @param out       output buffer
-    /// @param sizeX     width of the input image 
-    /// @param sizeY     height of the input image
-    /// @param winSteps  number of steps of sliding window
-    template <bool CHECK_LOADS, bool CHECK_WRITES>
-    __device__ void transform(const float * const in, float * const out,
-                              const int sizeX, const int sizeY,
-                              const int winSteps) {
-      // info about columns loaded by this thread: one main column and possibly
-      // one boundary column. (Only some threads load some boundary column.)
-      FDWT97ColumnLoadingInfo<CHECK_LOADS> loadedColumn;
-      FDWT97ColumnLoadingInfo<CHECK_LOADS> boundaryColumn;
-
-      // Initialize first 7 lines of transform buffer.
-      const int firstY = blockIdx.y * WIN_SIZE_Y * winSteps;
-      initColumn(loadedColumn, threadIdx.x, in, sizeX, sizeY, firstY);
-
-      // Some threads initialize boundary columns.
-      boundaryColumn.offset = 0;
-      boundaryColumn.loader.clear();
-      if(threadIdx.x < 7) {
-        // each thread among first 7 ones gets index of one of boundary columns
-        const int colId = threadIdx.x + ((threadIdx.x < 3) ? WIN_SIZE_X : -7);
-
-        // Thread initializes offset of the boundary column (in shared buffer),
-        // first 7 pixels of the column and a loader for this column.
-        initColumn(boundaryColumn, colId, in, sizeX, sizeY, firstY);
-      }
-
-      // horizontally transform first 7 rows in all columns
-      horizontalFDWT97(7, 0);
-
-      // Index of column handled by this thread. (First half of threads handle
-      // even columns and others handle odd columns.)
-      const int outColumnIndex = parityIdx<WIN_SIZE_X>();
-
-      // writer of output linear bands - initialize it
-      const int firstX = blockIdx.x * WIN_SIZE_X + outColumnIndex;
-      VerticalDWTBandWriter<float, CHECK_WRITES> writer;
-      writer.init(sizeX, sizeY, firstX, firstY);
-
-      // transform buffer offset of column transformed and saved by this thread
-      const int outColumnOffset = buffer.getColumnOffset(outColumnIndex);
-
-      // (Each iteration of this loop assumes that first 7 rows of transform 
-      // buffer are already loaded with horizontally transformed coefficients.)
-      for(int w = 0; w < winSteps; w++) {
-        // Load another WIN_SIZE_Y lines of thread's column into the buffer.
-        loadWindowIntoColumn(in, loadedColumn);
-
-        // some threads also load boundary columns
-        if(threadIdx.x < 7) {
-          loadWindowIntoColumn(in, boundaryColumn);
-        }
-
-        // horizontally transform all newly loaded lines
-        horizontalFDWT97(WIN_SIZE_Y, 7);
-
-        // Using 7 registers, remember current values of last 7 rows of
-        // transform buffer. These rows are transformed horizontally only 
-        // and will be used in next iteration.
-        float last7Lines[7];
-        for(int i = 0; i < 7; i++) {
-          last7Lines[i] = buffer[outColumnOffset + (WIN_SIZE_Y + i) * STRIDE];
-        }
-
-        // vertically transform all central columns (do not scale yet)
-        buffer.forEachVerticalOdd(outColumnOffset, AddScaledSum(f97Predict1));
-        buffer.forEachVerticalEven(outColumnOffset, AddScaledSum(f97Update1));
-        buffer.forEachVerticalOdd(outColumnOffset, AddScaledSum(f97Predict2));
-        buffer.forEachVerticalEven(outColumnOffset, AddScaledSum(f97Update2));
-
-        // Save all results of current window. Results are in transform buffer
-        // at rows from #4 to #(4 + WIN_SIZE_Y). Other rows are invalid now.
-        // (They only served as a boundary for vertical FDWT.)
-        for(int i = 4; i < (4 + WIN_SIZE_Y); i += 2) {
-          const int index = outColumnOffset + i * STRIDE;
-          // Write low coefficients from column into low band ...
-          writer.writeLowInto(out, buffer[index] * scale97Div);
-          // ... and high coeficients into the high band.
-          writer.writeHighInto(out, buffer[index + STRIDE] * scale97Mul);
-        }
-
-        // Use last 7 remembered lines as first 7 lines for next iteration.
-        // As expected, these lines are already horizontally transformed.
-        for(int i = 0; i < 7; i++) {
-          buffer[outColumnOffset + i * STRIDE] = last7Lines[i];
-        }
-
-        // Wait for all writing threads before proceeding to loading new
-        // pixels in next iteration. (Not to overwrite those which
-        // are not written yet.)
-        __syncthreads();
-      }
-    }
-    
-    
-  public:
-    /// Runs one of specialized variants of 9/7 FDWT according to distance of
-    /// processed pixels to image boudnary. Some variants do not check for 
-    /// boudnary and thus are slightly faster.
-    /// @param in     input image
-    /// @param out    output buffer
-    /// @param sx     width of the input image 
-    /// @param sy     height of the input image
-    /// @param steps  number of steps of sliding window
-    __device__ static void run(const float * const input, float * const output,
-                               const int sx, const int sy, const int steps) {
-      // object with transform buffer in shared memory
-      __shared__ FDWT97<WIN_SIZE_X, WIN_SIZE_Y> fdwt97;
-
-      // Compute limits of this threadblock's block of pixels and use them to
-      // determine, whether this threadblock will have to deal with boundary.
-      // (3 in next expressions is for radius of impulse response of 9/7 FDWT.)
-      const int maxX = (blockIdx.x + 1) * WIN_SIZE_X + 3;
-      const int maxY = (blockIdx.y + 1) * WIN_SIZE_Y * steps + 3;
-      const bool atRightBoudary = maxX >= sx;
-      const bool atBottomBoudary = maxY >= sy;
-
-      // Select specialized version of code according to distance of this
-      // threadblock's pixels from image boundary.
-      if(atBottomBoudary) {
-        // near bottom boundary => check both writing and reading
-        fdwt97.transform<true, true>(input, output, sx, sy, steps);
-      } else if(atRightBoudary) {
-        // near right boundary only => check writing only
-        fdwt97.transform<false, true>(input, output, sx, sy, steps);
-      } else {
-        // no nearby boundary => check nothing
-        fdwt97.transform<false, false>(input, output, sx, sy, steps);
-      }
-    }
-    
-  }; // end of class FDWT97
-  
-  
-    
-  /// Main GPU 9/7 FDWT entry point.
-  /// @param input   input image
-  /// @parma output  output buffer
-  /// @param sx      width of the input image 
-  /// @param sy      height of the input image
-  /// @param steps   number of steps of sliding window
-  template <int WIN_SX, int WIN_SY>
-  __launch_bounds__(WIN_SX, CTMIN(SHM_SIZE/sizeof(FDWT97<WIN_SX, WIN_SY>), 8))
-  __global__ void fdwt97Kernel(const float * const input, float * const output,
-                               const int sx, const int sy, const int steps) {
-    // Excuse me, dear reader of this code - this call have to be here. If you
-    // try to simply put contents of following method right here, CUDA compiler
-    // (version 3.2) will spit tons of nonsense messy errors ...
-    // Hope they will not break it even more in future releases.
-    FDWT97<WIN_SX, WIN_SY>::run(input, output, sx, sy, steps);
-  }
-
-  
-  
-  /// Only computes optimal number of sliding window steps, 
-  /// number of threadblocks and then lanches the 9/7 FDWT kernel.
-  /// @tparam WIN_SX  width of sliding window
-  /// @tparam WIN_SY  height of sliding window
-  /// @param in       input image
-  /// @param out      output buffer
-  /// @param sx       width of the input image 
-  /// @param sy       height of the input image
-  template <int WIN_SX, int WIN_SY>
-  void launchFDWT97Kernel (float * in, float * out, int sx, int sy) {
-    // compute optimal number of steps of each sliding window
-    const int steps = divRndUp(sy, 15 * WIN_SY);
-    
-    // prepare grid size
-    dim3 gSize(divRndUp(sx, WIN_SX), divRndUp(sy, WIN_SY * steps));
-    
-    // run kernel, possibly measure time and finally check the call
-    PERF_BEGIN
-    fdwt97Kernel<WIN_SX, WIN_SY><<<gSize, WIN_SX>>>(in, out, sx, sy, steps);
-    PERF_END("        FDWT97", sx, sy)
-    CudaDWTTester::checkLastKernelCall("FDWT 9/7 kernel");
-  }
-  
-  
-  
-  /// Forward 9/7 2D DWT. See common rules (dwt.h) for more details.
-  /// @param in      Input DWT coefficients. Should be normalized (in range 
-  ///                [-0.5, 0.5]). Will not be preserved (will be overwritten).
-  /// @param out     output buffer on GPU - format specified in common rules
-  /// @param sizeX   width of input image (in pixels)
-  /// @param sizeY   height of input image (in pixels)
-  /// @param levels  number of recursive DWT levels
-  void fdwt97(float * in, float * out, int sizeX, int sizeY, int levels) {
-    // select right width of kernel for the size of the image
-    if(sizeX >= 960) {
-      launchFDWT97Kernel<192, 8>(in, out, sizeX, sizeY);
-    } else if (sizeX >= 480) {
-      launchFDWT97Kernel<128, 6>(in, out, sizeX, sizeY);
-    } else {
-      launchFDWT97Kernel<64, 6>(in, out, sizeX, sizeY);
-    }
-    
-    // if this was not the last level, continue recursively with other levels
-    if(levels > 1) {
-      // copy output's LL band back into input buffer
-      const int llSizeX = divRndUp(sizeX, 2);
-      const int llSizeY = divRndUp(sizeY, 2);
-      memCopy(in, out, llSizeX, llSizeY);
-      
-      // run remaining levels of FDWT
-      fdwt97(in, out, llSizeX, llSizeY, levels - 1);
-    }
-  }
-  
-  
-
-} // end of namespace dwt_cuda
diff -ruN rodinia_3.1/cuda/dwt2d/dwt_cuda/io.h rodinia_backup/cuda/dwt2d/dwt_cuda/io.h
--- rodinia_3.1/cuda/dwt2d/dwt_cuda/io.h	2015-12-11 07:46:15.000000000 -0800
+++ rodinia_backup/cuda/dwt2d/dwt_cuda/io.h	1969-12-31 16:00:00.000000000 -0800
@@ -1,473 +0,0 @@
-///
-/// @file:   io.h
-/// @brief   Manages loading and saving lineary stored bands and input images.
-/// @author  Martin Jirman (207962@mail.muni.cz)
-/// @date    2011-01-20 22:38
-/// 
-///
-/// Copyright (c) 2011 Martin Jirman
-/// All rights reserved.
-/// 
-/// Redistribution and use in source and binary forms, with or without
-/// modification, are permitted provided that the following conditions are met:
-/// 
-///     * Redistributions of source code must retain the above copyright
-///       notice, this list of conditions and the following disclaimer.
-///     * Redistributions in binary form must reproduce the above copyright
-///       notice, this list of conditions and the following disclaimer in the
-///       documentation and/or other materials provided with the distribution.
-/// 
-/// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-/// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-/// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-/// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
-/// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-/// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-/// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-/// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-/// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-/// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-/// POSSIBILITY OF SUCH DAMAGE.
-///
-
-
-#ifndef IO_H
-#define	IO_H
-
-
-#include "common.h"
-
-namespace dwt_cuda {
-
-  
-  /// Base for all IO classes - manages mirroring.
-  class DWTIO {
-  protected:
-    /// Handles mirroring of image at edges in a DWT correct way.
-    /// @param d      a position in the image (will be replaced by mirrored d)
-    /// @param sizeD  size of the image along the dimension of 'd'
-    __device__ static void mirror(int & d, const int & sizeD) {
-      // TODO: enable multiple mirroring:
-//      if(sizeD > 1) {
-//        if(d < 0) {
-//          const int underflow = -1 - d;
-//          const int phase = (underflow / (sizeD - 1)) & 1;
-//          const int remainder = underflow % (sizeD - 1);
-//          if(phase == 0) {
-//            d = remainder + 1;
-//          } else {
-//            d = sizeD - 2 - remainder;
-//          }
-//        } else if(d >= sizeD) {
-//          const int overflow = d - sizeD;
-//          const int phase = (overflow / (sizeD - 1)) & 1;
-//          const int remainder = overflow % (sizeD - 1);
-//          if(phase == 0) {
-//            d = sizeD - 2 - remainder;
-//          } else {
-//            d = remainder + 1;
-//          }
-//        }
-//      } else {
-//        d = 0;
-//      }
-  //for test the mirror's use Feb 17
-      if(d >= sizeD) {
-        d = 2 * sizeD - 2 - d;
-      } else if(d < 0) {
-        d = -d;
-      }
-    }
-  };
-
-
-  /// Base class for pixel loader and writer - manages computing start index,
-  /// stride and end of image for loading column of pixels.
-  /// @tparam T        type of image pixels
-  /// @tparam CHECKED  true = be prepared to image boundary, false = don't care
-  template <typename T, bool CHECKED>
-  class VerticalDWTPixelIO : protected DWTIO {
-  protected:
-    int end;         ///< index of bottom neightbor of last pixel of column
-    int stride;      ///< increment of pointer to get to next pixel
-
-    /// Initializes pixel IO - sets end index and a position of first pixel.
-    /// @param sizeX   width of the image
-    /// @param sizeY   height of the image
-    /// @param firstX  x-coordinate of first pixel to use
-    /// @param firstY  y-coordinate of first pixel to use
-    /// @return index of pixel at position [x, y] in the image
-    __device__ int initialize(const int sizeX, const int sizeY,
-                              int firstX, int firstY) {
-      // initialize all pointers and stride
-      end = CHECKED ? (sizeY * sizeX + firstX) : 0;
-      stride = sizeX;
-      return firstX + sizeX * firstY;
-    }
-  };
-
-
-
-  /// Writes reverse transformed pixels directly into output image.
-  /// @tparam T        type of output pixels
-  /// @tparam CHECKED  true = be prepared to image boundary, false = don't care
-  template <typename T, bool CHECKED>
-  class VerticalDWTPixelWriter : VerticalDWTPixelIO<T, CHECKED> {
-  private:
-    int next;   // index of the next pixel to be loaded
-
-  public:
-    /// Initializes writer - sets output buffer and a position of first pixel.
-    /// @param sizeX   width of the image
-    /// @param sizeY   height of the image
-    /// @param firstX  x-coordinate of first pixel to write into
-    /// @param firstY  y-coordinate of first pixel to write into
-    __device__ void init(const int sizeX, const int sizeY, 
-                         int firstX, int firstY) {
-      if(firstX < sizeX) {
-        next = this->initialize(sizeX, sizeY, firstX, firstY);
-      } else {
-        this->end = 0;
-        this->stride = 0;
-        next = 0;
-      }
-    }
-
-    /// Writes given value at next position and advances internal pointer while
-    /// correctly handling mirroring.
-    /// @param output  output image to write pixel into
-    /// @param value   value of the pixel to be written
-    __device__ void writeInto(T * const output, const T & value) {
-      if((!CHECKED) || (next != this->end)) {
-        output[next] = value;
-        next += this->stride;
-      }
-    }
-  };
-
-
-  
-  /// Loads pixels from input image.
-  /// @tparam T        type of image input pixels
-  /// @tparam CHECKED  true = be prepared to image boundary, false = don't care
-  template <typename T, bool CHECKED>
-  class VerticalDWTPixelLoader
-          : protected VerticalDWTPixelIO<const T, CHECKED> {
-  private:
-    int last;  ///< index of last loaded pixel
-  public:
-  
-
-  //******************* FOR TEST **********************
-  __device__ int getlast(){
-		return last;
-	}
-  __device__ int getend(){
-		return this->end;
-	}
-  __device__ int getstride(){
-		return this->stride;
-	}
-  __device__ void setend(int a){
-      this->end=a;
-	}
-	//******************* FOR TEST **********************
-  
-  
-  
-    /// Initializes loader - sets input size and a position of first pixel.
-    /// @param sizeX   width of the image
-    /// @param sizeY   height of the image
-    /// @param firstX  x-coordinate of first pixel to load
-    /// @param firstY  y-coordinate of first pixel to load
-    __device__ void init(const int sizeX, const int sizeY,
-                         int firstX, int firstY) {
-      // correctly mirror x coordinate
-      this->mirror(firstX, sizeX);
-      
-      // 'last' always points to already loaded pixel (subtract sizeX = stride)
-      last = this->initialize(sizeX, sizeY, firstX, firstY) - sizeX;
-      //last = (FirstX + sizeX * FirstY) - sizeX
-    }
-    
-    /// Sets all fields to zeros, for compiler not to complain about
-    /// uninitialized stuff.
-    __device__ void clear() {
-      this->end = 0;
-      this->stride = 0;
-      this->last = 0;
-    }
-
-    /// Gets another pixel and advancees internal pointer to following one.
-    /// @param input  input image to load next pixel from
-    /// @return next pixel from given image
-    __device__ T loadFrom(const T * const input) {
-      last += this->stride;
-      if(CHECKED && (last == this->end)) {
-        last -= 2 * this->stride;
-        this->stride = -this->stride; // reverse loader's direction
-      }
-      // avoid reading from negative indices if loader is checked
-      // return (CHECKED && (last < 0)) ? 0 : input[last];  // TODO: use this checked variant later
-      return input[last];
-      // return this->end;
-      // return last;
-      // return this->stride;
-    }
-  };
-
-
-
-  /// Base for band write and loader. Manages computing strides and pointers
-  /// to first and last pixels in a linearly-stored-bands correct way.
-  /// @tparam T        type of band coefficients
-  /// @tparam CHECKED  true = be prepared to image boundary, false = don't care
-  template <typename T, bool CHECKED>
-  class VerticalDWTBandIO : protected DWTIO {
-  protected:
-    /// index of bottom neighbor of last pixel of loaded column
-    int end;
-    
-    /// increment of index to get from highpass band to the lowpass one
-    int strideHighToLow;
-    
-    /// increment of index to get from the lowpass band to the highpass one
-    int strideLowToHigh;
-
-    /// Initializes IO - sets size of image and a position of first pixel.
-    /// @param imageSizeX   width of the image
-    /// @param imageSizeY   height of the image
-    /// @param firstX       x-coordinate of first pixel to use
-    ///                     (Parity determines vertically low or high band.)
-    /// @param firstY       y-coordinate of first pixel to use
-    ///                     (Parity determines horizontally low or high band.)
-    /// @return index of first item specified by firstX and firstY
-    __device__ int initialize(const int imageSizeX, const int imageSizeY,
-                              int firstX, int firstY) {
-      // index of first pixel (topmost one) of the column with index firstX
-      int columnOffset = firstX / 2;
-      
-      // difference between indices of two vertically neighboring pixels
-      // in the same band
-      int verticalStride;
-      
-      // resolve index of first pixel according to horizontal parity
-      if(firstX & 1) {
-        // first pixel in one of right bands
-        verticalStride = imageSizeX / 2;
-        columnOffset += divRndUp(imageSizeX, 2) * divRndUp(imageSizeY, 2);
-        strideLowToHigh = (imageSizeX * imageSizeY) / 2;
-      } else {
-        // first pixel in one of left bands
-        verticalStride = imageSizeX / 2 + (imageSizeX & 1);
-        strideLowToHigh = divRndUp(imageSizeY, 2)  * imageSizeX;
-      }
-      
-      // set the other stride
-      strideHighToLow = verticalStride - strideLowToHigh;
-
-      // compute index of coefficient which indicates end of image
-      if(CHECKED) {
-        end = columnOffset                            // right column
-                + (imageSizeY / 2) * verticalStride   // right row
-                + (imageSizeY & 1) * strideLowToHigh; // possibly in high band
-      } else {
-        end = 0;
-      }
-
-
-	//***********for test**************
-	//	end = CHECKED;
-	//***********for test**************
-	
-	
-      // finally, return index of the first item
-      return columnOffset                        // right column
-              + (firstY / 2) * verticalStride    // right row
-              + (firstY & 1) * strideLowToHigh;  // possibly in high band
-    }
-  };
-
-
-
-
-  /// Directly loads coefficients from four consecutively stored transformed
-  /// bands.
-  /// @tparam T        type of input band coefficients
-  /// @tparam CHECKED  true = be prepared to image boundary, false = don't care
-  template <typename T, bool CHECKED>
-  class VerticalDWTBandLoader : public VerticalDWTBandIO<const T, CHECKED> {
-  private:
-    int last;  ///< index of last loaded pixel
-
-    /// Checks internal index and possibly reverses direction of loader.
-    /// (Handles mirroring at the bottom of the image.)
-    /// @param input   input image to load next coefficient from
-    /// @param stride  stride to use now (one of two loader's strides)
-    /// @return loaded coefficient
-    __device__ T updateAndLoad(const T * const input, const int & stride) {
-      last += stride;
-      if(CHECKED && (last == this->end)) {
-        // undo last two updates of index (to get to previous mirrored item)
-        last -= (this->strideLowToHigh + this->strideHighToLow);
-
-        // swap and reverse strides (to move up in the loaded column now)
-        const int temp = this->strideLowToHigh;
-        this->strideLowToHigh = -this->strideHighToLow;
-        this->strideHighToLow = -temp;
-      }
-      // avoid reading from negative indices if loader is checked
-      // return (CHECKED && (last < 0)) ? 0 : input[last];  // TODO: use this checked variant later
-      return input[last];
-    }
-  public:
-
-    /// Initializes loader - sets input size and a position of first pixel.
-    /// @param imageSizeX   width of the image
-    /// @param imageSizeY   height of the image
-    /// @param firstX       x-coordinate of first pixel to load
-    ///                     (Parity determines vertically low or high band.)
-    /// @param firstY       y-coordinate of first pixel to load
-    ///                     (Parity determines horizontally low or high band.)
-    __device__ void init(const int imageSizeX, const int imageSizeY,
-                         int firstX, const int firstY) {
-      this->mirror(firstX, imageSizeX);
-      last = this->initialize(imageSizeX, imageSizeY, firstX, firstY);
-      
-      // adjust to point to previous item
-      last -= (firstY & 1) ? this->strideLowToHigh : this->strideHighToLow; 
-    }
-    
-    /// Sets all fields to zeros, for compiler not to complain about
-    /// uninitialized stuff.
-    __device__ void clear() {
-      this->end = 0;
-      this->strideHighToLow = 0;
-      this->strideLowToHigh = 0;
-      this->last = 0;
-    }
-
-    /// Gets another coefficient from lowpass band and advances internal index.
-    /// Call this method first if position of first pixel passed to init
-    /// was in high band.
-    /// @param input   input image to load next coefficient from
-    /// @return next coefficient from the lowpass band of the given image
-    __device__ T loadLowFrom(const T * const input) {
-      return updateAndLoad(input, this->strideHighToLow);
-    }
-
-    /// Gets another coefficient from the highpass band and advances index.
-    /// Call this method first if position of first pixel passed to init
-    /// was in high band.
-    /// @param input   input image to load next coefficient from
-    /// @return next coefficient from the highbass band of the given image
-    __device__ T loadHighFrom(const T * const input) {
-      return updateAndLoad(input, this->strideLowToHigh);
-    }
-
-  };
-
-
-
-
-  /// Directly saves coefficients into four transformed bands.
-  /// @tparam T        type of output band coefficients
-  /// @tparam CHECKED  true = be prepared to image boundary, false = don't care
-  template <typename T, bool CHECKED>
-  class VerticalDWTBandWriter : public VerticalDWTBandIO<T, CHECKED> {
-  private:
-    int next;  ///< index of last loaded pixel
-
-    /// Checks internal index and possibly stops the writer.
-    /// (Handles mirroring at edges of the image.)
-    /// @param output  output buffer
-    /// @param item    item to put into the output
-    /// @param stride  increment of the pointer to get to next output index
-    __device__ int saveAndUpdate(T * const output, const T & item,
-                                  const int & stride) {
-//	if(blockIdx.x == 0 && blockIdx.y == 11 && threadIdx.x == 0){		//test, Mar 20					  
-      if((!CHECKED) || (next != this->end)) {
-        output[next] = item;
-        next += stride;
-      } 
-//	}
-      // if((!CHECKED) || (next != this->end)) { //the real one
-        // output[next] = item;
-        // next += stride;  //stride has been test
-      // } 
-	return next;
-    }
-  public:
-
-    /// Initializes writer - sets output size and a position of first pixel.
-    /// @param output       output image
-    /// @param imageSizeX   width of the image
-    /// @param imageSizeY   height of the image
-    /// @param firstX       x-coordinate of first pixel to write
-    ///                     (Parity determines vertically low or high band.)
-    /// @param firstY       y-coordinate of first pixel to write
-    ///                     (Parity determines horizontally low or high band.)
-    __device__ void init(const int imageSizeX, const int imageSizeY,
-                         const int firstX, const int firstY) {
-      if (firstX < imageSizeX) {
-        next = this->initialize(imageSizeX, imageSizeY, firstX, firstY);
-      } else {
-        clear();
-      }
-    }
-    
-    /// Sets all fields to zeros, for compiler not to complain about
-    /// uninitialized stuff.
-    __device__ void clear() {
-      this->end = 0;
-      this->strideHighToLow = 0;
-      this->strideLowToHigh = 0;
-      this->next = 0;
-    }
-
-    /// Writes another coefficient into the band which was specified using
-    /// init's firstX and firstY parameters and advances internal pointer.
-    /// Call this method first if position of first pixel passed to init
-    /// was in lowpass band.
-    /// @param output  output image
-    /// @param low     lowpass coefficient to save into the lowpass band
-    __device__ int writeLowInto(T * const output, const T & primary) {
-      return saveAndUpdate(output, primary, this->strideLowToHigh);
-    }
-
-    /// Writes another coefficient from the other band and advances pointer.
-    /// Call this method first if position of first pixel passed to init
-    /// was in highpass band.
-    /// @param output  output image
-    /// @param high    highpass coefficient to save into the highpass band
-    __device__ int writeHighInto(T * const output, const T & other) {
-      return saveAndUpdate(output, other, this->strideHighToLow);
-    }
-
-	//*******Add three functions to get private values*******
-	__device__ int getnext(){
-		return next;
-	}
-	
-	__device__ int getend(){
-		return this->end;
-	}
-	
-	__device__ int getstrideHighToLow(){
-		return this->strideHighToLow;
-	}
-	
-	__device__ int getstrideLowToHigh(){
-		return this->strideLowToHigh;
-	}
-	
-	//*******Add three functions to get private values*******
-  };
-  
-  
-  
-} // namespace dwt_cuda
-
-
-#endif	// IO_H
-
diff -ruN rodinia_3.1/cuda/dwt2d/dwt_cuda/rdwt53.cu rodinia_backup/cuda/dwt2d/dwt_cuda/rdwt53.cu
--- rodinia_3.1/cuda/dwt2d/dwt_cuda/rdwt53.cu	2015-12-11 07:46:15.000000000 -0800
+++ rodinia_backup/cuda/dwt2d/dwt_cuda/rdwt53.cu	1969-12-31 16:00:00.000000000 -0800
@@ -1,360 +0,0 @@
-/// 
-/// @file    rdwt53.cu
-/// @brief   CUDA implementation of reverse 5/3 2D DWT.
-/// @author  Martin Jirman (207962@mail.muni.cz)
-/// @date    2011-02-04 14:19
-///
-///
-/// Copyright (c) 2011 Martin Jirman
-/// All rights reserved.
-/// 
-/// Redistribution and use in source and binary forms, with or without
-/// modification, are permitted provided that the following conditions are met:
-/// 
-///     * Redistributions of source code must retain the above copyright
-///       notice, this list of conditions and the following disclaimer.
-///     * Redistributions in binary form must reproduce the above copyright
-///       notice, this list of conditions and the following disclaimer in the
-///       documentation and/or other materials provided with the distribution.
-/// 
-/// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-/// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-/// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-/// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
-/// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-/// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-/// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-/// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-/// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-/// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-/// POSSIBILITY OF SUCH DAMAGE.
-///
-
-
-#include "common.h"
-#include "transform_buffer.h"
-#include "io.h"
-
-
-namespace dwt_cuda {
-
-  
-
-  /// Wraps shared momory buffer and algorithms needed for computing 5/3 RDWT
-  /// using sliding window and lifting schema.
-  /// @tparam WIN_SIZE_X  width of sliding window
-  /// @tparam WIN_SIZE_Y  height of sliding window
-  template <int WIN_SIZE_X, int WIN_SIZE_Y>
-  class RDWT53 {
-  private: 
-    
-    /// Shared memory buffer used for 5/3 DWT transforms.
-    typedef TransformBuffer<int, WIN_SIZE_X, WIN_SIZE_Y + 3, 2> RDWT53Buffer;
-
-    /// Shared buffer used for reverse 5/3 DWT.
-    RDWT53Buffer buffer;
-
-    /// Difference between indices of two vertically neighboring items in buffer.
-    enum { STRIDE = RDWT53Buffer::VERTICAL_STRIDE };
-
-
-    /// Info needed for loading of one input column from input image.
-    /// @tparam CHECKED  true if loader should check boundaries
-    template <bool CHECKED>
-    struct RDWT53Column {
-      /// loader of pixels from column in input image
-      VerticalDWTBandLoader<int, CHECKED> loader;
-      
-      /// Offset of corresponding column in shared buffer.
-      int offset;
-      
-      /// Sets all fields to some values to avoid 'uninitialized' warnings.
-      __device__ void clear() {
-        offset = 0;
-        loader.clear();
-      }
-    };
-
-
-    /// 5/3 DWT reverse update operation.
-    struct Reverse53Update {
-      __device__ void operator() (const int p, int & c, const int n) const {
-        c -= (p + n + 2) / 4;  // F.3, page 118, ITU-T Rec. T.800 final draft
-      }
-    };
-
-
-    /// 5/3 DWT reverse predict operation.
-    struct Reverse53Predict {
-      __device__ void operator() (const int p, int & c, const int n) const {
-        c += (p + n) / 2;      // F.4, page 118, ITU-T Rec. T.800 final draft
-      }
-    };
-
-
-    /// Horizontal 5/3 RDWT on specified lines of transform buffer.
-    /// @param lines      number of lines to be transformed
-    /// @param firstLine  index of the first line to be transformed
-    __device__ void horizontalTransform(const int lines, const int firstLine) {
-      __syncthreads();
-      buffer.forEachHorizontalEven(firstLine, lines, Reverse53Update());
-      __syncthreads();
-      buffer.forEachHorizontalOdd(firstLine, lines, Reverse53Predict());
-      __syncthreads();
-    }
-
-
-    /// Using given loader, it loads another WIN_SIZE_Y coefficients
-    /// into specified column.
-    /// @tparam CHECKED  true if loader should check image boundaries
-    /// @param input     input coefficients to load from
-    /// @param col       info about loaded column
-    template <bool CHECKED>
-    inline __device__ void loadWindowIntoColumn(const int * const input,
-                                                RDWT53Column<CHECKED> & col) {
-      for(int i = 3; i < (3 + WIN_SIZE_Y); i += 2) {
-        buffer[col.offset + i * STRIDE] = col.loader.loadLowFrom(input);
-        buffer[col.offset + (i + 1) * STRIDE] = col.loader.loadHighFrom(input);
-      }
-    }
-
-
-    /// Initializes one column of shared transform buffer with 7 input pixels.
-    /// Those 7 pixels will not be transformed. Also initializes given loader.
-    /// @tparam CHECKED  true if loader should check image boundaries
-    /// @param columnX   x coordinate of column in shared transform buffer
-    /// @param input     input image
-    /// @param sizeX     width of the input image
-    /// @param sizeY     height of the input image
-    /// @param loader    (uninitialized) info about loaded column
-    template <bool CHECKED>
-    __device__ void initColumn(const int columnX, const int * const input, 
-                               const int sizeX, const int sizeY,
-                               RDWT53Column<CHECKED> & column,
-                               const int firstY) {
-      // coordinates of the first coefficient to be loaded
-      const int firstX = blockIdx.x * WIN_SIZE_X + columnX;
-
-      // offset of the column with index 'colIndex' in the transform buffer
-      column.offset = buffer.getColumnOffset(columnX);
-
-      if(blockIdx.y == 0) {
-        // topmost block - apply mirroring rules when loading first 3 rows
-        column.loader.init(sizeX, sizeY, firstX, firstY);
-
-        // load pixels in mirrored way
-        buffer[column.offset + 1 * STRIDE] = column.loader.loadLowFrom(input);
-        buffer[column.offset + 0 * STRIDE] =
-        buffer[column.offset + 2 * STRIDE] = column.loader.loadHighFrom(input);
-      } else {
-        // non-topmost row - regular loading:
-        column.loader.init(sizeX, sizeY, firstX, firstY - 1);
-        buffer[column.offset + 0 * STRIDE] = column.loader.loadHighFrom(input);
-        buffer[column.offset + 1 * STRIDE] = column.loader.loadLowFrom(input);
-        buffer[column.offset + 2 * STRIDE] = column.loader.loadHighFrom(input);
-      }
-      // Now, the next coefficient, which will be loaded by loader, is #2.
-    }
-
-
-    /// Actual GPU 5/3 RDWT implementation.
-    /// @tparam CHECKED_LOADS   true if boundaries must be checked when reading
-    /// @tparam CHECKED_WRITES  true if boundaries must be checked when writing
-    /// @param in        input image (5/3 transformed coefficients)
-    /// @param out       output buffer (for reverse transformed image)
-    /// @param sizeX     width of the output image 
-    /// @param sizeY     height of the output image
-    /// @param winSteps  number of sliding window steps
-    template<bool CHECKED_LOADS, bool CHECKED_WRITES>
-    __device__ void transform(const int * const in, int * const out,
-                              const int sizeX, const int sizeY,
-                              const int winSteps) {
-      // info about one main and one boundary column
-      RDWT53Column<CHECKED_LOADS> column, boundaryColumn;
-
-      // index of first row to be transformed
-      const int firstY = blockIdx.y * WIN_SIZE_Y * winSteps;
-
-      // some threads initialize boundary columns
-      boundaryColumn.clear();
-      if(threadIdx.x < 3) {
-        // First 3 threads also handle boundary columns. Thread #0 gets right
-        // column #0, thread #1 get right column #1 and thread #2 left column.
-        const int colId = threadIdx.x + ((threadIdx.x != 2) ? WIN_SIZE_X : -3);
-
-        // Thread initializes offset of the boundary column (in shared 
-        // buffer), first 3 pixels of the column and a loader for this column.
-        initColumn(colId, in, sizeX, sizeY, boundaryColumn, firstY);
-      }
-
-      // All threads initialize central columns.
-      initColumn(parityIdx<WIN_SIZE_X>(), in, sizeX, sizeY, column, firstY);
-
-      // horizontally transform first 3 rows
-      horizontalTransform(3, 0);
-
-      // writer of output pixels - initialize it
-      const int outX = blockIdx.x * WIN_SIZE_X + threadIdx.x;
-      VerticalDWTPixelWriter<int, CHECKED_WRITES> writer;
-      writer.init(sizeX, sizeY, outX, firstY);
-
-      // offset of column (in transform buffer) saved by this thread
-      const int outputColumnOffset = buffer.getColumnOffset(threadIdx.x);
-
-      // (Each iteration assumes that first 3 rows of transform buffer are
-      // already loaded with horizontally transformed pixels.)
-      for(int w = 0; w < winSteps; w++) {
-        // Load another WIN_SIZE_Y lines of this thread's column
-        // into the transform buffer.
-        loadWindowIntoColumn(in, column);
-
-        // possibly load boundary columns
-        if(threadIdx.x < 3) {
-          loadWindowIntoColumn(in, boundaryColumn);
-        }
-
-        // horizontally transform all newly loaded lines
-        horizontalTransform(WIN_SIZE_Y, 3);
-
-        // Using 3 registers, remember current values of last 3 rows 
-        // of transform buffer. These rows are transformed horizontally 
-        // only and will be used in next iteration.
-        int last3Lines[3];
-        last3Lines[0] = buffer[outputColumnOffset + (WIN_SIZE_Y + 0) * STRIDE];
-        last3Lines[1] = buffer[outputColumnOffset + (WIN_SIZE_Y + 1) * STRIDE];
-        last3Lines[2] = buffer[outputColumnOffset + (WIN_SIZE_Y + 2) * STRIDE];
-
-        // vertically transform all central columns
-        buffer.forEachVerticalOdd(outputColumnOffset, Reverse53Update());
-        buffer.forEachVerticalEven(outputColumnOffset, Reverse53Predict());
-
-        // Save all results of current window. Results are in transform buffer
-        // at rows from #1 to #(1 + WIN_SIZE_Y). Other rows are invalid now.
-        // (They only served as a boundary for vertical RDWT.)
-        for(int i = 1; i < (1 + WIN_SIZE_Y); i++) {
-          writer.writeInto(out, buffer[outputColumnOffset + i * STRIDE]);
-        }
-
-        // Use last 3 remembered lines as first 3 lines for next iteration.
-        // As expected, these lines are already horizontally transformed.
-        buffer[outputColumnOffset + 0 * STRIDE] = last3Lines[0];
-        buffer[outputColumnOffset + 1 * STRIDE] = last3Lines[1];
-        buffer[outputColumnOffset + 2 * STRIDE] = last3Lines[2];
-
-        // Wait for all writing threads before proceeding to loading new
-        // coeficients in next iteration. (Not to overwrite those which
-        // are not written yet.)
-        __syncthreads();
-      }
-    }
-
-
-  public:
-    /// Main GPU 5/3 RDWT entry point.
-    /// @param in     input image (5/3 transformed coefficients)
-    /// @param out    output buffer (for reverse transformed image)
-    /// @param sizeX  width of the output image 
-    /// @param sizeY  height of the output image
-    /// @param winSteps  number of sliding window steps
-    __device__ static void run(const int * const input, int * const output,
-                               const int sx, const int sy, const int steps) {
-      // prepare instance with buffer in shared memory
-      __shared__ RDWT53<WIN_SIZE_X, WIN_SIZE_Y> rdwt53;
-
-      // Compute limits of this threadblock's block of pixels and use them to
-      // determine, whether this threadblock will have to deal with boundary.
-      // (1 in next expressions is for radius of impulse response of 5/3 RDWT.)
-      const int maxX = (blockIdx.x + 1) * WIN_SIZE_X + 1;
-      const int maxY = (blockIdx.y + 1) * WIN_SIZE_Y * steps + 1;
-      const bool atRightBoudary = maxX >= sx;
-      const bool atBottomBoudary = maxY >= sy;
-
-      // Select specialized version of code according to distance of this
-      // threadblock's pixels from image boundary.
-      if(atBottomBoudary) {
-        // near bottom boundary => check both writing and reading
-        rdwt53.transform<true, true>(input, output, sx, sy, steps);
-      } else if(atRightBoudary) {
-        // near right boundary only => check writing only
-        rdwt53.transform<false, true>(input, output, sx, sy, steps);
-      } else {
-        // no nearby boundary => check nothing
-        rdwt53.transform<false, false>(input, output, sx, sy, steps);
-      }
-    }
-
-  }; // end of class RDWT53
-  
-  
-  
-  /// Main GPU 5/3 RDWT entry point.
-  /// @param in     input image (5/3 transformed coefficients)
-  /// @param out    output buffer (for reverse transformed image)
-  /// @param sizeX  width of the output image 
-  /// @param sizeY  height of the output image
-  /// @param winSteps  number of sliding window steps
-  template <int WIN_SX, int WIN_SY>
-  __launch_bounds__(WIN_SX, CTMIN(SHM_SIZE/sizeof(RDWT53<WIN_SX, WIN_SY>), 8))
-  __global__ void rdwt53Kernel(const int * const in, int * const out,
-                               const int sx, const int sy, const int steps) {
-    RDWT53<WIN_SX, WIN_SY>::run(in, out, sx, sy, steps);
-  }
-  
-  
-  
-  /// Only computes optimal number of sliding window steps, 
-  /// number of threadblocks and then lanches the 5/3 RDWT kernel.
-  /// @tparam WIN_SX  width of sliding window
-  /// @tparam WIN_SY  height of sliding window
-  /// @param in       input image
-  /// @param out      output buffer
-  /// @param sx       width of the input image 
-  /// @param sy       height of the input image
-  template <int WIN_SX, int WIN_SY>
-  void launchRDWT53Kernel (int * in, int * out, const int sx, const int sy) {
-    // compute optimal number of steps of each sliding window
-    const int steps = divRndUp(sy, 15 * WIN_SY);
-    
-    // prepare grid size
-    dim3 gSize(divRndUp(sx, WIN_SX), divRndUp(sy, WIN_SY * steps));
-    
-    // finally transform this level
-    PERF_BEGIN
-    rdwt53Kernel<WIN_SX, WIN_SY><<<gSize, WIN_SX>>>(in, out, sx, sy, steps);
-    PERF_END("        RDWT53", sx, sy)
-    CudaDWTTester::checkLastKernelCall("RDWT 5/3 kernel");
-  }
-    
-  
-  
-  /// Reverse 5/3 2D DWT. See common rules (above) for more details.
-  /// @param in      Input DWT coefficients. Format described in common rules.
-  ///                Will not be preserved (will be overwritten).
-  /// @param out     output buffer on GPU - will contain original image
-  ///                in normalized range [-128, 127].
-  /// @param sizeX   width of input image (in pixels)
-  /// @param sizeY   height of input image (in pixels)
-  /// @param levels  number of recursive DWT levels
-  void rdwt53(int * in, int * out, int sizeX, int sizeY, int levels) {
-    if(levels > 1) {
-      // let this function recursively reverse transform deeper levels first
-      const int llSizeX = divRndUp(sizeX, 2);
-      const int llSizeY = divRndUp(sizeY, 2);
-      rdwt53(in, out, llSizeX, llSizeY, levels - 1);
-      
-      // copy reverse transformed LL band from output back into the input
-      memCopy(in, out, llSizeX, llSizeY);
-    }
-    
-    // select right width of kernel for the size of the image
-    if(sizeX >= 960) {
-      launchRDWT53Kernel<192, 8>(in, out, sizeX, sizeY);
-    } else if (sizeX >= 480) {
-      launchRDWT53Kernel<128, 8>(in, out, sizeX, sizeY);
-    } else {
-      launchRDWT53Kernel<64, 8>(in, out, sizeX, sizeY);
-    }
-  }
-  
-
-} // end of namespace dwt_cuda
diff -ruN rodinia_3.1/cuda/dwt2d/dwt_cuda/rdwt97.cu rodinia_backup/cuda/dwt2d/dwt_cuda/rdwt97.cu
--- rodinia_3.1/cuda/dwt2d/dwt_cuda/rdwt97.cu	2015-12-11 07:46:14.000000000 -0800
+++ rodinia_backup/cuda/dwt2d/dwt_cuda/rdwt97.cu	1969-12-31 16:00:00.000000000 -0800
@@ -1,363 +0,0 @@
-/// 
-/// @file    rdwt97.cu
-/// @brief   CUDA implementation of reverse 9/7 2D DWT.
-/// @author  Martin Jirman (207962@mail.muni.cz)
-/// @date    2011-02-03 21:59
-///
-///
-/// Copyright (c) 2011 Martin Jirman
-/// All rights reserved.
-/// 
-/// Redistribution and use in source and binary forms, with or without
-/// modification, are permitted provided that the following conditions are met:
-/// 
-///     * Redistributions of source code must retain the above copyright
-///       notice, this list of conditions and the following disclaimer.
-///     * Redistributions in binary form must reproduce the above copyright
-///       notice, this list of conditions and the following disclaimer in the
-///       documentation and/or other materials provided with the distribution.
-/// 
-/// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-/// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-/// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-/// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
-/// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-/// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-/// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-/// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-/// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-/// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-/// POSSIBILITY OF SUCH DAMAGE.
-///
-
-
-#include "common.h"
-#include "transform_buffer.h"
-#include "io.h"
-
-
-namespace dwt_cuda {
-
-  
-  /// Wraps shared memory buffer and methods for computing 9/7 RDWT using
-  /// lifting schema and sliding window.
-  /// @tparam WIN_SIZE_X  width of the sliding window
-  /// @tparam WIN_SIZE_Y  height of the sliding window
-  template <int WIN_SIZE_X, int WIN_SIZE_Y>
-  class RDWT97 {
-  private:
-    
-    /// Info related to loading of one input column.
-    /// @tparam CHECKED true if boundary chould be checked,
-    ///                 false if there is no near boudnary
-    template <bool CHECKED>
-    struct RDWT97Column  {
-      /// laoder of input pxels for given column.
-      VerticalDWTBandLoader<float, CHECKED> loader;
-      
-      /// Offset of loaded column in shared memory buffer.
-      int offset;
-      
-      /// Sets all fields to some values to avoid 'uninitialized' warnings.
-      __device__ void clear() {
-        loader.clear();
-        offset = 0;
-      }
-    };
-
-
-    /// Shared memory buffer used for 9/7 DWT transforms.
-    typedef TransformBuffer<float, WIN_SIZE_X, WIN_SIZE_Y + 7, 4> RDWT97Buffer;
-
-    /// Shared buffer used for reverse 9/7 DWT.
-    RDWT97Buffer buffer;
-
-    /// Difference between indices of two vertical neighbors in buffer.
-    enum { STRIDE = RDWT97Buffer::VERTICAL_STRIDE };
-
-
-    /// Horizontal 9/7 RDWT on specified lines of transform buffer.
-    /// @param lines      number of lines to be transformed
-    /// @param firstLine  index of the first line to be transformed
-    __device__ void horizontalRDWT97(int lines, int firstLine) {
-      __syncthreads();
-      buffer.scaleHorizontal(scale97Mul, scale97Div, firstLine, lines);
-      __syncthreads();
-      buffer.forEachHorizontalEven(firstLine, lines, AddScaledSum(r97update2));
-      __syncthreads();
-      buffer.forEachHorizontalOdd(firstLine, lines, AddScaledSum(r97predict2));
-      __syncthreads();
-      buffer.forEachHorizontalEven(firstLine, lines, AddScaledSum(r97update1));
-      __syncthreads();
-      buffer.forEachHorizontalOdd(firstLine, lines, AddScaledSum(r97Predict1));
-      __syncthreads();
-    }
-
-
-    /// Initializes one column of shared transform buffer with 7 input pixels.
-    /// Those 7 pixels will not be transformed. Also initializes given loader.
-    /// @tparam CHECKED  true if there are near image boundaries
-    /// @param colIndex  index of column in shared transform buffer
-    /// @param input     input image
-    /// @param sizeX     width of the input image
-    /// @param sizeY     height of the input image
-    /// @param column    (uninitialized) info about loading one column
-    /// @param firstY    index of first image row to be transformed
-    template <bool CHECKED>
-    __device__ void initColumn(const int colIndex, const float * const input, 
-                               const int sizeX, const int sizeY,
-                               RDWT97Column<CHECKED> & column,
-                               const int firstY) {
-      // coordinates of the first coefficient to be loaded
-      const int firstX = blockIdx.x * WIN_SIZE_X + colIndex;
-
-      // offset of the column with index 'colIndex' in the transform buffer
-      column.offset = buffer.getColumnOffset(colIndex);
-
-      if(blockIdx.y == 0) {
-        // topmost block - apply mirroring rules when loading first 7 rows
-        column.loader.init(sizeX, sizeY, firstX, firstY);
-
-        // load pixels in mirrored way
-        buffer[column.offset + 3 * STRIDE] = column.loader.loadLowFrom(input);
-        buffer[column.offset + 4 * STRIDE] =
-        buffer[column.offset + 2 * STRIDE] = column.loader.loadHighFrom(input);
-        buffer[column.offset + 5 * STRIDE] =
-        buffer[column.offset + 1 * STRIDE] = column.loader.loadLowFrom(input);
-        buffer[column.offset + 6 * STRIDE] = 
-        buffer[column.offset + 0 * STRIDE] = column.loader.loadHighFrom(input);
-      } else {
-        // non-topmost row - regular loading:
-        column.loader.init(sizeX, sizeY, firstX, firstY - 3);
-        buffer[column.offset + 0 * STRIDE] = column.loader.loadHighFrom(input);
-        buffer[column.offset + 1 * STRIDE] = column.loader.loadLowFrom(input);
-        buffer[column.offset + 2 * STRIDE] = column.loader.loadHighFrom(input);
-        buffer[column.offset + 3 * STRIDE] = column.loader.loadLowFrom(input);
-        buffer[column.offset + 4 * STRIDE] = column.loader.loadHighFrom(input);
-        buffer[column.offset + 5 * STRIDE] = column.loader.loadLowFrom(input);
-        buffer[column.offset + 6 * STRIDE] = column.loader.loadHighFrom(input);
-      }
-      // Now, the next coefficient, which will be loaded by loader, is #4.
-    }
-
-
-    /// Using given loader, it loads another WIN_SIZE_Y coefficients
-    /// into specified column.
-    /// @tparam CHECKED  true if there are near image boundaries
-    /// @param col       info about loaded column
-    /// @param input     buffer with input coefficients
-    template <bool CHECKED>
-    inline __device__ void loadWindowIntoColumn(RDWT97Column<CHECKED> & col,
-                                                const float * const input) {
-      for(int i = 7; i < (7 + WIN_SIZE_Y); i += 2) {
-        buffer[col.offset + i * STRIDE] = col.loader.loadLowFrom(input);
-        buffer[col.offset + (i + 1) * STRIDE] = col.loader.loadHighFrom(input);
-      }
-    }
-
-
-    /// Actual GPU 9/7 RDWT sliding window lifting schema implementation.
-    /// @tparam CHECKED_LOADS   true if loader should check boundaries
-    /// @tparam CHECKED_WRITES  true if boundaries should be taken into account
-    ///                         when writing into output buffer
-    /// @param in        input image (9/7 transformed coefficients)
-    /// @param out       output buffer (for reverse transformed image)
-    /// @param sizeX     width of the output image 
-    /// @param sizeY     height of the output image
-    /// @param winSteps  number of steps of sliding window
-    template <bool CHECKED_LOADS, bool CHECKED_WRITES>
-    __device__ void transform(const float * const in, float * const out,
-                              const int sizeX, const int sizeY,
-                              const int winSteps) {
-      // info about one main column and one boundary column
-      RDWT97Column<CHECKED_LOADS> column;
-      RDWT97Column<CHECKED_LOADS> boundaryColumn;
-
-      // index of first image row to be transformed
-      const int firstY = blockIdx.y * WIN_SIZE_Y * winSteps;
-
-      // initialize boundary columns
-      boundaryColumn.clear();
-      if(threadIdx.x < 7) {
-        // each thread among first 7 ones gets index of one of boundary columns
-        const int colId = threadIdx.x + ((threadIdx.x < 4) ? WIN_SIZE_X : -7);
-
-        // Thread initializes offset of the boundary column (in shared  
-        // buffer), first 7 pixels of the column and a loader for this column.
-        initColumn(colId, in, sizeX, sizeY, boundaryColumn, firstY);
-      }
-
-      // All threads initialize central columns.
-      initColumn(parityIdx<WIN_SIZE_X>(), in, sizeX, sizeY, column, firstY);
-
-      // horizontally transform first 7 rows
-      horizontalRDWT97(7, 0);
-
-      // writer of output pixels - initialize it
-      const int outputX = blockIdx.x * WIN_SIZE_X + threadIdx.x;
-      VerticalDWTPixelWriter<float, CHECKED_WRITES> writer;
-      writer.init(sizeX, sizeY, outputX, firstY);
-
-      // offset of column (in transform buffer) saved by this thread
-      const int outColumnOffset = buffer.getColumnOffset(threadIdx.x);
-
-      // (Each iteration assumes that first 7 rows of transform buffer are 
-      // already loaded with horizontally transformed pixels.)
-      for(int w = 0; w < winSteps; w++) {
-        // Load another WIN_SIZE_Y lines of this thread's column
-        // into the transform buffer.
-        loadWindowIntoColumn(column, in);
-
-        // possibly load boundary columns
-        if(threadIdx.x < 7) {
-          loadWindowIntoColumn(boundaryColumn, in);
-        }
-
-        // horizontally transform all newly loaded lines
-        horizontalRDWT97(WIN_SIZE_Y, 7);
-
-        // Using 7 registers, remember current values of last 7 rows 
-        // of transform buffer. These rows are transformed horizontally 
-        // only and will be used in next iteration.
-        float last7Lines[7];
-        for(int i = 0; i < 7; i++) {
-          last7Lines[i] = buffer[outColumnOffset + (WIN_SIZE_Y + i) * STRIDE];
-        }
-
-        // vertically transform all central columns
-        buffer.scaleVertical(scale97Div, scale97Mul, outColumnOffset,
-                             WIN_SIZE_Y + 7, 0);
-        buffer.forEachVerticalOdd(outColumnOffset, AddScaledSum(r97update2));
-        buffer.forEachVerticalEven(outColumnOffset, AddScaledSum(r97predict2));
-        buffer.forEachVerticalOdd(outColumnOffset, AddScaledSum(r97update1));
-        buffer.forEachVerticalEven(outColumnOffset, AddScaledSum(r97Predict1));
-
-        // Save all results of current window. Results are in transform buffer
-        // at rows from #3 to #(3 + WIN_SIZE_Y). Other rows are invalid now.
-        // (They only served as a boundary for vertical RDWT.)
-        for(int i = 3; i < (3 + WIN_SIZE_Y); i++) {
-          writer.writeInto(out, buffer[outColumnOffset + i * STRIDE]);
-        }
-
-        // Use last 7 remembered lines as first 7 lines for next iteration.
-        // As expected, these lines are already horizontally transformed.
-        for(int i = 0; i < 7; i++) {
-          buffer[outColumnOffset + i * STRIDE] = last7Lines[i];
-        }
-
-        // Wait for all writing threads before proceeding to loading new
-        // coeficients in next iteration. (Not to overwrite those which
-        // are not written yet.)
-        __syncthreads();
-      }
-    }
-
-
-  public:
-    /// Main GPU 9/7 RDWT entry point.
-    /// @param in     input image (9/7 transformed coefficients)
-    /// @param out    output buffer (for reverse transformed image)
-    /// @param sizeX  width of the output image 
-    /// @param sizeY  height of the output image
-    __device__ static void run(const float * const input, float * const output,
-                               const int sx, const int sy, const int steps) {
-      // prepare instance with buffer in shared memory
-      __shared__ RDWT97<WIN_SIZE_X, WIN_SIZE_Y> rdwt97;
-      
-      // Compute limits of this threadblock's block of pixels and use them to
-      // determine, whether this threadblock will have to deal with boundary.
-      // (3 in next expressions is for radius of impulse response of 9/7 RDWT.)
-      const int maxX = (blockIdx.x + 1) * WIN_SIZE_X + 3;
-      const int maxY = (blockIdx.y + 1) * WIN_SIZE_Y * steps + 3;
-      const bool atRightBoudary = maxX >= sx;
-      const bool atBottomBoudary = maxY >= sy;
-
-      // Select specialized version of code according to distance of this
-      // threadblock's pixels from image boundary.
-      if(atBottomBoudary) {
-        // near bottom boundary => check both writing and reading
-        rdwt97.transform<true, true>(input, output, sx, sy, steps);
-      } else if(atRightBoudary) {
-        // near right boundary only => check writing only
-        rdwt97.transform<false, true>(input, output, sx, sy, steps);
-      } else {
-        // no nearby boundary => check nothing
-        rdwt97.transform<false, false>(input, output, sx, sy, steps);
-      }
-    }
-    
-  }; // end of class RDWT97
-  
-    
-  
-  /// Main GPU 9/7 RDWT entry point.
-  /// @param in     input image (9/7 transformed coefficients)
-  /// @param out    output buffer (for reverse transformed image)
-  /// @param sizeX  width of the output image 
-  /// @param sizeY  height of the output image
-  template <int WIN_SX, int WIN_SY>
-  __launch_bounds__(WIN_SX, CTMIN(SHM_SIZE/sizeof(RDWT97<WIN_SX, WIN_SY>), 8))
-  __global__ void rdwt97Kernel(const float * const in, float * const out,
-                               const int sx, const int sy, const int steps) {
-    RDWT97<WIN_SX, WIN_SY>::run(in, out, sx, sy, steps);
-  }
-  
-  
-  
-  /// Only computes optimal number of sliding window steps, 
-  /// number of threadblocks and then lanches the 9/7 RDWT kernel.
-  /// @tparam WIN_SX  width of sliding window
-  /// @tparam WIN_SY  height of sliding window
-  /// @param in       input image
-  /// @param out      output buffer
-  /// @param sx       width of the input image 
-  /// @param sy       height of the input image
-  template <int WIN_SX, int WIN_SY>
-  void launchRDWT97Kernel (float * in, float * out, int sx, int sy) {
-    // compute optimal number of steps of each sliding window
-    const int steps = divRndUp(sy, 15 * WIN_SY);
-    
-    // prepare grid size
-    dim3 gSize(divRndUp(sx, WIN_SX), divRndUp(sy, WIN_SY * steps));
-    
-    // finally launch kernel
-    PERF_BEGIN
-    rdwt97Kernel<WIN_SX, WIN_SY><<<gSize, WIN_SX>>>(in, out, sx, sy, steps);
-    PERF_END("        RDWT97", sx, sy)
-    CudaDWTTester::checkLastKernelCall("RDWT 9/7 kernel");
-  }
-  
-  
-  
-  /// Reverse 9/7 2D DWT. See common rules (dwt.h) for more details.
-  /// @param in      Input DWT coefficients. Format described in common rules.
-  ///                Will not be preserved (will be overwritten).
-  /// @param out     output buffer on GPU - will contain original image
-  ///                in normalized range [-0.5, 0.5].
-  /// @param sizeX   width of input image (in pixels)
-  /// @param sizeY   height of input image (in pixels)
-  /// @param levels  number of recursive DWT levels
-  void rdwt97(float * in, float * out, int sizeX, int sizeY, int levels) {
-    if(levels > 1) {
-      // let this function recursively reverse transform deeper levels first
-      const int llSizeX = divRndUp(sizeX, 2);
-      const int llSizeY = divRndUp(sizeY, 2);
-      rdwt97(in, out, llSizeX, llSizeY, levels - 1);
-      
-      // copy reverse transformed LL band from output back into the input
-      memCopy(in, out, llSizeX, llSizeY);
-    }
-    
-    // select right width of kernel for the size of the image
-    if(sizeX >= 960) {
-      launchRDWT97Kernel<192, 8>(in, out, sizeX, sizeY);
-    } else if (sizeX >= 480) {
-      launchRDWT97Kernel<128, 6>(in, out, sizeX, sizeY);
-    } else {
-      launchRDWT97Kernel<64, 6>(in, out, sizeX, sizeY);
-    }
-  }
-  
-
-  
-} // end of namespace dwt_cuda
diff -ruN rodinia_3.1/cuda/dwt2d/dwt_cuda/transform_buffer.h rodinia_backup/cuda/dwt2d/dwt_cuda/transform_buffer.h
--- rodinia_3.1/cuda/dwt2d/dwt_cuda/transform_buffer.h	2015-12-11 07:46:14.000000000 -0800
+++ rodinia_backup/cuda/dwt2d/dwt_cuda/transform_buffer.h	1969-12-31 16:00:00.000000000 -0800
@@ -1,339 +0,0 @@
-/// line 248 the index
-/// @file    transform_buffer.h
-/// @brief   Buffer with separated even and odd columns and related algorithms.
-/// @author  Martin Jirman (207962@mail.muni.cz)
-/// @date    2011-01-20 18:33
-///
-///
-/// Copyright (c) 2011 Martin Jirman
-/// All rights reserved.
-/// 
-/// Redistribution and use in source and binary forms, with or without
-/// modification, are permitted provided that the following conditions are met:
-/// 
-///     * Redistributions of source code must retain the above copyright
-///       notice, this list of conditions and the following disclaimer.
-///     * Redistributions in binary form must reproduce the above copyright
-///       notice, this list of conditions and the following disclaimer in the
-///       documentation and/or other materials provided with the distribution.
-/// 
-/// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-/// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-/// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-/// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
-/// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-/// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-/// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-/// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-/// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-/// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-/// POSSIBILITY OF SUCH DAMAGE.
-///
-
-
-#ifndef TRANSFORM_BUFFER_H
-#define	TRANSFORM_BUFFER_H
-
-
-namespace dwt_cuda {
-  
-  
-  /// Buffer (in shared memory of GPU) where block of input image is stored,
-  /// but odd and even lines are separated. (Generates less bank conflicts when 
-  /// using lifting schema.) All operations expect SIZE_X threads.
-  /// Also implements basic building blocks of lifting schema.
-  /// @tparam SIZE_X      width of the buffer excluding two boundaries (Also
-  ///                     a number of threads participating on all operations.)
-  ///                     Must be divisible by 4.
-  /// @tparam SIZE_Y      height of buffer (total number of lines)
-  /// @tparam BOUNDARY_X  number of extra pixels at the left and right side
-  ///                     boundary is expected to be smaller than half SIZE_X
-  ///                     Must be divisible by 2.
-  template <typename T, int SIZE_X, int SIZE_Y, int BOUNDARY_X>
-  class TransformBuffer {
-  public:
-    enum {
-      /// difference between pointers to two vertical neigbors
-      VERTICAL_STRIDE = BOUNDARY_X + (SIZE_X / 2)
-    };
-    
-  private:
-    enum {
-      /// number of shared memory banks - needed for correct padding
-      #ifdef __CUDA_ARCH__
-      SHM_BANKS = ((__CUDA_ARCH__ >= 200) ? 32 : 16),
-      #else
-      SHM_BANKS = 16,  // for host code only - can be anything, won't be used
-      #endif
-      
-      /// size of one of two buffers (odd or even)
-      BUFFER_SIZE = VERTICAL_STRIDE * SIZE_Y,
-      
-      /// unused space between two buffers
-      PADDING = SHM_BANKS - ((BUFFER_SIZE + SHM_BANKS / 2) % SHM_BANKS),
-      
-      /// offset of the odd columns buffer from the beginning of data buffer
-      ODD_OFFSET = BUFFER_SIZE + PADDING,
-    };
-
-    /// buffer for both even and odd columns
-    T data[2 * BUFFER_SIZE + PADDING];
-    
-    
-    
-    /// Applies specified function to all central elements while also passing
-    /// previous and next elements as parameters.
-    /// @param count         count of central elements to apply function to
-    /// @param prevOffset    offset of first central element
-    /// @param midOffset     offset of first central element's predecessor
-    /// @param nextOffset    offset of first central element's successor
-    /// @param function      the function itself
-    template <typename FUNC>
-    __device__ void horizontalStep(const int count, const int prevOffset, 
-                                   const int midOffset, const int nextOffset,
-                                   const FUNC & function) {
-      // number of unchecked iterations
-      const int STEPS = count / SIZE_X;
-      
-      // items remaining after last unchecked iteration
-      const int finalCount = count % SIZE_X; 
-      
-      // offset of items processed in last (checked) iteration
-      const int finalOffset = count - finalCount;  
-      
-      // all threads perform fixed number of iterations ...
-      for(int i = 0; i < STEPS; i++) {
-      // for(int i = 0; i < 3; i++) {
-        const T previous = data[prevOffset + i * SIZE_X + threadIdx.x];
-        const T next     = data[nextOffset + i * SIZE_X + threadIdx.x];
-        T & center       = data[midOffset  + i * SIZE_X + threadIdx.x];
-        // function(previous, center, (nextOffset + i*SIZE_X+threadIdx.x));
-        function(previous, center, next);// the real one
-      }
-      
-      // ... but not all threads participate on final iteration
-      if(threadIdx.x < finalCount) {
-        const T previous = data[prevOffset + finalOffset + threadIdx.x];
-        const T next     = data[nextOffset + finalOffset + threadIdx.x];
-        T & center = data[midOffset + finalOffset + threadIdx.x];
-        // function(previous, center, (nextOffset+finalOffset+threadIdx.x));
-        // kaixi
-        function(previous, center, next);//the real one
-      }
-    }
-
-  public:
-    
-    /// Gets offset of the column with given index. Central columns have 
-    /// indices from 0 to NUM_LINES - 1, left boundary columns have negative 
-    /// indices and right boundary columns indices start with NUM_LINES.
-    /// @param columnIndex  index of column to get pointer to
-    /// @return  offset of the first item of column with specified index
-    __device__ int getColumnOffset(int columnIndex) {
-      columnIndex += BOUNDARY_X;             // skip boundary
-      return columnIndex / 2                 // select right column
-          + (columnIndex & 1) * ODD_OFFSET;  // select odd or even buffer
-    }
-    
-    
-    /// Provides access to data of the transform buffer.
-    /// @param index  index of the item to work with
-    /// @return reference to item at given index
-    __device__ T & operator[] (const int index) {
-      return data[index];
-    }
-    
-            
-    /// Applies specified function to all horizontally even elements in 
-    /// specified lines. (Including even elements in boundaries except 
-    /// first even element in first left boundary.) SIZE_X threads participate 
-    /// and synchronization is needed before result can be used.
-    /// @param firstLine  index of first line
-    /// @param numLines   count of lines
-    /// @param func       function to be applied on all even elements
-    ///                   parameters: previous (odd) element, the even
-    ///                   element itself and finally next (odd) element
-    template <typename FUNC>
-    __device__ void forEachHorizontalEven(const int firstLine,
-                                          const int numLines,
-                                          const FUNC & func) {
-      // number of even elemens to apply function to
-      const int count = numLines * VERTICAL_STRIDE - 1;
-      // offset of first even element
-      const int centerOffset = firstLine * VERTICAL_STRIDE + 1;
-      // offset of odd predecessor of first even element
-      const int prevOffset = firstLine * VERTICAL_STRIDE + ODD_OFFSET;
-      // offset of odd successor of first even element
-      const int nextOffset = prevOffset + 1;
-      
-      // call generic horizontal step function
-      horizontalStep(count, prevOffset, centerOffset, nextOffset, func);
-    }
-    
-    
-    /// Applies given function to all horizontally odd elements in specified
-    /// lines. (Including odd elements in boundaries except last odd element
-    /// in last right boundary.) SIZE_X threads participate and synchronization
-    /// is needed before result can be used.
-    /// @param firstLine  index of first line
-    /// @param numLines   count of lines
-    /// @param func       function to be applied on all odd elements
-    ///                   parameters: previous (even) element, the odd
-    ///                   element itself and finally next (even) element
-    template <typename FUNC>
-    __device__ void forEachHorizontalOdd(const int firstLine,
-                                         const int numLines,
-                                         const FUNC & func) {
-      // numbet of odd elements to apply function to
-      const int count = numLines * VERTICAL_STRIDE - 1;
-      // offset of even predecessor of first odd element
-      const int prevOffset = firstLine * VERTICAL_STRIDE;
-      // offset of first odd element
-      const int centerOffset = prevOffset + ODD_OFFSET;
-      // offset of even successor of first odd element
-      const int nextOffset = prevOffset + 1;
-      
-      // call generic horizontal step function
-      horizontalStep(count, prevOffset, centerOffset, nextOffset, func);
-    }
-    
-    
-    /// Applies specified function to all even elements (except element #0)
-    /// of given column. Each thread takes care of one column, so there's 
-    /// no need for synchronization.
-    /// @param columnOffset  offset of thread's column
-    /// @param f             function to be applied on all even elements
-    ///                      parameters: previous (odd) element, the even
-    ///                      element itself and finally next (odd) element
-    template <typename F>
-    __device__ void forEachVerticalEven(const int columnOffset, const F & f) {
-      if(SIZE_Y > 3) { // makes no sense otherwise
-        const int steps = SIZE_Y / 2 - 1;
-        for(int i = 0; i < steps; i++) {
-          const int row = 2 + i * 2;
-          const T prev = data[columnOffset + (row - 1) * VERTICAL_STRIDE];
-          const T next = data[columnOffset + (row + 1) * VERTICAL_STRIDE];
-          f(prev, data[columnOffset + row * VERTICAL_STRIDE] , next);
-		  
-		  //--------------- FOR TEST -----------------
-/*		__syncthreads();
-		if ((blockIdx.x * blockDim.x + threadIdx.x) == 0){
-			diffOut[2500]++;
-			diffOut[diffOut[2500]] = 2;//data[columnOffset + row * VERTICAL_STRIDE];
-		}	
-		__syncthreads();
-*/		  //--------------- FOR TEST -----------------
-		  
-		  
-        }
-      }
-    }
-    
-    
-    /// Applies specified function to all odd elements of given column.
-    /// Each thread takes care of one column, so there's no need for
-    /// synchronization.
-    /// @param columnOffset  offset of thread's column
-    /// @param f             function to be applied on all odd elements
-    ///                      parameters: previous (even) element, the odd
-    ///                      element itself and finally next (even) element
-    template <typename F>
-    __device__ void forEachVerticalOdd(const int columnOffset, const F & f) {
-      const int steps = (SIZE_Y - 1) / 2;
-      for(int i = 0; i < steps; i++) {
-        const int row = i * 2 + 1;
-        const T prev = data[columnOffset + (row - 1) * VERTICAL_STRIDE];
-        const T next = data[columnOffset + (row + 1) * VERTICAL_STRIDE];
-
-		f(prev, data[columnOffset + row * VERTICAL_STRIDE], next);
-		
-		
-		  //--------------- FOR TEST -----------------
-/*		__syncthreads();
-		if ((blockIdx.x * blockDim.x + threadIdx.x) == 0){
-			diffOut[2500]++;
-			diffOut[diffOut[2500]] = 1; //data[columnOffset + row * VERTICAL_STRIDE];
-		}
-
-		__syncthreads();
-*/		  //--------------- FOR TEST -----------------
-      }
-    }
-    
-    
-    
-    /// Scales elements at specified lines.
-    /// @param evenScale  scaling factor for horizontally even elements
-    /// @param oddScale   scaling factor for horizontally odd elements
-    /// @param numLines   number of lines, whose elements should be scaled
-    /// @param firstLine  index of first line to scale elements in
-    __device__ void scaleHorizontal(const T evenScale, const T oddScale,
-                                    const int firstLine, const int numLines) {
-      const int offset = firstLine * VERTICAL_STRIDE;
-      const int count = numLines * VERTICAL_STRIDE;
-      const int steps = count / SIZE_X;
-      const int finalCount = count % SIZE_X;
-      const int finalOffset = count - finalCount;
-      
-      // run iterations, whete all threads participate
-      for(int i = 0; i < steps; i++) {
-        data[threadIdx.x + i * SIZE_X + offset] *= evenScale;
-        data[threadIdx.x + i * SIZE_X + offset + ODD_OFFSET] *= oddScale;
-      }
-      
-      // some threads also finish remaining unscaled items
-      if(threadIdx.x < finalCount) {
-        data[threadIdx.x + finalOffset + offset] *= evenScale;
-        data[threadIdx.x + finalOffset + offset + ODD_OFFSET] *= oddScale;
-      }
-    }
-    
-    
-    /// Scales elements in specified column.
-    /// @param evenScale     scaling factor for vertically even elements
-    /// @param oddScale      scaling factor for vertically odd elements
-    /// @param columnOffset  offset of the column to work with
-    /// @param numLines      number of lines, whose elements should be scaled
-    /// @param firstLine     index of first line to scale elements in
-    __device__ void scaleVertical(const T evenScale, const T oddScale,
-                                  const int columnOffset, const int numLines,
-                                  const int firstLine) {
-      for(int i = firstLine; i < (numLines + firstLine); i++) {
-        if(i & 1) {
-          data[columnOffset + i * VERTICAL_STRIDE] *= oddScale;
-        } else {
-          data[columnOffset + i * VERTICAL_STRIDE] *= evenScale;
-        }
-      }
-    }
-	
-	
-	//****************For Test(Feb23), test inter parameters*************
-	__device__ int getVERTICAL_STRIDE(){
-		return VERTICAL_STRIDE;
-	}
-	__device__ int getSHM_BANKS(){
-		return SHM_BANKS;
-	}
-	__device__ int  getBuffersize(){		
-		return BUFFER_SIZE;
-	}
-	__device__ int getPADDING(){
-		return PADDING;
-	}
-	__device__ int getODD_OFFSET(){
-		return ODD_OFFSET;
-	}
-
-
-    //****************For Test(Feb23), test inter parameters*************
-	
-	
-  };  // end of class TransformBuffer
-
-
-} // namespace dwt_cuda
-
-
-#endif	// TRANSFORM_BUFFER_H
-
diff -ruN rodinia_3.1/cuda/dwt2d/dwt.h rodinia_backup/cuda/dwt2d/dwt.h
--- rodinia_3.1/cuda/dwt2d/dwt.h	2015-12-11 07:46:15.000000000 -0800
+++ rodinia_backup/cuda/dwt2d/dwt.h	1969-12-31 16:00:00.000000000 -0800
@@ -1,40 +0,0 @@
-/* 
- * Copyright (c) 2009, Jiri Matela
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- *     * Redistributions of source code must retain the above copyright
- *       notice, this list of conditions and the following disclaimer.
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- */
-
-#ifndef _DWT_H
-#define _DWT_H
-
-template<typename T> 
-int nStage2dDWT(T *in, T *out, T * backup, int pixWidth, int pixHeight, int stages, bool forward);
-
-template<typename T>
-int writeNStage2DDWT(T *component_cuda, int width, int height, 
-                     int stages, const char * filename, const char * suffix);
-template<typename T>
-int writeLinear(T *component_cuda, int width, int height, 
-                     const char * filename, const char * suffix);
-
-#endif
diff -ruN rodinia_3.1/cuda/dwt2d/dwt_kernel.c.copy rodinia_backup/cuda/dwt2d/dwt_kernel.c.copy
--- rodinia_3.1/cuda/dwt2d/dwt_kernel.c.copy	2015-12-11 07:46:15.000000000 -0800
+++ rodinia_backup/cuda/dwt2d/dwt_kernel.c.copy	1969-12-31 16:00:00.000000000 -0800
@@ -1,550 +0,0 @@
-/* 
- * Copyright (c) 2009, Jiri Matela
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- *     * Redistributions of source code must retain the above copyright
- *       notice, this list of conditions and the following disclaimer.
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- */
-
-#ifndef _DWT97_KERNEL_CU
-#define _DWT97_KERNEL_CU
-
-//#define A -1.586134342
-//#define B -0.05298011854
-//#define C 0.8829110762
-//#define D 0.4435068522
-//#define K 1.149604398 
-
-/* 9/7 filters */
-#define A -1.58613434205992
-#define B -0.05298011857296
-#define C  0.88291107553093
-#define D  0.44350685204397
-#define K  1.23017410491400
-
-/* 5/3 filters*/
-#define P53 -0.5
-#define U53 0.25
-
-__shared__ float f_blockData[2*DWT_BLOCK_SIZE_Y][DWT_BLOCK_SIZE_X + 1];
-
-enum dwtfilter
-{
-    dwt97,
-    dwt53
-};
-
-__device__ void rowPredict(float a, int n, float f_blockData[2*DWT_BLOCK_SIZE_Y][DWT_BLOCK_SIZE_X + 1])
-{
-    float _x,x,x_;
-    if (n < blockDim.x-1) {
-        _x = f_blockData[threadIdx.x][n-1]; 
-        x  = f_blockData[threadIdx.x][n]; 
-        x_ = f_blockData[threadIdx.x][n+1]; 
-        x += a * (_x + x_);
-        f_blockData[threadIdx.x][n] = x;
-    }
-    if (n == blockDim.x-1) { //last sample on the threadIdx.x line
-        _x = f_blockData[threadIdx.x][n-1];
-        x  = f_blockData[threadIdx.x][n];
-        x += 2*a*_x;
-        f_blockData[threadIdx.x][n] = x;
-    }
-}
-
-__device__ void rowUpdate(float a, int n, float f_blockData[2*DWT_BLOCK_SIZE_Y][DWT_BLOCK_SIZE_X + 1])
-{
-    float _x,x,x_;
-    if (n > 0) {
-        _x = f_blockData[threadIdx.x][n-1]; 
-         x = f_blockData[threadIdx.x][n]; 
-        x_ = f_blockData[threadIdx.x][n+1]; 
-        x += a * (_x + x_);
-        f_blockData[threadIdx.x][n] = x;
-    }
-    if (n == 0) {
-        x = f_blockData[threadIdx.x][0]; 
-        x_ =f_blockData[threadIdx.x][1]; 
-        x += a*(2*x_);
-        f_blockData[threadIdx.x][0] = x;
-    }
-}
-
-__device__ void colPredict(float a, int n, float f_blockData[2*DWT_BLOCK_SIZE_Y][DWT_BLOCK_SIZE_X + 1])
-{
-    float _x,x,x_;
-    if (n < blockDim.x-1) {
-        _x = f_blockData[n-1][threadIdx.x]; 
-        x  = f_blockData[n][threadIdx.x]; 
-        x_ = f_blockData[n+1][threadIdx.x]; 
-        x += a * (_x + x_);
-        f_blockData[n][threadIdx.x] = x;
-    }
-    if (n == blockDim.x-1) { //last sample on the threadIdx.x line
-        _x = f_blockData[n-1][threadIdx.x];
-        x  = f_blockData[n][threadIdx.x];
-        x += 2*a*_x;
-        f_blockData[n][threadIdx.x] = x;
-    }
-}
-
-__device__ void colUpdate(float a, int n, float f_blockData[2*DWT_BLOCK_SIZE_Y][DWT_BLOCK_SIZE_X + 1])
-{
-    float _x,x,x_;
-    if (n > 0) {
-        _x = f_blockData[n-1][threadIdx.x]; 
-         x = f_blockData[n][threadIdx.x]; 
-        x_ = f_blockData[n+1][threadIdx.x]; 
-        x += a * (_x + x_);
-        f_blockData[n][threadIdx.x] = x;
-    }
-    if (n == 0) {
-        x = f_blockData[0][threadIdx.x]; 
-        x_ =f_blockData[1][threadIdx.x]; 
-        x += a*(2*x_);
-        f_blockData[0][threadIdx.x] = x;
-    }
-}
-
-__device__ void computeFDwt97(float f_blockData[2*DWT_BLOCK_SIZE_Y][DWT_BLOCK_SIZE_X + 1])
-{
-    /*** ROW-WISE ***/
-    //Predict 1
-    //float a = -1.586134342;
-    int n = threadIdx.y*2 + 1; //odd samples
-    rowPredict((float)A, n, f_blockData);
-    __syncthreads();
-
-    // Update 1
-    //a = -0.05298011854;
-    n--; //even samples
-    rowUpdate((float)B, n, f_blockData); 
-    __syncthreads();
-
-    //Predict 2
-    //a = 0.8829110762;
-    n++; //odd samples
-    rowPredict((float)C, n, f_blockData);
-    __syncthreads();
-
-    // Update 2
-    //a = 0.4435068522;
-    n--; //even samples
-    rowUpdate((float)D, n, f_blockData); 
-    __syncthreads();
-
-    //scale 
-    //a = 1.149604398;
-    f_blockData[threadIdx.x][n] = f_blockData[threadIdx.x][n] / (float)K; // sude
-    f_blockData[threadIdx.x][n+1] = f_blockData[threadIdx.x][n+1] * (float)K; //liche
-    __syncthreads();
-
-    /*** COL-WISE ***/
-    //Predict 1
-    //float a = -1.586134342;
-    n = threadIdx.y*2 + 1; //odd samples
-    colPredict((float)A, n, f_blockData);
-    __syncthreads();
-
-    // Update 1
-    //a = -0.05298011854;
-    n--; //even samples
-    colUpdate((float)B, n, f_blockData); 
-    __syncthreads();
-
-    //Predict 2
-    //a = 0.8829110762;
-    n++; //odd samples
-    colPredict((float)C, n, f_blockData);
-    __syncthreads();
-
-    // Update 2
-    //a = 0.4435068522;
-    n--; //even samples
-    colUpdate((float)D, n, f_blockData); 
-    __syncthreads();
-
-    //scale 
-    //a = 1.149604398;
-    f_blockData[n][threadIdx.x] = f_blockData[n][threadIdx.x] / (float)K; // sude
-    f_blockData[n+1][threadIdx.x] = f_blockData[n+1][threadIdx.x] * (float)K; //liche
-    __syncthreads();
-}
-
-__device__ void computeFDwt53(float f_blockData[2*DWT_BLOCK_SIZE_Y][DWT_BLOCK_SIZE_X + 1])
-{
-    /*** ROW-WISE ***/
-    //Predict 1
-    //float a = -1.586134342;
-    int n = threadIdx.y*2 + 1; //odd samples
-    rowPredict((float)P53, n, f_blockData);
-    __syncthreads();
-
-    // Update 1
-    //a = -0.05298011854;
-    n--; //even samples
-    rowUpdate((float)U53, n, f_blockData); 
-    __syncthreads();
-
-    /*** COL-WISE ***/
-    //Predict 1
-    //float a = -1.586134342;
-    n = threadIdx.y*2 + 1; //odd samples
-    colPredict((float)P53, n, f_blockData);
-    __syncthreads();
-
-    // Update 1
-    //a = -0.05298011854;
-    n--; //even samples
-    colUpdate((float)U53, n, f_blockData); 
-    __syncthreads();
-}
-
-
-template<typename T>
-__global__ void fdwt(T *src, T *out, int width, int height, enum dwtfilter filter)
-{
-
-    const int   globalTileX = IMUL(blockIdx.x, DWT_BLOCK_SIZE_X);
-    const int   globalTileY = IMUL(blockIdx.y, DWT_BLOCK_SIZE_Y);   
-    int       globalThreadX = globalTileX + threadIdx.x;
-    int       globalThreadY = IMUL((globalTileY + threadIdx.y), 2); //even lines
-
-    //mirroing along right edge of image: uvwxyZyxw...  'Z' is the the edge sample, everything
-    //beyond is mirrored with the edge as axis.  2 * imgWidth - globalThreadX - 2
-    if (globalThreadX >= width) 
-        globalThreadX = IMUL(width, 2) - (globalThreadX + 2);
-    if (globalThreadY >= height) 
-        globalThreadY = IMUL(height, 2) - (globalThreadY + 2);
-
-    int rowStart = IMUL(globalThreadY, width); //row start index in *src
-    int sharedIdxY = IMUL(threadIdx.y, 2);
-
-    //load even lines 
-    f_blockData[sharedIdxY][threadIdx.x] = src[rowStart + globalThreadX];
-
-    //compute odd lines indexes and load them
-    if ((globalThreadY+1) < height) {
-        rowStart += width; 
-    } else
-        rowStart -= width; 
-    f_blockData[sharedIdxY+1][threadIdx.x] = src[rowStart + globalThreadX];
-
-    __syncthreads();
-
-    /* Compute DWT */
-    switch (filter) {
-        case dwt97:
-            computeFDwt97(f_blockData);
-            break;
-        case dwt53:
-            computeFDwt53(f_blockData);
-            break;
-    }
-
-    //store data
-    globalThreadX = globalTileX + threadIdx.x;
-    globalThreadY = (globalTileY + threadIdx.y) * 2; //even lines
-
-    /** Output DWT bands as 2x2 matrix **/
-#if 0
-    if (globalThreadX < width && globalThreadY < height) {
-        globalThreadX /= 2;
-        globalThreadY /= 2;
-        rowStart = globalThreadY * width;
-
-        if (threadIdx.x % 2 == 0) {
-            out[rowStart + globalThreadX] = f_blockData[threadIdx.y*2][threadIdx.x];
-        } else {
-            out[rowStart + globalThreadX + width/2] = f_blockData[threadIdx.y*2][threadIdx.x];
-        }
-
-        rowStart += width*height/2;
-
-        if (threadIdx.x % 2 == 0) {
-            out[rowStart + globalThreadX] = f_blockData[(threadIdx.y*2)+1][threadIdx.x];
-        } else {
-            out[rowStart + globalThreadX + width/2] = f_blockData[(threadIdx.y*2)+1][threadIdx.x];
-        }
-    }
-#else
-
-    /** Output DWT bands linearly **/
-
-    // tidX / 16; -- 0 determines first half of X, 1 determines second
-    //               first half reads every 4th line (0, 4, 8, 12 ..), second half reads
-    //               every 4th + 2 line(2, 6, 10, 14 ..)
-    int sharedHalfX = threadIdx.x>>4;
-    // tidY / 8;  -- 0 determines first half of Y, 1 determines second
-    //               first half reads even samples, second half reads odd samples
-    int sharedHalfY = threadIdx.y>>3;
-
-    // threadIdx.x<<1       -- even samples on the line
-    // - sharedHalfX*32     -- start reading from zero when in second half (tid 16 to 31)
-    //                         second half reads from line sharedY+2
-    // + sharedHalfY*1      -- read odd samples when Y is in second half
-    int sharedX = threadIdx.x*2 - sharedHalfX*32 + sharedHalfY;
-
-    // threadIdx.y<<2       -- go by four lines
-    // - sharedHalfY*32     -- reset to line 0 when in second half (tid 8 to 16)
-    // + sharedHalfX*2      -- read from base_line+2 when threadIdx.x is in second half
-    //                      (base_line is every 4th line: threadIdx.y<<2 - sharedHalfY*32)
-    int sharedY = threadIdx.y*4 - sharedHalfY*32  + sharedHalfX*2;
-
-    int oddSampCount   = width >> 1;
-    int evenSampCount  = width - oddSampCount;
-    int oddLinesCount  = height >> 1;
-    int evenLinesCount = height - oddLinesCount;
-
-    if (globalTileX + sharedX < width && globalTileY * 2 + sharedY < height) {
-        /** Storing even lines (LL and LH) **/
-        // globalTileX >> 1         -- each of bands is half of width of original image,
-        //                          so that samples from the every 4th (or 4th+1) line goes to
-        //                          the first half of corresponding line of transformed image
-        // sharedHalfX*(width>>1)   -- samples from the 4th + 2 (or 4th + 2 + 1) line goes to
-        //                          the second half of corresponding line of transformed image 
-        //                          (sharedHalfX determines threads with id 16 - 31, those threads
-        //                          read every 4th + 2 or 4th + 2 + 1 line)
-        // threadIdx.x              -- samples are stored at possiotion of threadIdx.x (0 - 15) 
-        //                          when storing 4th (+1) line
-        // -sharedHalfX*(DWT_BLOCK_SIZE_X>>1) -- when storing to second half (every 4th+2(+1) shared line) 
-        //                                we need to reset threadIdx.x to values 0 - 15 so that 
-        //                                substracting half of DWT_BLOCK_SIZE_X
-        //globalThreadX = (globalTileX>>1) + sharedHalfX*(sharedHalfY*evenSampCount + (!sharedHalfY)*oddSampCount) 
-         //               + threadIdx.x - sharedHalfX*(DWT_BLOCK_SIZE_X>>1);
-        globalThreadX = (globalTileX>>1) + threadIdx.x - sharedHalfX*(DWT_BLOCK_SIZE_X>>1);
-
-        // globalTileY>>1           -- we are storing even lines, this is just half of resulting 
-        //                          image and this half contains LL (first quarter) and LH (second quarter)
-        // sharedHalfY*(height>>2)  -- odd samples (LH or HH) on each line are stored to second quarter of 
-        //                          current image half
-        // threadIdx.y              -- storing on line number "threadIdx.y", which is 0 - 7 
-        // -sharedHalfY*(DWT_BLOCK_SIZE_Y>>1) -- reseting line numbers "threadIdx.y" to 0 - 7 when storing odd
-        //                                samples to the second half
-        //globalThreadY = (globalTileY>>1) + sharedHalfY*(height>>2) + threadIdx.y - sharedHalfY*(DWT_BLOCK_SIZE_Y>>1);
-        globalThreadY = globalTileY + threadIdx.y*2 + sharedHalfX - sharedHalfY*(DWT_BLOCK_SIZE_Y);
-        
-
-        // even lines (LL and HL)
-        if (sharedHalfY == 0) {
-            rowStart = IMUL(globalThreadY, evenSampCount);
-        } else {
-            rowStart = IMUL(globalThreadY, oddSampCount);
-        }
-        rowStart += sharedHalfY*IMUL(evenLinesCount, evenSampCount);
-
-        out[rowStart + globalThreadX] = f_blockData[sharedY][sharedX];
-
-        // odd lines (LH and HH)
-        sharedY++;
-        if (globalTileY * 2 + sharedY < height) {
-            //rowStart += IMUL(width,(height>>1));
-            rowStart = IMUL(evenLinesCount, evenSampCount) + IMUL(evenLinesCount, oddSampCount);
-            if (sharedHalfY == 0) {
-                rowStart += IMUL(globalThreadY, evenSampCount);
-            } else {
-                rowStart += IMUL(globalThreadY, oddSampCount);
-            }
-        //    rowStart += IMUL(globalThreadY, (sharedHalfY*evenSampCount + (!sharedHalfY)*oddSampCount));
-            rowStart += sharedHalfY*IMUL(oddLinesCount, evenSampCount);
-            out[rowStart + globalThreadX] = f_blockData[sharedY][sharedX];
-        }
-    }
-#endif
-
-}
-
-__device__ void computeRDwt97(float f_blockData[2*DWT_BLOCK_SIZE_Y][DWT_BLOCK_SIZE_X + 1])
-{
-    int n = threadIdx.y*2; //even samples
-
-    /*** COL-WISE ***/
-    //unscale 
-    f_blockData[n][threadIdx.x] = f_blockData[n][threadIdx.x] * (float)K; // sude
-    f_blockData[n+1][threadIdx.x] = f_blockData[n+1][threadIdx.x] / (float)K; //liche
-    __syncthreads();
-
-    // Undo Update 2
-    colUpdate(-1*(float)D, n, f_blockData); 
-    __syncthreads();
-
-    //Undo Predict 2
-    n++; //odd samples
-    colPredict(-1*(float)C, n, f_blockData);
-    __syncthreads();
-
-    // Undo Update 1
-    n--; //even samples
-    colUpdate(-1*(float)B, n, f_blockData); 
-    __syncthreads();
-
-    //Undo Predict 1
-    n++; //odd samples
-    colPredict(-1*(float)A, n, f_blockData);
-    __syncthreads();
-
-    /*** ROW-WISE ***/
-    //unscale 
-    n--; //even samples
-    f_blockData[threadIdx.x][n] = f_blockData[threadIdx.x][n] * (float)K; // sude
-    f_blockData[threadIdx.x][n+1] = f_blockData[threadIdx.x][n+1] / (float)K; //liche
-    __syncthreads();
-
-    // Undo Update 2
-    rowUpdate(-1*(float)D, n, f_blockData); 
-    __syncthreads();
-
-    // Undo Predict 2
-    n++; //odd samples
-    rowPredict(-1*(float)C, n, f_blockData);
-    __syncthreads();
-
-    // Undo Update 1
-    n--; //even samples
-    rowUpdate(-1*(float)B, n, f_blockData); 
-    __syncthreads();
-
-    // Undo Predict 1
-    n++; //even samples
-    rowPredict(-1*(float)A, n, f_blockData);
-    __syncthreads();
-}
-
-__device__ void computeRDwt53(float f_blockData[2*DWT_BLOCK_SIZE_Y][DWT_BLOCK_SIZE_X + 1])
-{
-    int n = threadIdx.y*2; //even samples
-
-    /*** COL-WISE ***/
-    // Undo Update 1
-    colUpdate(-1*(float)U53, n, f_blockData); 
-    __syncthreads();
-
-    //Undo Predict 1
-    n++; //odd samples
-    colPredict(-1*(float)P53, n, f_blockData);
-    __syncthreads();
-
-    /*** ROW-WISE ***/
-    // Undo Update 1
-    rowUpdate(-1*(float)U53, n, f_blockData); 
-    __syncthreads();
-
-    // Undo Predict 1
-    n++; //odd samples
-    rowPredict(-1*(float)P53, n, f_blockData);
-    __syncthreads();
-}
-
-template<typename T>
-__global__ void rdwt(T *src, T *out, int width, int height, enum dwtfilter filter)
-{
-
-    const int   globalTileX = IMUL(blockIdx.x, DWT_BLOCK_SIZE_X);
-    const int   globalTileY = IMUL(blockIdx.y, DWT_BLOCK_SIZE_Y);   
-    int       globalThreadX;// = globalTileX + threadIdx.x;
-    int       globalThreadY;// = IMUL((globalTileY + threadIdx.y), 2); //even lines
-
-    // tidX / 16; -- 0 determines first half of X, 1 determines second
-    //               first half reads every 4th line (0, 4, 8, 12 ..), second half reads
-    //               every 4th + 2 line(2, 6, 10, 14 ..)
-    int sharedHalfX = threadIdx.x>>4;
-    // tidY / 8;  -- 0 determines first half of Y, 1 determines second
-    //               first half reads even samples, second half reads odd samples
-    int sharedHalfY = threadIdx.y>>3;
-
-    // threadIdx.x<<1       -- even samples on the line
-    // - sharedHalfX*32     -- start reading from zero when in second half (tid 16 to 31)
-    //                         second half reads from line sharedY+2
-    // + sharedHalfY*1      -- read odd samples when Y is in second half
-    int sharedX = threadIdx.x*2 - sharedHalfX*32 + sharedHalfY;
-
-    // threadIdx.y<<2       -- go by four lines
-    // - sharedHalfY*32     -- reset to line 0 when in second half (tid 8 to 16)
-    // + sharedHalfX*2      -- read from base_line+2 when threadIdx.x is in second half
-    //                      (base_line is every 4th line: threadIdx.y<<2 - sharedHalfY*32)
-    int sharedY = threadIdx.y*4 - sharedHalfY*32  + sharedHalfX*2;
-
-    int oddSampCount   = width >> 1;
-    int evenSampCount  = width - oddSampCount;
-    int oddLinesCount  = height >> 1;
-    int evenLinesCount = height - oddLinesCount;
-
-    globalThreadX = (globalTileX>>1) + threadIdx.x - sharedHalfX*(DWT_BLOCK_SIZE_X>>1);
-    globalThreadY = globalTileY + threadIdx.y*2 + sharedHalfX - sharedHalfY*(DWT_BLOCK_SIZE_Y);
-
-    if (globalThreadY >= evenLinesCount)
-        globalThreadY = (evenLinesCount<<1) - (globalThreadY + 2);
-
-    int rowStart;
-    if (sharedHalfY == 0) {
-        if (globalThreadX >= evenSampCount)
-            globalThreadX = (evenSampCount<<1) - (globalThreadX + 2);
-        rowStart = IMUL(globalThreadY, evenSampCount);
-    } else {
-        if (globalThreadX >= oddSampCount)
-            globalThreadX = (oddSampCount<<1) - (globalThreadX + 2);
-        rowStart = IMUL(globalThreadY, oddSampCount);
-    }
-    rowStart += sharedHalfY*IMUL(evenLinesCount, evenSampCount);
-
-    f_blockData[sharedY][sharedX] = src[rowStart + globalThreadX];
-
-    globalThreadY = globalTileY + threadIdx.y*2 + sharedHalfX - sharedHalfY*(DWT_BLOCK_SIZE_Y);
-    if (globalThreadY >= oddLinesCount)
-        globalThreadY = (oddLinesCount<<1) - (globalThreadY + 2);
-
-    sharedY++;
-    rowStart = IMUL(evenLinesCount, evenSampCount) + IMUL(evenLinesCount, oddSampCount); // second img half
-    rowStart += sharedHalfY*IMUL(oddLinesCount, evenSampCount); // + quater (the good one), only in case of we are reading odd samples
-    if (sharedHalfY == 0) {
-        rowStart += IMUL(globalThreadY, evenSampCount);
-    } else {
-        rowStart += IMUL(globalThreadY, oddSampCount);
-    }
-    f_blockData[sharedY][sharedX] = src[rowStart + globalThreadX];
-
-    __syncthreads();
-
-    /* Compute DWT */
-    switch (filter) {
-        case dwt97:
-            computeRDwt97(f_blockData);
-            break;
-        case dwt53:
-            computeRDwt53(f_blockData);
-            break;
-    }
-
-    //store data
-    int sharedIdxY = IMUL(threadIdx.y, 2);
-    globalThreadX = globalTileX + threadIdx.x;
-    globalThreadY = (globalTileY + threadIdx.y) * 2; //even lines
-    if (globalThreadX < width && (globalThreadY) < height) {
-        rowStart = IMUL(globalThreadY, width); //row start index in *src
-        out[rowStart + globalThreadX] = f_blockData[sharedIdxY][threadIdx.x];
-        if ((globalThreadY+1) < height) {
-            rowStart += width; 
-            out[rowStart + globalThreadX] = f_blockData[sharedIdxY+1][threadIdx.x];
-        }
-    }
-}
-
-#endif
diff -ruN rodinia_3.1/cuda/dwt2d/main.cu rodinia_backup/cuda/dwt2d/main.cu
--- rodinia_3.1/cuda/dwt2d/main.cu	2015-12-11 07:46:14.000000000 -0800
+++ rodinia_backup/cuda/dwt2d/main.cu	1969-12-31 16:00:00.000000000 -0800
@@ -1,398 +0,0 @@
-/* 
- * Copyright (c) 2009, Jiri Matela
- * All rights reserved.
- * 
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 
- *     * Redistributions of source code must retain the above copyright
- *       notice, this list of conditions and the following disclaimer.
- *     * Redistributions in binary form must reproduce the above copyright
- *       notice, this list of conditions and the following disclaimer in the
- *       documentation and/or other materials provided with the distribution.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- */
-
-#include <unistd.h>
-#include <error.h>
-#include <stdio.h>
-#include <stdlib.h>
-#include <fcntl.h>
-#include <errno.h>
-#include <string.h>
-#include <assert.h>
-#include <sys/time.h>
-#include <getopt.h>
-
-#include "common.h"
-#include "components.h"
-#include "dwt.h"
-
-struct dwt {
-    char * srcFilename;
-    char * outFilename;
-    unsigned char *srcImg;
-    int pixWidth;
-    int pixHeight;
-    int components;
-    int dwtLvls;
-};
-
-int getImg(char * srcFilename, unsigned char *srcImg, int inputSize)
-{
-    // printf("Loading ipnput: %s\n", srcFilename);
-    char *path = "../../data/dwt2d/";
-    char *newSrc = NULL;
-    
-    if((newSrc = (char *)malloc(strlen(srcFilename)+strlen(path)+1)) != NULL)
-    {
-        newSrc[0] = '\0';
-        strcat(newSrc, path);
-        strcat(newSrc, srcFilename);
-        srcFilename= newSrc;
-    }
-    printf("Loading ipnput: %s\n", srcFilename);
-
-    //srcFilename = strcat("../../data/dwt2d/",srcFilename);
-    //read image
-    int i = open(srcFilename, O_RDONLY, 0644);
-    if (i == -1) { 
-        error(0,errno,"cannot access %s", srcFilename);
-        return -1;
-    }
-    int ret = read(i, srcImg, inputSize);
-    printf("precteno %d, inputsize %d\n", ret, inputSize);
-    close(i);
-
-    return 0;
-}
-
-
-void usage() {
-    printf("dwt [otpions] src_img.rgb <out_img.dwt>\n\
-  -d, --dimension\t\tdimensions of src img, e.g. 1920x1080\n\
-  -c, --components\t\tnumber of color components, default 3\n\
-  -b, --depth\t\t\tbit depth, default 8\n\
-  -l, --level\t\t\tDWT level, default 3\n\
-  -D, --device\t\t\tcuda device\n\
-  -f, --forward\t\t\tforward transform\n\
-  -r, --reverse\t\t\treverse transform\n\
-  -9, --97\t\t\t9/7 transform\n\
-  -5, --53\t\t\t5/3 transform\n\
-  -w  --write-visual\t\twrite output in visual (tiled) fashion instead of the linear\n");
-}
-
-template <typename T>
-void processDWT(struct dwt *d, int forward, int writeVisual)
-{
-    int componentSize = d->pixWidth*d->pixHeight*sizeof(T);
-    
-    T *c_r_out, *backup ;
-    cudaMalloc((void**)&c_r_out, componentSize); //< aligned component size
-    cudaCheckError("Alloc device memory");
-    cudaMemset(c_r_out, 0, componentSize);
-    cudaCheckError("Memset device memory");
-    
-    cudaMalloc((void**)&backup, componentSize); //< aligned component size
-    cudaCheckError("Alloc device memory");
-    cudaMemset(backup, 0, componentSize);
-    cudaCheckError("Memset device memory");
-	
-    if (d->components == 3) {
-        /* Alloc two more buffers for G and B */
-        T *c_g_out, *c_b_out;
-        cudaMalloc((void**)&c_g_out, componentSize); //< aligned component size
-        cudaCheckError("Alloc device memory");
-        cudaMemset(c_g_out, 0, componentSize);
-        cudaCheckError("Memset device memory");
-        
-        cudaMalloc((void**)&c_b_out, componentSize); //< aligned component size
-        cudaCheckError("Alloc device memory");
-        cudaMemset(c_b_out, 0, componentSize);
-        cudaCheckError("Memset device memory");
-        
-        /* Load components */
-        T *c_r, *c_g, *c_b;
-        cudaMalloc((void**)&c_r, componentSize); //< R, aligned component size
-        cudaCheckError("Alloc device memory");
-        cudaMemset(c_r, 0, componentSize);
-        cudaCheckError("Memset device memory");
-
-        cudaMalloc((void**)&c_g, componentSize); //< G, aligned component size
-        cudaCheckError("Alloc device memory");
-        cudaMemset(c_g, 0, componentSize);
-        cudaCheckError("Memset device memory");
-
-        cudaMalloc((void**)&c_b, componentSize); //< B, aligned component size
-        cudaCheckError("Alloc device memory");
-        cudaMemset(c_b, 0, componentSize);
-        cudaCheckError("Memset device memory");
-
-        rgbToComponents(c_r, c_g, c_b, d->srcImg, d->pixWidth, d->pixHeight);
-		
-
-        /* Compute DWT and always store into file */
-
-        nStage2dDWT(c_r, c_r_out, backup, d->pixWidth, d->pixHeight, d->dwtLvls, forward);
-        nStage2dDWT(c_g, c_g_out, backup, d->pixWidth, d->pixHeight, d->dwtLvls, forward);
-        nStage2dDWT(c_b, c_b_out, backup, d->pixWidth, d->pixHeight, d->dwtLvls, forward);
-     
-        // -------test----------
-        // T *h_r_out=(T*)malloc(componentSize);
-		// cudaMemcpy(h_r_out, c_g_out, componentSize, cudaMemcpyDeviceToHost);
-        // int ii;
-		// for(ii=0;ii<componentSize/sizeof(T);ii++) {
-			// fprintf(stderr, "%d ", h_r_out[ii]);
-			// if((ii+1) % (d->pixWidth) == 0) fprintf(stderr, "\n");
-        // }
-        // -------test----------
-        
-		
-        /* Store DWT to file */
-#ifdef OUTPUT        
-        if (writeVisual) {
-            writeNStage2DDWT(c_r_out, d->pixWidth, d->pixHeight, d->dwtLvls, d->outFilename, ".r");
-            writeNStage2DDWT(c_g_out, d->pixWidth, d->pixHeight, d->dwtLvls, d->outFilename, ".g");
-            writeNStage2DDWT(c_b_out, d->pixWidth, d->pixHeight, d->dwtLvls, d->outFilename, ".b");
-        } else {
-            writeLinear(c_r_out, d->pixWidth, d->pixHeight, d->outFilename, ".r");
-            writeLinear(c_g_out, d->pixWidth, d->pixHeight, d->outFilename, ".g");
-            writeLinear(c_b_out, d->pixWidth, d->pixHeight, d->outFilename, ".b");
-        }
-#endif
-
-
-        cudaFree(c_r);
-        cudaCheckError("Cuda free");
-        cudaFree(c_g);
-        cudaCheckError("Cuda free");
-        cudaFree(c_b);
-        cudaCheckError("Cuda free");
-        cudaFree(c_g_out);
-        cudaCheckError("Cuda free");
-        cudaFree(c_b_out);
-        cudaCheckError("Cuda free");
-
-    } 
-    else if (d->components == 1) {
-        //Load component
-        T *c_r;
-        cudaMalloc((void**)&(c_r), componentSize); //< R, aligned component size
-        cudaCheckError("Alloc device memory");
-        cudaMemset(c_r, 0, componentSize);
-        cudaCheckError("Memset device memory");
-
-        bwToComponent(c_r, d->srcImg, d->pixWidth, d->pixHeight);
-
-        // Compute DWT 
-        nStage2dDWT(c_r, c_r_out, backup, d->pixWidth, d->pixHeight, d->dwtLvls, forward);
-
-        // Store DWT to file 
-// #ifdef OUTPUT        
-        if (writeVisual) {
-            writeNStage2DDWT(c_r_out, d->pixWidth, d->pixHeight, d->dwtLvls, d->outFilename, ".out");
-        } else {
-            writeLinear(c_r_out, d->pixWidth, d->pixHeight, d->outFilename, ".lin.out");
-        }
-// #endif
-        cudaFree(c_r);
-        cudaCheckError("Cuda free");
-    }
-
-    cudaFree(c_r_out);
-    cudaCheckError("Cuda free device");
-    cudaFree(backup);
-    cudaCheckError("Cuda free device");
-}
-
-int main(int argc, char **argv) 
-{
-    int optindex = 0;
-    char ch;
-    struct option longopts[] = {
-        {"dimension",   required_argument, 0, 'd'}, //dimensions of src img
-        {"components",  required_argument, 0, 'c'}, //numger of components of src img
-        {"depth",       required_argument, 0, 'b'}, //bit depth of src img
-        {"level",       required_argument, 0, 'l'}, //level of dwt
-        {"device",      required_argument, 0, 'D'}, //cuda device
-        {"forward",     no_argument,       0, 'f'}, //forward transform
-        {"reverse",     no_argument,       0, 'r'}, //reverse transform
-        {"97",          no_argument,       0, '9'}, //9/7 transform
-        {"53",          no_argument,       0, '5' }, //5/3transform
-        {"write-visual",no_argument,       0, 'w' }, //write output (subbands) in visual (tiled) order instead of linear
-        {"help",        no_argument,       0, 'h'}  
-    };
-    
-    int pixWidth    = 0; //<real pixWidth
-    int pixHeight   = 0; //<real pixHeight
-    int compCount   = 3; //number of components; 3 for RGB or YUV, 4 for RGBA
-    int bitDepth    = 8; 
-    int dwtLvls     = 3; //default numuber of DWT levels
-    int device      = 0;
-    int forward     = 1; //forward transform
-    int dwt97       = 1; //1=dwt9/7, 0=dwt5/3 transform
-    int writeVisual = 0; //write output (subbands) in visual (tiled) order instead of linear
-    char * pos;
-
-    while ((ch = getopt_long(argc, argv, "d:c:b:l:D:fr95wh", longopts, &optindex)) != -1) {
-        switch (ch) {
-        case 'd':
-            pixWidth = atoi(optarg);
-            pos = strstr(optarg, "x");
-            if (pos == NULL || pixWidth == 0 || (strlen(pos) >= strlen(optarg))) {
-                usage();
-                return -1;
-            }
-            pixHeight = atoi(pos+1);
-            break;
-        case 'c':
-            compCount = atoi(optarg);
-            break;
-        case 'b':
-            bitDepth = atoi(optarg);
-            break;
-        case 'l':
-            dwtLvls = atoi(optarg);
-            break;
-        case 'D':
-            device = atoi(optarg);
-            break;
-        case 'f':
-            forward = 1;
-            break;
-        case 'r':
-            forward = 0;
-            break;
-        case '9':
-            dwt97 = 1;
-            break;
-        case '5':
-            dwt97 = 0;
-            break;
-        case 'w':
-            writeVisual = 1;
-            break;
-        case 'h':
-            usage();
-            return 0;
-        case '?':
-            return -1;
-        default :
-            usage();
-            return -1;
-        }
-    }
-	argc -= optind;
-	argv += optind;
-
-    if (argc == 0) { // at least one filename is expected
-        printf("Please supply src file name\n");
-        usage();
-        return -1;
-    }
-
-    if (pixWidth <= 0 || pixHeight <=0) {
-        printf("Wrong or missing dimensions\n");
-        usage();
-        return -1;
-    }
-
-    if (forward == 0) {
-        writeVisual = 0; //do not write visual when RDWT
-    }
-
-    // device init
-    int devCount;
-    cudaGetDeviceCount(&devCount);
-    cudaCheckError("Get device count");
-    if (devCount == 0) {
-        printf("No CUDA enabled device\n");
-        return -1;
-    } 
-    if (device < 0 || device > devCount -1) {
-        printf("Selected device %d is out of bound. Devices on your system are in range %d - %d\n", 
-               device, 0, devCount -1);
-        return -1;
-    }
-    cudaDeviceProp devProp;                                          
-    cudaGetDeviceProperties(&devProp, device);  
-    cudaCheckError("Get device properties");
-    if (devProp.major < 1) {                                         
-        printf("Device %d does not support CUDA\n", device);
-        return -1;
-    }                                                                   
-    printf("Using device %d: %s\n", device, devProp.name);
-    cudaSetDevice(device);
-    cudaCheckError("Set selected device");
-
-    struct dwt *d;
-    d = (struct dwt *)malloc(sizeof(struct dwt));
-    d->srcImg = NULL;
-    d->pixWidth = pixWidth;
-    d->pixHeight = pixHeight;
-    d->components = compCount;
-    d->dwtLvls  = dwtLvls;
-
-    // file names
-    d->srcFilename = (char *)malloc(strlen(argv[0]));
-    strcpy(d->srcFilename, argv[0]);
-    if (argc == 1) { // only one filename supplyed
-        d->outFilename = (char *)malloc(strlen(d->srcFilename)+4);
-        strcpy(d->outFilename, d->srcFilename);
-        strcpy(d->outFilename+strlen(d->srcFilename), ".dwt");
-    } else {
-        d->outFilename = strdup(argv[1]);
-    }
-
-    //Input review
-    printf("Source file:\t\t%s\n", d->srcFilename);
-    printf(" Dimensions:\t\t%dx%d\n", pixWidth, pixHeight);
-    printf(" Components count:\t%d\n", compCount);
-    printf(" Bit depth:\t\t%d\n", bitDepth);
-    printf(" DWT levels:\t\t%d\n", dwtLvls);
-    printf(" Forward transform:\t%d\n", forward);
-    printf(" 9/7 transform:\t\t%d\n", dwt97);
-    
-    //data sizes
-    int inputSize = pixWidth*pixHeight*compCount; //<amount of data (in bytes) to proccess
-
-    //load img source image
-    cudaMallocHost((void **)&d->srcImg, inputSize);
-    cudaCheckError("Alloc host memory");
-    if (getImg(d->srcFilename, d->srcImg, inputSize) == -1) 
-        return -1;
-
-    /* DWT */
-    if (forward == 1) {
-        if(dwt97 == 1 )
-            processDWT<float>(d, forward, writeVisual);
-        else // 5/3
-            processDWT<int>(d, forward, writeVisual);
-    }
-    else { // reverse
-        if(dwt97 == 1 )
-            processDWT<float>(d, forward, writeVisual);
-        else // 5/3
-            processDWT<int>(d, forward, writeVisual);
-    }
-
-    //writeComponent(r_cuda, pixWidth, pixHeight, srcFilename, ".g");
-    //writeComponent(g_wave_cuda, 512000, ".g");
-    //writeComponent(g_cuda, componentSize, ".g");
-    //writeComponent(b_wave_cuda, componentSize, ".b");
-    cudaFreeHost(d->srcImg);
-    cudaCheckError("Cuda free host");
-
-    return 0;
-}
diff -ruN rodinia_3.1/cuda/dwt2d/Makefile rodinia_backup/cuda/dwt2d/Makefile
--- rodinia_3.1/cuda/dwt2d/Makefile	2015-12-11 07:46:14.000000000 -0800
+++ rodinia_backup/cuda/dwt2d/Makefile	1969-12-31 16:00:00.000000000 -0800
@@ -1,112 +0,0 @@
-#Configure
-#CUDA_INSTALL_PATH ?= /usr/local/cuda
-CUDA_INSTALL_PATH = $(CUDA_DIR)
-EXECUTABLE := dwt2d
-
-# Debug options
-dbg=0
-cudagdb=0 #compile for use with cuda-gdb, note that 'dbg' must be 1 as well
-performancetest=1
-
-# NVCC Options
-NVCCFLAGS += -arch sm_20
-
-# Files
-CFILES := 
-CXXFILES := 
-CUFILES := main.cu dwt.cu components.cu dwt_cuda/fdwt53.cu dwt_cuda/fdwt97.cu dwt_cuda/common.cu dwt_cuda/rdwt97.cu dwt_cuda/rdwt53.cu
-
-# Includes
-INCLUDES := -I. -I$(CUDA_INSTALL_PATH)/include
-
-include ../../common/make.config
-
-
-# Common flags
-COMMONFLAGS += $(INCLUDES) 
-NVCCFLAGS += $(COMMONFLAGS)
-CXXFLAGS += $(COMMONFLAGS)
-CFLAGS += $(COMMONFLAGS) -std=c99 
-LDFLAGS += -L$(CUDA_INSTALL_PATH)/lib64 -lcudart
-
-# Warning flags (from cuda common.mk)
-CXXWARN_FLAGS := \
-	-W -Wall \
-	-Wimplicit \
-	-Wswitch \
-	-Wformat \
-	-Wchar-subscripts \
-	-Wparentheses \
-	-Wmultichar \
-	-Wtrigraphs \
-	-Wpointer-arith \
-	-Wcast-align \
-	-Wreturn-type \
-	-Wno-unused-function \
-	$(SPACE)
-
-CWARN_FLAGS := $(CXXWARN_FLAGS) \
-	-Wstrict-prototypes \
-	-Wmissing-prototypes \
-	-Wmissing-declarations \
-	-Wnested-externs \
-	-Wmain \
-
-CFLAGS += $(CWARN_FLAGS)
-CXXFLAGS += $(CXXWARN_FLAGS)
-
-# Debug/release flags
-ifeq ($(dbg),1)
-    COMMONFLAGS += -g 
-    NVCCFLAGS   += -D_DEBUG
-    CXXFLAGS    += -D_DEBUG
-    CFLAGS      += -D_DEBUG
-
-    ifeq ($(cudagdb),1)
-        NVCCFLAGS += -G
-    endif
-else 
-    COMMONFLAGS += -O2 
-    NVCCFLAGS   += --compiler-options -fno-strict-aliasing
-    CXXFLAGS    += -fno-strict-aliasing
-    CFLAGS      += -fno-strict-aliasing
-endif
-
-#ifeq ($(performancetest),1)
-#    COMMONFLAGS += -DGPU_DWT_TESTING
-#endif
-
-#ifdef OUTPUT
-#	override OUTPUT = -DOUTPUT
-#endif
-
-OUTPUT = -DOUTPUT
-
-# Compilers
-CXX := g++
-CC := gcc
-LINK := g++ -fPIC
-NVCC := $(CUDA_INSTALL_PATH)/bin/nvcc
-
-# Generate object files list
-COBJS=$(CFILES:.c=.c.o)
-CXXOBJS=$(CXXFILES:.cpp=.cpp.o)
-CUOBJS=$(CUFILES:.cu=.cu.o)
-
-.SUFFIXES: .c.o .cpp.o .cu.o .cu 
-
-%.c.o: %.c
-	$(CC) $(CFLAGS) -c $< -o $@
-
-%.cu.o: %.cu
-	$(NVCC) $(OUTPUT) $(NVCCFLAGS) -c $< -o $@
-
-%.cpp.o: %.cpp
-	$(CXX) $(CXXFLAGS) -c $< -o $@
-
-$(EXECUTABLE): $(COBJS) $(CXXOBJS) $(CUOBJS) 
-	$(LINK) -o $(EXECUTABLE) $(COBJS) $(CXXOBJS) $(CUOBJS) $(LDFLAGS)
-
-clean:
-	rm -f $(COBJS) $(CXXOBJS) $(CUOBJS) $(EXECUTABLE)
-	rm *.bmp.dwt.*		
\ No newline at end of file
diff -ruN rodinia_3.1/cuda/dwt2d/README rodinia_backup/cuda/dwt2d/README
--- rodinia_3.1/cuda/dwt2d/README	2015-12-11 07:46:14.000000000 -0800
+++ rodinia_backup/cuda/dwt2d/README	1969-12-31 16:00:00.000000000 -0800
@@ -1,35 +0,0 @@
-
-// DESCRIPTION
-
-This is the CUDA version of the code.
-
-The JPEG2000 standard uses 2D Discrete Wavelet Transform (2D DWT), which consumes a significant part of the total encoding time
-
-
-
-// USE
-**************OUTPUT********************
-USAGE:
-make clean
-make OUTPUT=Y
-
-
-**************PARAMETERS*****************
-USEAGE:
-./dwt2d [otpions] src_img.rgb <out_img.dwt>
-
-  -d, --dimension     dimensions of src img, e.g. 1920x1080
-  -c, --components    number of color components, default 3
-  -l, --level         DWT level, default 3
-  -f, --forward       forward transform
-  -5, --53            5/3 transform
-
-
-
-
-
-
-
-
-
-
diff -ruN rodinia_3.1/cuda/dwt2d/result.txt rodinia_backup/cuda/dwt2d/result.txt
--- rodinia_3.1/cuda/dwt2d/result.txt	2015-12-11 07:46:14.000000000 -0800
+++ rodinia_backup/cuda/dwt2d/result.txt	1969-12-31 16:00:00.000000000 -0800
@@ -1,9 +0,0 @@
-/usr/local/cuda/bin/nvcc -arch sm_20 -I. -I/include  -O2  --compiler-options -fno-strict-aliasing -c main.cu -o main.cu.o
-/usr/local/cuda/bin/nvcc -arch sm_20 -I. -I/include  -O2  --compiler-options -fno-strict-aliasing -c dwt.cu -o dwt.cu.o
-/usr/local/cuda/bin/nvcc -arch sm_20 -I. -I/include  -O2  --compiler-options -fno-strict-aliasing -c components.cu -o components.cu.o
-/usr/local/cuda/bin/nvcc -arch sm_20 -I. -I/include  -O2  --compiler-options -fno-strict-aliasing -c dwt_cuda/fdwt53.cu -o dwt_cuda/fdwt53.cu.o
-/usr/local/cuda/bin/nvcc -arch sm_20 -I. -I/include  -O2  --compiler-options -fno-strict-aliasing -c dwt_cuda/fdwt97.cu -o dwt_cuda/fdwt97.cu.o
-/usr/local/cuda/bin/nvcc -arch sm_20 -I. -I/include  -O2  --compiler-options -fno-strict-aliasing -c dwt_cuda/common.cu -o dwt_cuda/common.cu.o
-/usr/local/cuda/bin/nvcc -arch sm_20 -I. -I/include  -O2  --compiler-options -fno-strict-aliasing -c dwt_cuda/rdwt97.cu -o dwt_cuda/rdwt97.cu.o
-/usr/local/cuda/bin/nvcc -arch sm_20 -I. -I/include  -O2  --compiler-options -fno-strict-aliasing -c dwt_cuda/rdwt53.cu -o dwt_cuda/rdwt53.cu.o
-g++ -fPIC -o dwt2d   main.cu.o dwt.cu.o components.cu.o dwt_cuda/fdwt53.cu.o dwt_cuda/fdwt97.cu.o dwt_cuda/common.cu.o dwt_cuda/rdwt97.cu.o dwt_cuda/rdwt53.cu.o -L/usr/local/cuda/lib64 -lcudart
diff -ruN rodinia_3.1/cuda/dwt2d/run.sh rodinia_backup/cuda/dwt2d/run.sh
--- rodinia_3.1/cuda/dwt2d/run.sh	2015-12-11 07:46:14.000000000 -0800
+++ rodinia_backup/cuda/dwt2d/run.sh	1969-12-31 16:00:00.000000000 -0800
@@ -1,3 +0,0 @@
-./dwt2d 192.bmp -d 192x192 -f -5 -l 3
-ls
-./dwt2d rgb.bmp -d 1024x1024 -f -5 -l 3
Binary files rodinia_3.1/cuda/gaussian/gaussian and rodinia_backup/cuda/gaussian/gaussian differ
diff -ruN rodinia_3.1/cuda/gaussian/gaussian.cu rodinia_backup/cuda/gaussian/gaussian.cu
--- rodinia_3.1/cuda/gaussian/gaussian.cu	2015-12-11 07:46:08.000000000 -0800
+++ rodinia_backup/cuda/gaussian/gaussian.cu	2024-09-26 12:55:55.315234695 -0700
@@ -15,7 +15,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <sys/time.h>
-#include "cuda.h"
+#include "hip/hip_runtime.h"
 #include <string.h>
 #include <math.h>
 
@@ -199,15 +199,15 @@
  **-----------------------------------------------------
  */
 void PrintDeviceProperties(){
-	cudaDeviceProp deviceProp;  
+	hipDeviceProp_t deviceProp;  
 	int nDevCount = 0;  
 	
-	cudaGetDeviceCount( &nDevCount );  
+	hipGetDeviceCount( &nDevCount );  
 	printf( "Total Device found: %d", nDevCount );  
 	for (int nDeviceIdx = 0; nDeviceIdx < nDevCount; ++nDeviceIdx )  
 	{  
 	    memset( &deviceProp, 0, sizeof(deviceProp));  
-	    if( cudaSuccess == cudaGetDeviceProperties(&deviceProp, nDeviceIdx))  
+	    if( hipSuccess == hipGetDeviceProperties(&deviceProp, nDeviceIdx))  
 	        {
 				printf( "\nDevice Name \t\t - %s ", deviceProp.name );  
 			    printf( "\n**************************************");  
@@ -227,7 +227,7 @@
 			    printf( "\nNumber of Multi processors \t\t - %d\n\n", deviceProp.multiProcessorCount );  
 			}  
 	    else  
-	        printf( "\n%s", cudaGetErrorString(cudaGetLastError()));  
+	        printf( "\n%s", hipGetErrorString(hipGetLastError()));  
 	}  
 }
  
@@ -329,16 +329,16 @@
     float *m_cuda,*a_cuda,*b_cuda;
 	
 	// allocate memory on GPU
-	cudaMalloc((void **) &m_cuda, Size * Size * sizeof(float));
+	hipMalloc((void **) &m_cuda, Size * Size * sizeof(float));
 	 
-	cudaMalloc((void **) &a_cuda, Size * Size * sizeof(float));
+	hipMalloc((void **) &a_cuda, Size * Size * sizeof(float));
 	
-	cudaMalloc((void **) &b_cuda, Size * sizeof(float));	
+	hipMalloc((void **) &b_cuda, Size * sizeof(float));	
 
 	// copy memory to GPU
-	cudaMemcpy(m_cuda, m, Size * Size * sizeof(float),cudaMemcpyHostToDevice );
-	cudaMemcpy(a_cuda, a, Size * Size * sizeof(float),cudaMemcpyHostToDevice );
-	cudaMemcpy(b_cuda, b, Size * sizeof(float),cudaMemcpyHostToDevice );
+	hipMemcpy(m_cuda, m, Size * Size * sizeof(float),hipMemcpyHostToDevice );
+	hipMemcpy(a_cuda, a, Size * Size * sizeof(float),hipMemcpyHostToDevice );
+	hipMemcpy(b_cuda, b, Size * sizeof(float),hipMemcpyHostToDevice );
 	
 	int block_size,grid_size;
 	
@@ -363,9 +363,9 @@
     gettimeofday(&time_start, NULL);
 	for (t=0; t<(Size-1); t++) {
 		Fan1<<<dimGrid,dimBlock>>>(m_cuda,a_cuda,Size,t);
-		cudaThreadSynchronize();
+		hipDeviceSynchronize();
 		Fan2<<<dimGridXY,dimBlockXY>>>(m_cuda,a_cuda,b_cuda,Size,Size-t,t);
-		cudaThreadSynchronize();
+		hipDeviceSynchronize();
 		checkCUDAError("Fan2");
 	}
 	// end timing kernels
@@ -374,12 +374,12 @@
     totalKernelTime = (time_end.tv_sec * 1000000 + time_end.tv_usec) - (time_start.tv_sec * 1000000 + time_start.tv_usec);
 	
 	// copy memory back to CPU
-	cudaMemcpy(m, m_cuda, Size * Size * sizeof(float),cudaMemcpyDeviceToHost );
-	cudaMemcpy(a, a_cuda, Size * Size * sizeof(float),cudaMemcpyDeviceToHost );
-	cudaMemcpy(b, b_cuda, Size * sizeof(float),cudaMemcpyDeviceToHost );
-	cudaFree(m_cuda);
-	cudaFree(a_cuda);
-	cudaFree(b_cuda);
+	hipMemcpy(m, m_cuda, Size * Size * sizeof(float),hipMemcpyDeviceToHost );
+	hipMemcpy(a, a_cuda, Size * Size * sizeof(float),hipMemcpyDeviceToHost );
+	hipMemcpy(b, b_cuda, Size * sizeof(float),hipMemcpyDeviceToHost );
+	hipFree(m_cuda);
+	hipFree(a_cuda);
+	hipFree(b_cuda);
 }
 
 /*------------------------------------------------------
@@ -459,11 +459,11 @@
 }
 void checkCUDAError(const char *msg)
 {
-    cudaError_t err = cudaGetLastError();
-    if( cudaSuccess != err) 
+    hipError_t err = hipGetLastError();
+    if( hipSuccess != err) 
     {
         fprintf(stderr, "Cuda error: %s: %s.\n", msg, 
-                                  cudaGetErrorString( err) );
+                                  hipGetErrorString( err) );
         exit(EXIT_FAILURE);
     }                         
 }
diff -ruN rodinia_3.1/cuda/gaussian/Makefile rodinia_backup/cuda/gaussian/Makefile
--- rodinia_3.1/cuda/gaussian/Makefile	2015-12-11 07:46:08.000000000 -0800
+++ rodinia_backup/cuda/gaussian/Makefile	2024-09-26 12:55:55.315234695 -0700
@@ -1,14 +1,14 @@
 include ../../common/make.config
 
-CC := $(CUDA_DIR)/bin/nvcc
+CC := hipcc
 
-INCLUDE := $(CUDA_DIR)/include
+INCLUDE := 
 
 SRC = gaussian.cu
 EXE = gaussian
 
 release: $(SRC)
-	$(CC) $(KERNEL_DIM) $(SRC) -o $(EXE) -I$(INCLUDE) -L$(CUDA_LIB_DIR) 
+	$(CC) $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o $(KERNEL_DIM) $(SRC) -o $(EXE)
 
 clean:
 	rm gaussian
diff -ruN rodinia_3.1/cuda/gaussian/matrixGenerator.py rodinia_backup/cuda/gaussian/matrixGenerator.py
--- rodinia_3.1/cuda/gaussian/matrixGenerator.py	2024-09-26 15:55:15.615562881 -0700
+++ rodinia_backup/cuda/gaussian/matrixGenerator.py	1969-12-31 16:00:00.000000000 -0800
@@ -1,95 +0,0 @@
-#!/usr/bin/python
-
-# This script generates matrices to solve a set of equations with n variables and n unknowns.
-# For each iteration, an n x n matrix and a 1 x n vector are created to describe the set of
-# equations in the form:
-#
-#              a0x + b0y + c0z + d0w = e0
-#              a1x + b1y + c1z + d1w = e1
-#              a2x + b2y + c2z + d2w = e2
-#              a3x + b3y + c3z + d3w = e3
-#
-# where in this case n=4.
-#
-# The files that are produced contain the dimension in line one, followed by
-# the n x n coefficient matrix, the 1 x n vector, and the 1 x n solution.
-# Each output file has the name matrixN.txt, where N is the value of n (e.g., matrix4.txt)
-#
-# The n x n matrix values and solution vector are confined to the values -0.9 to 0.9 
-# (one decimal place), but the 1 x n vector can have two decimal place values.
-# 
-# usage:
-# ./matrixGenerator a b c
-#
-# where a is the start value for n, b is the end value for n, and c is the step
-#
-# For example:
-#
-# ./matrixGenerator 16 256 4
-#
-# produces matrix16.txt, matrix20.txt, ... , matrix252.txt, matrix256.txt
-#
-# If there are no arguments, a is assumed to be 4 and only matrix4.txt is produced
-# If only a is present, only that matrix is produced
-# If a and b are present but not c, a step value of 1 is assumed
-
-import random
-import sys
-
-a = 4
-b = 4
-c = 1
-
-# parse command line
-try:
-    a = int(sys.argv[1])
-    b = a+1
-    b = int(sys.argv[2])+1
-    c = int(sys.argv[3])
-except IndexError:
-    pass
-except ValueError:
-    pass
-
-for sqSize in range(a,b,c):
-	#size = 100
-	#size = sqSize*sqSize
-	size = sqSize;
-	print size
-	solnVec = []
-	matrix = []
-	bVector = []
-	
-	filename = "matrix"+str(size)+".txt"
-	#f = open("matrix100.txt",'w')
-	f = open(filename,'w')
-	f.write(str(size)+"\n\n")
-	for i in range(size):
-		#solnVec.append(random.randint(-size,size)/float(size))
-		solnVec.append(random.randint(-10,10)/float(10))
-	
-	for i in range(size):
-		matrixRow = []
-		for j in range(size):
-			#matrixRow.append(random.randint(-size,size)/float(size))
-			matrixRow.append(random.randint(-10,10)/float(10))
-		matrix.append(matrixRow)
-	
-	for i in matrix:
-		linResult = 0
-		for j in range(size):
-			f.write(str(i[j])+"\t")
-			linResult+=i[j]*solnVec[j]
-		bVector.append(linResult)
-		f.write("\n")
-	
-	f.write("\n")
-	for i in bVector:
-		f.write(str(i)+"\t")
-	
-	f.write("\n\n");
-	for i in solnVec:
-		f.write(str(i)+"\t")
-	f.write("\n\n")
-	
-	f.close()
diff -ruN rodinia_3.1/cuda/gaussian/setup.ini rodinia_backup/cuda/gaussian/setup.ini
--- rodinia_3.1/cuda/gaussian/setup.ini	1969-12-31 16:00:00.000000000 -0800
+++ rodinia_backup/cuda/gaussian/setup.ini	2024-09-26 12:55:55.318234843 -0700
@@ -0,0 +1,7 @@
+[DEFAULT]
+compile = make
+run = ./gaussian -f matrix3.txt;./gaussian -f matrix4.txt;./gaussian -f matrix16.txt;./gaussian -f matrix208.txt;./gaussian -f matrix1024.txt;./gaussian -s 16
+use_clang_plugin = false
+clang_convert = make INJECT_CODE_CLANG=1
+llvm_pass = make INJECT_CODE_LLVM=1
+clean = make clean
\ No newline at end of file
diff -ruN rodinia_3.1/cuda/heartwall/main.cu rodinia_backup/cuda/heartwall/main.cu
--- rodinia_3.1/cuda/heartwall/main.cu	2015-12-11 07:46:05.000000000 -0800
+++ rodinia_backup/cuda/heartwall/main.cu	2024-09-26 12:55:55.318234843 -0700
@@ -14,7 +14,7 @@
 
 #include <avilib.h>
 #include <avimod.h>
-#include <cuda.h>
+#include <hip/hip_runtime.h>
 
 //======================================================================================================================================================
 //	STRUCTURES, GLOBAL STRUCTURE VARIABLES
@@ -162,7 +162,7 @@
 	common.frame_mem = sizeof(fp) * common.frame_elem;
 
 	// pointers
-	cudaMalloc((void **)&common_change.d_frame, common.frame_mem);
+	hipMalloc((void **)&common_change.d_frame, common.frame_mem);
 
 	//======================================================================================================================================================
 	// 	CHECK INPUT ARGUMENTS
@@ -216,8 +216,8 @@
 	common.endoRow[17] = 287;
 	common.endoRow[18] = 311;
 	common.endoRow[19] = 339;
-	cudaMalloc((void **)&common.d_endoRow, common.endo_mem);
-	cudaMemcpy(common.d_endoRow, common.endoRow, common.endo_mem, cudaMemcpyHostToDevice);
+	hipMalloc((void **)&common.d_endoRow, common.endo_mem);
+	hipMemcpy(common.d_endoRow, common.endoRow, common.endo_mem, hipMemcpyHostToDevice);
 
 	common.endoCol = (int *)malloc(common.endo_mem);
 	common.endoCol[ 0] = 408;
@@ -240,14 +240,14 @@
 	common.endoCol[17] = 383;
 	common.endoCol[18] = 401;
 	common.endoCol[19] = 411;
-	cudaMalloc((void **)&common.d_endoCol, common.endo_mem);
-	cudaMemcpy(common.d_endoCol, common.endoCol, common.endo_mem, cudaMemcpyHostToDevice);
+	hipMalloc((void **)&common.d_endoCol, common.endo_mem);
+	hipMemcpy(common.d_endoCol, common.endoCol, common.endo_mem, hipMemcpyHostToDevice);
 
 	common.tEndoRowLoc = (int *)malloc(common.endo_mem * common.no_frames);
-	cudaMalloc((void **)&common.d_tEndoRowLoc, common.endo_mem * common.no_frames);
+	hipMalloc((void **)&common.d_tEndoRowLoc, common.endo_mem * common.no_frames);
 
 	common.tEndoColLoc = (int *)malloc(common.endo_mem * common.no_frames);
-	cudaMalloc((void **)&common.d_tEndoColLoc, common.endo_mem * common.no_frames);
+	hipMalloc((void **)&common.d_tEndoColLoc, common.endo_mem * common.no_frames);
 
 	//====================================================================================================
 	//	EPI POINTS
@@ -288,8 +288,8 @@
 	common.epiRow[28] = 305;
 	common.epiRow[29] = 331;
 	common.epiRow[30] = 360;
-	cudaMalloc((void **)&common.d_epiRow, common.epi_mem);
-	cudaMemcpy(common.d_epiRow, common.epiRow, common.epi_mem, cudaMemcpyHostToDevice);
+	hipMalloc((void **)&common.d_epiRow, common.epi_mem);
+	hipMemcpy(common.d_epiRow, common.epiRow, common.epi_mem, hipMemcpyHostToDevice);
 
 	common.epiCol = (int *)malloc(common.epi_mem);
 	common.epiCol[ 0] = 457;
@@ -323,14 +323,14 @@
 	common.epiCol[28] = 434;
 	common.epiCol[29] = 448;
 	common.epiCol[30] = 455;
-	cudaMalloc((void **)&common.d_epiCol, common.epi_mem);
-	cudaMemcpy(common.d_epiCol, common.epiCol, common.epi_mem, cudaMemcpyHostToDevice);
+	hipMalloc((void **)&common.d_epiCol, common.epi_mem);
+	hipMemcpy(common.d_epiCol, common.epiCol, common.epi_mem, hipMemcpyHostToDevice);
 
 	common.tEpiRowLoc = (int *)malloc(common.epi_mem * common.no_frames);
-	cudaMalloc((void **)&common.d_tEpiRowLoc, common.epi_mem * common.no_frames);
+	hipMalloc((void **)&common.d_tEpiRowLoc, common.epi_mem * common.no_frames);
 
 	common.tEpiColLoc = (int *)malloc(common.epi_mem * common.no_frames);
-	cudaMalloc((void **)&common.d_tEpiColLoc, common.epi_mem * common.no_frames);
+	hipMalloc((void **)&common.d_tEpiColLoc, common.epi_mem * common.no_frames);
 
 	//====================================================================================================
 	//	ALL POINTS
@@ -353,8 +353,8 @@
 	//======================================================================================================================================================
 
 	// common
-	cudaMalloc((void **)&common.d_endoT, common.in_mem * common.endoPoints);
-	cudaMalloc((void **)&common.d_epiT, common.in_mem * common.epiPoints);
+	hipMalloc((void **)&common.d_endoT, common.in_mem * common.endoPoints);
+	hipMalloc((void **)&common.d_epiT, common.in_mem * common.epiPoints);
 
 	//======================================================================================================================================================
 	//	SPECIFIC TO ENDO OR EPI TO BE SET HERE
@@ -398,7 +398,7 @@
 
 	// pointers
 	for(i=0; i<common.allPoints; i++){
-		cudaMalloc((void **)&unique[i].d_in2, common.in2_mem);
+		hipMalloc((void **)&unique[i].d_in2, common.in2_mem);
 	}
 
 	//======================================================================================================================================================
@@ -415,7 +415,7 @@
 
 	// pointers
 	for(i=0; i<common.allPoints; i++){
-		cudaMalloc((void **)&unique[i].d_conv, common.conv_mem);
+		hipMalloc((void **)&unique[i].d_conv, common.conv_mem);
 	}
 
 	//======================================================================================================================================================
@@ -437,7 +437,7 @@
 
 	// pointers
 	for(i=0; i<common.allPoints; i++){
-		cudaMalloc((void **)&unique[i].d_in2_pad_cumv, common.in2_pad_cumv_mem);
+		hipMalloc((void **)&unique[i].d_in2_pad_cumv, common.in2_pad_cumv_mem);
 	}
 
 	//====================================================================================================
@@ -456,7 +456,7 @@
 
 	// pointers
 	for(i=0; i<common.allPoints; i++){
-		cudaMalloc((void **)&unique[i].d_in2_pad_cumv_sel, common.in2_pad_cumv_sel_mem);
+		hipMalloc((void **)&unique[i].d_in2_pad_cumv_sel, common.in2_pad_cumv_sel_mem);
 	}
 
 	//====================================================================================================
@@ -475,7 +475,7 @@
 
 	// pointers
 	for(i=0; i<common.allPoints; i++){
-		cudaMalloc((void **)&unique[i].d_in2_sub_cumh, common.in2_sub_cumh_mem);
+		hipMalloc((void **)&unique[i].d_in2_sub_cumh, common.in2_sub_cumh_mem);
 	}
 
 	//====================================================================================================
@@ -494,7 +494,7 @@
 
 	// pointers
 	for(i=0; i<common.allPoints; i++){
-		cudaMalloc((void **)&unique[i].d_in2_sub_cumh_sel, common.in2_sub_cumh_sel_mem);
+		hipMalloc((void **)&unique[i].d_in2_sub_cumh_sel, common.in2_sub_cumh_sel_mem);
 	}
 
 	//====================================================================================================
@@ -513,7 +513,7 @@
 
 	// pointers
 	for(i=0; i<common.allPoints; i++){
-		cudaMalloc((void **)&unique[i].d_in2_sub2, common.in2_sub2_mem);
+		hipMalloc((void **)&unique[i].d_in2_sub2, common.in2_sub2_mem);
 	}
 
 	//======================================================================================================================================================
@@ -532,7 +532,7 @@
 
 	// pointers
 	for(i=0; i<common.allPoints; i++){
-		cudaMalloc((void **)&unique[i].d_in2_sqr, common.in2_sqr_mem);
+		hipMalloc((void **)&unique[i].d_in2_sqr, common.in2_sqr_mem);
 	}
 
 	//====================================================================================================
@@ -547,7 +547,7 @@
 
 	// pointers
 	for(i=0; i<common.allPoints; i++){
-		cudaMalloc((void **)&unique[i].d_in2_sqr_sub2, common.in2_sqr_sub2_mem);
+		hipMalloc((void **)&unique[i].d_in2_sqr_sub2, common.in2_sqr_sub2_mem);
 	}
 
 	//======================================================================================================================================================
@@ -562,7 +562,7 @@
 
 	// pointers
 	for(i=0; i<common.allPoints; i++){
-		cudaMalloc((void **)&unique[i].d_in_sqr, common.in_sqr_mem);
+		hipMalloc((void **)&unique[i].d_in_sqr, common.in_sqr_mem);
 	}
 
 	//======================================================================================================================================================
@@ -577,7 +577,7 @@
 
 	// pointers
 	for(i=0; i<common.allPoints; i++){
-		cudaMalloc((void **)&unique[i].d_tMask, common.tMask_mem);
+		hipMalloc((void **)&unique[i].d_tMask, common.tMask_mem);
 	}
 
 	//======================================================================================================================================================
@@ -610,7 +610,7 @@
 
 	// pointers
 	for(i=0; i<common.allPoints; i++){
-		cudaMalloc((void **)&unique[i].d_mask_conv, common.mask_conv_mem);
+		hipMalloc((void **)&unique[i].d_mask_conv, common.mask_conv_mem);
 	}
 
 	//======================================================================================================================================================
@@ -631,8 +631,8 @@
 	//	COPY ARGUMENTS
 	//====================================================================================================
 
-	cudaMemcpyToSymbol(d_common, &common, sizeof(params_common));
-	cudaMemcpyToSymbol(d_unique, &unique, sizeof(params_unique)*ALL_POINTS);
+	hipMemcpyToSymbol(HIP_SYMBOL(d_common), &common, sizeof(params_common));
+	hipMemcpyToSymbol(HIP_SYMBOL(d_unique), &unique, sizeof(params_unique)*ALL_POINTS);
 
 	//====================================================================================================
 	//	PRINT FRAME PROGRESS START
@@ -655,8 +655,8 @@
 										1);							// converted
 
 		// copy frame to GPU memory
-		cudaMemcpy(common_change.d_frame, frame, common.frame_mem, cudaMemcpyHostToDevice);
-		cudaMemcpyToSymbol(d_common_change, &common_change, sizeof(params_common_change));
+		hipMemcpy(common_change.d_frame, frame, common.frame_mem, hipMemcpyHostToDevice);
+		hipMemcpyToSymbol(HIP_SYMBOL(d_common_change), &common_change, sizeof(params_common_change));
 
 		// launch GPU kernel
 		kernel<<<blocks, threads>>>();
@@ -681,11 +681,11 @@
 	//	OUTPUT
 	//====================================================================================================
 
-	cudaMemcpy(common.tEndoRowLoc, common.d_tEndoRowLoc, common.endo_mem * common.no_frames, cudaMemcpyDeviceToHost);
-	cudaMemcpy(common.tEndoColLoc, common.d_tEndoColLoc, common.endo_mem * common.no_frames, cudaMemcpyDeviceToHost);
+	hipMemcpy(common.tEndoRowLoc, common.d_tEndoRowLoc, common.endo_mem * common.no_frames, hipMemcpyDeviceToHost);
+	hipMemcpy(common.tEndoColLoc, common.d_tEndoColLoc, common.endo_mem * common.no_frames, hipMemcpyDeviceToHost);
 
-	cudaMemcpy(common.tEpiRowLoc, common.d_tEpiRowLoc, common.epi_mem * common.no_frames, cudaMemcpyDeviceToHost);
-	cudaMemcpy(common.tEpiColLoc, common.d_tEpiColLoc, common.epi_mem * common.no_frames, cudaMemcpyDeviceToHost);
+	hipMemcpy(common.tEpiRowLoc, common.d_tEpiRowLoc, common.epi_mem * common.no_frames, hipMemcpyDeviceToHost);
+	hipMemcpy(common.tEpiColLoc, common.d_tEpiColLoc, common.epi_mem * common.no_frames, hipMemcpyDeviceToHost);
 
 
 
@@ -721,7 +721,7 @@
 	//====================================================================================================
 
 	// frame
-	cudaFree(common_change.d_frame);
+	hipFree(common_change.d_frame);
 
 	// endo points
 	free(common.endoRow);
@@ -729,12 +729,12 @@
 	free(common.tEndoRowLoc);
 	free(common.tEndoColLoc);
 
-	cudaFree(common.d_endoRow);
-	cudaFree(common.d_endoCol);
-	cudaFree(common.d_tEndoRowLoc);
-	cudaFree(common.d_tEndoColLoc);
+	hipFree(common.d_endoRow);
+	hipFree(common.d_endoCol);
+	hipFree(common.d_tEndoRowLoc);
+	hipFree(common.d_tEndoColLoc);
 
-	cudaFree(common.d_endoT);
+	hipFree(common.d_endoT);
 
 	// epi points
 	free(common.epiRow);
@@ -742,32 +742,32 @@
 	free(common.tEpiRowLoc);
 	free(common.tEpiColLoc);
 
-	cudaFree(common.d_epiRow);
-	cudaFree(common.d_epiCol);
-	cudaFree(common.d_tEpiRowLoc);
-	cudaFree(common.d_tEpiColLoc);
+	hipFree(common.d_epiRow);
+	hipFree(common.d_epiCol);
+	hipFree(common.d_tEpiRowLoc);
+	hipFree(common.d_tEpiColLoc);
 
-	cudaFree(common.d_epiT);
+	hipFree(common.d_epiT);
 
 	//====================================================================================================
 	//	POINTERS
 	//====================================================================================================
 
 	for(i=0; i<common.allPoints; i++){
-		cudaFree(unique[i].d_in2);
+		hipFree(unique[i].d_in2);
 
-		cudaFree(unique[i].d_conv);
-		cudaFree(unique[i].d_in2_pad_cumv);
-		cudaFree(unique[i].d_in2_pad_cumv_sel);
-		cudaFree(unique[i].d_in2_sub_cumh);
-		cudaFree(unique[i].d_in2_sub_cumh_sel);
-		cudaFree(unique[i].d_in2_sub2);
-		cudaFree(unique[i].d_in2_sqr);
-		cudaFree(unique[i].d_in2_sqr_sub2);
-		cudaFree(unique[i].d_in_sqr);
+		hipFree(unique[i].d_conv);
+		hipFree(unique[i].d_in2_pad_cumv);
+		hipFree(unique[i].d_in2_pad_cumv_sel);
+		hipFree(unique[i].d_in2_sub_cumh);
+		hipFree(unique[i].d_in2_sub_cumh_sel);
+		hipFree(unique[i].d_in2_sub2);
+		hipFree(unique[i].d_in2_sqr);
+		hipFree(unique[i].d_in2_sqr_sub2);
+		hipFree(unique[i].d_in_sqr);
 
-		cudaFree(unique[i].d_tMask);
-		cudaFree(unique[i].d_mask_conv);
+		hipFree(unique[i].d_tMask);
+		hipFree(unique[i].d_mask_conv);
 	}
 
 }
diff -ruN rodinia_3.1/cuda/heartwall/Makefile rodinia_backup/cuda/heartwall/Makefile
--- rodinia_3.1/cuda/heartwall/Makefile	2015-12-11 07:46:05.000000000 -0800
+++ rodinia_backup/cuda/heartwall/Makefile	2024-09-26 12:55:55.318234843 -0700
@@ -1,3 +1,4 @@
+include ../../common/make.config
 
 ifdef OUTPUT
 override OUTPUT = -DOUTPUT
@@ -5,11 +6,11 @@
 
 # link objects(binaries) together
 heartwall: main.o ./AVI/avilib.o ./AVI/avimod.o 
-	nvcc main.o ./AVI/avilib.o ./AVI/avimod.o -I/usr/local/cuda/include -lm -o heartwall
+	hipcc $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o main.o ./AVI/avilib.o ./AVI/avimod.o -lm -o heartwall
 
 # compile main function file into object (binary)
 main.o: main.cu kernel.cu define.c
-	nvcc $(OUTPUT) $(KERNEL_DIM) main.cu -I./AVI -c -O3
+	hipcc $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o $(OUTPUT) $(KERNEL_DIM) main.cu -I./AVI -c -O3
 
 ./AVI/avilib.o ./AVI/avimod.o:
 	cd AVI; make;
diff -ruN rodinia_3.1/cuda/heartwall/setup.ini rodinia_backup/cuda/heartwall/setup.ini
--- rodinia_3.1/cuda/heartwall/setup.ini	1969-12-31 16:00:00.000000000 -0800
+++ rodinia_backup/cuda/heartwall/setup.ini	2024-09-26 12:55:55.319234893 -0700
@@ -0,0 +1,7 @@
+[DEFAULT]
+compile = make
+run = ./heartwall test.avi 20
+use_clang_plugin = false
+clang_convert = make INJECT_CODE_CLANG=1
+llvm_pass = make INJECT_CODE_LLVM=1
+clean = make clean
\ No newline at end of file
diff -ruN rodinia_3.1/cuda/hotspot/hotspot.cu rodinia_backup/cuda/hotspot/hotspot.cu
--- rodinia_3.1/cuda/hotspot/hotspot.cu	2015-12-11 07:46:06.000000000 -0800
+++ rodinia_backup/cuda/hotspot/hotspot.cu	2024-09-26 12:55:55.349236376 -0700
@@ -1,3 +1,5 @@
+
+#include <hip/hip_runtime.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <time.h>
@@ -281,7 +283,7 @@
     int total_iterations = 60;
     int pyramid_height = 1; // number of iterations
 	
-	if (argc != 7)
+	if (argc != 6)
 		usage(argc, argv);
 	if((grid_rows = atoi(argv[1]))<=0||
 	   (grid_cols = atoi(argv[1]))<=0||
@@ -291,7 +293,7 @@
 		
 	tfile=argv[4];
     pfile=argv[5];
-    ofile=argv[6];
+    //ofile=argv[6];
 	
     size=grid_rows*grid_cols;
 
@@ -318,22 +320,22 @@
     readinput(FilesavingPower, grid_rows, grid_cols, pfile);
 
     float *MatrixTemp[2], *MatrixPower;
-    cudaMalloc((void**)&MatrixTemp[0], sizeof(float)*size);
-    cudaMalloc((void**)&MatrixTemp[1], sizeof(float)*size);
-    cudaMemcpy(MatrixTemp[0], FilesavingTemp, sizeof(float)*size, cudaMemcpyHostToDevice);
+    hipMalloc((void**)&MatrixTemp[0], sizeof(float)*size);
+    hipMalloc((void**)&MatrixTemp[1], sizeof(float)*size);
+    hipMemcpy(MatrixTemp[0], FilesavingTemp, sizeof(float)*size, hipMemcpyHostToDevice);
 
-    cudaMalloc((void**)&MatrixPower, sizeof(float)*size);
-    cudaMemcpy(MatrixPower, FilesavingPower, sizeof(float)*size, cudaMemcpyHostToDevice);
+    hipMalloc((void**)&MatrixPower, sizeof(float)*size);
+    hipMemcpy(MatrixPower, FilesavingPower, sizeof(float)*size, hipMemcpyHostToDevice);
     printf("Start computing the transient temperature\n");
     int ret = compute_tran_temp(MatrixPower,MatrixTemp,grid_cols,grid_rows, \
 	 total_iterations,pyramid_height, blockCols, blockRows, borderCols, borderRows);
 	printf("Ending simulation\n");
-    cudaMemcpy(MatrixOut, MatrixTemp[ret], sizeof(float)*size, cudaMemcpyDeviceToHost);
+    hipMemcpy(MatrixOut, MatrixTemp[ret], sizeof(float)*size, hipMemcpyDeviceToHost);
 
-    writeoutput(MatrixOut,grid_rows, grid_cols, ofile);
+    //writeoutput(MatrixOut,grid_rows, grid_cols, ofile);
 
-    cudaFree(MatrixPower);
-    cudaFree(MatrixTemp[0]);
-    cudaFree(MatrixTemp[1]);
+    hipFree(MatrixPower);
+    hipFree(MatrixTemp[0]);
+    hipFree(MatrixTemp[1]);
     free(MatrixOut);
 }
diff -ruN rodinia_3.1/cuda/hotspot/Makefile rodinia_backup/cuda/hotspot/Makefile
--- rodinia_3.1/cuda/hotspot/Makefile	2015-12-11 07:46:06.000000000 -0800
+++ rodinia_backup/cuda/hotspot/Makefile	2024-09-26 12:55:55.349236376 -0700
@@ -1,24 +1,22 @@
 include ../../common/make.config
 
-CC := $(CUDA_DIR)/bin/nvcc
-
-INCLUDE := $(CUDA_DIR)/include
+CC := hipcc
 
 SRC = hotspot.cu
 
 EXE = hotspot
 
 release: $(SRC)
-	$(CC) $(KERNEL_DIM) $(SRC) -o $(EXE) -I$(INCLUDE) -L$(CUDA_LIB_DIR) 
+	$(CC) $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o $(KERNEL_DIM) $(SRC) -o $(EXE)
 
 enum: $(SRC)
-	$(CC) $(KERNEL_DIM) -deviceemu $(SRC) -o $(EXE) -I$(INCLUDE) -L$(CUDA_LIB_DIR) 
+	$(CC) $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o $(KERNEL_DIM) -deviceemu $(SRC) -o $(EXE)
 
 debug: $(SRC)
-	$(CC) $(KERNEL_DIM) -g $(SRC) -o $(EXE) -I$(INCLUDE) -L$(CUDA_LIB_DIR) 
+	$(CC) $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o $(KERNEL_DIM) -g $(SRC) -o $(EXE)
 
 debugenum: $(SRC)
-	$(CC) $(KERNEL_DIM) -g -deviceemu $(SRC) -o $(EXE) -I$(INCLUDE) -L$(CUDA_LIB_DIR) 
+	$(CC) $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o $(KERNEL_DIM) -g -deviceemu $(SRC) -o $(EXE)
 
 clean: $(SRC)
 	rm -f $(EXE) $(EXE).linkinfo result.txt
diff -ruN rodinia_3.1/cuda/hotspot/run rodinia_backup/cuda/hotspot/run
--- rodinia_3.1/cuda/hotspot/run	2015-12-11 07:46:06.000000000 -0800
+++ rodinia_backup/cuda/hotspot/run	2024-09-26 12:55:55.357236771 -0700
@@ -1 +1 @@
-./hotspot 512 2 2 ../../data/hotspot/temp_512 ../../data/hotspot/power_512 output.out
+./hotspot 512 2 2 temp_512 power_512 output.out
diff -ruN rodinia_3.1/cuda/hotspot/setup.ini rodinia_backup/cuda/hotspot/setup.ini
--- rodinia_3.1/cuda/hotspot/setup.ini	1969-12-31 16:00:00.000000000 -0800
+++ rodinia_backup/cuda/hotspot/setup.ini	2024-09-26 12:55:55.357236771 -0700
@@ -0,0 +1,7 @@
+[DEFAULT]
+compile = make
+run = ./hotspot 512 2 2 temp_512 power_512;./hotspot 1024 2 2 temp_1024 power_1024;./hotspot 64 2 2 temp_64 power_64
+use_clang_plugin = false
+clang_convert = make INJECT_CODE_CLANG=1
+llvm_pass = make INJECT_CODE_LLVM=1
+clean = make clean
\ No newline at end of file
Binary files rodinia_3.1/cuda/hotspot3D/3D and rodinia_backup/cuda/hotspot3D/3D differ
diff -ruN rodinia_3.1/cuda/hotspot3D/3D.cu rodinia_backup/cuda/hotspot3D/3D.cu
--- rodinia_3.1/cuda/hotspot3D/3D.cu	2015-12-11 07:46:16.000000000 -0800
+++ rodinia_backup/cuda/hotspot3D/3D.cu	2024-09-26 12:55:55.378237810 -0700
@@ -1,3 +1,4 @@
+#include <hip/hip_runtime.h>
 #include <stdio.h>
 #include <time.h>
 #include <assert.h>
@@ -147,7 +148,7 @@
 
 int main(int argc, char** argv)
 {
-    if (argc != 7)
+    if (argc != 6)
     {
         usage(argc,argv);
     }
@@ -157,7 +158,7 @@
 
     pfile = argv[4];
     tfile = argv[5];
-    ofile = argv[6];
+    //ofile = argv[6];
     int numCols = atoi(argv[1]);
     int numRows = atoi(argv[1]);
     int layers = atoi(argv[2]);
@@ -197,7 +198,7 @@
 
     float acc = accuracy(tempOut,answer,numRows*numCols*layers);
     printf("Accuracy: %e\n",acc);
-    writeoutput(tempOut,numRows, numCols, layers, ofile);
+    //writeoutput(tempOut,numRows, numCols, layers, ofile);
     free(tempIn);
     free(tempOut); free(powerIn);
     return 0;
diff -ruN rodinia_3.1/cuda/hotspot3D/Makefile rodinia_backup/cuda/hotspot3D/Makefile
--- rodinia_3.1/cuda/hotspot3D/Makefile	2015-12-11 07:46:16.000000000 -0800
+++ rodinia_backup/cuda/hotspot3D/Makefile	2024-09-26 12:55:55.378237810 -0700
@@ -1,8 +1,6 @@
-include ~/rodinia_3.0/common/make.config
+include ../../common/make.config
 
-CC := $(CUDA_DIR)/bin/nvcc
-
-INCLUDE := $(CUDA_DIR)/include
+CC := hipcc
 
 SRC = 3D.cu
 
@@ -10,18 +8,18 @@
 
 OUTPUT = *.out
 
-FLAGS = -g -G #-arch sm_20 --ptxas-options=-v
+FLAGS = -g #-arch sm_20 --ptxas-options=-v
 release: $(SRC)
-	$(CC) $(KERNEL_DIM) $(FLAGS) $(SRC) -o $(EXE) -I$(INCLUDE) -L$(CUDA_LIB_DIR) 
+	$(CC) $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o $(KERNEL_DIM) $(FLAGS) $(SRC) -o $(EXE)
 
 enum: $(SRC)
-	$(CC) $(KERNEL_DIM) $(FLAGS) -deviceemu $(SRC) -o $(EXE) -I$(INCLUDE) -L$(CUDA_LIB_DIR) 
+	$(CC) $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o $(KERNEL_DIM) $(FLAGS) -deviceemu $(SRC) -o $(EXE)
 
 debug: $(SRC)
-	$(CC) $(KERNEL_DIM) $(FLAGS) -g $(SRC) -o $(EXE) -I$(INCLUDE) -L$(CUDA_LIB_DIR) 
+	$(CC) $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o $(KERNEL_DIM) $(FLAGS) -g $(SRC) -o $(EXE)
 
 debugenum: $(SRC)
-	$(CC) $(KERNEL_DIM) $(FLAGS) -g -deviceemu $(SRC) -o $(EXE) -I$(INCLUDE) -L$(CUDA_LIB_DIR) 
+	$(CC) $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o $(KERNEL_DIM) $(FLAGS) -g -deviceemu $(SRC) -o $(EXE)
 
 clean: $(SRC)
 	rm -f $(EXE) $(EXE).linkinfo $(OUTPUT) 
diff -ruN rodinia_3.1/cuda/hotspot3D/opt1.cu rodinia_backup/cuda/hotspot3D/opt1.cu
--- rodinia_3.1/cuda/hotspot3D/opt1.cu	2015-12-11 07:46:16.000000000 -0800
+++ rodinia_backup/cuda/hotspot3D/opt1.cu	2024-09-26 12:55:55.378237810 -0700
@@ -70,13 +70,13 @@
 
     size_t s = sizeof(float) * nx * ny * nz;  
     float  *tIn_d, *tOut_d, *p_d;
-    cudaMalloc((void**)&p_d,s);
-    cudaMalloc((void**)&tIn_d,s);
-    cudaMalloc((void**)&tOut_d,s);
-    cudaMemcpy(tIn_d, tIn, s, cudaMemcpyHostToDevice);
-    cudaMemcpy(p_d, p, s, cudaMemcpyHostToDevice);
+    hipMalloc((void**)&p_d,s);
+    hipMalloc((void**)&tIn_d,s);
+    hipMalloc((void**)&tOut_d,s);
+    hipMemcpy(tIn_d, tIn, s, hipMemcpyHostToDevice);
+    hipMemcpy(p_d, p, s, hipMemcpyHostToDevice);
 
-    cudaFuncSetCacheConfig(hotspotOpt1, cudaFuncCachePreferL1);
+    //hipFuncSetCacheConfig(hotspotOpt1, hipFuncCachePreferL1);
 
     dim3 block_dim(64, 4, 1);
     dim3 grid_dim(nx / 64, ny / 4, 1);
@@ -89,14 +89,14 @@
         tIn_d = tOut_d;
         tOut_d = t;
     }
-    cudaDeviceSynchronize();
+    hipDeviceSynchronize();
     long long stop = get_time();
     float time = (float)((stop - start)/(1000.0 * 1000.0));
     printf("Time: %.3f (s)\n",time);
-    cudaMemcpy(tOut, tOut_d, s, cudaMemcpyDeviceToHost);
-    cudaFree(p_d);
-    cudaFree(tIn_d);
-    cudaFree(tOut_d);
+    hipMemcpy(tOut, tOut_d, s, hipMemcpyDeviceToHost);
+    hipFree(p_d);
+    hipFree(tIn_d);
+    hipFree(tOut_d);
     return;
 }
 
diff -ruN rodinia_3.1/cuda/hotspot3D/setup.ini rodinia_backup/cuda/hotspot3D/setup.ini
--- rodinia_3.1/cuda/hotspot3D/setup.ini	1969-12-31 16:00:00.000000000 -0800
+++ rodinia_backup/cuda/hotspot3D/setup.ini	2024-09-26 12:55:55.399238848 -0700
@@ -0,0 +1,7 @@
+[DEFAULT]
+compile = make
+run = ./3D 512 8 100 power_512x8 temp_512x8;./3D 512 4 100 power_512x4 temp_512x4;./3D 512 2 100 power_512x2 temp_512x2;./3D 64 8 100 power_64x8 temp_64x8
+use_clang_plugin = false
+clang_convert = make INJECT_CODE_CLANG=1
+llvm_pass = make INJECT_CODE_LLVM=1
+clean = make clean
\ No newline at end of file
diff -ruN rodinia_3.1/cuda/lavaMD/kernel/kernel_gpu_cuda.cu rodinia_backup/cuda/lavaMD/kernel/kernel_gpu_cuda.cu
--- rodinia_3.1/cuda/lavaMD/kernel/kernel_gpu_cuda.cu	2015-12-11 07:46:07.000000000 -0800
+++ rodinia_backup/cuda/lavaMD/kernel/kernel_gpu_cuda.cu	2024-09-26 12:55:55.429240331 -0700
@@ -2,6 +2,7 @@
 //	plasmaKernel_gpu_2
 //----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------200
 
+
 __global__ void kernel_gpu_cuda(par_str d_par_gpu,
 								dim_str d_dim_gpu,
 								box_str* d_box_gpu,
diff -ruN rodinia_3.1/cuda/lavaMD/kernel/kernel_gpu_cuda_wrapper.cu rodinia_backup/cuda/lavaMD/kernel/kernel_gpu_cuda_wrapper.cu
--- rodinia_3.1/cuda/lavaMD/kernel/kernel_gpu_cuda_wrapper.cu	2015-12-11 07:46:08.000000000 -0800
+++ rodinia_backup/cuda/lavaMD/kernel/kernel_gpu_cuda_wrapper.cu	2024-09-26 12:55:55.430240381 -0700
@@ -6,6 +6,8 @@
 //	MAIN FUNCTION HEADER
 //======================================================================================================================================================150
 
+
+#include <hip/hip_runtime.h>
 #include "./../main.h"								// (in the main program folder)	needed to recognized input parameters
 
 //======================================================================================================================================================150
@@ -63,7 +65,7 @@
 	//	INITIAL DRIVER OVERHEAD
 	//====================================================================================================100
 
-	cudaThreadSynchronize();
+	hipDeviceSynchronize();
 
 	//====================================================================================================100
 	//	VARIABLES
@@ -100,21 +102,21 @@
 	//	boxes
 	//==================================================50
 
-	cudaMalloc(	(void **)&d_box_gpu, 
+	hipMalloc(	(void **)&d_box_gpu, 
 				dim_cpu.box_mem);
 
 	//==================================================50
 	//	rv
 	//==================================================50
 
-	cudaMalloc(	(void **)&d_rv_gpu, 
+	hipMalloc(	(void **)&d_rv_gpu, 
 				dim_cpu.space_mem);
 
 	//==================================================50
 	//	qv
 	//==================================================50
 
-	cudaMalloc(	(void **)&d_qv_gpu, 
+	hipMalloc(	(void **)&d_qv_gpu, 
 				dim_cpu.space_mem2);
 
 	//====================================================================================================100
@@ -125,7 +127,7 @@
 	//	fv
 	//==================================================50
 
-	cudaMalloc(	(void **)&d_fv_gpu, 
+	hipMalloc(	(void **)&d_fv_gpu, 
 				dim_cpu.space_mem);
 
 	time2 = get_time();
@@ -142,28 +144,28 @@
 	//	boxes
 	//==================================================50
 
-	cudaMemcpy(	d_box_gpu, 
+	hipMemcpy(	d_box_gpu, 
 				box_cpu,
 				dim_cpu.box_mem, 
-				cudaMemcpyHostToDevice);
+				hipMemcpyHostToDevice);
 
 	//==================================================50
 	//	rv
 	//==================================================50
 
-	cudaMemcpy(	d_rv_gpu,
+	hipMemcpy(	d_rv_gpu,
 				rv_cpu,
 				dim_cpu.space_mem,
-				cudaMemcpyHostToDevice);
+				hipMemcpyHostToDevice);
 
 	//==================================================50
 	//	qv
 	//==================================================50
 
-	cudaMemcpy(	d_qv_gpu,
+	hipMemcpy(	d_qv_gpu,
 				qv_cpu,
 				dim_cpu.space_mem2,
-				cudaMemcpyHostToDevice);
+				hipMemcpyHostToDevice);
 
 	//====================================================================================================100
 	//	GPU MEMORY				(MALLOC) COPY
@@ -173,10 +175,10 @@
 	//	fv
 	//==================================================50
 
-	cudaMemcpy(	d_fv_gpu, 
+	hipMemcpy(	d_fv_gpu, 
 				fv_cpu, 
 				dim_cpu.space_mem, 
-				cudaMemcpyHostToDevice);
+				hipMemcpyHostToDevice);
 
 	time3 = get_time();
 
@@ -193,7 +195,7 @@
 											d_fv_gpu);
 
 	checkCUDAError("Start");
-	cudaThreadSynchronize();
+	hipDeviceSynchronize();
 
 	time4 = get_time();
 
@@ -201,10 +203,10 @@
 	//	GPU MEMORY			COPY (CONTD.)
 	//======================================================================================================================================================150
 
-	cudaMemcpy(	fv_cpu, 
+	hipMemcpy(	fv_cpu, 
 				d_fv_gpu, 
 				dim_cpu.space_mem, 
-				cudaMemcpyDeviceToHost);
+				hipMemcpyDeviceToHost);
 
 	time5 = get_time();
 
@@ -212,10 +214,10 @@
 	//	GPU MEMORY DEALLOCATION
 	//======================================================================================================================================================150
 
-	cudaFree(d_rv_gpu);
-	cudaFree(d_qv_gpu);
-	cudaFree(d_fv_gpu);
-	cudaFree(d_box_gpu);
+	hipFree(d_rv_gpu);
+	hipFree(d_qv_gpu);
+	hipFree(d_fv_gpu);
+	hipFree(d_box_gpu);
 
 	time6 = get_time();
 
diff -ruN rodinia_3.1/cuda/lavaMD/makefile rodinia_backup/cuda/lavaMD/makefile
--- rodinia_3.1/cuda/lavaMD/makefile	2015-12-11 07:46:07.000000000 -0800
+++ rodinia_backup/cuda/lavaMD/makefile	2024-09-26 12:55:55.426240183 -0700
@@ -16,9 +16,9 @@
 OMP_LIB = -lgomp
 OMP_FLAG = -fopenmp
 
-CUD_C = $(CUDA_DIR)/bin/nvcc
+CUD_C = hipcc $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o
 # OMP_FLAG = 	-Xcompiler paste_one_here
-CUDA_FLAG = -arch sm_13
+CUDA_FLAG = 
 
 # link objects (binaries) together
 a.out:		main.o \
@@ -26,14 +26,12 @@
 			./util/num/num.o \
 			./util/timer/timer.o \
 			./util/device/device.o
-	$(C_C)	$(KERNEL_DIM) main.o \
+	$(CUD_C)	$(KERNEL_DIM) main.o \
 			./kernel/kernel_gpu_cuda_wrapper.o \
 			./util/num/num.o \
 			./util/timer/timer.o \
 			./util/device/device.o \
 			-lm \
-			-L/usr/local/cuda/lib64 \
-			-lcuda -lcudart \
 			$(OMP_LIB) \
 			-o lavaMD
 
diff -ruN rodinia_3.1/cuda/lavaMD/setup.ini rodinia_backup/cuda/lavaMD/setup.ini
--- rodinia_3.1/cuda/lavaMD/setup.ini	1969-12-31 16:00:00.000000000 -0800
+++ rodinia_backup/cuda/lavaMD/setup.ini	2024-09-26 12:55:55.429240331 -0700
@@ -0,0 +1,7 @@
+[DEFAULT]
+compile = make
+run = ./lavaMD -boxes1d 10
+use_clang_plugin = false
+clang_convert = make INJECT_CODE_CLANG=1
+llvm_pass = make INJECT_CODE_LLVM=1
+clean = make clean
\ No newline at end of file
diff -ruN rodinia_3.1/cuda/lavaMD/util/device/device.cu rodinia_backup/cuda/lavaMD/util/device/device.cu
--- rodinia_3.1/cuda/lavaMD/util/device/device.cu	2015-12-11 07:46:07.000000000 -0800
+++ rodinia_backup/cuda/lavaMD/util/device/device.cu	2024-09-26 12:55:55.430240381 -0700
@@ -6,6 +6,8 @@
 //	INCLUDE/DEFINE
 //======================================================================================================================================================150
 
+
+#include <hip/hip_runtime.h>
 #include "device.h"					// (in library path specified to compiler)
 
 //======================================================================================================================================================150
@@ -23,26 +25,26 @@
 	int device;
 
 	// work
-	cudaGetDeviceCount(&num_devices);
+	hipGetDeviceCount(&num_devices);
 	if (num_devices > 1) {
 		
 		// variables
 		int max_multiprocessors; 
 		int max_device;
-		cudaDeviceProp properties;
+		hipDeviceProp_t properties;
 
 		// initialize variables
 		max_multiprocessors = 0;
 		max_device = 0;
 		
 		for (device = 0; device < num_devices; device++) {
-			cudaGetDeviceProperties(&properties, device);
+			hipGetDeviceProperties(&properties, device);
 			if (max_multiprocessors < properties.multiProcessorCount) {
 				max_multiprocessors = properties.multiProcessorCount;
 				max_device = device;
 			}
 		}
-		cudaSetDevice(max_device);
+		hipSetDevice(max_device);
 	}
 
 }
@@ -53,10 +55,10 @@
 
 void checkCUDAError(const char *msg)
 {
-	cudaError_t err = cudaGetLastError();
-	if( cudaSuccess != err) {
+	hipError_t err = hipGetLastError();
+	if( hipSuccess != err) {
 		// fprintf(stderr, "Cuda error: %s: %s.\n", msg, cudaGetErrorString( err) );
-		printf("Cuda error: %s: %s.\n", msg, cudaGetErrorString( err) );
+		printf("Cuda error: %s: %s.\n", msg, hipGetErrorString( err) );
 		fflush(NULL);
 		exit(EXIT_FAILURE);
 	}
Binary files rodinia_3.1/cuda/lud/common/common.o and rodinia_backup/cuda/lud/common/common.o differ
diff -ruN rodinia_3.1/cuda/lud/cuda/lud.cu rodinia_backup/cuda/lud/cuda/lud.cu
--- rodinia_3.1/cuda/lud/cuda/lud.cu	2015-12-11 07:46:08.000000000 -0800
+++ rodinia_backup/cuda/lud/cuda/lud.cu	2024-09-26 12:55:55.459241814 -0700
@@ -16,7 +16,7 @@
  * =====================================================================================
  */
 
-#include <cuda.h>
+#include <hip/hip_runtime.h>
 #include <stdio.h>
 #include <unistd.h>
 #include <getopt.h>
@@ -126,24 +126,24 @@
     matrix_duplicate(m, &mm, matrix_dim);
   }
 
-  cudaMalloc((void**)&d_m, 
+  hipMalloc((void**)&d_m, 
              matrix_dim*matrix_dim*sizeof(float));
 
   /* beginning of timing point */
   stopwatch_start(&sw);
-  cudaMemcpy(d_m, m, matrix_dim*matrix_dim*sizeof(float), 
-	     cudaMemcpyHostToDevice);
+  hipMemcpy(d_m, m, matrix_dim*matrix_dim*sizeof(float), 
+	     hipMemcpyHostToDevice);
 
   lud_cuda(d_m, matrix_dim);
 
-  cudaMemcpy(m, d_m, matrix_dim*matrix_dim*sizeof(float), 
-	     cudaMemcpyDeviceToHost);
+  hipMemcpy(m, d_m, matrix_dim*matrix_dim*sizeof(float), 
+	     hipMemcpyDeviceToHost);
 
   /* end of timing point */
   stopwatch_stop(&sw);
   printf("Time consumed(ms): %lf\n", 1000*get_interval_by_sec(&sw));
 
-  cudaFree(d_m);
+  hipFree(d_m);
 
 
   if (do_verify){
Binary files rodinia_3.1/cuda/lud/cuda/lud_cuda and rodinia_backup/cuda/lud/cuda/lud_cuda differ
diff -ruN rodinia_3.1/cuda/lud/cuda/lud_kernel.cu rodinia_backup/cuda/lud/cuda/lud_kernel.cu
--- rodinia_3.1/cuda/lud/cuda/lud_kernel.cu	2015-12-11 07:46:08.000000000 -0800
+++ rodinia_backup/cuda/lud/cuda/lud_kernel.cu	2024-09-26 12:55:55.459241814 -0700
@@ -1,4 +1,4 @@
-#include <cuda.h>
+#include <hip/hip_runtime.h>
 #include <stdio.h>
 
 #ifdef RD_WG_SIZE_0_0
diff -ruN rodinia_3.1/cuda/lud/cuda/lud_kernel.cu.old rodinia_backup/cuda/lud/cuda/lud_kernel.cu.old
--- rodinia_3.1/cuda/lud/cuda/lud_kernel.cu.old	2015-12-11 07:46:08.000000000 -0800
+++ rodinia_backup/cuda/lud/cuda/lud_kernel.cu.old	1969-12-31 16:00:00.000000000 -0800
@@ -1,162 +0,0 @@
-#include <cuda.h>
-#include <stdio.h>
-
-#define BLOCK_SIZE 16
-
-__global__ void 
-lud_diagonal(float *m, int matrix_dim, int offset)
-{
-  int i,j;
-  __shared__ float shadow[BLOCK_SIZE][BLOCK_SIZE];
-
-  int array_offset = offset*matrix_dim+offset;
-  for(i=0; i < BLOCK_SIZE; i++){
-    shadow[i][threadIdx.x]=m[array_offset+threadIdx.x];
-    array_offset += matrix_dim;
-  }
-  __syncthreads();
-
-  for(i=0; i < BLOCK_SIZE-1; i++) {
-
-    if (threadIdx.x>i){
-      for(j=0; j < i; j++)
-        shadow[threadIdx.x][i] -= shadow[threadIdx.x][j]*shadow[j][i];
-      shadow[threadIdx.x][i] /= shadow[i][i];
-
-      __syncthreads();
-
-      for(j=0; j < i+1; j++)
-        shadow[i+1][threadIdx.x] -= shadow[i+1][j]*shadow[j][threadIdx.x];
-
-      __syncthreads();
-    }
-  }
-
-  /* 
-     The first row is not modified, it
-     is no need to write it back to the
-     global memory
-
-   */
-  array_offset = (offset+1)*matrix_dim+offset;
-  for(i=1; i < BLOCK_SIZE; i++){
-    m[array_offset+threadIdx.x]=shadow[i][threadIdx.x];
-    array_offset += matrix_dim;
-  }
-}
-
-__global__ void
-lud_perimeter(float *m, int matrix_dim, int offset)
-{
-  __shared__ float dia[BLOCK_SIZE][BLOCK_SIZE];
-  __shared__ float peri_row[BLOCK_SIZE][BLOCK_SIZE];
-  __shared__ float peri_col[BLOCK_SIZE][BLOCK_SIZE];
-
-  int i,j, array_offset;
-  int idx;
-
-  if (threadIdx.x < BLOCK_SIZE) {
-    idx = threadIdx.x;
-    
-    array_offset = offset*matrix_dim+offset;
-    for (i=0; i < BLOCK_SIZE/2; i++){
-      dia[i][idx]=m[array_offset+idx];
-      array_offset += matrix_dim;
-    }
-    
-    array_offset = offset*matrix_dim+offset;
-    for (i=0; i < BLOCK_SIZE; i++) {
-      peri_row[i][idx]=m[array_offset+(blockIdx.x+1)*BLOCK_SIZE+idx];
-      array_offset += matrix_dim;
-    }
-
-  } else {
-    idx = threadIdx.x-BLOCK_SIZE;
-    
-    array_offset = (offset+BLOCK_SIZE/2)*matrix_dim+offset;
-    for (i=BLOCK_SIZE/2; i < BLOCK_SIZE; i++){
-      dia[i][idx]=m[array_offset+idx];
-      array_offset += matrix_dim;
-    }
-    
-    array_offset = (offset+(blockIdx.x+1)*BLOCK_SIZE)*matrix_dim+offset;
-    for (i=0; i < BLOCK_SIZE; i++) {
-      peri_col[i][idx] = m[array_offset+idx];
-      array_offset += matrix_dim;
-    }
-  
-  }
-  __syncthreads();
-
-  if (threadIdx.x < BLOCK_SIZE) { //peri-row
-    idx=threadIdx.x;
-    for(i=1; i < BLOCK_SIZE; i++){
-      for (j=0; j < i; j++)
-        peri_row[i][idx]-=dia[i][j]*peri_row[j][idx];
-    }
-    
-    array_offset = (offset+1)*matrix_dim+offset;
-    for(i=1; i < BLOCK_SIZE; i++){
-      m[array_offset+(blockIdx.x+1)*BLOCK_SIZE+idx] = peri_row[i][idx];
-      array_offset += matrix_dim;
-    }
-  } else { //peri-col
-    idx=threadIdx.x - BLOCK_SIZE;
-    for(i=0; i < BLOCK_SIZE; i++){
-      for(j=0; j < i; j++)
-        peri_col[idx][i]-=peri_col[idx][j]*dia[j][i];
-      peri_col[idx][i] /= dia[i][i];
-    }
-
-    __syncthreads();
-    
-    array_offset = (offset+(blockIdx.x+1)*BLOCK_SIZE)*matrix_dim+offset;
-    for(i=0; i < BLOCK_SIZE; i++){
-      m[array_offset+idx] =  peri_col[i][idx];
-      array_offset += matrix_dim;
-    }
-  }
-
-}
-
-__global__ void
-lud_internal(float *m, int matrix_dim, int offset)
-{
-  __shared__ float peri_row[BLOCK_SIZE][BLOCK_SIZE];
-  __shared__ float peri_col[BLOCK_SIZE][BLOCK_SIZE];
-
-  int i;
-  float sum;
-
-  int global_row_id = offset + (blockIdx.y+1)*BLOCK_SIZE;
-  int global_col_id = offset + (blockIdx.x+1)*BLOCK_SIZE;
-
-  peri_row[threadIdx.y][threadIdx.x] = m[(offset+threadIdx.y)*matrix_dim+global_col_id+threadIdx.x];
-  peri_col[threadIdx.y][threadIdx.x] = m[(global_row_id+threadIdx.y)*matrix_dim+offset+threadIdx.x];
-
-  __syncthreads();
-
-  sum = 0;
-  for (i=0; i < BLOCK_SIZE; i++)
-    sum += peri_col[threadIdx.y][i] * peri_row[i][threadIdx.x];
-  m[(global_row_id+threadIdx.y)*matrix_dim+global_col_id+threadIdx.x] -= sum;
-
-
-}
-
-
-void lud_cuda(float *m, int matrix_dim)
-{
-  int i=0;
-  dim3 dimBlock(BLOCK_SIZE, BLOCK_SIZE);
-  float *m_debug = (float*)malloc(matrix_dim*matrix_dim*sizeof(float));
-
-  for (i=0; i < matrix_dim-BLOCK_SIZE; i += BLOCK_SIZE) {
-      lud_diagonal<<<1, BLOCK_SIZE>>>(m, matrix_dim, i);
-      lud_perimeter<<<(matrix_dim-i)/BLOCK_SIZE-1, BLOCK_SIZE*2>>>(m, matrix_dim, i);
-      dim3 dimGrid((matrix_dim-i)/BLOCK_SIZE-1, (matrix_dim-i)/BLOCK_SIZE-1);
-      lud_internal<<<dimGrid, dimBlock>>>(m, matrix_dim, i); 
-  }
-  lud_diagonal<<<1,BLOCK_SIZE>>>(m, matrix_dim, i);
-}
-
Binary files rodinia_3.1/cuda/lud/cuda/lud_kernel.o and rodinia_backup/cuda/lud/cuda/lud_kernel.o differ
Binary files rodinia_3.1/cuda/lud/cuda/lud.o and rodinia_backup/cuda/lud/cuda/lud.o differ
diff -ruN rodinia_3.1/cuda/lud/cuda/Makefile rodinia_backup/cuda/lud/cuda/Makefile
--- rodinia_3.1/cuda/lud/cuda/Makefile	2015-12-11 07:46:09.000000000 -0800
+++ rodinia_backup/cuda/lud/cuda/Makefile	2024-09-26 12:55:55.459241814 -0700
@@ -1,5 +1,7 @@
+include ../../../common/make.config
+
 CC = gcc
-NVCC = nvcc
+NVCC = hipcc
 
 DEFS += \
 		-DGPU_TIMER \
@@ -7,8 +9,7 @@
 
 NVCCFLAGS += -I../common \
 			 -O3 \
-			 -use_fast_math \
-			 -arch=sm_13 \
+			 -ffast-math \
 			 -lm \
 			 $(SPACE)
 
@@ -34,11 +35,11 @@
 	$(NVCC) $(KERNEL_DIM) $(NVCCFLAGS) $(DEFS) -o $@ -c $<
 
 %.o:	%.cu 
-	$(NVCC) $(KERNEL_DIM) $(NVCCFLAGS) $(DEFS) -o $@ -c $<
+	$(NVCC) $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o $(KERNEL_DIM) $(NVCCFLAGS) $(DEFS) -o $@ -c $< 
 
 
 $(EXECUTABLE) : $(OBJS)
-	$(NVCC) $(NVCCFLAGS) -o $@  $?
+	$(NVCC) $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o $(NVCCFLAGS) -o $@  $?
 
 clean:
 	rm -f $(EXECUTABLE) $(OBJS) *.linkinfo
diff -ruN rodinia_3.1/cuda/lud/setup.ini rodinia_backup/cuda/lud/setup.ini
--- rodinia_3.1/cuda/lud/setup.ini	1969-12-31 16:00:00.000000000 -0800
+++ rodinia_backup/cuda/lud/setup.ini	2024-09-26 12:55:55.459241814 -0700
@@ -0,0 +1,7 @@
+[DEFAULT]
+compile = make
+run = cuda/lud_cuda -i 256.dat;cuda/lud_cuda -i 64.dat;cuda/lud_cuda -i 512.dat;cuda/lud_cuda -i 2048.dat;cuda/lud_cuda -s 256 -v
+use_clang_plugin = false
+clang_convert = make INJECT_CODE_CLANG=1
+llvm_pass = make INJECT_CODE_LLVM=1
+clean = make clean
\ No newline at end of file
diff -ruN rodinia_3.1/cuda/myocyte/file.c rodinia_backup/cuda/myocyte/file.c
--- rodinia_3.1/cuda/myocyte/file.c	2015-12-11 07:46:06.000000000 -0800
+++ rodinia_backup/cuda/myocyte/file.c	2024-09-26 12:55:55.460241864 -0700
@@ -94,7 +94,7 @@
 
 	fid = fopen(filename, "r");
 	if( fid == NULL ){
-		printf( "The file was not opened for reading\n" );
+		printf( "The file was not opened for reading: %s\n", filename );
 		return;
 	}
 
diff -ruN rodinia_3.1/cuda/myocyte/main.cu rodinia_backup/cuda/myocyte/main.cu
--- rodinia_3.1/cuda/myocyte/main.cu	2015-12-11 07:46:06.000000000 -0800
+++ rodinia_backup/cuda/myocyte/main.cu	2024-09-26 12:55:55.460241864 -0700
@@ -11,7 +11,7 @@
 // Myocyte application models cardiac myocyte (heart muscle cell) and simulates its behavior according to the work by Saucerman and Bers [8]. The model integrates 
 // cardiac myocyte electrical activity with the calcineurin pathway, which is a key aspect of the development of heart failure. The model spans large number of temporal 
 // scales to reflect how changes in heart rate as observed during exercise or stress contribute to calcineurin pathway activation, which ultimately leads to the expression 
-// of numerous genes that remodel the heart�s structure. It can be used to identify potential therapeutic targets that may be useful for the treatment of heart failure. 
+// of numerous genes that remodel the heart�s structure. It can be used to identify potential therapeutic targets that may be useful for the treatment of heart failure. 
 // Biochemical reactions, ion transport and electrical activity in the cell are modeled with 91 ordinary differential equations (ODEs) that are determined by more than 200 
 // experimentally validated parameters. The model is simulated by solving this group of ODEs for a specified time interval. The process of ODE solving is based on the 
 // causal relationship between values of ODEs at different time steps, thus it is mostly sequential. At every dynamically determined time step, the solver evaluates the 
@@ -79,6 +79,7 @@
 //		DEFINE / INCLUDE
 //====================================================================================================100
 
+#include <hip/hip_runtime.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <math.h>
diff -ruN rodinia_3.1/cuda/myocyte/Makefile rodinia_backup/cuda/myocyte/Makefile
--- rodinia_3.1/cuda/myocyte/Makefile	2015-12-11 07:46:06.000000000 -0800
+++ rodinia_backup/cuda/myocyte/Makefile	2024-09-26 12:55:55.459241814 -0700
@@ -9,10 +9,7 @@
 
 # link objects(binaries) together
 myocyte.out:		main.o
-	nvcc	main.o \
-				-I/usr/local/cuda/include \
-				-L/usr/local/cuda/lib \
-				-lm -lcuda -lcudart \
+	hipcc main.o \
                                 -o myocyte.out
 
 # compile main function file into object (binary)
@@ -35,7 +32,7 @@
 				kernel_fin_2.cu \
 				file.c \
 				timer.c
-	nvcc	main.cu \
+	hipcc	$(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o main.cu \
 				-c -O3 -g
 
 # delete all object files
diff -ruN rodinia_3.1/cuda/myocyte/master.cu rodinia_backup/cuda/myocyte/master.cu
--- rodinia_3.1/cuda/myocyte/master.cu	2015-12-11 07:46:06.000000000 -0800
+++ rodinia_backup/cuda/myocyte/master.cu	2024-09-26 12:55:55.460241864 -0700
@@ -43,8 +43,8 @@
 	int d_com_mem;
 	d_com_mem = 3 * sizeof(fp);
 
-	cudaMemcpy(d_initvalu, initvalu, d_initvalu_mem, cudaMemcpyHostToDevice);
-	cudaMemcpy(d_params, parameter, d_params_mem, cudaMemcpyHostToDevice);
+	hipMemcpy(d_initvalu, initvalu, d_initvalu_mem, hipMemcpyHostToDevice);
+	hipMemcpy(d_params, parameter, d_params_mem, hipMemcpyHostToDevice);
 
 	threads.x = NUMBER_THREADS;
 	threads.y = 1;
@@ -56,8 +56,8 @@
 															d_params,
 															d_com);
 
-	cudaMemcpy(finavalu, d_finavalu, d_finavalu_mem, cudaMemcpyDeviceToHost);
-	cudaMemcpy(com, d_com, d_com_mem, cudaMemcpyDeviceToHost);
+	hipMemcpy(finavalu, d_finavalu, d_finavalu_mem, hipMemcpyDeviceToHost);
+	hipMemcpy(com, d_com, d_com_mem, hipMemcpyDeviceToHost);
 
 	//=====================================================================
 	//	FINAL KERNEL
diff -ruN rodinia_3.1/cuda/myocyte/setup.ini rodinia_backup/cuda/myocyte/setup.ini
--- rodinia_3.1/cuda/myocyte/setup.ini	1969-12-31 16:00:00.000000000 -0800
+++ rodinia_backup/cuda/myocyte/setup.ini	2024-09-26 12:55:55.460241864 -0700
@@ -0,0 +1,7 @@
+[DEFAULT]
+compile = make
+run = ./myocyte.out 100 1 0
+use_clang_plugin = false
+clang_convert = make INJECT_CODE_CLANG=1
+llvm_pass = make INJECT_CODE_LLVM=1
+clean = make clean
\ No newline at end of file
diff -ruN rodinia_3.1/cuda/myocyte/work_2.cu rodinia_backup/cuda/myocyte/work_2.cu
--- rodinia_3.1/cuda/myocyte/work_2.cu	2015-12-11 07:46:06.000000000 -0800
+++ rodinia_backup/cuda/myocyte/work_2.cu	2024-09-26 12:55:55.460241864 -0700
@@ -114,37 +114,37 @@
 
 	y_mem = workload * (xmax+1) * EQUATIONS * sizeof(fp);
 	y= (fp *) malloc(y_mem);
-	cudaMalloc((void **)&d_y, y_mem);
+	hipMalloc((void **)&d_y, y_mem);
 
 	x_mem = workload * (xmax+1) * sizeof(fp);
 	x= (fp *) malloc(x_mem);
-	cudaMalloc((void **)&d_x, x_mem);
+	hipMalloc((void **)&d_x, x_mem);
 
 	params_mem = workload * PARAMETERS * sizeof(fp);
 	params= (fp *) malloc(params_mem);
-	cudaMalloc((void **)&d_params, params_mem);
+	hipMalloc((void **)&d_params, params_mem);
 
 	//========================================40
 	//		TEMPORARY SOLVER VARIABLES
 	//========================================40
 
 	com_mem = workload * 3 * sizeof(fp);
-	cudaMalloc((void **)&d_com, com_mem);
+	hipMalloc((void **)&d_com, com_mem);
 
 	err_mem = workload * EQUATIONS * sizeof(fp);
-	cudaMalloc((void **)&d_err, err_mem);
+	hipMalloc((void **)&d_err, err_mem);
 
 	scale_mem = workload * EQUATIONS * sizeof(fp);
-	cudaMalloc((void **)&d_scale, scale_mem);
+	hipMalloc((void **)&d_scale, scale_mem);
 
 	yy_mem = workload * EQUATIONS * sizeof(fp);
-	cudaMalloc((void **)&d_yy, yy_mem);
+	hipMalloc((void **)&d_yy, yy_mem);
 
 	initvalu_temp_mem = workload * EQUATIONS * sizeof(fp);
-	cudaMalloc((void **)&d_initvalu_temp, initvalu_temp_mem);
+	hipMalloc((void **)&d_initvalu_temp, initvalu_temp_mem);
 
 	finavalu_temp_mem = workload * 13* EQUATIONS * sizeof(fp);
-	cudaMalloc((void **)&d_finavalu_temp, finavalu_temp_mem);
+	hipMalloc((void **)&d_finavalu_temp, finavalu_temp_mem);
 
 	time2 = get_time();
 
@@ -160,7 +160,7 @@
 		pointer = i * (xmax+1) + 0;
 		x[pointer] = 0;
 	}
-	cudaMemcpy(d_x, x, x_mem, cudaMemcpyHostToDevice);
+	hipMemcpy(d_x, x, x_mem, hipMemcpyHostToDevice);
 
 	//========================================40
 	//		Y
@@ -168,13 +168,13 @@
 
 	for(i=0; i<workload; i++){
 		pointer = i*((xmax+1)*EQUATIONS) + 0*(EQUATIONS);
-		read("../../data/myocyte/y.txt",
+		read("./y.txt",
 					&y[pointer],
 					91,
 					1,
 					0);
 	}
-	cudaMemcpy(d_y, y, y_mem, cudaMemcpyHostToDevice);
+	hipMemcpy(d_y, y, y_mem, hipMemcpyHostToDevice);
 
 	//========================================40
 	//		PARAMS
@@ -182,13 +182,13 @@
 
 	for(i=0; i<workload; i++){
 		pointer = i*PARAMETERS;
-		read("../../data/myocyte/params.txt",
+		read("./params.txt",
 					&params[pointer],
 					18,
 					1,
 					0);
 	}
-	cudaMemcpy(d_params, params, params_mem, cudaMemcpyHostToDevice);
+	hipMemcpy(d_params, params, params_mem, hipMemcpyHostToDevice);
 
 	time3 = get_time();
 
@@ -227,8 +227,8 @@
 																d_initvalu_temp,
 																d_finavalu_temp);
 
-	// cudaThreadSynchronize();
-	// printf("CUDA error: %s\n", cudaGetErrorString(cudaGetLastError()));
+	// hipDeviceSynchronize();
+	// printf("CUDA error: %s\n", hipGetErrorString(hipGetLastError()));
 
 	time4 = get_time();
 
@@ -236,8 +236,8 @@
 	//		COPY DATA BACK TO CPU
 	//================================================================================80
 
-	cudaMemcpy(x, d_x, x_mem, cudaMemcpyDeviceToHost);
-	cudaMemcpy(y, d_y, y_mem, cudaMemcpyDeviceToHost);
+	hipMemcpy(x, d_x, x_mem, hipMemcpyDeviceToHost);
+	hipMemcpy(y, d_y, y_mem, hipMemcpyDeviceToHost);
 
 	time5 = get_time();
 
@@ -274,26 +274,26 @@
 	//============================================================60
 
 	free(y);
-	cudaFree(d_y);
+	hipFree(d_y);
 
 	free(x);
-	cudaFree(d_x);
+	hipFree(d_x);
 
 	free(params);
-	cudaFree(d_params);
+	hipFree(d_params);
 
 	//============================================================60
 	//		TEMPORARY SOLVER VARIABLES
 	//============================================================60
 
-	cudaFree(d_com);
+	hipFree(d_com);
 
-	cudaFree(d_err);
-	cudaFree(d_scale);
-	cudaFree(d_yy);
+	hipFree(d_err);
+	hipFree(d_scale);
+	hipFree(d_yy);
 
-	cudaFree(d_initvalu_temp);
-	cudaFree(d_finavalu_temp);
+	hipFree(d_initvalu_temp);
+	hipFree(d_finavalu_temp);
 
 	time6= get_time();
 
diff -ruN rodinia_3.1/cuda/myocyte/work.cu rodinia_backup/cuda/myocyte/work.cu
--- rodinia_3.1/cuda/myocyte/work.cu	2015-12-11 07:46:06.000000000 -0800
+++ rodinia_backup/cuda/myocyte/work.cu	2024-09-26 12:55:55.460241864 -0700
@@ -98,22 +98,22 @@
 	int d_initvalu_mem;
 	d_initvalu_mem = EQUATIONS * sizeof(fp);
 	fp* d_initvalu;
-	cudaMalloc((void **)&d_initvalu, d_initvalu_mem);
+	hipMalloc((void **)&d_initvalu, d_initvalu_mem);
 
 	int d_finavalu_mem;
 	d_finavalu_mem = EQUATIONS * sizeof(fp);
 	fp* d_finavalu;
-	cudaMalloc((void **)&d_finavalu, d_finavalu_mem);
+	hipMalloc((void **)&d_finavalu, d_finavalu_mem);
 
 	int d_params_mem;
 	d_params_mem = PARAMETERS * sizeof(fp);
 	fp* d_params;
-	cudaMalloc((void **)&d_params, d_params_mem);
+	hipMalloc((void **)&d_params, d_params_mem);
 
 	int d_com_mem;
 	d_com_mem = 3 * sizeof(fp);
 	fp* d_com;
-	cudaMalloc((void **)&d_com, d_com_mem);
+	hipMalloc((void **)&d_com, d_com_mem);
 
 	time2 = get_time();
 
@@ -123,7 +123,7 @@
 
 	// y
 	for(i=0; i<workload; i++){
-		read(	"../../data/myocyte/y.txt",
+		read(	"./y.txt",
 					y[i][0],
 					EQUATIONS,
 					1,
@@ -132,7 +132,7 @@
 
 	// params
 	for(i=0; i<workload; i++){
-		read("../../data/myocyte/params.txt",
+		read("./params.txt",
 					params[i],
 					PARAMETERS,
 					1,
@@ -221,10 +221,10 @@
 	free(com);
 
 	// GPU memory
-	cudaFree(d_initvalu);
-	cudaFree(d_finavalu);
-	cudaFree(d_params);
-	cudaFree(d_com);
+	hipFree(d_initvalu);
+	hipFree(d_finavalu);
+	hipFree(d_params);
+	hipFree(d_com);
 
 	//================================================================================80
 	//		DISPLAY TIMING
diff -ruN rodinia_3.1/cuda/nn/filelist_4 rodinia_backup/cuda/nn/filelist_4
--- rodinia_3.1/cuda/nn/filelist_4	2015-12-11 07:46:06.000000000 -0800
+++ rodinia_backup/cuda/nn/filelist_4	2024-09-26 12:55:55.461241913 -0700
@@ -1,4 +1,4 @@
-../../data/nn/cane4_0.db
-../../data/nn/cane4_1.db
-../../data/nn/cane4_2.db
-../../data/nn/cane4_3.db
+./cane4_0.db
+./cane4_1.db
+./cane4_2.db
+./cane4_3.db
diff -ruN rodinia_3.1/cuda/nn/filelist.txt rodinia_backup/cuda/nn/filelist.txt
--- rodinia_3.1/cuda/nn/filelist.txt	2024-09-26 15:55:15.771570569 -0700
+++ rodinia_backup/cuda/nn/filelist.txt	1969-12-31 16:00:00.000000000 -0800
@@ -1,5 +0,0 @@
-cane4_0.db
-cane4_1.db
-cane4_2.db
-cane4_3.db
-
diff -ruN rodinia_3.1/cuda/nn/Makefile rodinia_backup/cuda/nn/Makefile
--- rodinia_3.1/cuda/nn/Makefile	2015-12-11 07:46:06.000000000 -0800
+++ rodinia_backup/cuda/nn/Makefile	2024-09-26 12:55:55.460241864 -0700
@@ -1,7 +1,7 @@
 include ../../common/make.config
 
 LOCAL_CC = gcc -g -O3 -Wall
-CC := $(CUDA_DIR)/bin/nvcc
+CC := hipcc
 
 all : nn hurricane_gen
 
@@ -9,8 +9,8 @@
 	rm -rf *.o nn hurricane_gen
 
 nn : nn_cuda.cu
-	$(CC) -cuda nn_cuda.cu
-	$(CC) -o nn nn_cuda.cu
+	$(CC) -c $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o nn_cuda.cu
+	$(CC) $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o -o nn nn_cuda.o
 
 hurricane_gen : hurricane_gen.c
 	$(LOCAL_CC) -o $@ $< -lm
diff -ruN rodinia_3.1/cuda/nn/nn_cuda.cu rodinia_backup/cuda/nn/nn_cuda.cu
--- rodinia_3.1/cuda/nn/nn_cuda.cu	2015-12-11 07:46:06.000000000 -0800
+++ rodinia_backup/cuda/nn/nn_cuda.cu	2024-09-26 12:55:55.462241963 -0700
@@ -8,7 +8,7 @@
 #include <sys/time.h>
 #include <float.h>
 #include <vector>
-#include "cuda.h"
+#include "hip/hip_runtime.h"
 
 #define min( a, b )			a > b ? b : a
 #define ceilDiv( a, b )		( a + b - 1 ) / b
@@ -94,15 +94,15 @@
 
 
 	// Scaling calculations - added by Sam Kauffman
-	cudaDeviceProp deviceProp;
-	cudaGetDeviceProperties( &deviceProp, 0 );
-	cudaThreadSynchronize();
+	hipDeviceProp_t deviceProp;
+	hipGetDeviceProperties( &deviceProp, 0 );
+	hipDeviceSynchronize();
 	unsigned long maxGridX = deviceProp.maxGridSize[0];
 	unsigned long threadsPerBlock = min( deviceProp.maxThreadsPerBlock, DEFAULT_THREADS_PER_BLOCK );
 	size_t totalDeviceMemory;
 	size_t freeDeviceMemory;
-	cudaMemGetInfo(  &freeDeviceMemory, &totalDeviceMemory );
-	cudaThreadSynchronize();
+	hipMemGetInfo(  &freeDeviceMemory, &totalDeviceMemory );
+	hipDeviceSynchronize();
 	unsigned long usableDeviceMemory = freeDeviceMemory * 85 / 100; // 85% arbitrary throttle to compensate for known CUDA bug
 	unsigned long maxThreads = usableDeviceMemory / 12; // 4 bytes in 3 vectors per thread
 	if ( numRecords > maxThreads )
@@ -134,22 +134,22 @@
 	* Allocate memory on host and device
 	*/
 	distances = (float *)malloc(sizeof(float) * numRecords);
-	cudaMalloc((void **) &d_locations,sizeof(LatLong) * numRecords);
-	cudaMalloc((void **) &d_distances,sizeof(float) * numRecords);
+	hipMalloc((void **) &d_locations,sizeof(LatLong) * numRecords);
+	hipMalloc((void **) &d_distances,sizeof(float) * numRecords);
 
    /**
     * Transfer data from host to device
     */
-    cudaMemcpy( d_locations, &locations[0], sizeof(LatLong) * numRecords, cudaMemcpyHostToDevice);
+    hipMemcpy( d_locations, &locations[0], sizeof(LatLong) * numRecords, hipMemcpyHostToDevice);
 
     /**
     * Execute kernel
     */
     euclid<<< gridDim, threadsPerBlock >>>(d_locations,d_distances,numRecords,lat,lng);
-    cudaThreadSynchronize();
+    hipDeviceSynchronize();
 
     //Copy data from device memory to host memory
-    cudaMemcpy( distances, d_distances, sizeof(float)*numRecords, cudaMemcpyDeviceToHost );
+    hipMemcpy( distances, d_distances, sizeof(float)*numRecords, hipMemcpyDeviceToHost );
 
 	// find the resultsCount least distances
     findLowest(records,distances,numRecords,resultsCount);
@@ -161,8 +161,8 @@
     }
     free(distances);
     //Free memory
-	cudaFree(d_locations);
-	cudaFree(d_distances);
+	hipFree(d_locations);
+	hipFree(d_distances);
 
 }
 
@@ -187,7 +187,7 @@
         }
         fp = fopen(dbname, "r");
         if(!fp) {
-            printf("error opening a db\n");
+            printf("error opening a db: %s\n", dbname);
             exit(1);
         }
         // read each record
diff -ruN rodinia_3.1/cuda/nn/setup.ini rodinia_backup/cuda/nn/setup.ini
--- rodinia_3.1/cuda/nn/setup.ini	1969-12-31 16:00:00.000000000 -0800
+++ rodinia_backup/cuda/nn/setup.ini	2024-09-26 12:55:55.462241963 -0700
@@ -0,0 +1,7 @@
+[DEFAULT]
+compile = make
+run = ./nn filelist_4 -r 5 -lat 30 -lng 90
+use_clang_plugin = false
+clang_convert = make INJECT_CODE_CLANG=1
+llvm_pass = make INJECT_CODE_LLVM=1
+clean = make clean
\ No newline at end of file
diff -ruN rodinia_3.1/cuda/nw/Makefile rodinia_backup/cuda/nw/Makefile
--- rodinia_3.1/cuda/nw/Makefile	2015-12-11 07:46:09.000000000 -0800
+++ rodinia_backup/cuda/nw/Makefile	2024-09-26 12:55:55.462241963 -0700
@@ -1,24 +1,22 @@
 include ../../common/make.config
 
-CC := $(CUDA_DIR)/bin/nvcc
-
-INCLUDE := $(CUDA_DIR)/include
+CC := hipcc
 
 SRC = needle.cu
 
 EXE = needle
 
 release: $(SRC)
-	$(CC) ${KERNEL_DIM} $(SRC) -o $(EXE) -I$(INCLUDE) -L$(CUDA_LIB_DIR) 
+	$(CC) $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o ${KERNEL_DIM} $(SRC) -o $(EXE)
 
 enum: $(SRC)
-	$(CC) ${KERNEL_DIM} -deviceemu $(SRC) -o $(EXE) -I$(INCLUDE) -L$(CUDA_LIB_DIR) 
-
+	$(CC) $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o ${KERNEL_DIM} -deviceemu $(SRC) -o $(EXE)
+	
 debug: $(SRC)
-	$(CC) ${KERNEL_DIM} -g $(SRC) -o $(EXE) -I$(INCLUDE) -L$(CUDA_LIB_DIR) 
+	$(CC) $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o ${KERNEL_DIM} -g $(SRC) -o $(EXE)
 
 debugenum: $(SRC)
-	$(CC) ${KERNEL_DIM} -g -deviceemu $(SRC) -o $(EXE) -I$(INCLUDE) -L$(CUDA_LIB_DIR) 
+	$(CC) $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o${KERNEL_DIM} -g -deviceemu $(SRC) -o $(EXE)
 
 clean: $(SRC)
 	rm -f $(EXE) $(EXE).linkinfo result.txt
diff -ruN rodinia_3.1/cuda/nw/needle.cu rodinia_backup/cuda/nw/needle.cu
--- rodinia_3.1/cuda/nw/needle.cu	2015-12-11 07:46:09.000000000 -0800
+++ rodinia_backup/cuda/nw/needle.cu	2024-09-26 12:55:55.462241963 -0700
@@ -4,7 +4,7 @@
 #include <string.h>
 #include <math.h>
 #include "needle.h"
-#include <cuda.h>
+#include <hip/hip_runtime.h>
 #include <sys/time.h>
 
 // includes, kernels
@@ -138,11 +138,11 @@
 
 
     size = max_cols * max_rows;
-	cudaMalloc((void**)& referrence_cuda, sizeof(int)*size);
-	cudaMalloc((void**)& matrix_cuda, sizeof(int)*size);
+	hipMalloc((void**)& referrence_cuda, sizeof(int)*size);
+	hipMalloc((void**)& matrix_cuda, sizeof(int)*size);
 	
-	cudaMemcpy(referrence_cuda, referrence, sizeof(int) * size, cudaMemcpyHostToDevice);
-	cudaMemcpy(matrix_cuda, input_itemsets, sizeof(int) * size, cudaMemcpyHostToDevice);
+	hipMemcpy(referrence_cuda, referrence, sizeof(int) * size, hipMemcpyHostToDevice);
+	hipMemcpy(matrix_cuda, input_itemsets, sizeof(int) * size, hipMemcpyHostToDevice);
 
     dim3 dimGrid;
 	dim3 dimBlock(BLOCK_SIZE, 1);
@@ -166,7 +166,7 @@
 	}
 
 
-    cudaMemcpy(output_itemsets, matrix_cuda, sizeof(int) * size, cudaMemcpyDeviceToHost);
+    hipMemcpy(output_itemsets, matrix_cuda, sizeof(int) * size, hipMemcpyDeviceToHost);
 	
 //#define TRACEBACK
 #ifdef TRACEBACK
@@ -229,8 +229,8 @@
 
 #endif
 
-	cudaFree(referrence_cuda);
-	cudaFree(matrix_cuda);
+	hipFree(referrence_cuda);
+	hipFree(matrix_cuda);
 
 	free(referrence);
 	free(input_itemsets);
diff -ruN rodinia_3.1/cuda/nw/setup.ini rodinia_backup/cuda/nw/setup.ini
--- rodinia_3.1/cuda/nw/setup.ini	1969-12-31 16:00:00.000000000 -0800
+++ rodinia_backup/cuda/nw/setup.ini	2024-09-26 12:55:55.462241963 -0700
@@ -0,0 +1,7 @@
+[DEFAULT]
+compile = make
+run = ./needle 2048 10
+use_clang_plugin = false
+clang_convert = make INJECT_CODE_CLANG=1
+llvm_pass = make INJECT_CODE_LLVM=1
+clean = make clean
\ No newline at end of file
diff -ruN rodinia_3.1/cuda/particlefilter/ex_particle_CUDA_float_seq.cu rodinia_backup/cuda/particlefilter/ex_particle_CUDA_float_seq.cu
--- rodinia_3.1/cuda/particlefilter/ex_particle_CUDA_float_seq.cu	2015-12-11 07:46:14.000000000 -0800
+++ rodinia_backup/cuda/particlefilter/ex_particle_CUDA_float_seq.cu	2024-09-26 12:55:55.462241963 -0700
@@ -1,3 +1,4 @@
+#include "hip/hip_runtime.h"
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -46,9 +47,9 @@
  * Checks for CUDA errors and prints them to the screen to help with
  * debugging of CUDA related programming
  *****************************/
-void check_error(cudaError e) {
-    if (e != cudaSuccess) {
-        printf("\nCUDA error: %s\n", cudaGetErrorString(e));
+void check_error(hipError_t e) {
+    if (e != hipSuccess) {
+        printf("\nCUDA error: %s\n", hipGetErrorString(e));
         exit(1);
     }
 }
@@ -58,7 +59,7 @@
     double* mem = (double*) malloc(sizeof (double) *size);
 
     //transfer data from device
-    cudaMemcpy(mem, array_GPU, sizeof (double) *size, cudaMemcpyDeviceToHost);
+    hipMemcpy(mem, array_GPU, sizeof (double) *size, hipMemcpyDeviceToHost);
 
 
     printf("PRINTING ARRAY VALUES\n");
@@ -685,21 +686,21 @@
     double* partial_sums;
 
     //CUDA memory allocation
-    check_error(cudaMalloc((void **) &arrayX_GPU, sizeof (double) *Nparticles));
-    check_error(cudaMalloc((void **) &arrayY_GPU, sizeof (double) *Nparticles));
-    check_error(cudaMalloc((void **) &xj_GPU, sizeof (double) *Nparticles));
-    check_error(cudaMalloc((void **) &yj_GPU, sizeof (double) *Nparticles));
-    check_error(cudaMalloc((void **) &CDF_GPU, sizeof (double) *Nparticles));
-    check_error(cudaMalloc((void **) &u_GPU, sizeof (double) *Nparticles));
-    check_error(cudaMalloc((void **) &likelihood_GPU, sizeof (double) *Nparticles));
+    check_error(hipMalloc((void **) &arrayX_GPU, sizeof (double) *Nparticles));
+    check_error(hipMalloc((void **) &arrayY_GPU, sizeof (double) *Nparticles));
+    check_error(hipMalloc((void **) &xj_GPU, sizeof (double) *Nparticles));
+    check_error(hipMalloc((void **) &yj_GPU, sizeof (double) *Nparticles));
+    check_error(hipMalloc((void **) &CDF_GPU, sizeof (double) *Nparticles));
+    check_error(hipMalloc((void **) &u_GPU, sizeof (double) *Nparticles));
+    check_error(hipMalloc((void **) &likelihood_GPU, sizeof (double) *Nparticles));
     //set likelihood to zero
-    check_error(cudaMemset((void *) likelihood_GPU, 0, sizeof (double) *Nparticles));
-    check_error(cudaMalloc((void **) &weights_GPU, sizeof (double) *Nparticles));
-    check_error(cudaMalloc((void **) &I_GPU, sizeof (unsigned char) *IszX * IszY * Nfr));
-    check_error(cudaMalloc((void **) &objxy_GPU, sizeof (int) *2 * countOnes));
-    check_error(cudaMalloc((void **) &ind_GPU, sizeof (int) *countOnes * Nparticles));
-    check_error(cudaMalloc((void **) &seed_GPU, sizeof (int) *Nparticles));
-    check_error(cudaMalloc((void **) &partial_sums, sizeof (double) *Nparticles));
+    check_error(hipMemset((void *) likelihood_GPU, 0, sizeof (double) *Nparticles));
+    check_error(hipMalloc((void **) &weights_GPU, sizeof (double) *Nparticles));
+    check_error(hipMalloc((void **) &I_GPU, sizeof (unsigned char) *IszX * IszY * Nfr));
+    check_error(hipMalloc((void **) &objxy_GPU, sizeof (int) *2 * countOnes));
+    check_error(hipMalloc((void **) &ind_GPU, sizeof (int) *countOnes * Nparticles));
+    check_error(hipMalloc((void **) &seed_GPU, sizeof (int) *Nparticles));
+    check_error(hipMalloc((void **) &partial_sums, sizeof (double) *Nparticles));
 
 
     //Donnie - this loop is different because in this kernel, arrayX and arrayY
@@ -716,12 +717,12 @@
     int indX, indY;
     //start send
     long long send_start = get_time();
-    check_error(cudaMemcpy(I_GPU, I, sizeof (unsigned char) *IszX * IszY*Nfr, cudaMemcpyHostToDevice));
-    check_error(cudaMemcpy(objxy_GPU, objxy, sizeof (int) *2 * countOnes, cudaMemcpyHostToDevice));
-    check_error(cudaMemcpy(weights_GPU, weights, sizeof (double) *Nparticles, cudaMemcpyHostToDevice));
-    check_error(cudaMemcpy(xj_GPU, xj, sizeof (double) *Nparticles, cudaMemcpyHostToDevice));
-    check_error(cudaMemcpy(yj_GPU, yj, sizeof (double) *Nparticles, cudaMemcpyHostToDevice));
-    check_error(cudaMemcpy(seed_GPU, seed, sizeof (int) *Nparticles, cudaMemcpyHostToDevice));
+    check_error(hipMemcpy(I_GPU, I, sizeof (unsigned char) *IszX * IszY*Nfr, hipMemcpyHostToDevice));
+    check_error(hipMemcpy(objxy_GPU, objxy, sizeof (int) *2 * countOnes, hipMemcpyHostToDevice));
+    check_error(hipMemcpy(weights_GPU, weights, sizeof (double) *Nparticles, hipMemcpyHostToDevice));
+    check_error(hipMemcpy(xj_GPU, xj, sizeof (double) *Nparticles, hipMemcpyHostToDevice));
+    check_error(hipMemcpy(yj_GPU, yj, sizeof (double) *Nparticles, hipMemcpyHostToDevice));
+    check_error(hipMemcpy(seed_GPU, seed, sizeof (int) *Nparticles, hipMemcpyHostToDevice));
     long long send_end = get_time();
     printf("TIME TO SEND TO GPU: %f\n", elapsed_time(send_start, send_end));
     int num_blocks = ceil((double) Nparticles / (double) threads_per_block);
@@ -729,37 +730,37 @@
 
     for (k = 1; k < Nfr; k++) {
         
-        likelihood_kernel << < num_blocks, threads_per_block >> > (arrayX_GPU, arrayY_GPU, xj_GPU, yj_GPU, CDF_GPU, ind_GPU, objxy_GPU, likelihood_GPU, I_GPU, u_GPU, weights_GPU, Nparticles, countOnes, max_size, k, IszY, Nfr, seed_GPU, partial_sums);
+        likelihood_kernel <<< num_blocks, threads_per_block >>> (arrayX_GPU, arrayY_GPU, xj_GPU, yj_GPU, CDF_GPU, ind_GPU, objxy_GPU, likelihood_GPU, I_GPU, u_GPU, weights_GPU, Nparticles, countOnes, max_size, k, IszY, Nfr, seed_GPU, partial_sums);
 
-        sum_kernel << < num_blocks, threads_per_block >> > (partial_sums, Nparticles);
+        sum_kernel <<< num_blocks, threads_per_block >>> (partial_sums, Nparticles);
 
-        normalize_weights_kernel << < num_blocks, threads_per_block >> > (weights_GPU, Nparticles, partial_sums, CDF_GPU, u_GPU, seed_GPU);
+        normalize_weights_kernel <<< num_blocks, threads_per_block >>> (weights_GPU, Nparticles, partial_sums, CDF_GPU, u_GPU, seed_GPU);
         
-        find_index_kernel << < num_blocks, threads_per_block >> > (arrayX_GPU, arrayY_GPU, CDF_GPU, u_GPU, xj_GPU, yj_GPU, weights_GPU, Nparticles);
+        find_index_kernel <<< num_blocks, threads_per_block >>> (arrayX_GPU, arrayY_GPU, CDF_GPU, u_GPU, xj_GPU, yj_GPU, weights_GPU, Nparticles);
 
     }//end loop
 
     //block till kernels are finished
-    cudaThreadSynchronize();
+    hipDeviceSynchronize();
     long long back_time = get_time();
 
-    cudaFree(xj_GPU);
-    cudaFree(yj_GPU);
-    cudaFree(CDF_GPU);
-    cudaFree(u_GPU);
-    cudaFree(likelihood_GPU);
-    cudaFree(I_GPU);
-    cudaFree(objxy_GPU);
-    cudaFree(ind_GPU);
-    cudaFree(seed_GPU);
-    cudaFree(partial_sums);
+    hipFree(xj_GPU);
+    hipFree(yj_GPU);
+    hipFree(CDF_GPU);
+    hipFree(u_GPU);
+    hipFree(likelihood_GPU);
+    hipFree(I_GPU);
+    hipFree(objxy_GPU);
+    hipFree(ind_GPU);
+    hipFree(seed_GPU);
+    hipFree(partial_sums);
 
     long long free_time = get_time();
-    check_error(cudaMemcpy(arrayX, arrayX_GPU, sizeof (double) *Nparticles, cudaMemcpyDeviceToHost));
+    check_error(hipMemcpy(arrayX, arrayX_GPU, sizeof (double) *Nparticles, hipMemcpyDeviceToHost));
     long long arrayX_time = get_time();
-    check_error(cudaMemcpy(arrayY, arrayY_GPU, sizeof (double) *Nparticles, cudaMemcpyDeviceToHost));
+    check_error(hipMemcpy(arrayY, arrayY_GPU, sizeof (double) *Nparticles, hipMemcpyDeviceToHost));
     long long arrayY_time = get_time();
-    check_error(cudaMemcpy(weights, weights_GPU, sizeof (double) *Nparticles, cudaMemcpyDeviceToHost));
+    check_error(hipMemcpy(weights, weights_GPU, sizeof (double) *Nparticles, hipMemcpyDeviceToHost));
     long long back_end_time = get_time();
     printf("GPU Execution: %lf\n", elapsed_time(send_end, back_time));
     printf("FREE TIME: %lf\n", elapsed_time(back_time, free_time));
@@ -781,9 +782,9 @@
     printf("%lf\n", distance);
 
     //CUDA freeing of memory
-    cudaFree(weights_GPU);
-    cudaFree(arrayY_GPU);
-    cudaFree(arrayX_GPU);
+    hipFree(weights_GPU);
+    hipFree(arrayY_GPU);
+    hipFree(arrayX_GPU);
 
     //free regular memory
     free(likelihood);
diff -ruN rodinia_3.1/cuda/particlefilter/ex_particle_CUDA_naive_seq.cu rodinia_backup/cuda/particlefilter/ex_particle_CUDA_naive_seq.cu
--- rodinia_3.1/cuda/particlefilter/ex_particle_CUDA_naive_seq.cu	2015-12-11 07:46:14.000000000 -0800
+++ rodinia_backup/cuda/particlefilter/ex_particle_CUDA_naive_seq.cu	2024-09-26 12:55:55.462241963 -0700
@@ -1,3 +1,4 @@
+#include "hip/hip_runtime.h"
 /**
  * @file ex_particle_OPENMP_seq.c
  * @author Michael Trotter & Matt Goodrum
@@ -49,9 +50,9 @@
 * Checks for CUDA errors and prints them to the screen to help with
 * debugging of CUDA related programming
 *****************************/
-void check_error(cudaError e) {
-     if (e != cudaSuccess) {
-     	printf("\nCUDA error: %s\n", cudaGetErrorString(e));
+void check_error(hipError_t e) {
+     if (e != hipSuccess) {
+     	printf("\nCUDA error: %s\n", hipGetErrorString(e));
 	    exit(1);
      }
 }
@@ -458,12 +459,12 @@
 	double * u_GPU;
 	
 	//CUDA memory allocation
-	check_error(cudaMalloc((void **) &arrayX_GPU, sizeof(double)*Nparticles));
-	check_error(cudaMalloc((void **) &arrayY_GPU, sizeof(double)*Nparticles));
-	check_error(cudaMalloc((void **) &xj_GPU, sizeof(double)*Nparticles));
-	check_error(cudaMalloc((void **) &yj_GPU, sizeof(double)*Nparticles));
-	check_error(cudaMalloc((void **) &CDF_GPU, sizeof(double)*Nparticles));
-	check_error(cudaMalloc((void **) &u_GPU, sizeof(double)*Nparticles));
+	check_error(hipMalloc((void **) &arrayX_GPU, sizeof(double)*Nparticles));
+	check_error(hipMalloc((void **) &arrayY_GPU, sizeof(double)*Nparticles));
+	check_error(hipMalloc((void **) &xj_GPU, sizeof(double)*Nparticles));
+	check_error(hipMalloc((void **) &yj_GPU, sizeof(double)*Nparticles));
+	check_error(hipMalloc((void **) &CDF_GPU, sizeof(double)*Nparticles));
+	check_error(hipMalloc((void **) &u_GPU, sizeof(double)*Nparticles));
 	
 	for(x = 0; x < Nparticles; x++){
 		arrayX[x] = xe;
@@ -557,23 +558,23 @@
 		printf("TIME TO CALC U TOOK: %f\n", elapsed_time(cum_sum, u_time));
 		long long start_copy = get_time();
 		//CUDA memory copying from CPU memory to GPU memory
-		cudaMemcpy(arrayX_GPU, arrayX, sizeof(double)*Nparticles, cudaMemcpyHostToDevice);
-		cudaMemcpy(arrayY_GPU, arrayY, sizeof(double)*Nparticles, cudaMemcpyHostToDevice);
-		cudaMemcpy(xj_GPU, xj, sizeof(double)*Nparticles, cudaMemcpyHostToDevice);
-		cudaMemcpy(yj_GPU, yj, sizeof(double)*Nparticles, cudaMemcpyHostToDevice);
-		cudaMemcpy(CDF_GPU, CDF, sizeof(double)*Nparticles, cudaMemcpyHostToDevice);
-		cudaMemcpy(u_GPU, u, sizeof(double)*Nparticles, cudaMemcpyHostToDevice);
+		hipMemcpy(arrayX_GPU, arrayX, sizeof(double)*Nparticles, hipMemcpyHostToDevice);
+		hipMemcpy(arrayY_GPU, arrayY, sizeof(double)*Nparticles, hipMemcpyHostToDevice);
+		hipMemcpy(xj_GPU, xj, sizeof(double)*Nparticles, hipMemcpyHostToDevice);
+		hipMemcpy(yj_GPU, yj, sizeof(double)*Nparticles, hipMemcpyHostToDevice);
+		hipMemcpy(CDF_GPU, CDF, sizeof(double)*Nparticles, hipMemcpyHostToDevice);
+		hipMemcpy(u_GPU, u, sizeof(double)*Nparticles, hipMemcpyHostToDevice);
 		long long end_copy = get_time();
 		//Set number of threads
 		int num_blocks = ceil((double) Nparticles/(double) threads_per_block);
 		
 		//KERNEL FUNCTION CALL
 		kernel <<< num_blocks, threads_per_block >>> (arrayX_GPU, arrayY_GPU, CDF_GPU, u_GPU, xj_GPU, yj_GPU, Nparticles);
-                cudaThreadSynchronize();
+                hipDeviceSynchronize();
                 long long start_copy_back = get_time();
 		//CUDA memory copying back from GPU to CPU memory
-		cudaMemcpy(yj, yj_GPU, sizeof(double)*Nparticles, cudaMemcpyDeviceToHost);
-		cudaMemcpy(xj, xj_GPU, sizeof(double)*Nparticles, cudaMemcpyDeviceToHost);
+		hipMemcpy(yj, yj_GPU, sizeof(double)*Nparticles, hipMemcpyDeviceToHost);
+		hipMemcpy(xj, xj_GPU, sizeof(double)*Nparticles, hipMemcpyDeviceToHost);
 		long long end_copy_back = get_time();
 		printf("SENDING TO GPU TOOK: %lf\n", elapsed_time(start_copy, end_copy));
 		printf("CUDA EXEC TOOK: %lf\n", elapsed_time(end_copy, start_copy_back));
@@ -592,12 +593,12 @@
 	}
 	
 	//CUDA freeing of memory
-	cudaFree(u_GPU);
-	cudaFree(CDF_GPU);
-	cudaFree(yj_GPU);
-	cudaFree(xj_GPU);
-	cudaFree(arrayY_GPU);
-	cudaFree(arrayX_GPU);
+	hipFree(u_GPU);
+	hipFree(CDF_GPU);
+	hipFree(yj_GPU);
+	hipFree(xj_GPU);
+	hipFree(arrayY_GPU);
+	hipFree(arrayX_GPU);
 	
 	//free memory
 	free(disk);
diff -ruN rodinia_3.1/cuda/particlefilter/Makefile rodinia_backup/cuda/particlefilter/Makefile
--- rodinia_3.1/cuda/particlefilter/Makefile	2015-12-11 07:46:14.000000000 -0800
+++ rodinia_backup/cuda/particlefilter/Makefile	2024-09-26 12:55:55.462241963 -0700
@@ -2,17 +2,15 @@
 
 include ../../common/make.config
 
-CC := $(CUDA_DIR)/bin/nvcc
-
-INCLUDE := $(CUDA_DIR)/include
+CC := hipcc
 
 all: naive float
 
 naive: ex_particle_CUDA_naive_seq.cu
-	$(CC) -I$(INCLUDE) -L$(CUDA_LIB_DIR) -lcuda -g -lm -O3 -use_fast_math -arch sm_13 ex_particle_CUDA_naive_seq.cu -o particlefilter_naive
+	$(CC)  -g -lm -O3 -ffast-math $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o ex_particle_CUDA_naive_seq.cu -o particlefilter_naive
 	
 float: ex_particle_CUDA_float_seq.cu
-	$(CC) -I$(INCLUDE) -L$(CUDA_LIB_DIR) -lcuda -g -lm -O3 -use_fast_math -arch sm_13 ex_particle_CUDA_float_seq.cu -o particlefilter_float
+	$(CC) -g -lm -O3 -ffast-math $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o ex_particle_CUDA_float_seq.cu -o particlefilter_float
 
 clean:
 	rm particlefilter_naive particlefilter_float
diff -ruN rodinia_3.1/cuda/particlefilter/setup.ini rodinia_backup/cuda/particlefilter/setup.ini
--- rodinia_3.1/cuda/particlefilter/setup.ini	1969-12-31 16:00:00.000000000 -0800
+++ rodinia_backup/cuda/particlefilter/setup.ini	2024-09-26 12:55:55.462241963 -0700
@@ -0,0 +1,7 @@
+[DEFAULT]
+compile = make
+run = ./particlefilter_naive -x 128 -y 128 -z 10 -np 1000;./particlefilter_float -x 128 -y 128 -z 10 -np 1000
+use_clang_plugin = false
+clang_convert = make INJECT_CODE_CLANG=1
+llvm_pass = make INJECT_CODE_LLVM=1
+clean = make clean
\ No newline at end of file
diff -ruN rodinia_3.1/cuda/srad/srad_v1/device.c rodinia_backup/cuda/srad/srad_v1/device.c
--- rodinia_3.1/cuda/srad/srad_v1/device.c	2015-12-11 07:46:15.000000000 -0800
+++ rodinia_backup/cuda/srad/srad_v1/device.c	2024-09-26 12:55:55.463242012 -0700
@@ -13,26 +13,26 @@
 	int device;
 
 	// work
-	cudaGetDeviceCount(&num_devices);
+	hipGetDeviceCount(&num_devices);
 	if (num_devices > 1) {
 		
 		// variables
 		int max_multiprocessors; 
 		int max_device;
-		cudaDeviceProp properties;
+		hipDeviceProp_t properties;
 
 		// initialize variables
 		max_multiprocessors = 0;
 		max_device = 0;
 		
 		for (device = 0; device < num_devices; device++) {
-			cudaGetDeviceProperties(&properties, device);
+			hipGetDeviceProperties(&properties, device);
 			if (max_multiprocessors < properties.multiProcessorCount) {
 				max_multiprocessors = properties.multiProcessorCount;
 				max_device = device;
 			}
 		}
-		cudaSetDevice(max_device);
+		hipSetDevice(max_device);
 	}
 
 }
@@ -43,10 +43,10 @@
 
 void checkCUDAError(const char *msg)
 {
-	cudaError_t err = cudaGetLastError();
-	if( cudaSuccess != err) {
-		// fprintf(stderr, "Cuda error: %s: %s.\n", msg, cudaGetErrorString( err) );
-		printf("Cuda error: %s: %s.\n", msg, cudaGetErrorString( err) );
+	hipError_t err = hipGetLastError();
+	if( hipSuccess != err) {
+		// fprintf(stderr, "Cuda error: %s: %s.\n", msg, hipGetErrorString( err) );
+		printf("Cuda error: %s: %s.\n", msg, hipGetErrorString( err) );
 		fflush(NULL);
 		exit(EXIT_FAILURE);
 	}
diff -ruN rodinia_3.1/cuda/srad/srad_v1/image_out.pgm rodinia_backup/cuda/srad/srad_v1/image_out.pgm
--- rodinia_3.1/cuda/srad/srad_v1/image_out.pgm	2015-12-11 07:46:15.000000000 -0800
+++ rodinia_backup/cuda/srad/srad_v1/image_out.pgm	2024-09-26 12:55:55.464242061 -0700
@@ -104,7 +104,7 @@
 209 209 209 208 208 207 207 206 205 204 204 203 203 202 202 202 201 201 200 199 198 197 195 193 191 188 186 184 182 180 178 176 174 173 171 170 168 167 165 164 162 161 159 157 156 154 152 150 149 147 145 143 142 140 139 137 136 135 134 133 132 131 130 128 127 125 123 122 120 118 117 115 114 113 112 112 111 111 111 111 112 112 113 114 114 115 116 117 118 118 119 119 119 119 119 118 118 117 116 115 114 113 112 111 110 108 107 106 105 105 104 104 103 103 103 103 102 102 102 102 101 101 100 99 98 97 96 95 94 93 92 91 91 90 90 89 89 89 90 90 91 91 92 92 93 94 94 94 95 95 94 94 94 93 93 92 92 91 90 90 89 89 88 88 87 86 86 85 84 84 83 83 82 82 82 83 83 83 84 84 85 85 86 86 87 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 103 105 107 109 111 114 116 119 121 123 124 126 127 128 129 129 130 130 131 132 133 133 134 135 136 137 138 138 139 139 139 139 139 138 137 136 135 133 132 130 129 128 127 126 126 126 126 127 128 129 130 132 133 134 136 137 138 139 140 141 141 142 142 142 141 141 141 140 140 139 138 138 137 136 135 134 133 132 131 130 130 129 128 127 126 125 124 123 122 121 120 120 119 118 118 117 117 116 116 115 114 113 112 110 108 106 104 101 99 96 94 92 90 88 87 86 84 83 82 81 81 80 79 78 77 76 75 74 74 73 72 72 71 71 71 71 71 72 72 73 74 74 75 75 75 76 76 77 78 79 79 80 81 82 83 83 84 85 85 86 86 86 87 87 88 88 89 90 91 92 93 94 96 98 99 101 103 104 106 108 109 111 112 113 114 115 116 117 118 119 120 121 122 123 123 123 124 123 123 122 121 120 119 118 117 116 115 115 115 115 116 116 117 118 118 119 119 119 119 118 117 116 115 114 113 112 111 110 109 108 108 107 107 108 108 109 109 110 111 112 112 112 113 113 113 113 112 112 111 111 110 110 109 109 108 107 107 107 
 209 209 208 208 208 207 207 206 205 204 204 203 202 202 202 201 201 200 199 198 197 195 193 191 189 187 185 182 180 178 175 173 171 169 168 166 164 162 160 159 157 155 153 152 150 148 147 145 144 142 140 139 137 136 134 133 132 131 130 128 127 126 125 123 122 120 119 117 116 114 113 112 111 110 109 109 108 108 108 109 109 110 110 111 112 113 114 115 115 116 116 116 117 117 116 116 115 115 114 113 112 111 109 108 107 106 105 103 103 102 101 101 100 100 100 100 100 100 100 99 99 99 98 97 96 95 94 93 92 91 90 90 89 88 88 88 88 88 88 88 89 89 90 91 91 92 92 93 93 93 93 93 93 92 92 91 90 90 89 89 88 88 87 86 86 85 84 83 83 82 81 81 81 81 81 81 81 82 82 82 83 83 84 85 85 86 87 88 88 89 91 92 93 94 95 96 97 99 100 101 103 105 107 109 112 114 117 119 121 123 125 126 127 128 129 130 130 131 132 132 133 134 135 136 136 137 138 138 139 139 139 139 138 138 137 136 134 133 132 130 129 128 127 127 126 126 127 127 128 129 131 132 133 135 136 137 138 139 140 140 141 141 141 141 141 141 140 140 140 139 138 138 137 136 136 135 134 133 132 132 131 130 130 129 128 127 127 126 125 124 123 122 121 120 120 119 119 118 118 117 116 115 114 112 110 108 105 103 100 98 95 93 91 90 88 87 86 84 83 83 82 81 80 79 78 76 75 74 73 72 71 71 70 70 70 70 70 70 71 71 72 72 73 74 74 75 75 76 77 78 78 79 80 81 82 82 83 83 84 84 85 85 85 86 86 87 88 88 89 91 92 93 95 97 99 100 102 104 106 108 109 111 112 113 114 115 116 117 118 119 119 120 121 121 122 122 122 122 121 120 119 118 117 116 115 115 114 114 114 114 114 115 115 116 117 117 117 117 117 116 115 114 113 112 111 110 109 108 107 107 106 106 106 107 107 108 109 110 111 111 112 112 113 113 113 112 112 112 112 111 111 110 109 109 108 108 108 107 
 208 208 208 207 207 207 206 206 205 204 204 203 202 202 201 200 200 199 198 197 196 194 192 190 188 185 183 180 178 176 173 171 169 166 164 162 160 158 156 154 152 150 148 147 145 143 142 140 139 137 136 134 133 132 130 129 128 127 125 124 123 122 120 119 117 116 114 113 111 110 109 108 107 107 106 106 106 106 106 106 107 107 108 109 110 110 111 112 112 113 113 114 114 114 113 113 112 112 111 110 109 108 107 105 104 103 102 101 100 99 98 98 98 97 97 97 97 97 97 97 97 97 96 95 95 94 93 92 91 90 89 88 88 87 87 86 86 86 87 87 87 88 89 89 90 91 91 91 92 92 92 92 92 91 91 90 90 89 88 88 87 86 86 85 84 84 83 82 81 81 80 80 80 79 80 80 80 80 81 81 81 82 83 83 84 85 86 87 88 89 90 91 92 93 94 96 97 98 100 102 103 106 108 110 112 115 117 120 122 123 125 126 128 129 129 130 131 131 132 133 134 134 135 136 137 137 138 138 139 139 139 138 138 137 137 136 134 133 132 130 129 128 127 127 127 127 127 128 129 130 131 133 134 135 136 137 138 139 140 140 140 141 141 141 141 140 140 140 139 139 138 138 137 137 136 135 135 134 133 133 132 132 131 131 130 130 129 128 127 126 125 124 123 123 122 121 121 120 119 119 118 117 115 113 111 109 107 104 102 99 97 95 93 91 89 88 87 86 85 84 83 82 81 79 78 77 76 74 73 72 71 70 69 69 69 69 69 69 69 70 70 71 71 72 73 73 74 75 76 76 77 78 79 80 81 81 82 82 83 83 83 84 84 85 85 86 87 88 89 90 91 93 95 97 98 100 102 104 106 108 110 111 112 113 114 115 116 117 118 118 119 120 120 121 121 121 121 121 120 119 119 118 117 116 115 114 114 114 113 114 114 114 115 115 116 116 116 116 115 115 114 113 111 110 109 108 107 106 106 106 105 106 106 107 107 108 109 110 111 111 112 112 113 113 113 113 113 112 112 112 111 111 110 110 109 109 109 108 
-206 206 206 206 206 206 206 205 204 204 203 202 202 201 200 200 199 198 197 196 194 192 191 188 186 184 181 179 176 174 171 169 166 164 161 159 156 154 152 150 148 146 144 142 140 139 137 136 135 133 132 131 129 128 127 125 124 123 122 120 119 118 116 115 113 112 110 109 108 107 106 105 104 104 103 103 103 103 103 104 104 105 106 106 107 108 108 109 109 110 110 110 110 110 110 110 109 109 108 107 106 105 104 103 101 100 99 98 97 97 96 96 95 95 95 95 95 95 95 95 95 95 94 94 93 92 91 90 89 88 88 87 86 86 85 85 85 85 85 86 86 87 87 88 89 89 90 90 90 91 91 91 90 90 90 89 89 88 87 87 86 86 85 84 83 82 82 81 80 80 79 79 79 79 79 79 79 79 80 80 80 81 82 82 83 84 85 86 87 88 89 90 92 93 94 96 97 99 100 102 104 106 108 111 113 116 118 120 122 124 125 127 128 129 130 131 131 132 133 133 134 135 136 136 137 137 138 138 138 138 138 138 138 137 136 135 134 133 132 130 129 128 128 127 127 128 128 129 130 131 132 134 135 136 137 138 138 139 140 140 140 140 140 140 140 140 140 139 139 139 138 138 137 137 136 136 135 135 134 134 134 134 133 133 133 132 131 130 130 129 128 126 125 125 124 123 122 122 121 120 119 118 116 115 113 110 108 105 103 100 98 96 94 92 91 90 88 87 86 85 84 83 82 80 79 77 76 74 73 72 70 69 69 68 68 67 68 68 68 68 69 69 70 70 71 72 73 73 74 75 76 77 78 79 79 80 81 81 81 82 82 83 83 84 84 85 86 87 88 90 91 93 95 97 99 101 103 105 107 109 110 112 113 114 115 116 117 117 118 119 119 120 120 121 121 121 121 121 120 120 119 118 117 116 116 115 115 114 114 114 115 115 115 116 116 116 116 115 115 114 113 112 111 109 108 107 107 106 106 105 106 106 106 107 108 109 110 111 111 112 113 113 113 114 114 114 114 114 113 113 113 112 112 112 111 111 110 110 
+206 206 206 206 206 206 206 205 204 204 203 202 202 201 200 200 199 198 197 196 194 192 191 188 186 184 181 179 176 174 171 169 166 164 161 159 156 154 152 150 148 146 144 142 140 139 137 136 135 133 132 131 129 128 127 125 124 123 122 120 119 118 116 115 113 112 110 109 108 107 106 105 104 104 103 103 103 103 103 104 104 105 106 106 107 108 108 109 109 110 110 110 110 110 110 110 109 109 108 107 106 105 104 103 101 100 99 98 97 97 96 96 95 95 95 95 95 95 95 95 95 95 94 94 93 92 91 90 89 88 88 87 86 86 85 85 85 85 85 86 86 87 87 88 89 89 90 90 90 91 91 91 90 90 90 89 89 88 87 87 86 86 85 84 83 82 82 81 80 80 79 79 79 79 79 79 79 79 80 80 80 81 82 82 83 84 85 86 87 88 89 90 92 93 94 96 97 99 100 102 104 106 108 111 113 116 118 120 122 124 125 127 128 129 130 131 131 132 133 133 134 135 136 136 137 137 138 138 138 138 138 138 138 137 136 135 134 133 132 130 129 128 128 127 127 128 128 129 130 131 132 134 135 136 137 138 138 139 140 140 140 140 140 140 140 140 140 139 139 139 138 138 137 137 136 136 135 135 134 134 134 134 133 133 132 132 131 130 130 129 128 126 125 125 124 123 122 122 121 120 119 118 116 115 113 110 108 105 103 100 98 96 94 92 91 90 88 87 86 85 84 83 82 80 79 77 76 74 73 72 70 69 69 68 68 67 68 68 68 68 69 69 70 70 71 72 73 73 74 75 76 77 78 79 79 80 81 81 81 82 82 83 83 84 84 85 86 87 88 90 91 93 95 97 99 101 103 105 107 109 110 112 113 114 115 116 117 117 118 119 119 120 120 121 121 121 121 121 120 120 119 118 117 116 116 115 115 114 114 114 115 115 115 116 116 116 116 115 115 114 113 112 111 109 108 107 107 106 106 105 106 106 106 107 108 109 110 111 111 112 113 113 113 114 114 114 114 114 113 113 113 112 112 112 111 111 110 110 
 205 205 205 205 205 205 205 204 204 203 202 202 201 200 200 199 198 197 196 194 193 191 189 187 185 182 179 177 174 171 169 166 163 161 158 156 153 150 148 146 143 141 139 138 136 134 133 132 131 129 128 127 126 125 123 122 121 120 118 117 116 114 113 111 110 108 107 106 104 103 103 102 101 101 101 101 101 101 101 101 102 102 103 104 104 105 105 106 106 106 106 107 107 107 106 106 106 105 105 104 103 102 101 100 99 98 97 96 95 94 94 94 93 93 93 93 93 93 94 93 93 93 93 92 91 91 90 89 88 87 86 86 85 85 84 84 84 84 84 85 85 85 86 87 87 88 88 89 89 89 90 90 89 89 89 88 88 87 87 86 85 85 84 83 82 81 81 80 79 79 78 78 78 78 78 78 78 79 79 79 80 80 81 82 83 83 84 85 87 88 89 90 91 93 94 96 97 99 101 103 105 107 109 112 114 116 119 121 123 124 126 127 128 129 130 131 132 133 133 134 135 135 136 137 137 137 138 138 138 138 138 137 137 136 136 135 134 133 131 130 129 128 128 128 128 128 129 130 131 132 133 134 135 136 137 138 139 139 140 140 140 140 140 140 140 140 140 139 139 139 138 138 137 137 137 136 136 136 135 135 135 135 135 135 135 134 133 133 132 131 130 128 127 126 125 124 124 123 122 121 120 119 117 116 114 111 109 106 104 102 99 97 95 94 92 91 90 89 88 87 85 84 83 81 80 78 76 75 73 71 70 69 68 67 67 66 66 67 67 67 67 68 68 69 70 70 71 72 73 74 75 76 77 77 78 79 79 80 80 81 81 82 83 83 84 85 86 87 89 90 92 94 96 98 100 102 104 107 108 110 112 113 114 115 116 117 118 118 119 119 120 120 121 121 122 122 122 121 121 121 120 119 119 118 118 117 117 117 116 116 117 117 117 117 117 117 117 116 115 114 113 112 111 110 109 108 107 107 106 106 107 107 108 109 109 110 111 112 113 114 114 114 115 115 115 115 115 115 115 115 115 115 114 114 114 113 113 113 
 203 203 203 203 203 203 203 203 203 202 201 201 200 199 198 198 197 196 194 193 191 190 187 185 183 180 178 175 172 169 166 164 161 158 155 152 150 147 144 142 139 137 135 133 132 130 129 128 127 126 125 124 123 122 120 119 118 117 115 114 113 111 110 108 107 105 104 103 102 101 100 99 99 99 98 98 98 99 99 99 100 100 101 101 101 102 102 102 103 103 103 103 103 103 103 103 102 102 102 101 100 99 99 98 97 96 95 94 93 93 92 92 92 92 92 92 92 92 92 92 92 92 91 91 90 90 89 88 87 86 85 85 84 84 83 83 83 83 83 84 84 84 85 85 86 86 87 87 88 88 88 89 89 88 88 88 87 87 86 85 85 84 83 82 81 81 80 79 78 78 78 77 77 77 78 78 78 78 79 79 80 80 81 82 82 83 84 85 87 88 89 90 91 93 94 96 97 99 101 103 106 108 110 112 115 117 119 121 123 125 127 128 129 130 131 132 133 133 134 135 135 136 136 137 137 138 138 138 138 138 137 137 136 136 135 134 133 132 131 130 129 129 128 128 128 129 130 131 132 133 134 135 136 137 138 139 139 140 140 140 140 140 140 140 140 140 140 139 139 139 138 138 138 137 137 137 137 137 137 137 137 137 137 137 136 136 135 135 134 133 131 130 129 128 126 125 124 124 123 122 121 119 118 116 114 112 110 107 105 103 100 98 97 95 94 92 91 90 89 88 87 85 84 82 81 79 77 75 73 71 70 68 67 67 66 66 65 65 66 66 66 67 67 68 68 69 70 70 71 72 73 74 75 76 76 77 78 78 79 80 80 81 82 83 84 85 87 88 90 91 93 95 97 100 102 104 106 108 110 112 114 115 116 117 118 119 119 120 120 121 121 122 122 123 123 123 123 123 123 123 122 122 122 121 121 120 120 120 120 120 120 120 120 120 120 119 119 118 117 116 115 114 112 111 110 110 109 109 109 109 109 110 110 111 112 113 114 115 116 116 117 117 117 118 118 118 118 118 118 118 118 118 117 117 117 116 116 116 
 201 201 201 201 201 202 202 201 201 201 200 200 199 198 197 196 195 194 193 191 190 188 186 184 181 178 176 173 170 167 164 161 158 155 152 149 146 144 141 138 136 133 131 130 128 127 125 124 123 122 122 121 120 119 118 117 116 114 113 112 110 109 107 106 104 103 101 100 99 98 98 97 97 96 96 96 96 97 97 97 98 98 98 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 98 98 97 96 96 95 94 93 93 92 91 91 91 91 91 91 91 91 91 91 91 91 91 91 90 89 89 88 87 86 86 85 84 84 83 83 83 83 83 83 83 83 83 84 84 85 85 86 86 87 87 87 88 88 88 87 87 87 86 85 85 84 83 82 81 80 80 79 78 78 77 77 77 77 77 77 78 78 78 79 79 80 80 81 82 83 84 85 86 87 88 89 90 92 93 95 96 98 100 102 104 107 109 111 114 116 118 120 122 124 126 127 129 130 131 132 133 133 134 135 135 136 136 137 137 138 138 138 138 138 137 137 136 136 135 135 134 133 132 131 130 129 129 128 128 129 129 130 131 132 134 135 136 137 138 139 139 140 140 140 141 141 141 141 140 140 140 140 139 139 139 138 138 138 138 138 137 137 138 138 138 138 138 138 138 138 138 137 136 135 134 133 132 130 129 127 126 125 124 123 122 121 120 118 117 115 113 110 108 106 103 101 99 98 96 95 94 93 92 91 89 88 87 85 83 81 79 77 75 73 71 70 68 67 66 65 65 65 64 64 65 65 65 66 66 67 67 68 69 70 71 72 72 73 74 75 76 76 77 78 79 80 81 82 83 84 86 87 89 91 93 95 97 99 101 104 106 108 110 112 114 116 117 118 119 120 121 121 122 122 123 123 124 124 125 125 126 126 126 126 126 126 126 125 125 125 125 125 125 125 125 124 124 124 124 124 123 123 122 121 119 118 117 116 114 114 113 112 112 112 113 113 114 115 116 117 117 118 119 120 120 121 121 121 121 122 122 122 122 122 122 122 122 121 121 121 120 120 120 
@@ -202,7 +202,7 @@
 121 120 118 116 113 110 106 103 98 94 90 86 83 79 76 74 71 69 68 66 65 64 64 63 62 62 61 61 61 60 60 60 60 60 59 59 59 59 59 58 58 58 57 57 56 56 56 55 55 55 55 55 55 55 55 55 55 55 56 56 56 57 57 57 58 59 59 60 61 62 63 64 65 66 67 69 70 72 74 76 78 80 82 84 86 88 90 92 93 95 95 96 96 96 96 96 95 95 94 93 92 92 91 91 90 90 89 89 89 88 87 87 86 84 83 82 80 79 77 75 74 72 70 69 68 67 66 65 64 64 64 64 64 64 64 65 66 67 67 68 69 70 70 71 71 72 72 72 73 73 74 75 76 78 80 82 85 88 92 96 100 104 109 113 117 120 124 126 128 130 130 131 130 129 128 126 124 122 119 116 114 111 108 106 103 101 99 97 96 94 93 92 91 90 89 89 89 88 88 88 88 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 88 88 88 89 89 90 90 91 91 92 92 93 94 95 95 96 96 96 97 97 96 96 96 96 96 95 95 95 95 95 94 94 94 94 94 94 94 93 93 93 93 92 92 91 91 90 90 90 89 89 89 89 89 90 90 90 90 91 91 91 91 91 91 91 92 92 92 92 92 92 92 92 91 91 91 91 90 90 90 89 89 89 89 89 89 89 89 90 90 91 92 93 95 96 98 100 102 104 107 109 112 115 118 121 124 127 131 134 138 141 145 148 151 154 157 159 161 162 163 163 163 163 162 162 161 160 159 158 157 156 154 153 151 149 146 143 140 137 133 130 126 123 120 116 113 110 108 105 102 100 98 95 93 91 89 88 86 85 83 82 81 81 80 80 79 79 79 79 79 79 79 78 78 78 77 76 76 75 74 73 73 72 71 71 70 70 70 69 69 69 68 68 68 67 67 67 67 68 68 68 68 69 69 69 69 70 70 70 71 71 72 73 73 74 75 76 77 78 78 79 80 80 81 82 82 83 83 84 85 85 86 87 87 87 88 88 88 88 89 89 89 
 120 120 118 116 113 110 107 103 99 95 90 87 83 79 76 74 71 70 68 67 65 64 64 63 62 62 61 61 60 60 60 60 59 59 59 59 58 58 58 58 57 57 57 56 56 55 55 55 55 54 54 54 54 54 54 54 55 55 55 56 56 56 57 57 58 58 59 60 61 62 62 64 65 66 67 69 70 72 74 75 78 80 82 84 86 88 90 92 93 94 95 96 96 96 96 96 95 94 94 93 92 91 90 90 89 88 88 87 87 86 85 85 84 83 81 80 78 77 75 74 72 70 69 68 66 65 64 63 63 62 62 62 62 63 63 64 65 66 66 67 68 69 69 70 70 71 71 71 72 72 73 74 75 77 79 81 84 88 91 95 99 104 108 112 116 120 123 125 127 129 130 130 130 129 127 126 123 121 118 116 113 110 108 105 103 101 99 97 95 94 93 92 91 90 89 89 89 88 88 88 88 88 88 87 87 87 87 87 87 87 87 87 87 87 87 88 88 88 89 89 89 90 90 91 91 92 92 93 94 94 95 96 96 97 97 97 97 97 97 96 96 96 96 96 95 95 95 95 94 94 94 94 94 94 93 93 93 93 92 92 92 91 91 90 90 90 90 90 90 90 90 90 90 91 91 91 91 92 92 92 92 92 92 92 92 92 92 92 92 92 92 91 91 91 90 90 89 89 89 89 88 88 88 89 89 90 90 91 92 93 95 96 98 99 101 104 106 108 111 114 117 120 124 127 131 134 138 142 145 149 152 154 157 159 160 161 162 162 162 162 161 161 160 160 159 158 157 156 154 153 150 148 145 142 138 135 131 127 124 121 117 114 111 109 106 104 101 99 97 95 93 91 89 87 86 84 83 82 81 80 80 79 79 79 79 78 78 78 78 78 77 77 77 76 75 75 74 74 73 73 72 72 71 71 71 70 70 69 69 68 68 68 67 67 67 67 67 67 68 68 68 68 68 68 68 69 69 70 70 71 72 73 74 75 75 76 77 77 78 79 79 80 81 81 82 83 83 84 85 85 86 86 87 87 87 87 87 87 
 120 119 118 116 113 110 107 103 99 95 91 87 83 80 77 74 72 70 68 67 65 64 64 63 62 62 61 61 60 60 59 59 59 58 58 58 58 57 57 57 57 56 56 56 55 55 55 54 54 54 54 54 54 54 54 54 54 55 55 55 56 56 57 57 58 58 59 60 61 61 62 63 64 66 67 68 70 71 73 75 77 79 81 83 86 88 90 91 93 94 95 96 96 96 96 95 95 94 93 92 91 90 89 88 87 87 86 86 85 84 84 83 82 81 79 78 77 75 74 72 71 69 68 66 65 64 63 62 62 61 61 61 61 62 62 63 64 65 65 66 67 68 68 69 69 70 70 71 71 72 72 74 75 77 79 81 84 87 91 95 99 103 107 111 115 119 122 124 126 128 128 129 128 127 126 124 122 120 117 115 112 110 107 105 102 100 98 97 95 94 92 91 91 90 89 89 89 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 89 89 89 90 90 91 91 92 92 93 94 94 95 96 96 97 97 97 97 97 97 97 97 97 96 96 96 96 95 95 95 95 94 94 94 94 94 93 93 93 93 93 92 92 91 91 91 90 90 90 90 90 90 90 90 91 91 91 91 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 91 91 91 90 90 89 89 89 88 88 88 88 88 89 89 90 91 92 93 94 95 97 98 100 102 104 107 110 113 116 119 123 126 130 134 138 141 145 148 151 154 156 157 159 160 160 160 160 160 160 160 159 159 159 158 157 156 154 152 150 147 143 140 136 133 129 125 122 119 116 113 110 108 105 103 101 98 96 94 92 90 88 87 85 84 82 81 80 79 79 78 78 78 78 78 77 77 77 77 77 76 76 75 75 75 74 74 73 73 73 72 72 71 71 70 70 69 68 68 68 67 67 67 67 67 66 66 66 66 66 66 67 67 67 67 68 68 69 70 71 71 72 73 74 75 75 76 77 77 78 79 79 80 81 82 82 83 84 84 85 85 85 86 86 86 86 
-119 118 117 115 113 110 106 102 99 95 91 87 83 80 77 74 72 70 68 67 65 64 64 63 62 62 61 60 60 59 59 59 58 58 57 57 57 57 57 56 56 56 56 55 55 54 54 54 54 53 53 53 53 53 53 54 54 54 55 55 56 56 57 57 58 58 59 60 60 61 62 63 64 65 67 68 70 71 73 75 77 79 81 83 85 87 89 91 92 93 94 95 95 95 95 95 94 93 92 91 90 89 88 87 86 85 85 84 83 82 82 81 80 79 78 76 75 74 72 71 69 68 67 65 64 63 62 61 61 60 60 60 60 61 61 62 63 64 64 65 66 67 67 68 69 69 69 70 71 71 72 73 75 76 79 81 84 87 91 94 98 102 106 110 114 117 120 123 124 126 127 127 126 126 124 123 121 118 116 114 111 109 106 104 102 100 98 96 94 93 92 91 90 90 89 89 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 89 89 89 89 90 90 91 91 92 92 93 93 94 95 95 96 97 97 97 97 98 97 97 97 97 97 97 96 96 96 96 95 95 95 94 94 94 94 94 93 93 93 93 93 92 92 92 91 91 91 90 90 90 90 90 90 91 91 91 91 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 91 91 90 90 89 89 89 88 88 88 88 88 88 88 89 89 90 91 92 93 94 95 97 99 101 103 105 108 111 114 118 122 125 129 133 137 140 144 147 150 152 154 155 157 157 158 158 159 159 159 159 159 159 158 157 156 155 153 151 148 145 141 138 134 130 127 123 120 117 115 112 110 107 105 103 100 98 96 94 91 89 88 86 84 83 81 80 79 78 78 77 77 77 77 76 76 76 76 76 76 75 75 75 75 74 74 74 74 73 73 72 72 71 71 70 69 68 68 67 67 66 66 66 65 65 65 65 65 65 65 65 65 65 65 66 66 67 68 69 69 70 71 72 73 73 74 75 75 76 77 78 78 79 80 81 81 82 83 83 84 84 85 85 85 85 
+119 118 117 115 113 110 106 102 99 95 91 87 83 80 77 74 72 70 68 67 65 64 64 63 62 62 61 60 60 59 59 59 58 58 57 57 57 57 57 56 56 56 56 55 55 54 54 54 54 53 53 53 53 53 53 54 54 54 55 55 56 56 57 57 58 58 59 60 60 61 62 63 64 65 67 68 70 71 73 75 77 79 81 83 85 87 89 91 92 93 94 95 95 95 95 95 94 93 92 91 90 89 88 87 86 85 85 84 83 82 82 81 80 79 78 76 75 74 72 71 69 68 67 65 64 63 62 61 61 60 60 60 60 61 61 62 63 64 64 65 66 67 67 68 69 69 69 70 71 71 72 73 75 76 79 81 84 87 91 94 98 102 106 110 114 117 120 123 124 126 127 127 126 126 124 123 121 118 116 114 111 109 106 104 102 100 98 96 94 93 92 91 90 90 89 89 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 89 89 89 89 90 90 91 91 92 92 93 93 94 95 95 96 97 97 97 97 97 97 97 97 97 97 97 96 96 96 96 95 95 95 94 94 94 94 94 93 93 93 93 93 92 92 92 91 91 91 90 90 90 90 90 90 91 91 91 91 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 91 91 90 90 89 89 89 88 88 88 88 88 88 88 89 89 90 91 92 93 94 95 97 99 101 103 105 108 111 114 118 122 125 129 133 137 140 144 147 150 152 154 155 157 157 158 158 159 159 159 159 159 159 158 157 156 155 153 151 148 145 141 138 134 130 127 123 120 117 115 112 110 107 105 103 100 98 96 94 91 89 88 86 84 83 81 80 79 78 78 77 77 77 77 76 76 76 76 76 76 75 75 75 75 74 74 74 74 73 73 72 72 71 71 70 69 68 68 67 67 66 66 66 65 65 65 65 65 65 65 65 65 65 65 66 66 67 68 69 69 70 71 72 73 73 74 75 75 76 77 78 78 79 80 81 81 82 83 83 84 84 85 85 85 85 
 118 117 116 114 112 109 105 102 98 94 90 87 83 80 77 74 72 70 68 67 65 64 63 63 62 61 61 60 60 59 58 58 58 57 57 57 56 56 56 56 56 55 55 55 54 54 54 53 53 53 53 53 53 53 53 53 54 54 55 55 55 56 56 57 57 58 59 60 60 61 62 63 64 65 66 68 69 71 72 74 76 78 80 82 84 86 88 90 91 93 93 94 94 94 94 94 93 92 91 90 89 88 87 86 85 84 83 82 82 81 80 79 78 77 76 75 74 73 71 70 69 67 66 65 63 62 62 61 60 60 59 59 60 60 60 61 62 63 64 64 65 66 67 67 68 68 69 70 70 71 72 73 75 77 79 81 84 87 91 94 98 102 105 109 112 116 118 121 122 124 125 125 124 124 122 121 119 117 114 112 110 107 105 103 101 99 97 95 94 92 91 91 90 89 89 89 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 89 89 89 89 90 90 90 91 91 91 92 93 93 94 95 95 96 96 97 97 98 98 98 98 98 98 97 97 97 97 96 96 96 95 95 95 94 94 94 94 93 93 93 93 93 93 92 92 92 91 91 91 91 90 90 90 90 91 91 91 91 91 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 91 91 91 90 90 89 89 88 88 88 87 87 87 87 88 88 88 89 89 90 91 92 93 95 97 99 101 104 106 110 113 116 120 124 128 132 135 139 142 145 147 150 151 153 154 155 156 156 157 157 157 158 158 158 157 156 155 153 151 149 145 142 139 135 131 128 125 122 119 116 114 112 109 107 105 102 100 97 95 93 91 89 87 85 83 81 80 79 78 77 77 76 76 76 75 75 75 75 75 75 75 75 75 74 74 74 74 74 73 73 72 72 71 70 70 69 68 67 66 66 65 65 64 64 64 64 64 63 63 63 63 63 63 64 64 64 65 66 67 67 68 69 70 71 72 72 73 74 75 75 76 77 78 78 79 80 81 82 82 83 83 84 84 84 84 
 116 115 114 112 110 107 104 101 97 94 90 86 83 80 77 74 72 70 68 66 65 64 63 62 62 61 60 60 59 59 58 57 57 57 56 56 56 56 55 55 55 55 55 54 54 54 54 53 53 53 53 53 53 53 53 53 54 54 54 55 55 56 56 57 57 58 59 59 60 61 62 63 64 65 66 67 69 70 72 74 75 77 79 81 83 85 87 89 90 92 92 93 93 93 93 93 92 91 90 89 88 87 85 84 83 83 82 81 80 80 79 78 77 76 75 74 73 72 70 69 68 67 65 64 63 62 61 60 60 59 59 59 59 59 60 60 61 62 63 64 65 65 66 67 67 68 69 70 70 71 73 74 75 77 79 82 84 87 91 94 97 101 104 108 111 114 117 119 120 122 122 122 122 121 120 119 117 115 113 110 108 106 104 102 100 98 96 95 93 92 91 90 89 89 89 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 89 89 89 89 89 90 90 90 91 91 91 92 92 93 94 94 95 96 96 97 97 98 98 98 98 98 98 98 98 97 97 97 97 96 96 96 95 95 94 94 94 94 93 93 93 93 93 93 92 92 92 92 91 91 91 91 91 91 91 91 91 91 91 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 91 91 90 90 89 89 88 88 87 87 87 87 87 87 87 87 87 87 88 89 89 90 92 93 95 97 99 102 105 108 111 115 118 122 126 130 133 136 139 142 145 147 148 150 151 152 153 154 155 155 156 156 156 156 156 154 153 151 148 145 142 139 136 132 129 126 123 121 118 116 114 111 109 107 104 102 99 97 94 92 90 87 85 83 82 80 79 78 77 76 75 75 74 74 74 74 74 74 74 74 74 74 74 74 74 73 73 73 72 72 71 70 70 69 68 67 66 65 64 64 63 63 63 62 62 62 62 62 62 61 61 62 62 62 63 63 64 65 66 66 67 68 69 70 71 71 72 73 74 75 76 76 77 78 79 80 80 81 82 82 83 83 84 84 
 114 113 112 111 108 106 103 100 96 93 89 86 82 79 76 74 71 69 68 66 65 64 63 62 61 61 60 59 59 58 57 57 56 56 56 55 55 55 55 55 55 55 54 54 54 54 53 53 53 53 53 53 53 53 53 53 53 54 54 55 55 55 56 57 57 58 58 59 60 61 62 63 64 65 66 67 68 70 71 73 75 77 79 81 83 85 86 88 89 91 91 92 92 92 92 91 91 90 89 88 87 85 84 83 82 81 81 80 79 78 78 77 76 75 74 73 72 71 70 69 68 66 65 64 63 62 61 60 60 59 59 59 59 59 59 60 61 61 62 63 64 65 66 66 67 68 69 70 71 72 73 75 76 78 80 82 85 88 91 94 97 100 104 107 110 112 115 117 118 119 120 120 120 119 118 117 115 113 111 109 107 105 103 101 99 97 95 94 92 91 90 90 89 89 89 88 88 88 88 88 88 88 88 88 88 88 88 88 88 89 89 89 89 89 89 90 90 90 91 91 91 92 92 93 93 94 95 95 96 97 97 97 98 98 98 98 98 98 98 98 98 97 97 97 97 96 96 95 95 94 94 94 94 93 93 93 93 93 93 93 92 92 92 92 91 91 91 91 91 91 91 91 91 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 93 93 93 92 92 92 91 91 90 90 89 88 88 87 87 86 86 86 86 85 85 85 86 86 86 87 88 88 90 91 93 95 97 100 103 106 109 113 116 120 124 127 130 134 136 139 141 143 145 147 148 149 150 151 152 153 154 154 154 154 153 151 150 147 145 142 139 135 132 129 127 124 122 120 117 115 113 111 108 106 103 101 98 96 93 91 88 86 84 82 80 79 77 76 75 75 74 73 73 73 73 73 73 73 73 73 73 73 73 73 72 72 72 71 71 70 69 68 67 66 66 65 64 63 62 62 61 61 61 61 60 60 60 60 60 60 60 60 61 61 62 62 63 64 65 66 66 67 68 69 70 71 72 73 74 74 75 76 77 78 79 80 80 81 82 82 83 83 83 
diff -ruN rodinia_3.1/cuda/srad/srad_v1/image.pgm rodinia_backup/cuda/srad/srad_v1/image.pgm
--- rodinia_3.1/cuda/srad/srad_v1/image.pgm	1969-12-31 16:00:00.000000000 -0800
+++ rodinia_backup/cuda/srad/srad_v1/image.pgm	2024-09-26 12:55:55.463242012 -0700
@@ -0,0 +1,505 @@
+P2
+458 502
+255
+127 156 156 157 158 152 145 143 145 148 148 139 128 124 141 155 166 169 172 173 168 162 153 139 125 113 104 98 99 119 136 148 148 148 145 144 140 138 141 146 149 153 154 157 159 163 164 161 155 151 152 156 156 151 145 137 130 122 117 125 133 141 156 169 183 187 191 197 199 198 201 204 204 207 211 211 213 217 220 222 212 204 193 183 174 165 172 183 195 195 197 199 198 198 198 196 194 190 188 185 183 180 177 174 170 168 167 161 155 149 146 144 141 148 160 172 180 184 188 183 171 160 152 148 142 142 146 151 151 150 150 147 145 145 144 143 142 146 151 155 149 131 112 106 110 115 124 132 141 145 146 144 141 133 124 126 137 146 152 154 156 152 140 128 123 131 138 143 142 141 142 141 140 140 143 146 148 148 149 149 148 149 149 150 146 147 145 143 143 141 139 139 137 137 137 135 133 133 131 130 130 126 123 122 120 120 120 120 119 119 115 110 107 106 104 105 103 104 102 101 102 99 99 95 92 92 92 91 91 89 89 84 83 78 79 79 79 81 85 86 89 89 90 89 86 84 78 75 70 65 62 57 57 58 58 62 66 71 67 62 58 61 66 73 77 82 87 87 86 87 85 85 85 78 69 60 56 56 55 62 71 81 81 78 75 79 85 91 91 87 83 85 92 100 101 99 97 94 91 87 88 92 97 98 98 97 93 91 88 93 107 119 129 136 144 144 140 138 136 139 141 142 144 146 146 148 149 152 153 157 157 149 143 130 107 85 79 94 108 118 120 122 123 122 121 122 131 139 142 138 135 134 138 141 146 150 154 158 152 145 141 144 147 151 157 161 164 159 154 150 144 137 132 129 127 126 123 120 117 107 94 85 94 104 112 116 121 123 118 114 110 121 134 144 147 152 156 140 126 111 112 113 115 113 112 111 122 130 138 145 151 159 163 167 171 172 168 168 163 159 151 144 135 125 116 108 97 97 99 103 102 99 96 97 100 103 102 99 96 97 100 102 104 107 110 102 89 76 79 89 97 102 105 108 105 101 96 76 
+114 131 124 121 125 135 143 144 139 135 137 144 148 151 158 165 169 169 169 170 169 168 161 152 139 130 125 122 122 129 140 150 154 157 160 161 160 158 156 152 150 145 140 137 142 147 154 157 161 165 168 173 176 174 169 165 156 145 135 140 145 150 156 167 174 173 170 171 173 174 175 183 187 193 196 203 208 211 215 218 209 198 190 180 169 159 167 176 188 187 186 182 178 175 168 167 164 160 165 168 169 166 160 155 153 152 148 144 135 127 134 143 155 161 168 174 174 172 169 164 156 151 146 139 135 134 139 143 144 142 143 138 133 128 130 137 143 149 159 167 163 149 135 132 142 153 161 166 171 172 172 172 168 165 162 165 179 193 203 207 211 209 198 187 183 192 201 207 207 208 208 210 211 211 217 223 228 230 232 233 239 242 247 249 252 253 253 254 255 255 254 254 255 252 254 254 254 254 254 253 252 249 245 246 244 242 244 243 244 244 235 227 219 220 217 215 216 215 217 213 212 209 204 199 193 193 193 195 193 188 186 179 174 167 166 166 166 171 176 180 184 187 192 184 179 173 163 155 144 136 126 118 117 117 118 125 134 143 133 123 112 119 129 139 147 155 162 161 163 160 157 155 152 138 122 107 100 97 94 103 118 131 133 129 125 129 137 145 145 138 131 133 140 147 146 139 133 129 127 125 126 130 133 131 124 115 112 111 110 119 133 148 159 162 165 163 154 147 142 138 135 132 128 124 124 126 128 129 131 133 135 135 138 134 119 105 100 106 113 118 121 126 128 124 119 117 121 125 129 132 138 141 139 138 135 143 148 150 139 127 120 132 142 151 159 165 168 164 156 150 144 137 132 130 130 128 124 121 117 105 95 86 96 106 116 121 126 132 127 122 116 118 119 120 123 128 132 125 116 110 116 123 129 132 134 134 134 133 130 133 137 142 151 163 176 175 175 173 167 161 155 143 130 118 109 102 93 96 104 108 108 104 101 100 100 102 102 103 103 102 98 93 95 102 109 111 109 107 107 105 100 99 101 103 101 95 89 72 
+137 147 131 115 119 135 152 155 150 144 143 154 163 167 165 161 161 159 159 162 168 174 171 164 156 154 163 168 169 163 157 154 153 152 151 153 156 157 155 151 148 147 145 145 148 149 151 151 150 151 154 158 162 164 164 164 161 155 150 153 157 162 163 165 167 161 152 146 144 145 143 154 163 171 181 189 197 202 205 207 203 195 192 187 183 178 174 171 169 166 162 160 157 152 148 152 158 161 163 166 167 167 168 168 162 158 154 142 128 113 122 138 153 161 166 170 166 161 155 152 147 143 137 134 129 131 136 140 142 141 138 132 123 114 117 126 139 151 158 169 167 156 147 151 166 181 187 181 176 172 167 162 162 165 168 178 187 198 204 209 212 212 211 208 205 205 206 202 202 199 200 197 194 196 194 192 192 191 190 192 206 218 229 234 242 245 247 248 249 248 250 250 251 251 252 252 254 254 251 248 248 244 243 240 237 232 231 228 226 223 212 199 188 192 194 195 195 197 198 190 183 176 169 161 154 152 154 152 156 157 161 161 165 165 163 157 154 159 165 172 177 182 187 185 181 180 172 165 156 153 150 146 137 128 119 121 128 134 125 113 103 110 124 137 147 156 165 168 169 170 163 151 142 135 128 122 116 108 101 106 117 127 134 138 142 146 154 161 158 155 153 149 151 150 146 134 123 124 132 138 143 144 143 136 121 106 100 106 113 124 141 159 167 167 167 161 149 138 129 121 115 109 102 98 96 99 106 110 111 112 116 127 135 137 132 125 121 122 120 123 128 133 133 128 122 118 118 115 115 119 122 123 126 127 130 136 142 147 142 137 136 143 148 153 151 145 140 140 141 141 144 150 155 152 148 144 139 132 127 118 112 105 114 122 129 134 140 145 137 129 119 113 105 99 103 109 113 112 112 112 119 126 135 134 133 130 127 126 125 127 130 133 141 151 158 161 164 165 163 159 155 145 131 117 114 116 120 125 128 132 126 117 107 103 102 100 102 106 110 108 97 86 87 96 106 112 118 123 121 113 105 102 100 98 99 103 109 97 
+157 162 137 110 115 141 164 172 168 163 166 168 172 164 148 132 124 122 122 128 140 156 163 163 162 162 164 168 165 159 150 146 145 146 147 151 154 156 152 147 147 146 149 151 150 152 150 142 136 130 129 128 128 131 132 137 144 152 157 166 172 179 177 177 173 162 149 139 144 149 155 159 167 172 181 189 195 197 201 201 190 180 169 177 180 187 179 171 159 154 151 144 141 135 129 141 151 163 166 166 166 174 180 190 183 175 165 146 125 104 110 126 141 147 153 156 155 153 149 146 142 136 134 133 131 141 152 165 168 167 168 161 150 144 139 141 143 147 154 160 157 150 141 144 154 164 169 168 169 164 158 153 155 162 170 177 186 195 200 205 208 210 205 204 201 201 198 199 198 196 195 191 190 189 180 175 170 165 160 162 176 190 203 214 225 233 238 242 243 246 245 248 249 248 247 249 247 249 248 246 245 242 239 235 229 224 217 212 205 197 182 166 155 159 164 169 172 173 171 159 146 132 124 112 103 102 101 101 109 117 125 137 148 160 150 141 132 139 149 155 163 170 176 180 182 182 178 173 169 169 171 172 156 137 118 119 123 126 118 106 95 106 121 136 146 158 168 173 177 179 167 153 137 135 136 136 129 117 105 107 115 123 132 143 154 161 165 174 172 170 171 168 164 160 150 140 130 132 141 151 152 149 144 135 120 104 101 107 113 123 138 155 162 157 153 148 143 140 135 132 129 128 127 125 127 130 132 136 134 135 137 140 144 148 146 147 146 144 142 140 142 140 138 135 131 126 119 110 103 99 94 94 104 113 123 132 138 146 147 152 156 157 159 156 141 127 112 119 126 131 145 154 164 161 155 150 143 139 132 127 120 114 120 125 130 138 145 151 148 140 136 128 121 113 115 119 121 121 118 117 118 122 123 117 108 99 102 112 121 125 126 128 133 135 139 144 149 157 158 155 155 143 130 117 117 126 134 138 138 140 136 131 125 124 123 124 124 124 123 115 99 86 81 86 91 98 107 116 120 115 113 106 101 95 97 114 131 125 
+152 149 123 96 105 133 161 171 172 171 171 172 171 163 141 119 107 101 95 103 123 142 154 162 167 166 157 148 140 135 127 127 135 142 148 154 159 159 153 147 141 134 128 128 137 145 153 151 149 148 144 141 137 132 132 132 140 151 161 171 180 188 184 183 179 162 146 132 145 157 168 171 174 177 181 188 194 196 196 196 171 148 125 144 161 177 179 179 177 172 165 159 154 148 143 147 152 158 156 155 151 154 157 162 159 156 151 141 129 116 119 128 136 140 142 146 149 149 149 145 141 136 134 132 132 144 161 178 185 187 187 184 175 168 162 156 148 145 149 151 147 139 132 131 132 136 140 147 153 154 151 148 150 158 166 173 181 188 192 196 199 197 182 171 169 175 184 192 194 200 201 202 204 200 193 185 179 171 162 156 157 157 162 177 191 202 213 220 227 231 234 239 239 243 244 245 245 246 245 244 242 237 232 225 215 205 196 190 186 179 176 176 172 175 177 178 174 171 168 156 146 137 136 135 134 136 139 140 148 153 161 162 165 165 159 151 143 154 165 175 175 175 178 180 183 186 176 165 152 151 146 144 137 126 117 121 127 133 132 131 129 139 151 164 170 175 180 178 172 169 163 159 154 151 151 146 136 122 108 105 107 109 120 136 151 161 171 180 186 185 187 185 179 175 168 161 157 155 157 162 157 147 138 129 121 111 108 111 114 121 133 145 148 142 135 134 136 141 144 146 148 151 154 156 159 160 160 158 155 155 153 153 152 152 156 158 159 155 152 149 147 145 143 141 140 135 125 117 108 99 89 84 95 105 114 123 132 142 146 152 156 157 154 152 138 125 113 118 123 128 134 140 143 142 140 137 137 135 134 128 121 114 118 122 125 135 144 156 155 154 153 145 136 127 126 127 129 126 123 121 120 120 119 114 108 104 111 117 126 125 121 118 118 122 127 130 137 143 144 144 146 139 130 121 123 128 133 135 136 137 139 143 146 150 151 152 148 142 135 122 105 86 78 81 83 89 102 116 122 121 119 116 110 103 103 113 123 114 
+145 138 111 82 94 124 155 165 169 170 169 165 165 159 151 140 135 127 121 128 145 164 172 173 174 167 152 137 129 127 126 126 132 138 144 150 156 157 149 142 135 121 107 105 122 142 156 162 170 174 174 173 169 159 148 143 145 150 156 164 174 180 181 179 174 163 151 140 144 147 152 160 168 176 179 182 184 183 182 179 161 140 121 137 156 173 179 183 187 180 174 168 163 159 153 153 154 152 146 141 135 132 129 124 126 128 129 135 137 142 140 137 136 137 139 142 146 152 157 155 151 146 140 133 125 131 145 157 162 162 164 163 162 161 153 143 135 134 139 147 144 138 131 130 132 137 142 148 154 156 151 147 149 156 164 170 171 174 179 186 192 191 180 169 165 173 182 186 191 196 201 202 207 206 199 190 184 175 168 159 150 142 139 151 165 178 190 201 213 219 227 231 233 233 237 239 241 240 242 240 240 233 225 217 203 189 178 169 165 163 175 184 194 190 190 188 179 171 162 156 151 144 153 161 169 175 179 186 192 197 200 193 184 174 167 163 158 170 183 196 192 185 177 181 186 190 175 156 140 132 126 117 116 114 116 122 131 139 146 153 160 168 179 187 190 189 188 179 171 161 162 163 164 161 159 156 145 130 116 109 105 102 114 132 153 164 176 186 190 190 193 190 185 179 176 172 169 166 162 158 152 144 136 128 120 112 108 111 114 119 126 132 132 125 118 115 118 122 125 127 128 131 133 139 144 148 153 158 156 155 155 153 152 150 148 144 141 141 140 139 143 146 148 147 146 145 138 133 126 112 98 87 92 98 104 114 125 136 144 151 155 153 149 145 135 122 111 116 119 122 123 125 127 127 126 124 127 128 131 125 121 115 121 128 135 143 150 156 151 143 135 131 129 126 127 128 128 128 128 126 126 124 125 128 132 139 139 139 136 128 118 105 104 108 114 119 123 127 129 132 134 131 127 125 123 124 124 127 132 138 144 150 157 160 159 158 154 147 139 128 112 98 89 87 86 89 105 121 131 129 129 126 122 116 112 112 111 100 
+123 121 106 89 100 120 142 151 155 159 161 159 159 155 150 147 145 143 140 148 166 184 189 183 181 167 148 130 125 131 137 137 135 134 134 139 145 143 137 130 125 123 120 122 135 148 159 164 174 178 178 181 179 171 163 155 155 154 159 166 174 179 179 180 175 165 155 145 141 137 134 148 163 171 173 176 176 168 162 158 156 151 148 154 163 173 172 171 171 168 165 161 158 151 144 145 146 148 148 145 142 140 139 136 141 147 152 153 156 159 154 149 143 144 149 152 157 159 163 161 157 154 146 135 125 125 133 138 141 141 140 142 146 151 144 132 119 121 131 141 141 135 130 132 138 146 152 156 160 159 153 148 150 156 163 164 160 157 162 176 187 195 195 198 196 193 190 189 189 189 192 194 199 197 189 185 179 179 178 178 177 176 172 167 165 165 180 194 205 208 214 219 216 216 219 225 232 236 240 242 242 239 237 231 224 221 214 211 209 207 208 212 215 210 209 207 206 204 204 200 198 194 197 197 202 201 203 200 202 200 202 194 190 182 183 180 179 178 181 181 178 174 170 175 183 190 180 167 158 144 130 117 117 118 119 128 135 146 155 161 168 172 176 178 179 179 180 174 168 163 157 151 147 149 153 157 155 147 141 131 119 106 115 138 161 175 178 186 189 186 186 181 176 172 170 169 169 165 154 145 138 140 139 133 120 107 103 109 116 119 118 117 113 107 100 96 97 100 101 102 103 106 113 119 127 138 148 156 155 155 154 153 149 144 137 129 125 125 127 128 132 136 139 138 139 136 131 124 120 116 114 114 116 119 124 124 124 123 130 136 142 135 127 118 111 105 100 102 104 104 108 112 116 114 110 108 110 115 120 119 118 116 127 139 154 156 156 155 146 131 116 118 121 124 126 128 129 131 130 131 130 128 127 131 140 148 151 149 149 145 139 135 133 129 127 124 120 116 115 116 117 118 120 121 120 114 106 111 125 140 153 158 164 167 164 162 158 148 142 132 120 107 98 94 91 94 108 122 131 130 131 126 115 103 96 103 113 112 
+112 111 105 99 106 116 128 133 139 143 149 153 159 148 132 120 122 133 138 150 162 175 175 166 159 150 138 127 127 135 142 144 143 141 139 143 145 142 137 129 124 126 130 137 145 153 162 167 174 176 179 178 178 176 172 170 167 164 167 174 183 190 187 186 182 173 161 156 159 162 164 162 165 167 166 165 166 160 155 149 153 157 160 163 165 167 163 160 156 156 156 153 151 147 142 143 144 145 147 150 153 156 156 155 168 178 189 183 176 169 164 160 153 161 170 179 176 171 165 162 157 154 146 139 132 132 132 135 132 126 122 122 124 127 126 124 123 130 143 155 152 142 132 134 143 153 159 163 167 169 169 170 171 170 173 171 165 157 158 168 175 183 190 199 200 197 194 190 189 186 187 188 190 190 187 184 183 187 191 193 198 201 198 184 170 163 175 187 196 197 199 200 201 199 200 212 222 231 236 238 242 244 244 243 244 246 247 248 249 248 244 238 231 230 227 227 231 235 241 243 245 249 242 235 231 226 220 216 212 207 203 200 197 194 194 197 198 187 178 169 165 163 160 168 180 192 186 180 172 155 136 116 117 120 123 132 141 151 160 167 174 172 171 167 166 168 168 167 165 161 154 145 136 139 147 155 157 158 158 149 134 119 128 149 169 178 181 183 182 180 179 175 172 167 166 165 165 159 144 132 127 133 136 134 125 115 114 120 130 134 130 128 124 118 113 108 102 98 96 101 105 110 112 114 120 128 140 147 148 149 148 142 136 129 118 109 102 104 107 111 112 114 114 115 114 112 106 99 96 114 131 148 151 153 154 139 125 108 117 125 131 117 105 93 94 96 97 97 98 97 103 106 108 108 107 106 112 119 124 121 115 108 119 131 144 147 150 154 148 139 133 130 128 126 126 128 129 131 131 134 130 125 121 123 132 140 146 155 162 167 172 174 170 156 142 129 117 107 102 102 101 104 108 111 110 106 101 108 123 137 147 153 157 159 154 152 148 143 138 131 118 105 96 98 99 103 111 120 127 126 127 122 104 83 73 93 115 126 
+154 153 143 137 137 138 142 141 143 144 146 149 153 140 123 105 112 127 142 151 159 168 162 146 135 130 131 126 132 141 148 153 155 159 159 163 166 168 164 160 155 145 136 138 148 157 165 171 177 181 181 181 177 178 175 175 176 175 179 183 190 194 191 186 180 174 165 163 175 188 193 180 166 159 159 159 159 155 151 149 154 159 162 161 159 156 153 148 142 142 140 140 150 160 168 166 165 162 163 161 160 161 160 164 171 181 189 185 181 174 170 163 159 167 175 184 178 170 163 156 152 145 142 141 138 136 132 129 123 115 107 104 106 106 111 119 126 140 155 169 165 149 136 136 148 158 166 169 174 181 189 196 196 194 190 184 177 169 162 161 158 162 168 177 184 191 196 196 194 190 187 184 184 185 196 201 207 208 208 209 202 202 198 195 189 186 185 184 181 176 168 167 178 193 205 210 217 222 222 217 215 216 216 218 220 225 225 228 230 231 222 213 208 201 194 188 201 212 223 223 223 223 220 215 208 202 198 192 190 185 183 179 177 173 175 175 177 170 160 150 159 171 181 186 189 192 185 176 167 147 127 108 111 120 128 135 138 142 146 151 154 152 150 145 146 148 151 151 151 153 151 150 145 142 139 135 137 143 146 151 153 159 164 173 179 180 179 173 173 172 173 172 173 170 169 165 160 151 135 122 117 124 129 133 132 130 133 141 148 151 150 147 143 137 133 124 112 98 93 101 109 114 112 110 111 123 133 141 141 140 138 131 124 117 107 98 91 97 101 107 111 113 117 116 116 115 114 113 114 132 149 165 165 163 161 135 107 81 98 119 140 134 130 124 127 128 130 128 126 123 119 114 108 114 119 124 130 136 141 130 114 97 104 116 127 135 141 149 149 149 150 145 135 127 125 128 128 131 134 135 132 126 122 123 130 135 141 152 158 165 165 165 161 157 154 148 137 127 115 105 94 87 87 89 91 100 108 119 125 133 139 143 146 146 145 140 138 135 137 132 120 111 105 110 114 118 122 125 129 128 127 123 106 89 79 93 108 115 
+183 184 177 172 168 164 161 157 155 153 148 145 141 134 124 112 122 136 151 157 161 166 164 156 147 143 141 140 143 149 156 159 161 163 168 172 175 176 175 175 167 154 140 139 149 161 168 175 182 185 181 181 177 175 169 171 179 187 189 188 189 183 173 164 159 162 162 165 170 178 181 178 175 168 167 166 165 162 156 155 160 165 167 165 164 161 153 149 142 140 136 136 153 172 188 185 184 179 174 172 167 168 167 167 171 174 178 178 178 178 172 166 163 164 167 171 165 159 148 143 136 129 132 136 139 134 127 118 117 116 116 117 116 117 122 132 140 151 161 170 170 162 153 151 151 150 153 156 158 167 177 186 191 190 188 182 177 171 168 168 168 171 173 176 181 189 195 196 191 187 181 178 175 178 193 208 215 215 213 212 206 200 195 200 205 204 193 182 173 162 152 150 170 191 206 208 209 207 201 194 191 190 190 190 197 204 206 209 211 212 202 192 185 175 162 156 172 190 205 204 205 204 197 191 185 182 178 172 171 168 164 163 160 156 157 157 155 149 143 136 158 179 202 202 197 195 182 172 159 138 118 98 106 121 134 137 135 132 135 138 141 136 132 127 129 133 135 139 143 148 149 149 149 142 135 127 130 137 143 155 168 180 181 179 173 172 169 167 167 166 165 165 161 157 154 151 147 138 123 109 104 111 119 124 124 123 126 131 136 137 136 134 132 130 128 124 122 120 119 125 131 133 136 136 137 142 144 147 137 129 121 118 117 115 114 110 108 115 121 127 134 140 144 144 141 140 146 153 161 164 170 173 170 167 163 126 88 49 82 115 149 152 151 153 155 156 157 153 148 144 133 125 114 122 130 140 145 147 150 138 121 105 110 123 134 140 145 151 154 151 148 146 141 139 137 135 132 132 133 134 134 130 127 128 129 129 133 142 148 150 145 142 145 154 165 166 153 141 126 109 93 86 88 90 98 113 127 135 140 144 148 150 152 153 151 149 148 150 151 150 149 147 147 145 143 141 141 139 136 133 129 126 113 100 90 97 102 104 
+147 155 161 167 169 169 169 167 165 162 157 151 143 141 135 130 138 151 162 165 166 169 165 163 161 159 157 153 156 160 163 162 162 161 159 160 160 152 145 137 134 134 133 138 148 157 163 169 175 176 173 169 167 165 161 165 172 180 185 181 177 169 159 147 142 149 158 166 167 170 172 177 182 183 179 178 175 170 165 163 167 170 172 176 176 177 173 168 163 158 154 155 168 182 196 195 195 194 183 175 165 161 154 150 151 157 161 165 173 177 178 175 174 174 172 169 161 153 146 142 137 132 137 144 149 141 131 119 122 125 129 129 129 129 135 145 154 161 167 172 173 174 176 165 153 140 135 138 138 146 155 164 171 173 178 177 175 169 174 186 195 198 195 193 192 191 194 191 183 175 167 162 159 165 180 198 206 204 200 200 197 197 199 202 204 204 197 190 187 192 192 197 201 205 207 194 184 174 167 158 152 162 169 177 186 192 199 204 206 207 203 195 188 174 160 150 161 171 183 185 188 190 187 182 179 179 182 184 183 181 182 176 172 168 163 156 153 150 148 144 155 167 179 175 171 166 153 141 129 119 112 103 112 126 137 139 139 137 141 146 150 148 143 137 136 135 137 139 144 149 145 141 133 135 141 147 154 163 170 171 170 171 164 157 148 147 153 160 162 157 155 150 140 130 125 125 127 121 106 90 86 97 107 111 110 107 106 107 110 111 112 114 114 116 116 122 131 141 150 150 152 155 157 161 161 159 156 152 136 122 111 114 117 118 120 122 124 131 136 141 145 149 151 149 148 149 157 164 169 170 174 174 172 166 163 136 108 84 98 114 126 137 147 160 161 162 164 157 150 145 138 133 130 136 144 152 152 152 150 141 130 119 124 135 146 152 154 158 158 153 149 149 149 152 148 141 138 137 138 138 138 137 135 131 128 123 123 131 138 139 134 129 127 127 125 122 116 111 109 111 116 122 127 132 139 147 152 159 162 163 166 165 164 161 161 159 158 161 163 167 169 173 175 169 162 156 152 149 143 141 137 131 123 114 106 107 108 108 
+120 135 150 163 169 172 177 176 176 173 169 164 159 161 162 162 167 176 182 182 182 182 178 174 172 164 157 152 151 150 150 147 146 145 146 148 150 140 125 109 112 121 130 138 145 154 158 163 166 165 158 154 154 154 155 155 158 158 159 158 157 154 149 143 141 144 149 153 155 157 160 165 170 173 172 171 170 170 167 168 172 177 177 178 177 177 175 171 169 165 163 165 177 186 196 200 204 206 193 180 165 153 139 127 132 137 142 153 165 174 182 189 193 186 183 176 168 161 153 156 160 163 166 170 171 168 162 156 155 155 154 156 155 155 160 166 171 174 178 180 177 168 161 151 142 133 132 132 134 139 146 152 160 169 175 180 179 181 186 194 208 210 209 209 206 207 202 198 188 178 170 164 158 162 179 195 201 196 190 187 191 193 196 200 203 205 204 199 201 215 225 233 224 217 205 187 168 149 138 129 125 138 151 166 174 184 192 196 200 203 199 197 190 174 160 147 154 158 163 168 173 177 174 173 174 181 189 196 197 198 200 193 186 179 170 160 151 149 149 150 153 155 157 152 147 141 128 116 103 104 106 108 118 128 139 140 139 140 144 150 157 154 148 144 143 141 138 141 145 149 144 136 127 134 150 162 171 178 183 180 171 161 153 145 138 140 150 159 161 157 153 144 130 115 108 111 112 108 96 85 83 90 99 106 106 109 110 113 113 113 114 112 114 120 129 135 139 142 144 138 133 128 135 141 149 153 157 158 150 142 135 134 134 132 134 135 136 140 142 145 141 137 133 137 142 146 152 153 158 164 169 173 170 166 162 148 135 121 117 113 106 125 145 164 166 165 165 158 152 143 137 132 129 133 141 147 148 146 144 135 120 105 111 128 144 151 154 156 155 153 150 152 155 159 158 155 154 154 154 154 151 147 143 136 128 116 115 122 129 129 122 117 109 98 86 82 84 86 93 112 131 143 147 151 154 153 155 156 157 158 162 160 159 157 154 151 150 152 154 158 161 163 165 165 162 160 158 156 153 149 144 140 134 127 122 119 115 111 
+138 143 149 154 159 164 169 170 172 171 167 165 159 164 167 172 176 184 188 191 192 192 191 186 182 171 159 147 139 132 126 122 122 120 128 138 147 140 127 111 117 130 143 144 139 138 143 152 160 158 154 149 145 147 145 147 146 147 148 150 152 152 148 146 145 142 141 141 144 145 149 153 158 161 161 161 163 168 171 174 179 181 179 172 164 157 153 150 147 150 153 157 164 174 182 190 198 204 196 192 183 172 161 150 149 148 148 155 166 172 172 172 173 173 173 171 167 163 160 163 168 173 178 182 189 188 186 185 181 177 175 174 176 178 179 184 185 186 189 190 176 160 143 135 131 128 127 131 134 137 139 143 153 165 177 186 192 199 200 204 206 212 215 221 223 223 223 216 209 197 190 183 178 181 194 205 205 192 180 173 177 177 182 189 198 206 209 211 216 218 225 226 219 214 206 195 181 172 167 161 155 158 159 162 172 181 189 190 193 196 191 186 182 179 175 172 171 168 165 174 180 187 188 193 196 200 204 207 205 202 202 196 193 189 181 174 166 156 143 133 130 128 125 131 137 142 140 137 135 128 121 113 117 124 132 131 128 125 130 137 143 146 146 146 144 145 145 144 142 141 144 146 151 154 158 161 163 166 171 167 159 149 147 150 153 158 165 170 170 165 161 148 132 113 104 102 100 97 91 88 86 91 95 102 110 119 124 125 126 125 121 117 119 131 143 152 147 143 136 123 109 103 114 124 135 146 154 162 158 155 152 148 145 142 141 140 138 137 139 140 134 127 122 125 127 130 136 140 145 150 154 159 158 152 150 144 139 133 133 133 133 144 151 161 161 157 155 150 143 138 127 115 101 106 114 123 128 131 133 121 102 80 90 115 139 148 151 153 153 152 152 154 160 163 165 164 166 164 162 161 157 149 143 133 119 106 101 112 121 124 117 110 104 99 95 93 93 95 99 111 123 130 132 130 129 131 131 133 137 139 144 146 149 151 148 144 142 144 146 145 147 147 147 150 152 156 156 157 157 157 154 154 152 147 145 140 135 130 
+149 148 146 145 149 154 158 162 164 165 162 156 151 152 151 152 159 164 171 173 175 178 174 170 167 163 160 154 150 141 133 129 125 119 128 138 149 143 129 116 122 138 153 149 138 122 128 141 155 157 148 143 139 137 137 138 143 147 152 158 164 167 166 165 160 149 141 134 134 134 139 146 154 158 158 159 162 166 170 172 175 177 174 158 144 134 132 130 131 137 145 151 157 162 172 181 189 198 198 199 197 191 185 177 171 165 161 164 169 169 157 145 133 141 149 157 160 163 163 159 159 157 168 181 193 194 194 195 187 179 171 171 174 175 181 187 193 193 189 187 174 157 139 140 145 147 148 147 144 143 144 143 148 158 166 172 173 172 181 195 206 214 221 228 230 226 223 217 206 196 192 191 189 191 196 201 199 187 176 168 170 169 176 183 192 200 207 214 218 215 212 210 209 204 202 197 192 187 185 184 180 173 167 162 171 179 187 188 188 188 184 178 175 181 189 193 183 175 167 177 186 195 202 208 215 215 218 217 214 209 203 201 199 194 190 183 178 159 139 119 111 103 95 111 127 145 153 157 163 151 136 120 121 126 131 129 126 122 128 134 141 146 147 150 150 149 147 143 142 138 144 156 167 167 161 155 154 156 160 153 146 137 140 151 161 167 170 172 170 164 159 146 129 113 104 105 107 108 108 108 109 112 112 115 124 130 132 135 137 136 129 120 117 121 125 126 127 125 122 115 107 104 118 133 144 145 145 145 144 142 143 142 141 141 133 126 120 122 123 126 123 118 116 114 109 104 111 120 129 134 138 140 142 139 138 139 141 143 148 152 157 159 158 158 154 151 148 140 135 129 119 105 95 99 107 115 120 123 128 117 100 82 91 111 131 140 144 149 150 150 151 150 149 148 151 153 156 157 154 153 148 142 136 125 109 92 88 100 113 119 111 106 101 102 103 103 105 105 107 114 120 125 124 124 122 123 125 126 129 132 132 129 126 119 116 111 108 108 108 109 109 110 111 120 131 142 147 154 158 161 166 169 169 168 167 162 154 146 
+147 148 150 151 148 146 147 150 153 156 152 149 145 145 144 144 148 156 160 160 160 161 157 156 152 157 162 165 163 159 154 151 145 140 143 148 153 146 135 124 130 141 151 154 155 153 158 162 168 163 156 147 143 138 133 135 141 148 155 162 169 170 166 165 159 149 138 130 128 125 129 139 149 155 157 159 162 165 167 170 169 169 160 139 119 107 112 115 122 130 141 149 153 156 158 159 161 161 158 154 151 150 152 153 158 162 166 170 175 175 164 149 135 137 138 141 147 153 158 153 151 146 160 174 190 192 192 194 186 179 170 169 172 173 180 186 196 194 189 183 170 154 139 146 159 172 171 165 160 153 150 146 145 149 151 148 139 131 147 175 202 217 222 230 227 217 207 198 192 182 181 186 189 192 186 179 177 179 183 181 180 179 176 176 178 180 183 186 187 182 180 176 180 182 181 179 177 174 168 164 159 162 165 168 174 181 188 188 189 188 184 179 175 175 175 175 175 176 176 183 187 193 192 192 191 195 202 207 202 194 190 174 163 148 146 143 142 142 141 141 130 120 108 123 140 158 162 165 167 162 156 148 153 158 165 167 170 174 175 177 177 177 173 169 161 149 137 139 145 151 156 158 161 155 145 134 133 136 142 142 135 128 133 145 159 165 165 165 159 155 150 141 127 111 108 117 127 134 135 139 140 140 141 140 140 140 140 144 148 148 137 125 117 110 103 98 102 107 109 105 103 104 122 138 150 141 135 129 131 132 135 134 132 131 124 118 112 113 115 117 117 115 115 112 110 108 116 125 133 128 122 112 115 117 119 123 127 132 138 143 150 149 145 142 139 137 135 129 122 113 112 113 118 119 121 121 123 124 125 119 107 95 99 112 125 132 138 144 147 148 148 144 140 135 136 140 143 145 144 144 143 140 138 131 122 114 112 120 126 126 120 113 109 108 108 108 113 119 124 129 133 136 135 134 133 133 134 134 131 130 124 112 98 84 81 78 77 79 81 83 86 89 91 104 113 123 130 137 143 149 152 156 154 151 148 140 134 128 
+147 149 155 156 147 138 133 137 142 145 144 143 142 143 146 147 153 161 166 159 153 147 142 135 131 145 162 176 173 170 167 159 154 148 151 154 157 156 149 143 144 147 153 162 172 182 187 183 182 175 166 157 148 141 133 135 142 149 154 158 162 156 144 129 127 131 133 136 137 138 139 142 146 151 155 162 165 163 166 166 165 167 161 144 126 114 115 116 119 130 141 147 145 144 143 140 137 132 124 115 109 113 119 127 141 158 170 176 182 184 175 164 154 142 132 124 131 139 145 145 145 144 154 162 173 173 170 172 174 172 173 174 175 173 174 174 173 168 162 156 155 154 152 157 166 173 175 171 168 166 164 163 156 151 145 136 126 116 132 161 189 204 210 217 212 199 185 179 175 172 174 181 186 187 180 173 172 181 191 194 189 186 183 181 178 175 176 175 173 167 161 159 162 167 167 168 166 166 158 150 146 155 164 172 177 180 183 184 187 186 183 176 172 168 163 159 167 174 178 183 185 188 180 176 169 177 187 194 186 181 175 152 128 106 108 110 113 128 142 158 147 134 120 135 153 169 171 171 168 170 175 176 182 186 191 198 207 213 212 209 205 198 189 180 165 150 134 138 147 157 157 155 152 144 133 122 122 128 134 135 133 132 139 150 163 169 166 163 157 150 141 134 128 124 125 134 142 146 145 145 143 143 141 141 143 146 148 149 149 147 132 117 105 100 96 92 99 104 109 101 93 89 106 124 138 132 126 120 124 126 127 120 115 108 110 115 119 118 118 117 117 116 116 120 126 131 135 139 144 125 105 82 86 92 99 107 112 121 128 135 142 140 135 130 129 129 129 122 111 100 105 116 126 127 122 115 117 123 131 131 125 122 126 130 137 141 140 142 141 140 139 136 132 127 123 124 124 126 132 137 140 142 144 146 150 155 157 152 145 137 130 123 117 114 113 110 120 129 138 137 138 139 140 142 142 142 141 140 132 123 115 111 108 107 108 108 111 113 116 119 117 113 110 107 103 99 105 112 120 125 130 134 132 128 124 119 115 110 
+160 161 163 164 161 156 152 152 152 153 147 143 143 148 153 159 162 167 171 159 148 135 127 120 113 136 161 183 182 179 176 166 158 149 154 159 164 172 175 182 177 172 167 171 178 182 188 192 196 192 186 180 167 157 142 138 137 138 143 151 156 150 137 120 119 129 139 144 146 150 149 146 141 145 155 164 166 163 161 161 167 173 172 165 156 150 140 131 128 135 141 142 134 125 123 130 138 144 141 141 139 137 135 137 149 160 170 178 185 189 181 175 170 163 154 145 152 156 162 162 163 164 167 170 173 167 162 157 162 168 173 174 174 174 169 164 156 150 143 134 143 155 168 169 170 171 172 174 177 179 180 182 171 156 141 132 122 114 125 149 172 185 187 193 186 173 159 155 161 165 173 176 180 182 185 184 185 191 196 199 201 199 200 204 206 207 205 205 200 194 191 186 184 181 179 179 178 178 174 169 166 165 165 162 165 163 166 166 168 167 165 161 158 152 146 140 144 148 154 161 167 175 168 163 158 163 169 175 161 146 134 130 128 126 129 133 137 143 150 158 155 152 149 151 157 161 163 161 161 167 177 184 189 190 194 192 197 195 198 196 197 186 172 158 152 153 154 151 147 142 140 136 134 133 132 132 134 137 139 143 148 151 157 166 174 178 178 174 165 148 133 125 135 146 153 152 150 147 141 138 133 132 129 133 141 152 157 153 149 142 124 107 93 90 87 87 96 104 109 96 84 75 94 114 128 125 120 117 119 120 120 111 102 94 103 111 120 118 115 113 116 120 125 132 141 146 147 147 145 128 111 96 93 93 91 103 117 132 139 143 148 147 143 142 141 143 145 132 114 94 96 107 118 116 108 99 104 121 139 149 151 154 155 153 153 150 145 139 135 134 131 128 123 119 117 116 114 116 125 130 136 142 145 152 156 162 163 160 154 150 141 132 123 114 103 97 112 124 135 132 128 127 133 144 152 150 148 145 132 117 104 113 123 133 137 141 143 145 144 147 141 133 127 117 108 99 102 107 112 117 122 130 128 124 121 114 107 99 
+166 169 169 172 172 173 173 170 166 162 157 150 149 157 165 171 173 176 175 164 154 144 142 143 142 152 165 175 180 185 188 175 163 150 151 155 157 174 190 206 198 191 181 180 179 177 189 199 211 208 207 206 192 174 156 142 128 116 123 135 149 158 160 162 164 170 173 174 172 171 167 158 151 150 152 155 157 154 152 154 158 163 165 169 171 169 162 155 151 153 154 152 140 125 122 132 144 153 159 164 166 159 150 148 156 164 171 181 186 193 189 188 186 187 189 190 193 197 199 200 203 207 203 199 196 183 168 155 158 160 163 169 174 180 184 188 190 190 188 188 194 199 203 205 206 204 203 202 200 200 200 198 187 173 159 152 146 142 152 165 180 187 189 190 184 172 161 159 164 170 177 179 186 190 191 196 197 196 196 195 193 190 196 206 215 220 220 218 219 215 212 207 200 192 187 184 185 185 182 178 175 168 159 154 152 151 151 153 154 155 151 150 147 140 134 127 130 133 135 145 156 163 159 154 150 153 156 159 140 123 104 117 129 142 147 152 157 157 156 154 160 164 169 167 162 157 159 158 158 169 179 193 194 192 190 186 183 181 180 184 186 173 160 145 146 154 165 159 146 133 129 131 132 134 138 141 144 146 148 151 157 164 170 175 180 180 172 167 158 143 132 130 146 161 169 165 161 156 146 137 128 127 126 127 140 154 161 157 153 148 141 132 126 121 116 115 123 131 135 121 108 98 115 134 149 146 143 139 131 123 114 110 106 102 105 108 111 109 107 105 115 125 138 146 153 160 156 148 143 135 125 119 108 98 86 101 122 143 148 150 151 151 150 149 151 152 154 139 121 102 102 113 124 123 114 105 107 117 124 132 140 149 151 151 150 148 146 144 141 139 138 136 132 129 127 127 126 126 126 126 127 133 141 148 151 153 154 158 161 162 151 140 130 112 96 84 102 118 130 126 121 120 131 144 154 152 149 148 138 129 120 126 131 135 140 142 144 146 146 148 145 143 140 134 126 119 117 117 115 118 123 127 126 123 120 111 100 91 
+165 170 175 177 175 174 172 168 166 167 167 165 165 169 173 177 174 171 170 162 154 149 154 159 166 168 166 167 180 189 200 183 166 151 148 143 139 160 180 198 198 193 190 175 158 143 161 180 200 203 206 211 201 188 174 163 150 136 142 151 165 173 185 193 197 200 200 197 191 189 181 171 160 153 149 146 144 143 143 143 146 147 153 165 171 180 185 188 190 188 186 183 179 172 166 166 167 166 161 156 152 148 146 146 148 151 157 163 171 176 174 175 175 181 187 191 198 205 211 212 219 220 215 212 208 195 181 165 164 161 159 167 173 181 192 203 215 221 227 232 235 239 241 241 238 239 235 231 224 221 218 214 206 195 180 178 179 181 186 194 202 203 201 201 194 191 186 182 181 181 185 197 204 211 210 208 204 193 187 176 162 149 150 169 187 204 210 215 219 216 213 211 200 196 189 181 174 168 161 155 150 148 147 147 151 157 160 160 159 160 157 155 155 159 159 163 164 166 170 175 180 185 182 178 174 176 180 183 171 159 146 147 149 149 151 153 156 156 156 156 155 154 152 158 168 178 182 188 191 189 189 189 184 180 177 174 170 169 168 167 167 163 159 155 154 154 155 150 139 133 137 151 166 167 161 154 150 153 156 160 164 168 171 172 176 170 159 145 136 139 139 147 159 172 180 177 173 169 154 139 129 125 122 124 138 153 163 162 159 155 159 162 163 157 148 143 149 157 161 146 129 118 135 150 164 162 159 156 142 129 115 115 114 113 113 113 111 111 110 111 122 131 141 148 154 160 157 149 142 140 135 135 129 121 115 119 129 137 136 132 131 134 141 148 150 147 145 141 135 129 132 139 146 144 138 130 121 113 99 100 115 129 139 141 144 146 146 147 146 143 140 137 134 134 135 135 134 132 128 122 119 120 123 125 126 128 130 137 146 151 140 129 120 110 100 92 100 107 111 114 119 124 134 143 152 150 150 146 145 145 145 142 140 137 139 143 145 145 148 150 149 148 148 142 139 136 132 129 127 128 130 131 128 126 126 123 119 116 
+169 175 181 183 179 174 169 167 165 166 176 183 186 182 176 173 164 156 150 142 139 134 133 136 139 150 159 167 177 187 196 190 182 173 168 162 156 170 185 199 196 194 193 169 144 117 139 163 190 198 205 209 207 199 193 191 187 185 189 193 199 202 201 207 207 206 206 205 205 202 197 190 183 177 174 172 168 160 156 154 155 154 159 167 176 185 188 196 199 194 194 195 196 198 195 190 184 174 161 148 139 141 142 141 139 140 140 146 149 153 154 155 156 161 164 171 183 194 202 206 208 209 211 209 211 206 201 194 188 180 174 170 166 165 172 181 188 197 206 214 221 224 228 229 229 229 223 215 210 198 187 177 170 167 162 167 173 179 184 191 197 197 196 196 194 189 189 186 183 181 186 199 208 212 212 210 202 191 181 166 146 127 128 150 171 187 196 208 212 210 207 204 195 187 179 169 162 154 143 136 130 135 140 145 154 161 167 165 161 162 163 164 166 173 182 189 192 191 194 196 197 200 197 195 191 192 196 197 191 187 183 173 162 153 153 152 152 154 154 155 149 142 136 151 171 189 197 203 211 204 194 186 178 176 170 168 168 165 163 160 156 159 160 165 163 155 150 146 143 142 151 169 186 186 173 162 158 162 166 166 165 164 163 163 164 161 150 138 134 141 145 152 162 172 177 169 165 158 146 136 129 128 125 128 141 153 161 158 153 153 156 159 161 148 136 128 137 147 154 147 141 134 140 146 151 151 149 149 142 139 135 133 131 128 128 128 127 128 131 133 136 138 138 143 148 153 149 147 144 144 146 148 147 147 146 143 135 129 124 119 114 121 133 144 145 141 136 136 135 135 137 142 150 150 144 142 130 113 97 95 110 122 131 133 139 139 137 136 133 124 114 109 118 125 132 132 134 133 125 120 111 104 95 87 89 93 98 110 125 135 127 118 110 107 104 100 99 97 96 106 115 124 131 136 141 141 140 139 137 134 131 130 130 131 134 139 143 145 145 149 148 145 145 145 145 147 144 145 143 140 136 131 131 131 132 134 136 136 
+188 190 192 189 181 175 172 172 173 174 181 183 187 181 174 168 157 146 138 134 131 126 122 117 118 135 152 166 176 183 191 196 202 205 205 208 207 204 205 204 192 182 173 171 167 160 171 181 191 201 206 213 210 207 202 206 207 210 213 215 218 216 214 213 208 208 208 207 208 209 208 206 203 203 202 199 192 183 174 169 170 167 169 175 179 180 178 177 174 171 167 170 175 179 184 183 184 176 160 146 136 139 142 141 133 125 122 129 136 143 152 160 168 169 171 174 178 184 188 183 181 180 187 195 201 203 203 204 197 188 180 168 157 145 152 160 166 174 186 196 201 209 215 217 218 218 207 198 187 169 152 131 129 132 133 143 154 165 173 175 183 184 186 186 186 180 174 172 177 177 182 188 195 198 197 196 190 183 176 165 152 136 137 153 166 178 189 197 199 194 186 178 166 156 147 149 149 145 137 130 129 145 159 168 171 173 172 168 160 159 170 182 189 186 185 182 177 170 165 166 166 168 165 162 160 162 164 167 170 173 176 167 158 150 143 136 131 134 139 145 139 135 129 138 150 161 168 172 177 185 188 195 196 201 201 200 198 194 190 182 173 173 175 178 176 169 159 162 166 171 177 183 186 183 177 168 167 173 176 171 161 146 140 143 144 147 147 148 149 150 151 153 159 161 162 153 145 135 134 131 131 130 134 137 144 152 157 154 151 148 152 152 152 137 121 111 124 137 147 148 147 149 147 143 142 143 141 141 145 147 150 146 141 135 134 133 132 135 138 142 142 140 141 142 143 143 141 138 136 137 140 143 143 142 141 142 145 148 146 140 133 132 130 128 127 125 124 119 112 104 106 118 131 138 138 140 134 119 103 99 110 118 125 128 130 131 129 127 120 106 92 87 103 120 134 135 136 139 131 125 119 109 100 92 91 91 89 99 108 115 113 112 109 109 107 105 103 100 97 102 106 112 117 121 125 126 125 125 121 115 110 113 119 122 129 134 140 141 140 138 137 137 138 138 140 141 139 139 138 134 135 132 132 131 132 131 129 128 
+196 196 198 192 182 176 172 178 183 186 180 178 177 173 170 164 155 143 140 145 149 149 141 134 132 142 153 162 170 177 184 194 204 214 220 225 226 219 210 204 192 178 166 178 190 202 199 197 195 200 208 215 214 212 208 211 215 218 219 221 224 219 214 209 206 199 194 190 191 192 194 196 201 200 200 200 198 193 188 186 182 180 180 181 182 179 176 171 168 164 164 162 169 175 179 183 182 178 164 146 135 140 144 140 126 112 105 116 125 137 155 172 186 185 187 185 178 172 165 152 140 129 148 163 177 181 187 187 184 175 168 151 135 117 134 150 165 172 178 185 191 199 205 205 210 211 209 201 194 181 167 150 145 142 139 146 152 160 166 169 173 175 175 174 172 173 170 171 178 183 188 190 194 195 193 191 187 180 174 167 159 151 153 160 169 176 182 189 188 182 174 164 150 135 129 136 142 146 139 133 134 152 170 183 181 179 174 167 157 154 172 191 203 194 186 178 167 155 144 144 146 145 141 137 134 136 137 140 150 161 170 165 157 151 139 129 118 125 132 139 136 131 126 131 138 143 146 150 154 168 181 196 203 210 214 216 213 212 205 195 185 182 183 184 180 176 171 175 183 191 192 189 184 182 179 176 178 179 183 175 161 147 142 145 148 152 156 160 161 159 157 157 160 162 160 144 125 114 122 129 134 141 149 153 154 158 157 156 156 156 161 163 165 159 155 148 147 142 141 150 159 168 164 160 155 149 141 131 140 146 153 147 141 131 130 126 123 127 133 136 141 143 145 142 137 132 129 125 123 126 130 136 137 135 133 141 153 165 164 156 148 140 132 122 116 116 112 106 99 92 98 108 121 127 130 130 126 113 101 98 110 124 132 135 138 140 138 135 130 113 97 90 108 125 141 145 149 149 146 142 139 132 126 120 110 99 89 92 93 94 99 103 109 109 110 111 108 104 99 99 100 99 101 105 108 110 112 112 106 99 92 94 98 100 108 116 124 122 113 104 105 111 119 122 123 123 123 122 122 122 127 133 134 131 128 127 123 123 
+179 179 179 185 189 190 189 187 186 185 184 181 179 172 168 162 155 148 146 156 165 169 161 152 146 150 153 159 165 172 180 190 198 208 212 218 221 212 210 202 202 200 199 202 205 211 210 211 213 215 218 224 220 215 213 211 214 211 217 218 221 218 213 208 202 193 183 181 179 177 181 187 195 197 198 201 199 202 201 199 195 191 189 185 183 182 182 184 185 183 181 182 186 190 193 189 186 183 175 167 162 167 173 174 167 160 157 160 164 169 179 186 190 184 175 170 165 162 157 142 127 117 129 142 155 158 164 168 165 162 158 141 125 108 131 149 168 171 172 172 179 184 190 197 202 207 207 205 203 198 187 178 168 161 153 153 156 161 163 166 170 168 164 160 162 165 167 175 186 193 198 199 205 203 199 194 190 180 175 172 172 172 174 177 180 182 185 187 186 182 180 171 156 142 137 151 161 168 164 161 159 162 166 168 168 170 168 156 144 139 155 169 182 185 186 187 184 180 173 170 168 164 156 147 140 137 133 131 144 156 169 172 175 177 173 170 167 163 161 157 156 152 150 157 162 167 169 172 172 171 171 169 169 170 171 178 184 193 194 192 190 186 182 177 177 181 182 186 188 192 191 187 184 184 187 188 189 183 178 173 171 169 168 170 174 174 176 176 173 165 160 158 164 168 163 136 109 94 111 127 142 154 166 176 168 162 157 160 161 165 170 176 178 183 187 188 170 151 134 150 166 180 176 172 166 152 139 122 133 143 156 148 138 129 124 120 118 120 123 128 132 136 140 136 132 128 121 115 106 108 114 119 121 122 124 129 139 148 149 144 140 140 142 145 137 122 105 97 102 108 114 119 123 124 120 118 113 103 94 94 111 129 142 146 146 150 146 143 136 117 101 92 110 127 140 145 150 152 149 147 144 135 127 116 108 98 91 94 99 103 99 96 92 97 104 112 111 111 110 103 96 87 88 88 91 93 95 98 92 85 78 77 77 78 86 99 110 105 93 82 84 95 104 111 114 118 121 122 126 127 131 134 134 133 133 133 136 138 
+176 170 170 175 189 205 205 196 189 187 189 192 186 178 167 162 162 162 164 166 171 174 177 178 177 176 175 176 177 182 184 189 193 198 204 210 215 207 199 196 203 210 215 214 215 212 218 224 229 230 231 231 227 221 213 209 204 198 204 210 217 211 207 205 199 193 183 184 183 185 189 194 200 201 204 206 208 209 212 210 209 207 202 199 197 191 192 188 188 184 179 182 186 191 189 184 180 179 179 179 183 190 197 204 204 207 209 209 209 209 205 199 191 172 153 143 148 153 155 147 139 132 131 133 134 135 137 139 142 147 151 151 153 154 165 176 187 174 160 149 156 162 171 179 182 188 190 190 188 179 167 155 155 158 159 162 166 169 169 167 167 168 169 170 174 179 184 192 199 205 207 206 205 203 197 194 187 180 175 174 177 182 185 185 187 187 188 188 190 189 188 180 168 154 152 164 174 181 182 180 177 170 163 160 159 163 161 149 138 129 143 155 167 179 186 196 195 199 199 191 186 178 171 160 148 142 135 128 141 156 170 178 184 192 197 200 202 195 184 171 171 171 172 176 178 184 182 183 180 171 159 146 145 144 144 151 159 171 176 182 187 185 180 172 175 183 189 190 190 188 187 184 180 181 189 195 196 187 182 179 180 182 181 177 175 174 173 174 172 170 168 167 168 167 159 137 115 104 122 139 154 164 176 184 181 178 177 181 182 185 189 192 193 195 196 195 183 175 163 159 157 152 155 160 164 146 128 109 124 140 160 150 135 123 119 117 115 115 114 116 119 124 128 128 127 126 115 102 88 88 96 102 106 109 112 117 125 135 136 135 132 137 148 159 152 130 108 102 109 115 117 117 117 114 114 110 107 97 88 88 103 116 127 126 126 125 125 124 122 112 103 97 104 112 118 126 132 138 137 138 139 124 109 96 94 93 92 100 107 114 103 89 76 87 98 110 112 111 110 100 90 80 80 85 89 93 98 103 103 102 100 100 97 95 97 100 102 99 94 89 90 96 102 108 116 124 130 136 139 141 139 137 135 135 137 138 141 145 
+192 181 171 171 178 186 185 178 172 179 186 196 193 186 175 170 167 169 173 176 180 185 194 198 203 200 194 192 195 192 191 188 187 188 195 204 207 195 186 182 190 198 204 202 200 200 205 213 216 219 220 221 214 208 202 189 178 167 181 198 211 212 210 208 200 194 188 188 190 192 194 200 204 208 211 214 217 217 219 220 220 219 219 217 213 209 198 191 180 170 162 158 158 161 158 150 144 145 150 152 156 158 163 167 178 186 194 196 196 198 196 194 192 183 174 167 165 165 163 158 152 148 140 137 132 126 120 118 129 138 147 159 168 180 186 195 200 181 159 138 142 148 155 161 166 173 172 174 174 160 142 124 136 151 164 172 177 182 178 170 163 172 180 189 197 201 209 213 215 218 214 208 202 197 192 189 182 176 168 169 174 177 183 183 188 190 191 196 197 199 201 200 191 183 177 177 177 175 176 178 175 173 166 162 158 154 151 149 147 148 157 167 173 183 194 202 199 200 199 194 190 186 176 172 165 166 169 170 172 174 176 178 180 181 184 185 188 185 179 178 176 174 173 173 172 174 169 162 157 156 152 149 150 155 159 154 145 137 142 154 162 169 171 173 178 180 182 184 183 184 179 174 169 174 181 193 197 195 197 192 189 182 174 165 155 152 154 158 163 170 177 179 170 160 150 139 131 127 141 156 167 175 184 191 194 198 200 202 204 205 208 210 210 208 204 203 197 193 187 167 149 132 139 148 154 137 118 102 117 137 155 145 132 118 117 121 124 123 119 119 122 129 135 138 140 143 137 130 123 123 128 133 132 130 127 130 139 147 146 134 125 123 133 142 143 139 137 132 122 113 108 105 104 104 104 106 102 93 84 80 91 100 106 105 103 101 105 109 111 109 105 103 103 102 103 113 123 135 138 142 145 131 117 105 101 95 90 96 103 110 104 97 90 98 104 112 106 99 91 85 80 76 81 90 100 106 111 117 122 126 131 129 123 114 108 104 100 98 100 100 99 99 99 100 105 112 116 121 124 125 120 117 114 118 123 127 130 134 
+201 183 165 164 167 170 167 161 158 170 184 198 198 194 189 181 175 167 172 182 196 201 199 200 200 200 199 197 192 193 188 187 187 183 189 193 194 186 177 173 183 190 198 196 191 188 196 203 209 210 207 206 197 191 182 162 144 127 158 183 209 210 211 211 209 203 196 197 197 196 201 207 211 213 215 218 218 219 217 216 218 218 217 214 215 207 195 184 173 160 149 145 146 145 142 134 127 128 135 140 142 139 133 139 153 168 177 180 182 185 187 190 194 204 208 209 196 186 175 172 167 162 157 155 147 131 117 107 123 138 152 161 167 176 182 190 197 194 186 182 177 172 167 167 166 169 174 179 184 177 170 162 168 176 183 187 186 189 188 185 180 183 185 189 191 194 197 198 199 200 198 193 188 185 180 179 176 174 172 173 176 177 182 184 190 193 198 203 207 211 217 215 211 207 200 193 187 180 181 182 180 177 173 168 160 151 148 153 160 166 171 176 183 190 197 203 200 201 199 194 189 184 179 176 173 182 189 198 191 185 177 176 172 170 169 172 173 174 173 175 173 171 170 167 164 162 156 149 142 142 147 150 156 162 170 157 139 120 123 136 148 157 162 168 172 174 175 178 178 179 179 173 170 174 185 196 204 203 206 201 194 183 172 159 146 141 144 150 155 165 174 177 169 160 153 146 140 138 150 162 171 177 182 186 191 199 202 202 202 200 198 196 194 193 190 188 178 172 164 155 145 137 132 131 126 123 120 119 125 133 139 132 122 112 120 131 143 144 136 132 136 144 151 157 161 165 166 169 168 170 170 171 165 155 142 143 151 158 151 137 120 115 121 125 131 140 150 149 136 122 114 109 107 106 110 115 115 107 101 96 97 96 96 102 106 112 117 123 127 122 116 111 107 102 98 112 127 138 147 154 162 151 141 129 116 100 85 90 96 103 104 105 106 109 111 112 104 94 83 80 81 81 88 96 103 108 113 117 124 128 132 133 126 123 123 125 127 127 123 118 112 102 95 89 89 86 87 91 96 99 97 95 93 101 109 115 118 120 
+189 171 150 155 163 172 171 172 169 175 180 187 189 189 190 181 169 160 165 179 196 205 199 198 197 199 201 199 193 187 185 186 188 187 182 179 176 173 169 172 182 193 203 201 201 201 207 215 216 218 220 217 212 206 201 188 175 162 178 199 219 220 223 223 218 213 208 205 201 200 204 209 214 218 221 225 223 218 215 214 212 210 208 207 203 194 185 179 167 157 147 145 146 151 152 153 154 159 168 176 180 181 178 180 182 185 186 180 177 174 177 180 181 190 199 198 186 173 167 169 173 171 163 153 145 137 127 120 133 145 157 160 165 171 176 181 189 198 208 216 202 188 176 172 167 163 174 187 197 201 204 207 205 202 202 200 198 197 199 201 203 197 189 180 176 171 168 165 165 167 165 167 170 169 167 165 168 174 181 183 180 177 179 185 191 196 205 213 218 222 226 226 227 225 218 215 210 206 203 199 198 193 188 182 174 169 166 170 174 180 184 191 195 192 191 189 192 197 197 185 172 162 163 164 165 169 175 178 173 165 160 160 162 162 165 167 170 164 156 149 147 147 147 148 147 148 148 147 146 147 146 148 153 163 172 165 151 139 140 147 153 153 152 150 153 159 165 172 177 178 182 184 186 192 199 206 211 209 207 202 192 183 170 157 145 138 142 146 151 156 162 168 165 163 161 154 148 144 156 166 174 176 178 181 188 196 202 198 197 194 190 186 181 180 175 172 164 156 148 145 145 144 133 122 110 114 121 127 127 127 128 127 127 126 137 150 161 160 153 144 149 156 165 171 177 184 183 175 166 164 158 155 154 153 155 153 148 143 137 134 129 124 118 111 113 124 137 145 141 142 139 131 123 119 123 130 134 130 124 118 108 96 88 99 112 124 130 137 142 136 129 122 115 110 105 119 134 148 152 152 153 143 131 121 113 106 100 95 91 85 94 106 118 122 119 118 111 103 97 95 96 99 100 101 101 105 110 116 121 125 129 131 131 132 136 143 149 148 138 131 119 109 101 95 91 88 88 90 92 93 94 95 95 95 93 93 96 99 
+182 162 143 150 163 175 179 179 183 178 177 175 176 177 178 170 158 145 148 163 176 184 188 191 191 190 188 185 180 174 173 175 178 180 173 167 165 168 170 176 185 196 205 207 210 210 217 222 226 228 229 229 230 230 231 229 229 227 229 233 238 236 238 238 231 227 219 212 206 200 203 205 210 210 216 221 219 218 217 211 201 193 188 187 186 184 182 182 175 170 163 162 163 165 169 173 180 188 197 207 213 216 217 217 211 204 191 182 171 166 166 166 168 170 173 171 159 148 144 159 171 174 156 138 129 140 150 159 159 163 165 166 167 166 167 167 171 180 191 197 182 165 151 154 158 161 174 192 206 208 211 212 214 212 207 206 203 200 201 201 204 201 196 191 185 182 177 174 170 167 166 166 165 166 162 161 165 174 182 183 177 172 176 181 189 195 205 211 217 220 224 226 226 223 222 219 216 211 210 208 204 200 193 188 182 175 172 177 183 188 194 197 199 191 184 177 182 187 190 176 162 150 154 158 162 161 161 157 152 148 144 147 150 153 161 165 169 159 147 135 134 134 135 137 139 141 146 149 152 153 153 151 158 168 178 175 167 157 156 160 161 158 153 147 151 159 167 172 177 178 183 190 196 202 209 211 213 207 204 196 189 181 172 164 154 151 154 162 164 171 176 180 181 183 181 176 170 169 174 178 181 176 175 173 179 184 187 189 188 184 183 182 181 182 179 181 178 174 171 166 162 156 149 140 133 127 124 119 122 125 127 137 148 162 168 174 180 174 165 155 158 168 175 184 192 202 194 175 157 145 140 134 138 151 163 164 149 133 127 132 136 131 117 102 99 110 124 133 139 144 146 139 131 130 135 142 146 137 128 123 121 121 122 127 131 137 145 152 161 154 148 142 138 134 129 141 149 159 150 138 128 117 108 98 103 110 120 106 87 66 82 106 129 130 126 120 117 111 105 106 109 113 111 108 104 108 116 125 128 130 133 135 138 140 143 145 147 145 137 129 123 120 117 116 113 109 105 101 97 94 96 98 98 89 80 73 76 78 
+181 165 151 162 174 187 192 196 200 197 193 187 182 181 179 171 158 146 148 157 166 170 177 183 183 180 177 171 164 160 160 166 169 167 163 156 161 170 179 189 194 200 204 209 210 213 218 219 219 219 220 220 217 214 212 213 217 218 227 231 236 239 240 240 233 223 218 210 205 199 202 202 202 207 211 216 214 217 218 205 186 172 168 166 164 174 186 195 197 197 196 195 196 197 200 200 203 207 214 219 221 226 229 228 225 220 216 208 201 195 190 187 183 178 174 170 164 158 156 164 172 173 163 150 144 156 169 178 176 175 173 173 172 173 172 168 166 172 179 183 166 149 131 142 151 161 179 194 212 214 217 218 217 214 215 210 208 203 201 200 199 201 203 207 207 205 203 200 193 187 182 177 172 169 168 165 166 167 169 169 168 165 170 175 183 191 193 200 202 204 203 203 201 200 197 192 191 190 191 192 190 188 181 175 165 156 151 163 173 182 182 183 182 179 179 177 173 168 167 167 167 168 169 175 175 166 154 144 140 135 131 139 147 155 162 168 174 170 160 156 153 152 151 153 158 161 163 162 164 165 166 167 174 183 190 189 180 172 170 173 171 173 175 178 180 181 186 185 180 175 178 191 202 209 207 211 207 200 197 188 183 174 170 170 172 174 181 187 192 197 202 206 206 208 207 204 201 198 194 192 188 180 172 166 170 171 174 172 175 174 177 177 178 182 186 188 188 188 187 180 172 164 158 154 149 140 132 123 126 134 142 155 169 183 186 186 186 180 173 164 165 167 169 170 171 170 165 157 151 144 137 131 133 146 159 162 157 151 146 142 135 128 115 101 96 104 112 119 123 129 133 135 137 141 147 152 154 142 130 122 133 148 160 156 151 149 157 167 174 169 165 158 153 147 143 145 149 151 140 129 117 109 103 95 101 108 116 106 92 80 88 102 116 119 119 117 114 112 108 111 117 123 122 116 112 114 126 136 142 141 138 139 143 149 151 147 143 138 133 128 128 128 128 126 116 107 97 93 89 88 91 93 94 84 74 65 65 66 
+183 177 166 175 185 196 203 211 218 215 209 204 196 192 182 177 169 161 161 167 172 171 168 165 165 164 162 159 156 152 155 161 168 168 161 153 157 166 177 188 193 199 204 212 216 217 221 216 217 215 210 208 200 193 186 185 185 188 203 216 224 228 232 232 219 208 198 196 194 192 195 198 199 207 213 218 221 224 227 217 205 190 189 183 183 183 187 193 196 198 202 202 207 211 213 217 219 221 222 224 226 233 234 238 239 240 239 235 231 225 214 208 199 191 183 179 180 179 179 176 172 171 180 185 187 184 178 178 179 179 182 188 194 200 201 201 200 198 195 191 180 168 156 160 164 169 177 186 196 194 191 189 190 190 194 193 193 190 193 200 206 207 210 213 211 209 206 201 194 188 183 175 168 165 161 157 157 160 160 164 164 166 170 178 186 192 192 194 194 193 192 190 186 183 183 177 171 172 176 181 183 177 171 165 157 147 142 153 163 170 166 163 160 162 165 166 160 153 149 161 168 179 181 185 186 170 154 138 134 131 126 136 143 151 158 164 171 171 169 169 168 171 171 174 178 182 181 179 176 178 176 176 181 191 198 199 193 185 181 178 176 178 185 192 192 192 191 185 182 181 185 195 205 209 207 207 202 197 191 187 179 174 169 172 172 176 186 194 199 201 203 203 204 206 207 206 205 204 203 201 201 192 184 180 180 178 177 174 173 173 174 174 173 173 172 173 172 174 173 168 162 155 152 151 148 147 148 147 155 166 178 182 186 188 186 187 184 181 178 173 169 162 153 144 137 127 127 135 142 142 133 126 128 142 155 163 164 164 159 151 138 130 121 113 109 109 107 109 117 125 137 142 149 155 156 157 156 139 125 110 119 126 132 132 131 132 144 157 169 168 166 164 155 146 136 132 128 124 122 119 117 114 108 102 104 106 109 105 98 93 94 100 106 108 111 110 110 111 110 112 115 116 114 111 109 112 124 136 141 142 143 144 147 150 147 138 127 120 125 130 135 132 129 124 107 89 74 77 77 80 83 87 89 79 69 59 61 63 
+191 192 192 190 190 189 194 194 198 202 201 203 198 191 186 180 176 168 169 175 176 173 168 163 158 155 154 151 147 146 151 161 171 169 162 155 155 163 170 175 182 187 197 210 222 230 233 236 238 235 233 231 221 212 205 197 193 190 203 217 230 231 233 234 220 207 196 189 183 180 186 191 195 205 214 222 227 230 236 232 229 222 217 215 211 201 190 178 181 182 183 188 196 201 205 209 213 212 208 205 211 221 232 238 240 243 243 241 238 234 229 224 218 212 206 202 203 202 199 195 189 186 191 195 198 193 185 179 184 188 192 200 205 212 211 216 216 209 202 193 187 181 175 175 176 174 176 180 180 172 162 155 160 168 171 172 175 177 186 200 212 215 215 216 211 206 200 192 187 182 174 167 160 154 148 143 145 150 155 161 167 173 180 187 193 197 196 200 196 195 194 190 185 184 178 172 167 168 174 177 178 172 167 161 157 155 152 152 153 150 138 128 120 123 126 129 135 140 146 156 168 180 182 183 184 175 166 157 152 148 145 141 137 134 136 137 140 150 160 171 179 188 199 202 205 205 201 197 192 185 177 171 176 185 194 196 194 194 185 173 160 163 177 189 188 179 171 176 184 198 207 208 208 210 201 197 192 193 192 189 182 176 170 168 165 166 177 188 195 192 189 189 191 193 197 200 202 204 207 209 211 206 200 199 192 186 182 179 173 168 167 168 168 165 160 156 160 162 165 162 158 153 153 151 148 151 154 160 166 177 184 184 181 177 175 173 168 165 166 165 160 153 144 140 138 135 137 140 142 143 141 140 142 149 155 156 152 150 147 147 149 151 150 150 145 130 114 106 122 137 151 159 167 169 167 162 155 136 115 98 100 100 100 104 110 116 132 147 162 162 161 159 148 138 127 120 114 109 111 115 120 119 119 118 121 123 127 115 99 84 85 95 107 108 102 96 96 102 107 106 101 94 93 97 101 109 119 129 138 141 147 150 151 149 144 129 118 113 123 132 138 135 129 124 114 103 96 101 108 113 112 113 109 97 86 72 78 83 
+192 201 207 198 189 183 183 180 180 183 188 193 194 190 189 183 177 168 172 176 180 186 189 194 195 196 198 193 188 183 181 184 186 183 177 172 168 169 172 175 180 189 198 210 226 233 241 248 252 253 253 251 244 236 229 217 209 204 217 228 240 241 246 246 237 227 216 196 177 163 165 170 175 192 205 217 224 230 235 228 220 213 212 211 210 205 198 187 184 182 179 181 185 190 194 198 203 202 197 193 200 212 225 234 239 246 246 244 245 246 240 240 238 235 232 229 227 225 221 221 215 211 201 192 187 185 188 187 193 198 201 201 200 199 194 190 188 183 178 174 170 165 162 171 174 181 180 180 178 170 161 152 161 169 181 179 178 178 175 171 169 180 190 198 198 193 187 181 174 166 167 170 172 169 165 160 161 162 165 169 171 174 176 180 182 185 186 187 186 184 182 179 176 175 170 165 162 161 165 169 171 166 163 161 158 157 154 149 143 136 127 117 109 109 110 112 119 126 135 147 162 173 174 174 175 172 167 161 158 157 155 146 135 125 128 128 127 142 157 173 186 194 205 206 208 208 205 200 197 190 182 173 177 185 192 196 195 198 188 174 161 164 178 192 193 183 175 181 194 209 214 209 204 199 195 191 188 188 184 184 181 179 176 176 178 179 184 188 188 180 171 166 172 179 185 193 199 204 209 214 215 211 211 209 201 193 187 180 177 173 169 165 160 158 155 153 159 170 177 177 177 176 168 159 150 148 150 152 153 153 152 152 153 153 152 145 142 142 145 150 148 145 139 142 149 156 157 151 144 143 147 155 157 155 155 153 145 139 140 151 161 169 173 176 172 151 130 120 136 152 165 167 168 167 157 145 132 124 117 110 107 103 100 101 103 103 116 130 140 138 136 137 127 119 111 107 106 104 108 114 121 126 132 138 143 144 148 129 102 74 75 92 107 107 96 85 87 95 103 103 95 90 89 91 93 101 115 131 139 136 132 130 130 131 132 130 129 130 132 136 137 133 130 127 130 133 137 142 149 152 145 138 131 116 103 90 96 103 
+181 188 194 186 182 175 180 189 192 191 188 187 186 186 185 182 179 177 181 184 190 198 206 217 223 230 232 230 225 219 213 209 206 202 200 195 190 184 181 184 192 198 207 209 214 220 225 236 241 243 247 248 241 233 225 216 208 205 216 229 240 243 247 252 239 228 216 195 175 156 157 161 165 182 198 214 222 228 233 220 210 198 196 198 199 202 205 207 200 196 187 181 176 171 174 181 184 190 194 197 203 210 219 226 231 239 236 233 232 226 220 217 217 216 218 215 214 211 209 212 213 209 199 189 182 180 180 181 186 195 201 202 203 201 195 190 181 176 169 165 160 157 156 167 178 188 187 182 178 169 159 151 163 177 189 187 184 180 160 140 117 135 157 177 179 173 174 165 159 150 161 177 193 197 195 195 194 191 188 182 174 167 163 156 152 154 158 158 160 158 157 157 156 156 155 153 150 150 154 156 159 164 167 166 158 149 141 140 136 137 144 153 157 152 148 139 128 117 110 123 135 147 147 148 149 147 142 139 140 144 147 148 148 149 153 158 160 164 170 176 171 166 162 162 164 167 174 178 183 188 189 192 193 197 196 197 196 194 192 191 187 191 199 205 208 209 208 209 211 214 208 198 187 180 185 185 182 175 172 169 175 182 188 196 203 205 197 189 179 165 151 142 154 162 174 181 195 203 210 214 218 220 219 217 209 198 187 186 182 180 170 161 153 151 151 149 159 170 181 184 185 188 177 166 153 151 150 151 148 145 141 143 146 152 154 151 151 151 153 154 154 151 147 150 158 164 167 163 160 157 156 155 157 158 160 164 164 165 168 174 182 186 184 183 177 168 157 151 161 170 177 172 161 153 136 118 101 109 117 127 119 109 100 98 96 94 103 115 125 125 124 124 122 118 116 116 117 118 116 116 114 121 131 142 141 133 124 113 103 94 95 101 107 105 97 90 88 91 94 94 97 100 100 93 86 89 112 134 145 131 117 107 110 114 118 128 135 140 136 134 132 126 121 117 125 133 142 145 147 150 146 144 140 135 128 124 124 121 
+173 181 184 180 173 169 181 192 205 195 187 180 181 178 177 182 187 190 195 202 208 210 212 214 216 217 220 212 207 200 200 202 202 204 205 206 202 196 190 193 202 210 211 209 209 211 220 223 231 238 247 243 234 229 219 213 204 202 210 219 228 236 243 245 222 205 191 188 183 181 182 185 187 198 210 219 219 222 221 209 197 185 195 204 212 214 216 219 214 210 204 195 188 180 181 184 187 193 202 209 211 217 216 222 224 230 227 223 218 210 201 190 189 192 196 196 192 186 186 192 197 198 193 187 179 172 163 163 170 177 189 201 215 223 223 222 219 209 198 188 184 180 176 183 191 198 198 195 194 180 168 158 160 162 164 170 178 186 172 158 146 150 155 161 157 152 147 148 146 145 162 186 206 213 216 218 216 211 206 199 185 176 168 163 156 156 159 165 165 166 164 161 158 155 155 155 154 157 160 162 164 169 173 173 165 157 152 149 150 151 162 174 181 174 167 157 139 120 105 113 122 130 133 134 137 132 128 125 132 138 145 153 160 168 173 178 184 180 179 175 163 150 137 137 139 140 149 158 167 176 184 193 196 192 191 187 184 181 184 190 195 202 206 211 213 219 223 222 216 209 203 195 184 182 182 187 186 181 176 175 180 189 193 199 204 205 197 190 182 173 160 154 159 166 169 178 187 196 202 209 215 215 216 219 210 201 195 189 182 175 165 157 151 145 141 135 142 151 159 164 166 168 165 160 156 155 155 156 156 154 155 159 165 173 176 179 181 181 177 172 167 164 160 161 168 172 175 174 174 172 165 159 157 163 167 174 179 186 189 193 193 193 188 182 177 172 167 163 167 170 173 161 148 136 119 102 87 101 115 130 121 113 105 105 103 103 113 122 132 138 141 146 147 150 153 151 148 148 135 119 101 107 124 142 136 117 96 93 102 113 117 112 108 102 99 93 90 90 90 94 100 106 108 102 98 100 117 132 139 126 114 106 108 110 114 117 121 124 123 122 121 113 103 97 108 119 131 134 137 139 141 145 149 147 148 146 140 134 
+166 175 181 178 175 175 184 195 204 198 193 187 187 186 188 190 191 194 202 210 216 215 213 212 208 206 205 200 190 180 184 190 195 203 207 212 209 203 197 201 210 219 222 218 216 221 225 231 234 236 239 239 232 225 222 223 224 219 212 211 212 226 236 238 218 197 181 188 194 198 203 204 208 213 221 223 219 214 205 195 184 173 196 214 232 230 226 227 225 225 222 219 217 213 215 217 219 222 225 229 232 235 236 233 229 226 216 203 190 187 193 197 198 206 207 209 203 198 197 200 202 200 194 188 179 166 155 153 163 172 185 198 212 224 229 233 233 226 216 205 198 191 189 195 201 204 206 208 204 191 178 166 156 146 139 156 173 189 190 187 185 172 159 147 137 129 121 128 138 148 169 192 214 224 228 234 230 227 221 214 206 199 193 188 184 188 192 197 203 203 206 199 187 176 170 176 180 187 191 196 197 192 189 185 186 189 191 193 192 191 179 167 158 157 159 157 150 145 140 138 137 135 138 142 144 140 136 132 139 148 157 163 169 176 177 177 177 175 174 172 166 160 153 148 143 139 141 142 147 153 161 169 167 165 161 158 154 153 161 171 184 193 199 206 209 213 214 216 208 203 201 197 197 193 195 197 195 195 197 197 195 195 194 194 190 190 189 189 188 187 184 182 177 173 171 175 181 187 194 201 207 209 213 214 210 207 204 191 182 172 162 154 146 141 133 125 131 138 145 148 154 158 160 160 157 158 158 158 159 160 161 164 173 181 184 184 187 182 171 159 154 157 159 162 162 164 164 170 171 176 177 178 182 184 186 187 187 188 187 184 179 174 171 167 164 159 155 151 151 152 150 140 129 118 103 90 76 94 112 128 123 117 109 111 112 112 122 131 141 146 152 155 159 159 158 154 144 134 121 108 95 102 114 129 129 118 108 108 115 122 120 115 109 103 97 92 89 93 98 102 106 109 112 114 117 121 126 131 131 121 112 104 106 107 106 107 107 110 112 116 119 111 103 95 103 112 118 116 117 115 120 127 134 130 125 120 120 123 
+165 169 172 172 171 173 183 194 203 201 198 198 199 202 204 198 193 189 198 209 215 213 209 205 203 199 198 201 204 207 204 204 205 208 215 219 219 213 208 209 218 222 225 226 226 228 233 237 237 234 231 230 229 226 229 240 246 240 219 198 195 209 227 234 221 208 198 200 202 206 213 223 228 232 237 239 234 235 227 223 216 210 216 223 230 231 232 232 233 233 234 232 235 235 237 238 235 237 238 237 241 243 246 239 231 221 203 183 163 169 184 201 215 220 227 228 227 224 221 218 214 208 200 192 180 167 152 151 165 177 188 190 191 194 198 203 206 202 201 196 186 179 175 187 196 207 205 203 201 195 188 181 168 155 144 163 181 198 197 195 194 179 162 146 149 152 156 163 170 178 188 197 210 217 222 228 229 224 221 213 206 198 194 194 192 193 195 197 202 204 206 201 184 169 167 178 186 194 198 203 203 198 191 189 200 205 214 216 218 212 192 170 155 158 158 163 162 162 162 154 145 139 144 148 152 148 145 139 146 154 163 167 172 177 178 175 173 171 170 169 165 163 160 152 145 138 136 139 139 145 152 157 158 155 152 150 152 151 161 173 184 193 199 204 208 211 211 208 204 202 199 202 206 205 205 204 205 206 205 206 203 198 196 193 192 190 193 195 197 195 196 195 188 181 176 177 178 180 186 193 200 202 204 205 205 202 200 195 189 184 175 167 159 151 143 135 141 151 161 163 163 164 164 161 161 159 157 156 156 158 158 161 171 179 179 179 176 168 150 133 131 144 157 163 159 154 154 161 169 175 186 199 203 200 199 197 194 190 186 178 171 163 163 161 157 158 156 153 154 154 157 150 144 138 126 114 101 110 117 123 119 115 110 117 122 130 138 145 153 154 149 147 143 138 132 120 103 86 82 85 92 98 107 114 119 123 126 128 129 129 126 119 113 108 104 99 99 105 111 114 117 116 118 121 124 124 127 127 127 115 103 95 93 91 89 90 92 94 106 118 130 124 116 107 107 106 104 100 95 91 98 108 119 115 107 100 105 114 
+171 162 156 151 150 151 159 167 176 183 190 196 202 207 211 209 205 202 208 213 218 214 209 204 199 195 191 201 218 231 225 221 213 216 221 227 228 227 221 221 220 219 223 233 243 244 244 247 241 230 219 221 231 236 241 244 247 242 227 210 201 205 211 216 215 213 211 213 215 218 228 237 248 250 252 255 253 252 252 251 252 250 242 232 221 228 233 237 238 241 241 240 241 244 242 239 237 233 227 225 222 219 217 211 203 192 192 189 188 188 197 204 211 220 227 227 227 224 219 208 197 191 191 190 188 179 166 166 177 186 189 185 178 176 180 184 188 188 187 186 179 169 166 181 195 204 202 200 194 196 196 194 178 164 147 167 188 206 203 202 198 182 167 148 168 187 207 213 214 217 211 205 199 202 210 216 215 214 212 205 196 186 184 183 184 181 175 166 166 169 173 169 156 142 141 154 167 174 175 177 176 178 178 181 193 203 209 211 209 208 197 189 181 182 182 182 174 167 159 153 146 141 147 154 158 159 157 155 157 157 158 163 168 174 173 173 169 169 168 166 161 156 150 146 143 140 143 148 154 160 164 172 172 173 172 175 181 185 192 198 203 207 206 205 206 207 209 209 208 205 205 207 210 212 215 214 212 212 213 211 207 202 199 199 199 201 203 204 206 206 205 203 197 191 183 180 177 173 181 186 191 194 194 195 196 195 193 194 192 191 183 175 164 158 150 142 151 161 171 172 172 169 167 164 162 158 157 155 155 157 156 162 170 176 176 176 174 162 147 132 132 148 162 165 157 146 144 152 159 167 176 182 189 183 179 173 176 178 178 175 174 172 168 167 165 166 167 168 171 176 181 180 177 175 163 149 135 131 125 117 115 112 112 122 132 143 148 153 158 152 145 138 133 129 125 116 105 93 95 103 110 113 113 112 116 128 140 146 148 147 144 140 135 132 129 129 130 130 131 132 131 129 126 126 124 121 122 123 122 110 96 86 84 79 77 82 88 94 109 122 133 128 122 115 113 112 111 111 112 113 116 120 122 119 114 110 111 112 
+174 162 151 145 141 138 141 146 152 166 183 195 204 210 217 221 225 229 227 228 228 222 218 210 203 193 183 189 193 199 201 202 201 211 219 226 231 232 238 236 228 227 232 238 248 255 253 255 246 229 213 217 230 247 254 248 243 241 239 231 222 202 189 189 199 213 221 229 237 239 244 250 252 253 251 255 253 250 249 240 229 224 221 220 219 227 235 242 240 241 238 238 237 237 236 233 230 223 219 213 209 201 198 192 183 176 183 193 207 211 208 207 209 219 224 224 224 222 209 187 170 168 180 190 199 197 195 194 193 196 192 184 177 173 179 184 186 180 175 170 171 168 170 175 179 185 187 186 186 192 202 207 203 200 197 207 217 229 220 212 203 184 167 147 166 190 211 213 217 219 211 202 192 197 203 206 209 211 214 206 199 191 185 183 179 171 163 155 153 155 155 154 149 144 146 158 170 174 173 170 173 174 177 183 189 198 200 203 199 202 203 200 201 199 198 196 185 173 162 157 151 146 150 150 155 156 161 163 162 159 159 161 166 169 168 163 163 159 160 158 153 148 143 145 148 151 156 163 172 173 177 178 176 180 178 188 195 206 209 212 215 212 211 209 210 209 208 211 211 212 213 218 219 221 221 222 223 222 218 216 212 206 205 202 200 199 200 198 195 193 190 188 180 171 167 167 165 165 169 171 173 180 185 191 189 188 187 182 176 171 160 145 135 135 136 137 145 156 165 166 168 166 166 164 162 160 158 156 157 158 160 165 168 173 175 175 174 165 155 144 144 155 169 171 156 140 135 145 151 160 164 170 171 164 160 157 161 167 170 166 167 163 160 155 154 161 168 174 181 189 196 195 191 189 179 169 159 153 146 143 138 136 132 129 128 126 125 130 133 133 131 129 133 137 141 143 141 142 142 141 143 136 126 113 114 133 153 163 164 166 163 160 158 155 152 150 145 143 143 142 138 139 137 130 127 122 124 126 126 119 113 106 101 97 91 104 117 129 131 130 128 124 122 120 121 123 125 129 136 141 139 132 125 121 119 118 115 111 
+172 175 173 165 157 155 161 168 173 181 190 199 199 204 206 210 215 218 215 213 207 207 204 201 196 189 183 180 175 171 175 184 188 203 212 228 233 242 249 249 245 245 243 245 244 246 245 247 246 241 234 233 235 238 237 238 237 233 227 224 216 207 197 196 209 223 234 240 249 255 255 255 255 255 255 254 251 250 246 224 205 191 200 207 215 228 235 244 242 235 229 224 223 221 219 218 214 212 210 207 203 198 192 193 193 193 193 198 204 199 192 187 194 205 215 219 219 219 207 187 168 168 183 202 212 213 216 213 211 206 201 191 185 182 182 185 184 180 174 173 177 180 184 184 180 177 178 181 185 193 205 218 227 235 245 245 246 251 235 222 209 189 168 148 163 185 203 207 208 212 206 197 187 191 200 203 210 215 218 217 211 205 195 182 172 165 163 159 156 151 145 152 164 175 184 190 194 196 195 195 193 190 187 184 184 187 187 190 191 195 200 202 208 205 203 200 192 183 176 170 163 160 148 135 126 137 148 161 162 165 168 168 169 171 161 152 144 142 142 140 138 140 141 151 163 175 181 186 193 186 181 174 171 172 172 181 188 199 207 210 214 215 216 216 216 217 214 213 217 218 219 224 228 228 229 229 229 225 223 220 218 215 212 208 203 197 192 183 176 174 171 165 156 149 143 150 153 160 159 158 157 165 174 185 181 182 182 171 161 151 136 122 110 114 123 133 142 150 156 158 161 163 162 163 163 165 163 165 163 161 161 162 167 170 174 173 174 169 155 144 139 140 141 140 139 140 141 143 144 146 152 160 166 161 157 156 154 151 146 140 131 123 122 122 122 141 157 176 185 192 203 200 199 192 187 184 178 175 173 169 164 157 151 138 125 113 113 117 121 125 130 133 140 148 159 164 165 166 165 163 161 157 148 140 142 155 166 175 177 178 178 177 174 169 158 149 140 141 140 141 141 144 145 138 131 128 127 130 130 130 127 125 118 112 106 118 132 144 136 125 114 115 115 115 116 116 116 117 117 117 114 111 109 109 109 110 109 106 
+168 182 188 181 175 172 179 186 193 194 199 200 195 190 188 190 190 188 177 166 158 158 158 160 175 189 200 206 210 213 206 200 195 206 220 231 240 244 253 253 251 250 243 235 229 230 236 240 244 247 253 248 238 228 224 225 228 222 211 203 205 214 224 230 231 238 245 246 252 255 255 255 253 255 255 252 254 253 250 242 230 219 213 209 206 213 223 228 224 218 215 213 212 210 212 216 213 215 214 215 209 204 200 201 204 208 206 203 199 190 180 169 176 191 204 212 214 217 207 191 172 175 195 213 223 226 230 228 223 224 217 210 204 197 190 185 183 193 199 208 214 222 225 224 223 221 222 223 223 226 232 235 234 236 235 227 221 217 206 196 185 179 173 167 181 197 212 216 215 217 210 202 195 198 205 211 213 216 215 214 211 207 202 193 186 181 183 180 178 172 166 171 183 194 201 201 200 198 198 199 197 194 191 190 188 186 184 188 191 193 195 197 198 197 197 192 190 189 183 181 174 169 154 136 123 136 148 158 163 168 174 172 172 171 164 155 146 142 143 141 146 155 157 172 183 195 201 200 201 195 185 176 171 168 163 172 185 199 205 212 218 221 221 220 222 221 219 218 221 223 224 225 226 225 229 227 228 224 222 217 216 213 211 208 203 200 193 187 181 176 171 165 159 154 148 154 159 165 167 170 173 173 172 172 165 160 155 153 149 148 138 125 114 119 127 135 137 138 138 142 146 152 156 163 168 173 174 176 173 167 160 160 162 167 171 171 173 167 153 138 127 117 104 103 120 138 148 143 136 133 143 152 160 158 157 155 148 141 133 122 112 104 107 112 115 134 149 163 172 181 190 183 176 167 168 168 170 168 164 162 156 150 143 137 133 128 133 141 147 152 155 155 161 169 178 179 176 176 175 174 175 175 172 171 174 178 183 187 187 188 187 182 180 174 161 147 140 140 141 141 139 137 134 133 136 136 136 134 132 129 126 123 120 117 114 116 118 118 111 103 95 97 101 106 105 103 99 95 92 88 87 90 96 101 105 109 111 108 
+164 180 189 193 196 196 196 194 196 201 205 207 200 197 194 193 189 187 175 163 153 154 153 154 177 200 219 232 239 250 236 217 202 214 225 236 242 247 251 249 244 240 222 206 189 201 218 230 240 244 250 251 245 242 239 234 236 226 212 201 201 214 225 232 233 234 236 245 249 253 252 254 254 254 255 254 253 253 253 254 255 249 228 208 195 197 200 201 201 199 198 200 205 206 215 227 236 237 238 239 234 233 230 225 220 217 213 211 208 207 202 195 198 203 211 214 220 221 215 208 199 199 210 220 225 227 228 231 231 234 234 228 223 219 210 201 196 212 223 233 239 249 255 253 255 255 254 254 254 254 254 252 244 235 226 212 198 185 176 166 158 168 178 189 199 213 222 224 225 225 219 213 208 211 213 220 218 211 205 205 207 207 208 211 210 211 213 213 211 208 208 205 206 203 201 196 189 186 180 180 179 184 190 194 196 199 200 199 199 196 187 178 172 170 170 172 175 180 184 184 183 181 173 167 161 163 164 167 170 174 177 178 179 181 179 179 179 180 178 180 188 198 206 209 211 215 209 203 198 193 188 183 175 167 158 166 181 197 207 214 222 227 224 228 226 227 225 223 225 223 223 218 214 215 217 219 220 221 217 215 212 206 203 203 204 202 198 198 194 186 178 171 167 162 157 164 165 170 176 182 189 180 171 161 151 141 132 136 141 147 140 130 120 122 126 131 130 127 127 132 138 146 154 164 169 176 178 180 175 166 157 153 155 158 160 166 172 169 159 147 140 134 127 128 141 150 158 154 152 152 157 161 161 160 158 156 147 140 132 128 122 119 127 134 142 144 142 143 152 158 167 156 143 129 135 145 155 155 152 150 146 141 136 138 141 144 153 161 170 172 170 170 172 177 179 181 180 179 179 180 180 181 177 176 176 172 173 171 169 169 166 160 157 150 147 144 142 142 141 141 132 122 112 124 136 148 144 139 132 128 126 122 121 123 122 119 114 110 108 106 104 109 114 120 116 110 102 96 90 86 90 101 113 121 127 131 130 120 
+181 193 202 209 216 217 212 206 205 208 209 211 209 207 206 202 205 201 200 197 197 203 211 217 223 233 241 240 247 246 239 226 218 222 227 236 239 243 247 243 239 234 212 189 164 183 203 223 233 242 248 250 253 252 248 246 243 231 219 205 203 210 216 217 214 211 215 227 232 241 244 251 255 252 249 248 242 238 229 226 224 223 208 198 189 192 197 199 197 199 199 200 201 201 212 224 233 235 237 239 243 242 243 236 230 222 222 220 218 221 220 220 219 217 216 220 222 229 229 231 232 229 226 222 223 224 223 228 236 241 246 247 242 242 237 235 234 238 241 248 249 254 255 255 255 252 253 252 251 251 248 241 233 224 215 204 193 184 183 182 181 183 185 187 197 206 216 217 217 218 213 209 204 201 199 198 201 203 206 208 212 213 214 215 217 218 218 221 217 214 210 206 201 194 189 189 187 186 183 180 181 186 190 194 195 196 199 198 198 194 189 183 179 176 176 176 175 178 182 184 188 192 193 191 192 185 183 179 179 180 180 182 183 184 190 195 204 201 200 196 204 214 226 224 219 217 210 201 194 187 183 178 172 165 158 163 180 196 207 215 223 226 225 224 224 224 223 224 222 217 212 207 202 200 195 194 194 194 197 198 197 194 192 189 187 184 180 177 174 168 162 156 154 151 149 153 156 160 164 168 171 161 151 141 136 133 130 137 145 153 148 138 127 120 114 107 113 123 135 143 149 157 160 165 168 170 170 172 167 160 149 144 146 147 151 161 169 171 166 161 159 160 161 164 164 166 165 166 169 169 168 168 165 164 163 159 153 146 140 139 139 136 139 142 144 140 134 127 132 137 141 135 127 122 132 143 157 160 160 163 158 155 152 156 158 162 165 172 178 176 170 167 164 167 165 167 173 179 183 184 184 184 180 175 173 166 157 152 150 146 144 139 134 132 136 140 140 138 135 131 126 122 120 130 138 147 141 136 132 132 135 135 135 129 127 128 130 134 137 139 144 145 146 146 139 124 111 100 93 84 91 111 130 141 144 147 143 128 
+214 222 227 231 234 234 230 226 223 221 218 216 210 203 206 208 212 212 219 223 228 237 247 254 254 253 253 251 248 245 240 234 229 230 231 233 234 237 237 236 236 231 210 186 165 182 206 227 236 244 251 252 252 252 244 233 223 221 223 222 221 221 226 220 213 203 208 218 233 238 243 251 253 251 249 243 232 222 211 204 197 192 190 186 185 191 194 198 204 207 209 205 202 199 198 201 202 201 199 198 207 216 222 226 232 231 232 231 229 228 229 227 224 223 223 218 219 216 218 220 224 223 222 226 228 231 231 238 243 251 251 255 254 253 255 253 253 255 253 252 251 255 252 251 250 250 244 238 236 236 235 230 220 211 199 196 186 182 190 196 206 197 190 183 191 199 206 205 207 205 204 201 198 186 174 161 175 195 211 217 218 220 219 217 216 214 212 210 203 194 184 178 173 168 172 184 195 199 203 203 202 197 190 184 180 179 177 182 185 193 204 213 222 220 216 214 195 180 169 181 192 203 205 207 208 204 199 198 193 189 185 183 182 181 188 201 211 202 191 180 184 191 197 198 196 199 192 189 184 176 171 164 160 161 161 170 179 191 202 212 220 221 221 216 217 219 220 217 209 201 194 189 185 179 170 161 156 162 167 172 175 178 179 173 163 156 153 149 146 143 140 136 137 136 137 141 144 148 149 150 152 140 130 120 121 126 128 139 148 157 152 142 131 119 108 97 104 119 134 144 149 155 159 162 163 163 164 161 157 149 138 137 139 143 148 157 166 171 167 167 168 169 171 172 174 173 176 172 170 169 173 176 180 180 181 179 179 173 171 166 160 153 143 132 120 119 118 118 118 116 115 116 118 120 132 148 162 168 171 173 173 170 168 169 169 171 172 173 173 169 160 153 151 151 155 158 164 166 169 166 166 164 158 151 144 135 127 120 119 119 119 125 132 138 139 137 137 127 119 110 121 131 142 144 143 142 138 133 128 134 141 147 142 136 130 135 142 149 153 157 160 159 156 153 147 134 125 116 112 107 112 128 142 150 149 148 141 127 
+229 239 245 245 245 245 245 243 239 233 227 219 209 200 201 208 215 225 233 241 246 249 252 254 252 250 248 246 245 244 243 242 239 241 242 241 237 238 235 225 219 214 199 184 168 184 202 221 231 240 250 249 251 249 237 220 200 208 224 239 243 242 244 238 223 211 213 228 242 249 251 251 252 247 245 236 228 213 206 201 196 191 178 167 163 174 187 198 206 212 218 214 210 206 204 201 199 195 191 185 193 204 211 220 229 238 238 235 236 234 232 228 229 227 225 221 212 205 205 203 202 210 218 229 234 241 249 248 251 253 255 254 255 255 253 255 255 255 253 253 252 247 243 237 232 225 203 185 171 182 191 194 182 167 159 171 181 188 195 202 208 202 196 190 193 196 199 197 196 192 195 193 197 191 186 180 189 196 206 211 213 216 213 211 207 208 203 202 193 180 167 161 154 148 156 173 188 199 200 203 199 193 184 178 174 174 173 177 183 193 206 222 232 231 230 225 206 186 173 183 195 204 208 208 210 210 210 210 205 199 194 191 189 186 194 202 211 199 186 170 172 177 181 181 181 180 176 170 165 161 157 155 154 157 161 168 174 184 190 195 198 201 198 197 196 201 203 200 192 187 180 179 178 172 158 147 137 144 150 157 160 164 165 161 159 154 153 151 151 146 145 141 145 145 147 147 148 148 144 140 136 130 123 117 122 128 131 135 139 141 139 134 128 124 118 114 114 116 119 125 134 141 146 152 156 158 152 150 145 135 127 125 132 139 149 155 162 168 169 172 173 175 179 178 181 184 183 177 171 166 175 183 191 191 193 195 193 192 190 182 169 159 142 123 105 107 112 117 118 118 118 120 125 129 139 150 161 166 168 170 165 157 150 146 149 147 148 145 144 138 131 123 123 136 149 157 154 151 146 142 141 136 128 121 113 104 95 90 94 96 103 117 131 144 143 141 139 129 118 109 122 135 148 140 128 119 119 123 126 129 130 130 131 133 136 141 146 150 153 154 155 154 153 152 147 142 138 134 131 130 133 143 153 157 152 146 139 129 
+226 242 247 249 251 251 248 251 249 243 239 234 227 222 220 225 232 237 244 250 253 249 246 245 243 242 245 244 242 244 245 250 253 255 253 254 245 239 231 215 196 180 183 185 185 188 192 197 203 213 223 223 224 226 218 210 201 204 211 218 220 221 220 217 212 209 210 220 227 236 238 243 245 239 238 232 222 212 204 202 200 189 166 143 136 156 179 195 208 217 225 224 222 220 221 221 221 220 215 214 217 216 217 219 222 225 226 224 226 225 223 219 220 221 224 224 221 221 221 216 216 221 229 237 241 240 239 245 242 244 246 245 242 242 237 234 237 237 239 239 232 226 221 217 213 201 173 144 128 143 161 170 154 138 129 151 173 194 200 206 211 206 202 197 195 194 192 187 182 177 182 190 194 202 209 216 211 205 199 199 201 201 202 202 201 198 195 189 182 173 160 151 144 137 141 156 171 180 182 185 184 179 174 173 177 180 184 188 192 196 198 200 203 205 207 208 203 199 195 195 194 193 192 191 191 200 208 216 214 211 208 207 206 205 203 201 199 190 179 169 171 174 178 174 169 164 154 144 133 136 145 154 156 156 156 159 165 171 173 171 169 167 163 161 162 169 175 179 175 173 172 174 174 168 155 140 131 135 138 141 146 150 153 155 158 159 160 161 161 158 153 150 153 157 160 156 152 148 139 131 123 120 118 116 122 129 136 135 132 129 126 124 123 122 123 124 120 115 110 113 119 127 132 138 145 144 141 140 135 133 129 129 137 147 151 154 157 157 158 160 161 161 165 165 165 167 167 165 165 166 171 174 177 179 184 188 186 185 184 173 163 151 132 114 95 101 111 121 126 129 132 135 139 141 147 151 158 161 164 166 159 146 134 129 130 131 131 128 128 125 119 117 120 135 146 153 146 142 139 141 142 145 144 144 143 138 132 128 124 120 119 131 142 155 155 155 156 145 134 123 130 138 144 129 111 92 98 112 125 125 122 119 124 134 144 148 151 156 158 158 157 155 150 145 141 138 136 137 135 136 139 145 151 153 147 143 139 135 
+232 246 251 252 254 255 253 255 254 254 251 250 248 246 248 248 249 251 252 254 248 237 227 222 230 234 237 238 238 235 229 223 219 225 227 233 228 228 224 214 202 190 194 202 206 202 199 192 195 198 204 203 201 200 201 203 205 197 193 189 183 178 175 183 192 203 200 195 189 192 204 213 216 221 219 222 222 219 218 221 224 218 205 192 186 192 202 209 209 210 212 212 212 213 219 222 228 228 227 224 226 223 219 217 219 216 217 217 218 216 214 212 216 220 224 231 234 239 239 238 239 240 243 249 243 236 226 225 230 231 231 226 226 217 209 197 196 199 202 201 192 181 176 177 178 176 169 161 160 172 187 192 186 176 170 177 182 189 195 201 205 206 208 207 206 208 204 201 200 197 199 201 203 206 212 215 213 212 208 206 207 210 210 206 205 200 198 192 183 171 159 152 148 142 147 158 171 178 179 184 185 181 178 178 181 184 188 192 197 200 199 197 200 202 205 207 210 213 214 209 205 198 194 189 185 192 199 205 208 210 212 213 214 214 207 200 192 180 168 156 161 167 174 172 166 161 152 142 133 136 149 161 166 167 169 173 177 181 180 176 173 168 163 160 160 162 164 167 169 170 171 172 173 171 162 150 144 144 146 146 147 149 152 153 152 152 152 149 149 148 147 146 149 151 154 150 142 136 137 137 138 141 143 145 146 146 145 137 130 118 116 111 108 109 111 114 114 113 111 111 113 112 114 120 126 129 131 132 135 137 142 146 153 157 158 154 147 143 143 145 147 147 148 150 150 151 151 158 165 171 170 169 167 172 176 179 180 176 177 166 155 140 127 113 100 107 118 130 137 143 149 152 152 152 150 145 142 140 140 140 137 128 121 120 127 132 134 136 135 138 141 144 149 150 149 148 142 138 136 143 152 161 166 172 179 174 167 160 151 142 135 144 154 163 165 165 165 158 149 143 148 153 159 146 129 116 122 137 150 148 140 132 136 147 157 163 168 170 171 168 166 160 149 137 131 132 135 136 139 142 145 146 145 144 140 139 136 136 
+248 250 253 254 255 255 255 253 252 253 253 252 252 249 251 250 249 249 242 241 236 229 218 217 220 230 231 233 231 227 211 197 187 194 198 207 211 214 216 223 229 235 234 237 238 235 232 230 228 226 225 218 213 205 199 197 193 192 192 187 187 185 183 187 195 203 200 189 183 181 193 200 205 211 212 216 221 226 230 236 241 243 246 245 243 237 233 223 211 194 187 187 186 189 200 210 219 218 217 218 216 216 216 218 217 219 217 215 213 213 214 217 220 224 227 228 233 236 235 231 229 231 231 231 221 210 195 199 207 216 219 220 218 211 200 189 184 185 187 183 171 159 154 158 161 164 169 175 180 189 199 207 207 205 203 196 191 184 191 196 202 208 215 220 223 221 222 223 222 222 219 217 214 212 211 209 213 218 222 223 224 225 221 214 213 208 205 198 189 177 163 158 162 164 170 176 184 188 191 197 199 196 192 191 187 185 185 189 194 199 209 217 225 225 225 227 225 227 228 227 225 224 213 204 196 188 181 176 183 193 202 205 208 213 205 199 192 171 149 129 138 155 171 174 172 174 170 167 163 164 170 173 182 191 202 207 207 209 207 206 203 198 190 185 180 174 170 167 171 173 176 176 174 171 171 167 165 160 158 156 156 155 154 151 148 144 140 136 132 135 137 140 143 147 149 141 134 125 134 144 154 160 167 171 167 158 151 138 125 111 104 100 96 99 103 108 111 116 119 121 120 119 120 121 122 124 129 134 140 148 153 158 161 164 164 163 160 159 158 157 156 160 165 169 175 179 187 192 197 201 191 183 176 174 171 168 166 168 168 156 144 133 125 119 115 121 130 138 147 156 165 166 166 163 155 141 127 118 116 115 117 115 114 118 126 134 138 141 142 146 151 152 155 147 144 141 142 145 149 158 167 172 171 165 160 158 154 154 155 155 156 160 164 168 168 169 170 170 169 170 172 176 180 172 160 149 153 166 176 172 158 145 146 156 163 172 173 180 179 176 171 162 147 134 125 129 132 134 135 135 134 130 126 123 126 128 131 130 
+251 255 254 252 254 254 254 254 254 254 252 254 254 255 251 245 245 238 227 218 218 222 225 225 230 228 229 226 223 212 187 166 157 177 197 212 216 221 226 235 241 248 249 252 249 251 252 251 243 236 231 225 215 205 198 188 180 185 191 196 202 208 211 211 211 209 210 209 210 213 217 223 223 223 223 219 218 213 211 212 214 218 224 230 230 227 222 216 205 194 187 191 191 198 205 214 223 220 219 217 215 213 212 216 219 220 220 217 211 213 216 220 223 226 229 230 230 231 227 223 220 213 208 205 191 174 159 163 183 201 209 214 219 220 215 211 206 201 196 191 183 177 176 183 186 186 178 169 165 173 182 187 190 191 193 189 185 182 184 185 188 193 198 203 204 205 206 210 213 214 215 215 213 211 206 203 203 203 204 207 210 211 213 215 216 215 212 208 202 192 183 179 180 180 182 183 183 189 195 203 207 208 211 206 205 198 197 201 201 204 210 215 217 218 221 221 218 215 214 215 216 216 207 203 196 181 166 153 165 177 189 195 202 209 204 199 194 174 151 132 145 163 183 186 186 186 185 183 182 183 183 181 187 197 204 207 212 211 214 208 205 198 187 180 171 168 163 162 167 171 175 176 177 176 176 175 173 170 166 164 164 163 162 156 151 145 140 136 130 134 137 138 142 145 146 142 138 133 136 140 143 148 152 157 153 148 142 131 120 107 102 96 92 97 105 113 121 131 139 146 150 156 154 145 135 132 138 145 150 156 163 168 168 166 169 173 179 182 178 174 174 179 185 192 202 213 222 224 226 227 214 201 189 184 178 169 171 172 173 164 155 146 140 133 128 133 143 155 160 169 174 177 178 179 174 166 156 155 154 154 152 148 143 140 140 136 138 143 149 153 147 142 138 133 132 133 146 157 168 176 184 187 171 155 139 141 146 148 158 168 174 174 174 175 174 170 167 170 168 168 172 179 184 182 177 173 174 174 175 169 157 148 147 153 158 163 174 179 183 178 174 164 147 131 122 125 131 135 131 128 123 118 111 106 112 118 123 121 
+255 253 252 255 255 255 252 250 253 252 252 246 243 239 239 238 240 234 225 217 211 212 215 217 222 226 224 220 216 200 169 139 131 167 199 223 230 237 240 242 241 246 242 244 244 242 240 236 221 203 190 186 181 175 179 180 181 183 184 190 193 194 201 204 203 204 208 209 212 218 222 231 231 232 230 226 216 205 198 195 191 194 204 213 214 212 206 204 200 196 196 205 215 220 225 229 232 233 231 228 221 211 205 210 219 225 225 222 225 214 206 197 201 203 203 206 209 210 210 209 205 206 208 208 201 188 174 181 193 208 214 220 224 225 223 221 218 213 207 204 202 198 195 196 201 199 182 168 159 166 172 177 180 184 186 183 181 178 177 173 173 179 180 187 185 188 188 193 197 201 204 205 211 206 201 197 190 183 179 183 186 192 201 213 220 221 222 224 218 216 211 209 203 196 190 185 180 183 194 204 212 218 224 227 228 227 228 223 218 209 197 184 177 183 189 192 184 174 168 169 171 173 177 181 184 170 154 142 151 162 173 184 194 207 204 203 198 189 178 167 179 194 210 208 203 196 193 192 190 187 185 180 181 182 185 185 191 197 196 190 185 177 166 154 149 150 152 155 162 168 171 176 181 184 181 177 177 177 176 175 174 174 172 163 156 148 143 137 132 132 135 137 139 142 143 144 141 143 138 138 134 136 141 144 143 139 135 127 118 109 103 99 96 101 110 120 130 142 157 169 176 181 176 164 151 145 150 154 160 167 173 180 180 184 185 191 197 198 194 189 187 192 193 196 206 215 223 227 229 228 225 220 218 211 209 206 205 202 202 196 191 186 172 156 137 143 158 173 179 179 180 184 190 196 196 195 192 192 194 191 186 178 170 162 154 147 144 152 159 162 152 146 142 143 146 149 162 177 190 194 206 212 196 185 172 172 173 170 176 178 184 182 183 181 175 168 160 156 152 151 156 169 181 188 192 196 193 187 175 168 159 152 151 154 157 164 169 173 174 168 160 153 143 135 132 139 148 152 144 135 127 118 108 98 105 111 116 109 
+255 254 255 254 252 250 250 251 248 248 245 240 230 222 226 231 237 235 228 223 212 197 182 186 198 210 216 217 218 207 187 165 163 186 209 228 234 241 245 243 241 241 239 236 235 235 229 226 204 183 165 158 154 150 161 173 183 183 180 178 175 173 171 179 187 193 193 190 186 196 207 218 226 233 239 237 230 226 219 216 210 212 218 224 224 217 212 205 206 207 212 220 227 233 236 238 240 237 235 232 222 211 205 212 219 226 228 230 229 214 198 183 182 184 183 184 187 191 192 192 191 201 211 219 218 218 213 217 224 227 228 228 228 227 224 221 223 223 223 222 219 215 208 200 194 186 179 170 169 180 191 197 200 198 196 187 177 169 163 160 154 155 159 163 163 164 166 175 185 192 196 199 203 195 190 180 178 174 169 170 167 165 179 196 213 219 221 223 222 220 215 206 197 186 175 166 158 161 177 193 205 214 224 232 231 235 234 226 222 212 198 179 168 177 182 185 176 166 156 158 162 165 173 184 190 184 173 167 172 179 185 196 205 217 215 215 211 209 204 203 211 220 230 229 221 211 204 198 188 186 185 182 181 179 180 182 186 193 191 185 179 171 161 151 147 148 148 153 159 164 170 174 175 177 177 177 177 178 178 178 174 172 165 164 161 156 155 150 148 149 151 152 155 158 160 158 156 154 152 151 152 153 150 149 147 144 140 135 130 122 120 119 117 119 123 126 138 154 171 183 187 190 187 178 170 163 163 163 166 176 185 193 201 205 208 211 211 212 209 205 199 200 201 202 209 216 225 227 228 230 230 231 232 231 229 227 224 222 221 217 216 214 201 186 172 176 187 197 202 203 205 207 211 216 220 215 215 213 209 205 198 194 186 182 176 172 170 172 173 173 169 166 163 169 174 179 189 197 206 216 227 236 226 218 206 201 194 186 187 186 190 188 188 190 182 178 170 164 159 152 158 170 182 187 189 190 185 177 170 164 164 164 165 169 172 172 166 160 152 144 136 131 135 141 149 158 168 173 159 146 131 123 113 107 113 119 125 120 
+253 254 254 254 252 251 248 245 244 242 239 242 237 237 238 240 244 234 228 221 209 196 182 181 193 209 215 218 220 219 202 192 189 205 220 232 239 241 247 243 239 233 231 228 228 225 224 223 214 203 193 187 182 176 179 183 191 183 178 174 172 175 174 182 190 197 194 190 185 192 202 212 220 232 241 244 243 240 237 233 228 228 233 238 233 223 214 214 219 225 230 234 238 240 240 239 239 233 227 222 220 217 213 220 221 223 224 224 222 220 214 208 209 215 218 221 221 221 222 220 219 224 229 236 233 230 230 226 227 225 221 217 212 209 210 211 213 219 226 229 225 220 215 203 191 183 178 173 174 188 202 210 207 207 200 189 174 165 155 146 139 139 139 139 138 140 143 158 174 185 189 192 192 183 174 165 166 167 169 158 148 137 154 179 199 210 217 222 218 212 206 192 179 165 150 136 122 131 153 178 194 202 213 221 222 225 227 222 218 209 205 196 191 194 196 194 188 182 176 181 185 192 202 212 219 221 224 226 226 227 227 231 235 239 238 237 235 238 239 239 241 244 247 244 235 226 215 200 184 180 182 180 185 187 190 191 194 198 195 189 186 180 170 162 155 154 153 154 160 164 169 168 167 168 171 173 175 179 179 179 172 164 159 161 165 168 167 166 165 168 169 170 175 175 178 173 167 163 164 166 167 164 159 155 150 149 145 143 140 137 136 136 135 136 135 133 142 159 177 185 189 194 192 186 182 179 176 172 174 179 185 190 195 198 204 203 204 206 203 201 199 199 199 198 206 212 216 220 220 225 224 223 218 218 215 211 216 222 223 226 225 225 224 222 221 221 225 226 228 231 235 237 238 241 239 238 237 235 226 217 212 209 205 203 202 199 198 197 195 196 195 194 195 199 203 207 210 213 214 221 224 231 222 214 208 193 182 170 176 182 191 194 198 201 199 197 198 188 177 165 169 177 185 184 184 180 175 168 160 163 165 173 173 175 174 171 160 152 148 144 141 141 146 149 156 163 172 178 170 167 159 157 154 152 158 163 167 163 
+252 254 253 253 255 250 249 244 241 238 234 241 248 253 252 251 251 237 222 209 207 211 210 216 218 226 230 233 237 234 224 220 217 221 227 233 234 237 238 234 234 230 225 219 215 218 220 220 219 218 216 211 203 197 196 196 194 185 174 166 175 183 190 195 200 205 206 204 203 205 209 213 220 227 237 239 240 240 241 238 235 234 234 233 235 232 232 229 234 237 238 243 241 245 240 243 238 228 219 212 210 208 210 213 218 221 220 222 219 221 221 225 236 243 251 252 254 255 254 253 252 253 252 252 246 243 238 230 222 214 204 193 183 182 185 187 197 202 210 214 213 212 208 201 195 188 179 172 169 176 184 188 185 181 179 175 171 167 167 166 163 158 152 148 146 144 144 157 173 187 193 200 204 197 191 184 182 185 185 173 160 148 152 161 170 178 187 193 196 193 195 184 173 161 150 141 131 139 161 182 196 203 210 212 209 207 205 204 204 202 200 202 200 201 204 204 201 197 193 198 203 207 213 220 228 234 240 248 245 243 241 241 240 242 242 243 245 246 248 251 249 245 241 239 235 232 220 205 190 188 187 189 191 188 187 184 179 175 172 172 172 171 167 163 160 157 153 154 158 161 166 162 162 160 160 159 159 162 164 166 161 156 153 156 156 160 159 158 156 160 161 164 165 166 169 168 167 166 163 160 156 152 148 144 143 144 145 146 149 152 152 150 149 147 140 135 139 151 164 173 178 183 186 187 193 190 188 184 181 180 179 179 182 185 188 190 191 195 196 198 198 198 198 198 202 205 210 213 215 215 211 210 208 208 205 204 210 218 226 225 224 223 224 226 229 229 224 225 222 226 223 225 225 223 228 230 235 235 235 235 235 234 233 230 232 232 234 232 232 232 232 232 232 232 233 231 229 227 224 223 221 217 212 210 206 189 172 156 165 180 190 192 191 189 188 189 189 183 172 162 164 171 180 183 182 183 180 176 173 172 168 170 166 158 151 147 149 156 159 163 166 169 164 160 159 166 174 182 183 184 184 187 188 189 192 191 194 189 
+249 251 250 248 249 248 249 246 242 235 230 228 233 230 234 234 238 232 225 214 217 222 228 231 233 236 237 238 240 241 242 242 240 237 231 232 232 230 230 231 231 229 217 211 208 214 220 225 225 221 222 219 215 211 209 207 205 204 202 199 202 207 210 210 206 207 203 196 191 197 201 210 215 224 229 233 238 240 241 241 243 238 235 231 234 241 250 248 247 249 247 246 245 244 242 242 237 224 210 199 191 181 177 191 204 215 218 222 224 224 220 219 223 230 233 231 231 232 230 228 227 228 231 233 229 228 225 221 216 210 203 194 185 182 185 184 192 201 207 211 209 210 208 203 201 195 188 181 173 176 177 177 172 170 167 168 170 172 177 183 183 173 164 155 152 149 146 160 174 188 200 208 217 214 211 208 206 203 201 191 180 171 155 144 134 140 148 159 166 174 181 178 171 166 166 164 164 171 186 199 208 209 211 206 195 184 178 183 184 186 195 200 204 206 209 211 212 214 214 211 211 210 213 218 217 225 227 233 230 229 228 226 223 222 227 236 239 243 241 240 235 226 222 222 223 224 220 215 210 209 207 202 197 189 178 166 152 137 134 141 147 152 157 161 163 159 156 152 153 157 158 159 158 157 149 143 137 141 144 151 148 146 145 146 147 149 148 147 145 148 153 155 156 158 160 163 164 166 160 151 144 142 137 135 137 140 144 149 153 158 159 157 155 153 146 140 142 150 160 167 169 174 177 186 190 192 191 187 186 183 180 178 178 178 176 171 165 161 158 155 153 152 152 152 164 177 192 198 201 206 204 205 201 202 204 205 209 213 217 215 212 207 206 207 209 208 207 208 207 205 204 205 203 204 213 219 228 236 242 247 252 251 251 252 254 252 252 254 252 253 248 248 247 243 241 236 229 228 222 217 208 201 198 195 193 185 177 170 174 180 185 174 162 147 144 148 152 152 149 151 155 165 176 181 184 186 184 184 182 178 171 165 158 148 139 136 145 153 159 162 165 166 165 163 163 164 167 167 177 181 189 191 192 191 193 192 192 194 
+237 240 240 242 244 247 246 248 241 231 224 220 215 209 214 219 223 225 229 231 230 232 232 233 232 231 227 223 218 220 226 229 230 227 225 221 221 221 217 214 211 208 199 193 192 201 209 216 218 221 223 223 222 222 220 218 217 224 230 236 235 232 230 222 215 206 190 174 157 169 183 197 206 212 222 226 232 235 238 242 249 247 243 243 241 243 242 242 237 234 227 222 219 215 214 214 211 206 201 193 181 169 165 180 193 207 210 216 217 216 213 208 211 214 215 212 210 210 205 201 196 200 204 208 210 207 206 206 210 209 208 207 205 204 201 196 199 208 216 219 219 219 217 214 211 209 203 200 198 196 194 193 193 191 190 188 183 179 175 174 170 163 157 150 154 160 166 177 188 202 206 212 215 214 211 209 202 194 188 176 169 158 152 145 139 142 146 152 153 152 153 160 166 173 179 186 193 197 205 212 211 205 197 189 182 171 170 175 180 184 184 187 191 192 197 198 195 195 193 192 190 188 186 182 181 191 198 207 211 215 221 218 216 215 218 224 226 226 228 228 224 219 214 214 213 215 214 209 209 205 201 200 192 182 172 159 148 133 129 134 137 142 147 152 156 154 154 154 157 161 161 157 156 153 145 140 136 141 146 151 152 150 154 154 157 158 155 152 148 147 146 146 140 138 136 135 135 137 136 132 130 131 132 135 137 140 141 140 141 141 142 144 146 146 146 150 153 160 167 171 169 167 168 175 180 187 189 190 188 186 185 182 179 172 167 152 138 122 116 110 104 105 106 108 129 151 173 181 187 192 194 194 192 196 197 201 201 204 205 203 199 195 194 194 194 196 200 204 209 209 212 215 214 214 214 222 225 230 230 233 237 237 241 245 246 246 247 246 249 250 248 246 244 242 235 229 226 222 217 207 197 184 181 181 181 181 181 181 180 178 176 161 141 123 122 130 136 139 138 138 143 152 160 168 174 179 181 173 165 159 158 157 156 153 149 146 148 148 147 149 148 150 156 162 170 166 160 155 168 181 191 191 191 189 188 191 192 198 
+221 223 226 229 231 232 232 230 228 223 218 214 210 208 212 217 223 223 228 231 232 234 235 230 232 230 222 214 208 206 210 214 217 216 216 215 211 207 202 191 185 179 174 169 168 175 180 185 198 208 211 211 213 212 217 220 224 222 228 230 225 225 223 222 215 212 201 189 173 180 190 200 206 215 224 225 228 230 235 239 248 251 252 253 248 242 236 230 221 212 201 192 180 175 173 173 176 181 188 189 182 176 175 183 192 196 192 191 186 189 190 190 195 199 203 204 207 208 204 202 197 200 202 201 205 210 211 213 214 216 215 212 212 207 202 199 203 208 214 215 215 213 213 207 205 202 203 204 204 202 200 200 202 205 206 199 193 186 176 168 161 154 150 146 160 171 183 193 204 214 212 216 214 212 208 206 192 179 167 158 149 140 145 150 159 155 154 152 143 132 121 135 158 181 194 208 220 223 221 220 209 193 174 167 167 167 171 180 187 188 178 171 166 169 172 172 159 149 140 142 144 144 135 128 123 138 155 169 188 202 218 217 219 215 214 210 208 209 209 212 215 215 216 214 208 207 202 196 192 189 186 185 180 173 165 159 154 150 144 140 134 133 137 140 144 148 151 158 162 166 167 160 152 147 145 142 143 146 152 156 158 160 162 164 167 170 163 158 152 148 140 134 126 118 110 109 110 109 112 114 117 122 127 134 135 134 135 131 127 125 126 130 134 138 144 149 155 160 167 166 164 160 160 166 173 174 171 168 166 157 151 145 144 144 142 135 127 121 123 125 126 128 129 130 142 151 162 165 167 169 175 180 183 187 185 186 188 188 187 186 184 184 185 185 187 192 198 207 214 221 227 230 227 225 222 223 224 226 223 221 221 224 230 234 234 234 236 235 234 237 235 234 232 230 224 220 211 206 197 188 178 172 175 177 185 183 182 178 174 166 159 150 137 123 125 132 138 138 134 129 129 135 143 151 163 175 177 162 150 143 149 155 160 157 156 155 152 147 146 144 141 139 143 147 153 152 154 157 166 177 188 181 171 158 167 177 189 196 
+217 218 217 214 213 214 215 215 212 211 207 205 204 203 211 217 223 223 220 220 224 226 228 228 228 228 223 217 209 201 192 183 180 184 182 185 188 189 189 185 181 180 179 176 178 177 181 185 193 202 207 206 201 204 214 220 224 225 224 219 218 213 208 214 217 220 225 226 225 223 222 218 223 228 235 236 235 236 231 227 223 225 223 227 223 217 212 206 204 196 189 186 179 173 169 164 160 165 169 172 171 174 174 181 186 188 181 172 166 172 174 181 184 189 194 195 198 201 205 204 203 201 199 195 207 213 222 225 223 226 224 219 213 208 203 197 198 200 201 201 197 193 188 181 169 168 170 172 172 173 171 173 180 187 192 192 195 193 188 179 172 164 156 151 157 162 171 175 183 190 190 188 189 184 179 174 173 172 170 170 169 167 165 163 162 165 168 171 167 165 159 168 182 196 206 212 220 216 206 195 186 174 162 159 163 172 176 180 184 183 171 160 153 154 155 152 143 135 128 129 130 130 122 112 107 125 143 160 175 191 207 206 204 202 195 188 181 183 189 193 196 198 200 196 189 184 180 175 171 169 170 171 168 164 159 155 148 144 138 132 126 126 135 143 151 153 157 159 157 155 150 141 130 122 122 121 120 123 126 129 130 131 132 139 146 153 149 144 139 131 125 117 111 105 101 98 99 99 103 109 114 119 124 127 125 120 116 112 109 105 107 114 119 125 130 136 140 148 152 154 155 156 155 158 160 157 150 141 130 118 104 92 98 107 113 116 121 124 134 144 154 153 153 150 151 153 156 156 155 157 161 171 179 181 184 185 185 184 182 184 181 182 184 189 193 202 207 211 216 221 225 228 228 222 223 224 225 226 222 224 222 223 223 222 217 213 209 208 209 210 213 212 211 210 210 206 195 185 172 168 164 158 167 178 186 188 187 182 173 167 156 146 136 125 125 131 141 140 137 133 134 144 155 161 166 169 166 160 151 149 155 161 163 163 160 158 155 151 148 142 136 130 129 129 128 136 146 155 166 175 183 173 158 144 153 168 181 187 
+223 216 206 195 191 192 194 193 180 174 163 155 148 145 165 184 202 205 210 213 214 215 216 218 223 226 226 219 217 201 182 161 154 152 150 155 165 173 178 184 189 193 201 207 209 213 215 217 216 215 212 200 189 184 192 203 209 204 200 197 206 214 218 222 226 229 234 236 242 237 234 226 228 235 239 237 237 237 228 216 203 200 200 201 196 189 186 184 183 182 186 189 193 188 177 166 157 152 147 147 153 158 164 169 174 178 182 182 184 191 199 202 198 197 195 195 193 192 194 193 193 190 186 184 192 199 208 207 206 203 198 192 185 181 178 171 173 175 175 176 174 174 168 162 154 153 157 159 159 155 153 155 163 171 179 184 189 193 189 185 179 171 162 156 155 157 158 162 166 169 166 162 162 156 148 142 156 166 177 186 195 202 193 177 163 170 181 191 200 212 220 223 219 217 213 207 206 195 177 158 153 154 156 161 169 176 178 179 176 170 165 157 149 145 142 138 141 143 142 140 139 137 133 129 127 141 153 167 175 183 191 185 179 173 166 162 153 157 162 167 169 169 170 167 161 153 152 151 149 152 156 156 157 155 149 144 136 128 122 119 117 121 138 154 163 163 164 162 150 141 127 114 100 91 91 92 92 93 95 94 95 96 96 110 123 136 132 129 125 116 109 101 97 94 90 90 90 91 97 104 111 115 117 120 115 109 103 98 96 94 96 102 110 116 121 124 128 132 136 139 137 137 136 140 143 142 138 132 127 118 109 102 106 109 112 121 130 139 149 160 171 173 176 177 177 178 177 177 176 178 185 190 195 198 201 200 199 197 195 194 193 191 195 202 210 215 217 218 220 222 225 224 223 223 223 221 223 222 222 221 220 217 214 211 205 199 195 197 195 197 201 203 205 204 205 204 202 199 197 198 196 194 200 205 210 209 204 203 195 185 175 160 144 126 123 133 142 147 145 143 149 161 173 180 172 163 155 155 154 154 159 162 164 163 166 166 164 161 162 158 155 152 151 150 150 156 162 166 169 171 172 167 157 151 156 163 171 172 
+232 223 210 196 185 182 181 175 159 143 127 112 96 87 119 149 177 187 196 204 202 201 198 209 213 222 224 223 227 218 208 198 195 188 187 188 192 195 195 197 198 202 208 216 219 221 224 227 223 221 213 196 178 172 180 190 194 185 179 179 197 214 231 234 238 244 238 236 229 228 226 226 226 226 228 229 230 230 228 219 214 209 207 204 198 190 181 175 171 167 167 170 174 170 160 150 145 144 143 142 142 143 149 156 163 171 177 184 191 201 209 216 209 202 197 191 185 182 183 182 182 178 172 167 173 182 190 183 176 169 162 156 146 141 137 132 133 136 140 145 149 156 157 158 158 163 171 181 178 168 157 154 157 162 163 164 164 166 165 164 163 161 161 160 163 164 169 173 179 182 175 168 164 165 167 168 177 182 192 194 200 205 196 191 181 188 197 204 211 216 222 222 216 210 206 198 193 182 169 154 149 152 152 156 165 172 174 169 165 159 155 149 145 139 135 132 133 134 136 136 136 136 135 133 133 145 154 164 167 172 177 174 170 168 164 161 154 157 162 165 168 172 174 170 165 160 157 153 151 149 151 151 153 152 152 148 141 133 130 132 130 132 137 139 141 140 141 137 132 126 119 114 110 106 105 104 102 105 105 108 110 114 119 126 136 143 138 130 124 117 111 105 99 91 85 88 95 102 105 104 105 107 111 114 110 105 100 98 97 96 99 106 111 115 115 115 116 117 119 119 113 108 107 113 121 127 131 134 137 136 134 133 127 122 116 128 139 152 165 177 187 191 196 200 197 196 196 194 195 195 196 202 205 207 208 211 207 203 199 194 190 187 188 194 199 203 206 209 212 214 216 217 217 214 213 211 209 206 205 203 204 202 205 203 202 202 202 199 199 198 199 201 204 209 209 212 216 222 230 231 233 235 235 230 229 224 220 217 208 197 187 172 155 140 136 145 154 159 155 152 153 160 166 169 166 162 159 158 161 159 156 152 150 157 169 179 179 183 182 183 184 185 184 182 182 180 180 176 171 167 163 161 160 160 162 165 167 167 
+243 235 224 212 201 190 181 169 154 139 128 123 117 117 133 151 169 178 189 197 195 195 196 201 210 218 219 223 228 226 226 227 224 222 220 222 223 224 219 212 208 207 205 209 211 209 206 206 208 209 202 191 180 177 187 198 201 192 184 181 192 206 215 220 223 226 215 209 200 207 213 215 218 216 217 215 214 217 215 218 216 214 208 204 196 189 179 168 160 151 146 147 147 141 134 126 130 142 153 152 141 129 129 140 150 161 168 172 180 188 195 201 199 193 190 192 193 194 197 200 203 194 186 177 172 165 162 164 166 168 162 155 147 142 139 135 135 139 140 146 150 153 156 159 162 168 175 183 182 174 164 159 159 157 159 155 151 152 152 156 155 159 162 165 170 177 180 188 194 194 185 174 165 177 189 200 202 203 204 203 200 200 199 202 202 206 209 215 212 207 205 203 202 202 193 188 180 174 170 164 160 155 150 150 158 165 164 158 152 148 146 142 140 135 132 128 123 115 111 118 126 130 131 131 134 139 144 148 155 159 164 168 171 174 176 179 180 179 180 180 185 189 194 193 192 188 181 171 163 157 156 152 153 156 159 160 156 151 151 153 156 149 133 116 106 106 106 109 109 111 115 120 128 133 127 122 119 122 124 129 133 140 145 149 152 155 144 133 123 118 113 108 101 92 81 90 100 110 110 105 100 102 104 107 105 103 102 99 98 96 99 105 111 114 113 113 113 112 111 110 105 100 98 109 119 129 132 133 136 136 135 134 134 133 134 144 156 166 174 182 190 191 192 194 194 193 193 193 194 193 195 199 202 203 208 209 204 200 195 188 180 171 170 173 177 182 188 194 201 204 207 211 210 207 206 201 195 191 191 193 193 196 194 197 196 197 198 192 190 183 187 190 193 200 203 212 217 223 228 231 229 230 226 219 215 210 204 201 195 187 181 175 169 163 163 169 174 172 164 160 155 155 155 156 158 160 162 163 164 166 157 150 148 160 172 185 186 185 187 181 177 175 169 162 156 155 158 162 162 163 165 165 169 172 175 175 176 169 
+233 226 218 207 199 188 178 167 155 143 134 136 141 142 148 155 163 173 179 190 193 198 202 205 208 212 212 212 212 208 204 200 197 194 190 195 206 212 213 212 211 208 206 204 200 195 190 190 192 195 193 183 172 174 188 198 201 195 188 183 190 196 201 199 198 195 184 170 161 175 187 200 198 197 194 194 190 188 186 185 184 184 184 182 184 183 181 175 166 159 153 150 147 145 143 140 146 157 171 172 161 150 146 152 159 164 168 170 172 177 182 186 187 186 187 193 200 206 212 217 218 211 201 193 171 149 131 146 162 175 172 170 164 162 162 162 165 168 174 173 171 169 167 164 161 162 162 162 166 171 178 180 179 178 177 177 175 177 183 184 187 187 190 190 193 197 200 203 206 207 197 188 181 176 171 166 172 177 182 178 173 171 176 179 182 186 189 191 188 184 179 182 184 187 186 182 179 176 174 173 169 164 158 158 158 161 158 151 143 139 138 136 137 135 132 127 118 108 102 109 119 125 125 125 126 129 132 135 142 150 157 160 163 166 166 165 164 167 170 173 180 183 191 190 188 185 174 161 146 140 143 144 146 151 154 157 155 157 156 156 155 150 135 123 115 114 113 114 118 122 126 133 141 146 142 138 134 140 145 148 148 149 148 141 134 126 122 118 115 113 113 113 110 107 103 106 111 116 114 108 102 98 97 92 96 105 114 113 103 92 91 98 108 113 115 117 117 116 114 112 110 108 110 119 131 139 137 133 131 131 127 126 135 144 154 162 172 183 184 186 187 190 190 188 189 190 191 191 192 190 192 195 197 201 205 205 204 200 196 192 187 182 181 182 186 190 198 205 211 216 220 225 223 222 220 215 211 205 206 205 204 202 200 197 189 182 170 167 163 158 162 169 175 185 196 206 213 219 226 227 225 222 217 209 198 195 195 190 186 183 181 177 178 178 179 178 178 175 170 165 161 160 158 157 156 151 151 157 162 167 170 173 177 180 182 183 181 179 177 168 158 149 138 133 123 128 135 147 158 162 168 175 178 181 179 174 168 158 
+216 207 195 181 177 177 177 171 169 165 163 162 165 168 173 178 183 184 187 189 189 189 191 196 198 201 201 202 199 193 182 174 172 169 163 172 184 195 203 209 215 211 205 198 192 184 176 175 178 179 173 157 143 144 159 173 179 172 167 168 176 187 191 186 184 179 168 156 148 160 171 180 182 179 179 177 177 171 169 165 160 163 163 165 170 177 184 179 175 167 162 159 154 158 166 172 179 187 191 198 199 201 200 194 187 185 182 179 175 174 172 172 177 182 187 195 202 210 211 212 214 209 202 194 177 156 135 149 163 177 172 163 157 156 158 159 166 172 181 180 177 173 169 164 163 159 156 155 161 172 186 191 189 189 188 191 194 197 202 206 208 209 208 210 211 212 214 215 216 216 210 204 197 172 149 129 140 148 157 151 145 137 144 152 158 158 159 159 159 154 153 158 165 174 177 178 181 181 179 180 176 172 170 166 163 158 154 144 138 132 133 134 134 133 132 128 118 109 102 108 114 120 119 117 116 117 118 119 129 142 153 151 148 148 141 135 128 135 144 151 158 167 176 174 169 165 150 131 113 113 123 132 138 139 143 145 150 153 154 148 144 142 140 140 139 135 133 132 133 137 140 146 154 157 155 151 151 157 162 167 162 156 149 132 114 95 97 102 107 111 114 117 119 120 122 122 122 123 118 113 107 102 96 90 95 108 121 119 104 90 87 96 105 112 116 121 124 121 121 120 119 119 120 125 132 136 136 137 138 135 135 132 138 143 147 155 162 165 171 175 180 180 183 186 186 188 190 189 187 185 187 190 192 196 197 198 198 203 205 205 206 208 208 213 213 215 220 224 228 233 235 238 239 234 233 228 224 220 218 218 214 209 204 198 190 178 167 161 158 150 155 160 164 175 189 203 212 218 228 232 229 229 223 214 209 204 201 196 191 184 179 175 180 183 184 180 175 171 171 171 171 167 164 160 153 146 142 152 160 167 176 186 192 190 185 183 180 178 173 165 155 146 147 150 155 163 172 180 186 187 193 191 188 183 176 159 142 133 
+204 199 191 180 178 178 179 180 181 182 183 183 185 189 198 201 206 200 197 192 183 174 168 174 182 187 190 190 189 177 168 154 158 159 164 170 176 183 189 194 199 196 191 185 177 166 156 154 157 160 155 140 127 127 142 156 161 156 149 150 164 176 182 176 172 165 158 153 149 152 158 162 164 165 167 173 179 185 181 178 172 168 164 158 163 165 168 165 161 158 164 172 180 183 182 181 184 189 194 200 208 215 214 206 197 190 186 181 176 173 165 165 172 179 186 195 202 211 210 210 210 206 203 198 179 165 147 156 166 176 165 149 137 139 141 142 151 162 171 172 170 169 164 161 158 159 164 165 171 179 188 187 182 174 174 181 189 193 198 199 201 201 202 199 194 193 190 190 192 193 193 192 190 184 178 169 172 172 173 170 164 159 161 165 166 168 170 172 173 171 170 171 175 178 180 180 182 183 179 176 169 162 151 147 145 142 141 137 133 132 135 136 137 136 136 134 126 118 112 115 118 121 118 116 114 117 121 124 133 144 154 152 151 150 139 127 115 124 135 146 153 160 167 167 165 163 151 136 122 123 132 140 145 148 151 153 157 161 161 160 154 153 153 154 151 147 146 144 143 141 143 147 152 153 148 142 137 142 144 147 144 141 137 121 106 89 99 109 120 122 122 123 124 125 127 128 128 130 132 132 133 129 124 116 114 113 113 108 101 92 91 97 103 110 117 123 127 128 129 131 131 130 130 130 127 127 133 139 144 143 144 142 141 141 140 144 145 150 156 164 171 175 177 180 181 186 190 189 187 184 184 191 192 194 195 195 198 204 209 212 214 215 215 214 213 210 207 201 197 206 216 224 223 224 227 225 226 221 221 219 216 214 209 205 199 194 189 180 172 163 160 157 156 167 182 197 211 220 231 234 234 231 226 220 212 205 199 192 186 178 175 173 177 181 183 181 180 179 181 185 187 185 184 182 173 166 158 159 164 165 171 173 176 180 182 184 181 176 173 167 160 153 162 177 194 201 208 209 210 208 207 201 192 182 169 153 137 133 
+200 199 199 198 194 193 191 187 187 182 179 176 170 173 182 192 196 195 192 191 183 175 169 176 182 186 185 182 180 168 155 143 150 155 162 165 167 170 173 174 179 177 171 166 155 143 131 128 129 130 136 144 151 160 171 184 186 179 172 164 158 153 153 161 168 172 171 169 167 164 164 161 162 161 161 171 180 188 185 183 180 171 164 154 155 154 154 152 150 148 166 189 211 205 192 182 178 181 184 190 193 198 197 192 184 182 177 171 169 169 173 173 176 179 185 191 198 203 202 202 199 194 191 187 181 172 166 170 174 176 166 155 143 143 144 144 150 157 163 161 159 157 156 154 153 158 167 173 181 184 191 188 180 172 172 179 186 192 196 197 199 198 198 192 185 176 170 170 173 171 176 179 184 194 204 212 207 201 195 193 186 184 183 180 178 183 188 192 194 195 197 196 191 189 186 185 184 181 176 169 157 140 124 118 117 119 121 126 130 134 138 141 143 143 144 143 139 133 129 126 125 123 121 118 117 124 132 138 145 152 157 160 160 161 148 131 115 124 136 148 154 157 163 167 170 172 167 159 151 150 154 155 158 161 163 166 168 174 174 173 172 170 168 164 160 158 157 155 150 147 143 145 147 147 138 129 119 120 122 121 122 125 126 113 99 86 100 117 133 133 131 128 130 129 130 132 136 138 144 148 152 149 142 133 125 114 105 99 98 98 100 103 107 110 116 119 123 125 128 129 129 129 130 126 122 120 128 136 144 145 147 148 151 153 156 159 166 171 173 172 173 173 170 168 174 183 193 195 194 194 196 194 196 197 201 204 203 208 212 213 212 213 209 206 203 197 181 165 158 174 192 207 212 216 218 218 220 219 218 214 212 210 206 204 203 201 197 193 187 180 177 172 170 176 185 192 202 213 223 225 221 215 209 198 186 178 172 169 166 163 163 164 169 173 177 181 185 190 195 201 204 203 206 205 195 183 171 168 167 164 164 165 166 171 178 183 182 179 176 172 164 157 158 166 170 179 187 197 200 202 200 194 183 168 160 154 149 152 
+195 193 195 195 194 191 188 186 183 180 175 166 161 160 167 178 185 188 188 187 187 186 184 192 197 199 191 179 172 166 160 155 162 168 175 170 166 161 161 161 161 157 151 147 143 137 132 131 131 130 141 155 173 184 191 202 204 200 193 178 152 127 123 147 169 183 188 192 192 188 182 178 173 169 166 170 176 181 177 175 171 164 156 149 161 174 185 187 189 192 201 210 222 218 208 198 194 194 194 194 192 194 191 183 176 171 167 165 165 170 174 177 177 177 180 183 190 194 193 191 189 184 180 179 181 184 187 183 182 181 173 162 155 155 155 156 156 155 156 151 144 140 139 142 144 152 165 177 185 192 199 200 194 192 192 195 200 201 201 203 204 202 201 199 196 195 191 184 182 177 172 167 162 166 171 172 167 161 156 158 158 161 165 168 174 177 181 185 184 184 184 178 171 165 166 168 171 170 167 164 156 140 127 122 124 126 129 133 137 140 146 149 153 153 153 151 147 140 135 137 139 138 137 132 131 139 147 154 159 164 169 170 171 172 159 146 132 133 140 144 147 148 150 154 159 161 162 159 157 154 154 152 152 150 149 150 151 153 155 157 163 163 158 154 150 148 146 144 142 142 141 139 138 137 135 133 132 132 134 137 137 139 141 137 132 128 136 142 148 147 144 140 137 134 134 136 138 141 144 145 147 142 134 128 119 106 93 91 99 109 115 115 115 114 113 109 109 111 113 116 118 122 125 121 118 115 122 131 139 143 151 157 162 167 175 181 187 195 188 181 175 169 164 158 166 176 190 193 193 193 194 194 196 198 199 204 205 206 207 204 197 193 190 190 191 188 178 168 162 173 185 194 192 190 190 185 180 175 178 183 187 190 191 196 196 197 199 201 202 205 201 198 194 192 191 187 194 204 213 214 209 203 192 179 163 156 154 155 157 157 160 160 164 167 171 177 186 194 198 205 209 209 209 206 199 190 181 174 167 160 161 163 165 168 175 178 180 182 182 178 168 159 155 151 144 151 166 184 193 190 191 184 170 155 146 147 148 151 
+191 188 185 180 175 172 166 167 167 170 169 168 168 172 181 189 194 193 193 190 183 177 175 184 193 198 189 180 170 169 168 168 174 181 186 176 164 155 150 147 143 138 134 129 138 148 156 161 167 173 174 177 183 184 183 185 184 182 180 175 171 163 161 167 176 185 193 203 206 199 196 190 178 169 161 168 174 176 174 171 166 161 154 148 168 188 212 222 231 240 238 235 233 229 226 221 218 217 215 210 204 197 188 179 168 164 165 165 164 167 168 169 166 167 167 167 169 172 174 174 175 171 170 167 175 179 182 179 175 171 162 156 148 150 153 154 152 151 149 143 140 135 133 136 137 149 162 175 181 187 190 194 196 199 199 203 202 205 205 205 204 202 201 199 202 204 203 196 189 182 170 154 144 140 138 134 127 121 116 122 127 134 145 157 169 171 170 170 168 165 164 155 147 136 140 147 153 159 159 161 156 149 141 138 141 144 145 146 150 152 157 163 165 164 164 161 152 142 138 144 153 160 156 154 152 158 164 170 174 182 186 185 181 181 174 166 158 151 144 137 134 132 133 136 141 145 148 150 152 152 147 143 139 130 124 122 123 122 126 135 144 148 144 140 134 133 130 129 134 137 140 133 128 124 132 141 147 149 151 154 154 155 156 161 165 169 169 165 164 159 156 151 144 138 132 132 135 137 139 139 140 137 130 124 114 103 90 90 101 112 117 115 112 110 107 104 101 106 109 115 121 125 130 129 127 126 129 130 131 131 129 129 135 142 147 151 155 155 158 159 163 162 161 161 161 164 167 167 166 168 171 180 188 195 198 201 200 196 191 185 178 169 164 171 177 182 180 179 179 180 182 181 173 170 164 156 150 143 154 164 172 180 186 190 195 196 196 202 205 210 209 203 201 200 196 195 198 201 206 203 192 180 173 166 161 159 162 166 168 165 164 164 163 162 164 176 185 195 201 206 211 212 210 211 202 196 187 177 165 154 154 156 158 163 168 175 176 176 177 173 163 155 146 136 127 131 149 167 176 174 174 169 152 139 129 132 134 138 
+189 185 176 171 167 166 163 165 165 167 171 173 176 184 194 203 205 201 199 190 176 165 159 168 175 181 183 184 184 187 188 188 188 193 192 182 174 162 159 155 153 151 154 155 162 170 180 184 188 192 193 190 190 186 182 177 174 173 174 178 191 204 204 190 178 179 191 205 214 210 206 197 179 161 150 161 172 180 180 177 174 172 170 169 172 176 186 192 201 209 209 208 209 205 202 198 200 202 205 202 198 193 187 179 171 169 170 174 175 174 173 173 168 167 165 163 162 160 161 163 162 162 161 161 166 175 178 172 166 158 150 145 136 142 145 151 149 143 139 139 141 140 138 135 134 143 155 165 168 164 160 164 170 179 183 190 195 195 190 190 187 186 184 182 179 178 174 173 173 170 169 167 165 161 156 152 141 130 121 127 132 137 144 149 154 153 152 149 147 146 146 146 149 149 154 161 168 171 170 169 166 160 152 150 150 150 151 154 154 154 151 150 148 149 149 151 145 140 139 144 148 152 147 142 139 145 152 158 162 167 172 168 165 162 160 156 153 150 146 143 142 142 141 142 145 150 149 152 153 152 146 141 136 132 126 124 124 125 127 134 140 142 141 139 137 134 133 133 138 141 145 140 134 132 142 148 156 158 162 163 160 158 154 157 163 166 164 162 159 155 152 148 138 122 108 107 108 111 115 122 129 131 126 125 120 111 102 99 99 100 100 99 97 96 97 98 100 107 115 123 130 135 141 143 147 147 138 132 122 115 104 95 103 110 117 120 118 120 128 139 148 153 156 158 158 153 151 149 147 147 152 165 177 185 187 193 194 191 189 185 179 172 168 167 166 164 165 166 168 171 178 183 183 184 186 181 180 179 182 187 191 194 197 197 197 197 196 198 200 203 203 202 201 199 199 200 201 201 202 192 177 162 157 158 160 163 165 166 166 162 161 160 160 160 162 168 176 182 184 183 187 184 182 180 177 170 166 159 149 143 144 145 145 151 159 167 170 172 171 166 155 147 135 123 110 113 133 152 161 161 162 156 144 135 127 130 131 135 
+186 180 173 165 172 178 185 187 190 193 194 191 191 196 203 208 212 211 210 203 191 178 170 170 171 176 181 188 192 195 198 200 199 196 194 188 181 171 170 168 166 176 185 195 197 199 202 199 194 189 193 197 202 202 205 209 211 208 205 208 212 217 219 211 206 203 207 209 211 209 206 198 182 165 156 164 173 182 179 176 176 177 178 177 174 168 159 164 170 175 179 181 179 175 169 164 169 177 182 183 184 183 183 186 187 187 190 195 199 199 202 201 199 196 195 196 194 192 185 181 174 170 165 161 160 158 159 158 156 156 153 153 152 153 153 154 149 141 136 137 140 141 143 145 146 154 163 173 171 163 155 158 163 172 178 183 186 188 184 178 175 175 173 171 165 161 155 159 160 164 172 180 185 180 175 168 155 141 128 132 137 142 141 140 139 136 132 128 127 127 125 138 155 172 177 183 185 185 183 182 179 172 165 160 157 154 154 155 157 151 139 127 120 122 127 130 132 135 137 136 134 131 124 115 111 118 125 130 134 141 145 140 132 127 130 132 135 140 148 155 157 158 157 158 158 160 160 157 157 153 147 141 139 138 137 137 137 137 138 139 141 141 140 139 139 140 139 141 144 146 149 148 145 143 150 158 164 167 170 172 165 159 154 156 160 162 161 158 154 151 148 145 130 112 92 88 89 90 97 107 116 121 122 121 117 110 103 96 90 86 83 84 85 86 88 89 92 98 103 109 117 124 131 133 137 138 131 125 117 109 100 94 94 95 95 97 101 104 110 117 124 128 129 132 136 143 148 148 143 139 141 147 157 164 171 179 188 191 193 195 193 191 186 173 158 145 146 149 151 164 175 184 190 197 202 203 203 199 200 200 201 198 198 197 192 187 182 182 186 190 193 192 191 190 190 187 186 187 189 184 176 168 164 168 172 169 159 149 144 144 146 147 153 158 162 161 162 160 157 157 155 153 151 150 149 147 145 142 140 136 137 138 138 146 155 165 167 167 167 162 154 145 138 132 126 127 140 151 156 158 162 160 154 149 145 143 140 137 
+186 181 177 172 177 182 192 195 195 200 200 201 200 203 211 214 219 222 224 220 212 202 192 184 174 175 183 194 199 195 195 189 180 170 164 168 171 170 164 160 157 175 194 210 217 220 225 219 214 207 207 211 217 221 226 237 237 237 237 233 232 229 230 232 237 233 221 211 204 203 202 199 192 186 178 177 176 178 174 170 166 165 159 158 162 166 170 171 174 176 175 173 170 171 171 168 176 181 188 190 190 193 195 197 203 207 211 215 220 221 224 225 224 217 218 218 219 216 207 195 185 176 169 161 151 144 139 143 149 152 158 167 173 167 163 158 149 140 132 135 140 143 154 161 172 178 187 196 194 189 185 183 182 182 182 182 184 185 183 183 179 175 172 170 171 170 171 173 177 179 179 185 184 180 174 171 167 163 158 157 156 154 157 158 161 159 157 155 151 148 144 150 157 164 167 167 167 166 163 160 159 156 156 154 151 150 149 148 147 145 143 140 138 138 138 137 134 132 129 129 128 128 124 119 115 117 117 118 120 125 128 127 125 125 128 131 134 138 143 147 142 137 131 135 141 147 148 146 145 141 137 132 131 131 132 133 136 140 143 143 147 146 147 147 146 147 147 147 147 148 147 142 137 133 138 143 148 147 150 149 148 146 144 144 144 144 140 138 136 134 129 128 120 110 101 95 91 86 89 95 103 107 108 109 103 92 81 73 69 66 66 71 76 79 79 78 79 79 82 83 92 101 109 112 115 118 116 113 111 106 100 95 89 82 74 77 82 89 94 98 105 108 112 115 124 136 148 149 145 138 137 141 145 150 159 169 177 182 190 197 194 197 195 185 177 168 172 171 172 179 186 192 192 190 191 185 180 175 178 188 192 191 187 185 174 165 156 160 168 178 180 179 177 176 172 169 169 170 175 176 175 173 175 179 182 181 163 150 141 142 144 146 148 148 149 142 137 129 129 128 128 130 131 134 134 132 131 134 138 143 145 143 144 149 155 163 163 165 164 160 154 147 143 142 142 142 147 150 155 160 163 168 165 165 162 155 151 146 
+183 184 185 184 183 181 180 176 171 169 171 175 181 186 192 203 205 206 209 207 208 209 205 196 188 185 191 195 197 191 186 181 166 149 140 153 163 171 160 151 144 170 192 217 224 234 245 242 243 238 239 238 236 238 238 241 240 240 240 240 238 237 235 241 243 241 230 225 219 217 213 210 207 201 196 191 186 181 178 173 166 156 148 141 152 164 174 174 174 174 171 168 165 172 178 183 192 199 206 209 213 214 219 220 224 227 230 232 237 235 236 234 231 229 224 219 214 209 198 188 179 174 169 164 159 152 147 151 154 155 158 161 163 161 161 160 158 155 154 155 161 163 169 177 183 187 188 193 195 193 193 190 190 187 184 186 186 184 182 181 179 176 173 173 176 179 182 185 189 189 187 183 184 179 175 173 178 182 187 180 173 166 173 178 185 186 185 184 180 173 167 162 159 155 151 147 144 138 132 128 129 135 141 143 143 143 141 139 134 139 153 166 171 166 161 154 139 125 116 122 125 130 131 136 136 127 118 110 111 115 117 123 127 134 137 140 143 141 134 131 117 103 86 94 110 126 129 129 128 127 125 122 121 122 121 125 133 140 146 148 151 153 153 153 155 155 155 155 152 147 143 135 127 119 124 128 131 129 129 128 130 133 136 132 129 125 123 120 119 115 113 111 111 110 110 104 94 84 83 86 90 92 94 94 89 78 66 59 59 57 59 65 72 75 72 69 67 69 70 73 80 86 93 98 104 110 112 113 116 114 112 110 106 100 94 96 99 101 106 113 119 125 130 136 141 149 156 159 154 151 149 147 145 144 152 159 166 175 186 192 196 197 200 201 203 203 202 200 198 198 198 196 190 185 178 172 164 159 168 177 186 187 183 179 172 164 156 159 168 174 173 166 160 156 155 157 160 165 167 174 180 186 192 194 198 199 190 182 174 167 161 151 143 132 123 113 103 95 96 100 102 107 113 119 121 122 122 129 140 149 150 152 155 159 166 170 171 169 167 160 147 134 128 124 121 125 135 150 163 168 175 182 179 178 176 170 163 155 
+159 166 176 183 181 175 171 165 156 148 151 158 162 173 180 187 189 189 190 194 199 204 207 208 208 205 199 195 189 186 181 174 161 148 144 158 173 183 185 182 181 196 215 232 237 246 254 254 252 253 249 249 247 243 244 242 244 242 243 244 244 246 246 243 242 245 242 247 244 237 232 227 222 216 213 205 202 198 192 187 179 162 145 133 143 152 161 157 154 152 154 158 162 173 185 197 202 208 216 219 223 227 230 231 235 238 240 242 243 240 242 237 232 227 221 214 205 199 188 179 173 170 166 165 163 160 158 159 161 160 157 151 145 150 158 161 171 179 187 189 190 192 189 188 184 179 173 166 168 172 174 179 182 184 187 189 191 189 181 172 169 171 175 177 180 179 182 182 182 181 178 174 171 169 167 163 161 160 159 156 152 149 154 159 167 170 173 174 170 166 161 156 150 145 142 138 134 127 116 106 108 114 120 125 126 130 133 139 143 150 163 172 177 171 165 156 146 134 128 132 136 138 139 140 140 129 118 107 110 115 119 126 133 140 141 141 139 132 125 118 109 99 90 97 111 124 128 127 126 126 127 127 127 129 129 133 139 148 151 154 155 153 148 143 137 136 137 135 132 129 127 123 120 117 121 125 128 122 119 115 116 117 118 116 115 115 115 114 112 111 110 109 111 115 118 110 97 83 77 78 79 79 79 78 74 68 63 59 61 62 63 67 71 72 67 62 57 62 65 69 73 77 80 89 97 106 112 116 121 124 127 127 125 120 116 114 113 111 115 123 132 137 143 151 154 159 163 165 163 162 160 150 145 141 141 140 142 150 161 169 174 179 186 188 192 196 188 181 175 179 182 191 187 185 184 181 179 177 178 180 181 182 183 186 184 181 182 180 178 176 167 155 143 138 139 145 148 155 163 173 183 195 203 205 209 209 204 199 195 184 172 163 150 141 131 123 116 109 111 112 114 118 123 125 129 132 136 140 147 154 161 169 176 183 184 186 183 176 169 157 140 123 110 104 99 105 129 152 167 174 178 183 181 180 176 169 163 155 
+132 148 160 174 170 166 162 159 156 152 156 158 162 166 171 177 181 188 193 197 203 206 205 201 196 197 193 191 184 182 176 173 165 156 154 170 185 198 209 215 224 233 242 250 251 253 252 253 250 250 245 239 231 235 237 241 240 241 242 244 242 242 242 242 242 240 243 242 242 235 231 227 224 221 218 214 212 210 201 198 189 170 149 131 139 147 152 146 136 131 138 149 157 176 191 207 210 216 220 226 232 233 237 239 238 241 241 243 239 238 234 227 217 208 199 193 188 178 170 160 152 147 142 141 147 151 156 159 162 163 158 153 149 153 159 164 174 181 189 188 190 189 185 179 174 168 163 158 158 162 165 170 175 180 182 182 182 178 167 157 155 161 166 170 170 170 170 169 172 169 165 161 158 157 154 152 147 140 136 133 132 130 135 141 147 151 156 161 160 155 152 146 142 136 134 131 127 116 103 87 87 93 100 105 110 115 125 141 155 166 170 174 176 167 163 156 153 147 146 148 149 149 146 143 139 127 114 103 110 120 127 133 137 143 140 137 132 123 114 105 105 107 107 113 123 130 132 130 130 130 133 136 137 140 142 145 150 156 159 159 159 154 141 125 115 115 114 112 111 109 109 110 113 114 117 120 124 116 108 102 102 102 103 103 104 103 104 106 106 107 107 108 113 117 124 117 102 87 79 78 76 74 71 68 65 66 67 68 71 73 75 76 77 77 72 68 66 68 71 73 73 71 71 78 85 92 97 102 109 108 106 104 103 103 103 100 97 93 99 110 121 129 137 144 153 159 167 171 170 169 165 157 147 138 126 113 106 117 127 135 146 155 162 167 170 175 166 157 145 157 168 182 182 187 188 188 188 185 185 181 176 178 182 189 191 192 196 196 193 191 185 177 170 164 165 161 164 171 178 183 185 187 187 192 197 202 198 195 190 187 183 178 171 165 157 152 146 140 138 135 132 131 133 131 136 140 145 150 155 160 167 178 186 192 188 187 176 164 149 138 134 130 130 134 137 147 157 166 173 171 170 165 164 163 161 157 152 148 
+162 166 176 181 178 176 170 168 164 163 166 165 167 165 166 166 175 188 200 208 210 215 204 185 168 166 173 179 182 181 179 182 190 193 201 209 219 227 231 237 238 245 250 254 254 254 254 253 253 250 244 237 231 230 231 236 235 236 237 238 238 238 241 243 241 239 236 235 231 224 220 216 219 221 219 217 218 211 204 199 190 179 165 156 162 169 174 171 167 164 165 169 172 180 187 193 198 202 204 210 218 223 225 227 229 228 227 227 227 223 222 214 205 195 189 181 175 166 156 147 136 129 120 118 131 145 154 159 164 166 162 157 154 160 163 166 171 174 178 177 176 172 166 159 150 153 158 162 164 162 163 164 166 169 167 158 153 147 140 131 129 130 132 129 126 119 119 128 132 136 138 136 137 137 139 141 137 137 133 124 116 107 122 136 150 154 158 163 158 155 149 145 139 136 136 139 141 136 126 116 117 120 125 131 135 140 147 153 158 163 166 168 168 160 154 147 147 144 142 141 140 138 131 124 118 117 116 115 119 124 129 134 138 145 142 138 134 125 116 106 107 110 114 116 119 118 120 121 123 124 127 129 132 135 138 139 140 142 142 139 140 134 122 110 100 101 101 103 106 112 116 117 117 118 121 125 129 119 110 99 99 98 97 96 93 94 96 101 107 108 111 110 113 118 119 116 111 104 100 94 90 84 79 73 71 76 82 86 89 92 95 91 89 86 85 85 84 84 83 82 76 69 62 66 70 74 80 87 92 88 82 76 80 83 89 88 83 79 86 100 111 122 130 137 146 155 164 167 166 163 161 156 153 145 133 122 116 125 133 141 148 153 158 164 168 171 171 171 170 172 172 174 179 185 191 187 179 172 170 170 170 175 179 185 193 198 204 209 210 210 212 210 210 206 195 186 181 189 193 193 184 177 172 179 186 194 191 190 191 187 183 179 170 158 147 144 142 141 139 137 135 135 132 129 133 139 144 150 158 164 170 177 182 182 178 173 163 143 125 115 126 141 154 165 174 181 180 177 177 168 162 153 150 148 145 142 138 134 
+203 201 196 195 194 194 193 190 189 187 187 188 185 186 186 185 189 196 203 208 214 217 213 201 188 185 190 195 198 197 196 202 215 229 239 242 246 252 253 252 254 253 253 254 255 251 253 252 251 248 247 242 240 233 225 219 218 218 218 222 225 231 232 236 238 236 233 227 222 219 213 211 214 215 213 211 210 207 202 196 190 182 177 174 182 186 193 194 195 195 193 191 188 182 178 174 177 179 182 188 195 201 204 205 206 203 202 199 198 201 202 200 198 194 190 186 179 172 164 157 146 133 123 116 122 130 136 140 146 148 152 156 160 162 168 172 174 176 177 174 169 163 155 145 137 138 142 146 147 147 147 149 150 152 148 140 131 124 118 112 109 109 108 104 97 90 90 99 108 115 117 120 121 124 127 131 129 131 130 115 101 90 111 131 150 157 161 165 159 154 144 142 140 137 142 150 158 158 157 153 154 156 159 164 170 177 177 168 160 157 159 160 158 150 144 137 135 134 131 127 124 120 110 100 93 106 119 131 131 130 129 134 139 143 144 143 142 132 122 111 111 113 117 115 108 103 105 108 112 115 118 120 123 127 132 131 127 123 119 118 116 111 103 93 87 89 90 94 105 115 123 124 122 122 126 131 132 122 110 99 95 94 92 89 85 84 89 97 104 109 111 114 115 117 118 118 116 114 110 104 99 92 85 78 76 84 91 97 101 106 109 104 100 95 91 87 82 80 79 77 73 70 66 70 74 78 80 82 85 80 74 68 75 82 91 94 95 98 102 104 107 113 117 124 129 135 139 142 142 142 144 150 156 162 160 156 157 160 162 163 163 162 161 163 165 167 177 187 198 189 178 168 176 186 195 187 181 170 171 174 179 183 188 193 198 202 207 211 213 212 213 215 214 212 207 200 195 192 186 182 173 167 162 169 175 182 185 188 191 181 174 163 148 132 115 117 125 132 134 136 139 135 131 127 129 135 143 150 157 164 168 170 171 169 163 156 145 126 106 97 116 135 151 158 164 169 170 170 169 165 158 153 145 135 126 123 119 118 
+201 200 202 199 196 196 196 196 197 197 198 198 201 201 200 201 202 204 204 210 218 224 232 232 234 236 236 236 237 234 233 234 238 244 248 248 250 251 254 254 254 254 254 253 250 247 243 241 241 242 239 239 238 226 213 201 200 200 201 209 215 221 229 231 233 232 226 221 218 212 207 207 207 205 202 197 193 189 188 188 185 180 176 175 183 188 195 195 197 197 195 190 188 187 185 182 185 186 188 189 191 194 192 190 190 188 185 183 185 187 192 194 195 197 194 188 183 177 171 163 155 140 126 116 115 118 118 121 125 131 143 154 163 169 173 178 179 181 181 176 167 159 149 139 128 122 117 110 114 118 122 127 129 129 129 124 120 113 107 99 101 107 112 114 115 114 117 121 126 132 137 146 149 148 149 148 139 133 125 125 124 125 138 149 162 164 163 164 159 154 149 150 152 151 154 157 163 163 162 161 162 160 159 161 163 167 164 157 148 146 153 155 155 145 133 126 124 122 120 116 112 109 106 104 103 115 125 137 132 129 125 127 130 133 137 144 148 144 137 131 128 126 125 121 116 112 113 119 124 126 129 129 130 131 131 129 121 115 110 112 114 112 108 104 102 103 106 108 112 115 118 118 118 119 121 125 125 118 112 106 102 98 95 92 88 85 88 93 98 105 110 118 121 122 124 119 112 105 101 100 99 94 88 82 81 88 95 101 109 116 119 115 110 104 93 80 68 67 66 65 69 73 76 79 83 86 84 81 77 73 68 63 70 81 92 101 106 114 114 109 105 105 110 114 117 120 122 124 124 125 128 138 149 156 157 159 159 154 151 148 145 144 142 148 154 159 168 176 184 185 189 190 197 201 207 205 206 205 206 208 211 212 210 210 209 208 207 205 206 204 203 206 211 212 212 212 208 196 183 168 164 160 158 164 172 181 186 192 197 188 179 171 158 145 135 138 141 143 145 146 147 142 135 125 126 132 139 144 148 152 154 154 155 151 144 137 125 107 92 83 106 128 147 152 154 157 158 160 162 158 156 155 146 138 130 127 121 118 
+188 192 199 197 192 188 183 183 183 186 190 194 198 196 190 189 191 196 200 210 218 225 232 238 243 245 245 245 246 245 248 248 248 249 251 251 251 255 252 255 255 254 254 251 246 239 231 229 226 223 221 220 220 204 190 174 179 181 187 196 207 218 219 219 217 214 210 206 207 205 204 201 197 194 191 185 179 177 175 176 176 170 168 170 176 184 192 195 199 199 195 190 188 193 193 197 200 200 201 199 195 192 186 179 173 174 174 175 181 188 192 197 199 204 199 192 185 176 164 154 148 143 136 133 133 135 136 138 141 143 144 146 147 153 162 166 169 171 174 169 162 157 149 140 131 126 123 117 117 118 118 119 119 120 119 118 118 112 107 98 100 108 115 122 126 130 135 136 138 144 151 159 164 165 165 161 148 134 123 133 145 155 162 167 173 171 166 163 160 156 155 157 162 165 167 167 166 165 166 167 163 159 156 153 152 151 145 139 134 134 145 154 154 141 124 115 113 111 107 104 100 99 108 115 124 129 132 136 130 126 120 119 117 117 129 143 156 156 156 156 149 141 132 130 128 126 128 136 140 142 142 141 140 135 132 127 118 109 105 109 113 116 117 117 119 121 122 122 119 115 112 111 114 116 117 119 119 116 115 111 107 102 98 96 93 90 92 95 96 104 112 121 122 123 125 118 111 104 99 101 100 98 94 87 86 90 94 99 107 115 119 118 115 112 99 84 72 73 75 77 77 78 78 78 80 81 82 81 82 82 81 80 86 93 100 104 104 106 105 105 104 105 110 116 120 120 120 120 117 115 114 122 126 130 131 133 132 126 120 115 115 118 117 129 141 152 156 165 169 181 195 208 210 208 206 208 213 221 221 220 223 220 216 217 214 213 213 210 208 206 204 199 195 187 182 176 171 167 162 159 162 165 171 178 190 198 203 207 212 204 197 190 187 184 181 176 169 160 158 158 157 149 137 129 127 132 137 139 141 143 143 140 138 134 129 125 118 108 98 93 108 121 130 130 129 130 134 142 147 151 155 160 156 154 153 145 135 125 
+202 204 207 208 202 195 189 186 183 182 187 190 196 190 184 177 183 190 195 205 217 228 229 229 227 229 228 227 228 229 230 231 228 227 228 227 230 231 237 244 244 243 242 241 235 232 226 222 219 215 213 209 208 193 181 167 168 171 170 185 200 214 210 202 197 195 193 192 194 198 204 199 190 181 177 173 171 166 166 167 162 157 150 149 159 169 177 186 195 204 206 207 208 207 206 207 207 206 203 198 197 193 186 181 174 172 173 170 175 180 186 190 196 199 196 188 182 173 161 149 145 146 147 148 150 150 153 155 157 155 144 134 128 136 145 152 154 158 157 158 157 155 151 146 141 144 148 152 146 138 130 126 124 120 121 122 123 124 120 119 119 118 118 121 125 129 132 135 135 135 133 132 134 141 147 150 149 147 144 140 138 134 142 150 157 157 159 162 156 149 143 147 150 154 153 151 149 147 144 144 141 135 132 135 142 150 154 154 153 153 152 149 145 131 118 107 103 98 95 96 98 100 107 112 117 119 119 120 120 123 124 125 125 128 136 145 152 154 154 152 146 138 130 131 133 135 138 138 139 137 136 133 131 132 132 127 121 115 110 106 105 104 110 118 124 126 127 128 123 118 113 114 116 117 114 111 110 109 108 106 107 106 105 107 110 113 115 116 117 117 119 122 120 118 114 113 114 116 116 113 111 107 100 94 89 89 89 89 97 104 110 113 116 118 107 95 85 89 93 97 91 83 75 76 75 75 78 82 87 91 94 98 102 105 108 106 103 98 97 100 103 106 111 118 120 117 116 114 113 111 112 117 123 127 130 131 132 130 127 126 126 124 125 131 135 137 143 152 160 165 170 174 171 169 166 173 183 193 199 202 203 207 208 208 214 216 222 221 219 216 210 193 175 161 149 137 129 134 142 148 157 166 174 186 194 203 204 204 206 202 200 197 195 192 189 185 176 172 168 168 167 165 157 151 148 143 139 136 138 142 139 131 122 116 116 116 115 114 112 112 113 112 111 109 107 106 117 127 137 144 152 160 159 157 155 148 139 131 
+218 219 221 223 221 217 211 203 195 189 190 191 194 190 186 184 190 193 200 202 206 210 208 205 204 207 213 215 217 221 220 218 214 210 208 207 208 211 220 229 231 230 229 225 224 223 223 219 218 214 213 211 210 203 197 190 180 173 162 178 191 210 207 203 198 198 197 193 196 203 205 202 195 188 181 178 171 168 165 165 160 154 145 143 152 161 169 181 195 208 214 221 227 223 220 216 213 207 202 199 195 189 189 187 186 180 175 171 169 168 166 167 172 174 174 171 169 165 160 156 155 157 158 158 159 157 158 156 156 153 148 143 140 146 148 154 157 159 162 157 150 147 148 148 150 152 157 159 155 147 140 135 131 127 126 125 124 125 125 125 124 121 118 119 122 126 129 131 134 132 125 118 115 124 133 141 147 155 158 144 129 117 124 133 139 146 152 159 150 141 132 134 137 141 137 134 130 126 122 118 114 110 107 117 136 154 167 175 179 177 162 149 133 121 109 97 90 83 81 89 97 105 104 106 105 104 102 101 110 119 129 134 139 144 146 148 149 148 144 143 137 131 126 128 134 141 142 138 134 132 126 121 120 127 130 131 127 123 117 105 94 90 104 118 129 130 130 132 125 121 116 116 116 116 111 106 101 104 104 106 108 110 111 117 123 130 131 131 129 127 123 120 117 111 107 108 114 120 121 119 116 112 103 95 88 86 84 84 91 98 105 109 113 115 106 96 87 92 98 103 98 96 92 87 84 79 80 85 88 92 98 103 108 111 115 111 103 94 92 98 103 108 112 117 118 112 106 104 108 111 118 127 136 144 144 145 147 148 149 151 148 145 141 136 130 122 130 140 151 150 147 146 143 140 139 148 159 171 176 180 181 183 186 190 195 201 204 206 204 202 197 187 173 163 155 146 137 135 131 129 135 144 151 161 167 175 177 180 184 185 188 193 192 185 182 178 177 176 178 177 177 177 174 171 166 154 143 138 140 140 137 127 115 108 110 111 111 107 104 100 99 98 98 101 107 112 121 131 141 145 150 154 152 149 145 142 140 136 
+207 212 219 220 221 224 220 213 204 196 198 197 198 197 194 190 193 197 201 196 192 186 183 180 175 186 198 208 215 217 221 217 215 211 207 202 199 198 205 213 215 214 213 213 215 217 220 217 215 212 215 211 213 208 205 202 187 173 158 172 186 201 204 205 204 205 203 203 204 206 208 208 206 205 197 190 182 179 178 178 176 173 172 171 173 179 185 190 196 201 203 203 205 203 201 198 195 194 194 188 184 180 177 177 175 169 164 158 155 154 152 154 158 162 164 163 165 164 163 164 165 166 168 168 165 161 160 156 153 151 151 154 154 155 158 159 163 168 170 158 146 135 142 148 156 154 153 151 150 150 147 144 141 134 130 125 119 115 111 109 108 111 112 115 116 118 125 133 142 147 146 145 145 142 139 136 134 132 131 127 124 120 125 127 132 136 139 142 138 133 129 132 138 143 137 129 122 123 126 130 131 129 127 133 141 151 159 165 171 167 154 139 128 120 112 103 94 84 81 93 103 114 114 115 116 117 116 117 124 132 139 142 145 149 148 149 147 144 140 138 136 138 138 138 140 141 138 132 126 125 129 131 135 139 143 143 136 131 123 117 111 108 120 132 141 141 141 140 134 127 122 118 115 111 116 121 126 127 130 131 128 123 120 120 122 123 123 122 120 118 117 115 111 107 103 102 104 108 110 113 115 113 101 90 81 80 78 79 89 97 103 106 107 108 99 90 82 88 95 102 106 109 113 105 96 86 86 87 88 94 100 108 113 117 121 115 104 93 91 98 106 111 113 116 115 107 101 99 106 114 123 133 142 150 150 147 146 149 149 151 143 135 128 125 123 122 134 147 160 161 162 161 160 159 158 159 160 163 162 157 152 152 155 158 162 167 170 176 177 179 180 177 176 174 166 159 149 137 126 115 124 132 140 147 154 160 163 166 169 173 182 186 185 179 174 168 165 160 160 162 165 168 167 166 168 162 159 155 150 142 135 126 117 109 109 108 106 99 91 82 82 82 81 93 104 116 126 134 141 140 139 136 134 132 130 129 126 124 
+192 202 210 215 219 217 219 217 212 208 213 216 217 213 210 208 201 198 193 190 186 180 186 191 193 202 209 220 222 228 229 225 223 216 212 204 196 195 196 194 196 200 200 201 208 213 215 215 214 213 216 217 217 209 202 194 183 174 164 172 178 186 187 191 193 189 185 182 185 190 195 201 206 211 205 197 189 186 181 181 183 183 183 186 188 191 193 194 194 196 192 187 185 182 179 178 179 178 180 175 170 165 162 160 156 149 141 130 134 140 145 153 158 164 170 175 180 177 173 171 168 169 167 167 165 162 160 157 153 151 154 155 157 159 158 158 157 156 155 144 134 124 128 133 138 140 144 145 146 146 148 145 141 138 133 127 122 117 110 103 103 107 109 112 116 120 125 138 148 154 161 164 163 152 141 131 121 112 107 112 116 120 123 123 123 125 125 127 125 125 123 130 137 144 135 123 111 118 131 143 148 150 153 152 150 147 149 154 157 153 140 131 122 120 117 111 99 86 82 96 112 123 125 129 130 134 137 140 142 147 151 151 149 150 150 146 143 142 137 133 139 144 151 150 146 141 133 124 116 120 130 144 152 156 158 157 148 139 132 129 127 128 137 145 152 151 150 148 141 134 126 120 113 108 121 135 147 150 153 153 146 139 129 125 123 123 119 117 114 112 112 110 109 107 102 102 104 104 108 113 116 114 103 93 84 81 78 78 86 95 101 98 96 93 88 82 78 84 89 95 99 102 106 105 104 103 102 101 98 99 104 107 111 116 120 116 109 100 99 107 112 117 115 115 112 106 99 97 109 121 131 137 141 145 146 144 142 142 141 140 129 119 107 110 117 123 137 154 169 171 173 174 172 171 169 164 157 150 143 139 137 136 141 149 153 158 161 165 164 163 161 159 157 155 146 140 134 138 143 150 156 162 166 168 167 169 169 167 166 170 176 180 179 172 166 158 149 139 139 147 152 155 160 163 164 166 168 165 157 146 139 130 117 109 106 106 103 98 92 87 84 80 74 88 102 117 122 126 130 125 116 105 104 107 108 107 108 106 
+190 194 196 201 213 220 224 224 224 222 225 229 226 224 220 216 209 198 187 185 181 179 199 219 237 238 242 245 245 247 246 244 242 242 236 234 228 226 222 220 220 216 214 213 217 218 217 220 220 225 222 225 223 210 201 191 181 174 166 167 170 171 175 180 184 174 164 153 161 170 178 189 201 213 209 201 193 185 179 176 173 173 176 178 181 181 185 186 187 191 191 191 188 187 185 183 183 183 182 175 172 165 159 155 151 144 135 129 133 139 143 151 162 169 176 183 188 188 182 175 172 170 170 165 165 163 161 157 153 152 154 158 160 159 158 154 148 141 134 127 120 112 111 110 109 120 131 142 141 143 141 139 136 133 133 134 134 129 122 115 112 111 110 115 125 135 140 144 148 151 150 149 146 136 125 118 113 107 102 98 95 93 96 98 100 99 97 96 102 108 115 122 129 138 134 128 122 119 116 115 118 125 133 136 137 139 141 144 146 140 124 108 99 101 101 100 98 94 94 101 107 113 119 122 126 131 135 137 135 134 133 133 132 133 136 139 140 140 140 139 140 144 145 140 132 123 121 124 126 131 139 147 151 151 151 148 139 133 128 126 125 128 132 138 142 144 145 146 140 136 131 127 125 123 129 137 143 147 152 157 152 149 144 142 141 141 133 125 117 113 113 113 112 112 112 114 116 119 121 121 120 118 112 105 99 91 83 78 86 92 98 90 81 73 74 74 74 78 82 85 88 90 92 101 111 121 120 115 109 107 106 106 109 114 118 118 113 107 109 113 117 118 116 113 107 100 90 86 100 114 126 133 140 146 145 146 146 146 145 147 141 133 128 126 124 122 127 133 137 145 153 162 161 160 158 149 138 125 121 126 133 141 148 156 163 165 165 165 157 150 143 139 134 128 125 121 119 140 160 180 182 181 183 180 175 173 169 163 160 161 162 167 161 156 149 147 143 139 139 139 139 138 141 146 148 154 158 161 157 154 150 137 121 109 107 104 104 101 99 96 88 79 69 83 100 115 118 119 119 113 101 90 90 94 97 98 97 94 
+190 184 181 188 207 223 233 237 240 238 236 229 223 214 204 201 205 210 212 214 212 213 225 235 251 252 253 254 255 254 253 253 255 255 254 254 254 249 249 241 239 235 232 227 225 222 225 232 235 239 236 237 229 217 202 191 177 163 154 157 162 167 177 183 190 188 184 179 180 184 185 193 202 211 209 201 196 189 181 172 170 169 169 169 169 170 174 178 182 186 189 192 194 194 191 188 189 188 187 181 175 168 161 157 148 147 145 142 144 144 146 155 165 177 181 185 189 188 182 177 172 167 161 159 160 159 159 157 155 155 156 156 156 154 150 147 139 131 122 120 118 115 111 107 105 114 124 134 132 133 130 129 128 126 129 134 138 133 127 122 117 112 108 114 126 139 143 144 144 142 138 132 127 120 112 106 106 104 100 91 82 74 76 79 80 76 73 70 81 94 106 113 122 131 133 133 134 120 101 83 86 99 110 119 124 130 134 135 138 127 106 85 74 78 81 86 95 102 107 104 101 101 108 113 119 123 126 131 124 116 109 111 112 113 119 128 136 140 144 147 143 139 135 126 115 103 108 123 138 146 148 149 149 145 142 138 132 128 123 123 123 124 127 130 133 137 140 143 140 137 135 137 136 137 137 137 138 145 151 157 157 156 155 155 154 150 142 131 119 115 116 117 118 120 121 124 126 127 127 125 122 119 115 111 106 98 89 83 90 96 101 95 87 81 82 82 82 87 92 97 97 94 93 97 102 106 105 103 100 98 95 92 94 102 109 112 112 110 110 111 110 109 107 106 99 85 70 63 77 93 109 121 135 146 149 151 152 156 156 158 157 156 154 145 134 120 116 115 112 121 136 151 155 152 150 141 129 118 116 126 135 141 147 151 153 149 148 144 139 133 130 131 131 133 134 135 136 149 162 172 170 167 166 164 165 165 159 155 147 147 144 143 139 137 132 131 136 141 142 133 125 122 129 132 138 144 148 151 151 150 148 136 125 114 117 120 124 122 122 121 112 104 93 97 102 107 108 109 110 105 99 91 91 92 93 92 89 84 
+219 216 208 211 219 229 233 235 238 239 232 226 220 207 197 191 207 221 237 241 247 249 251 254 252 252 254 252 255 254 252 255 253 255 254 254 254 254 248 247 243 243 240 240 239 239 237 241 242 244 240 238 232 219 208 195 179 163 151 156 161 167 177 189 199 203 207 210 205 201 196 200 205 209 209 206 202 196 188 180 173 166 160 157 160 159 163 170 176 180 181 183 184 187 185 184 183 179 176 174 170 167 163 160 158 157 157 156 157 156 157 163 172 179 182 185 187 181 176 169 165 159 152 151 153 153 155 155 158 158 156 155 152 147 143 137 131 121 115 117 119 122 117 112 108 114 119 126 122 119 116 116 115 116 120 126 130 128 123 121 115 109 104 107 115 122 126 125 124 120 114 108 104 102 101 101 105 107 110 106 102 99 98 96 95 91 86 82 86 92 97 98 98 100 105 111 118 115 109 103 100 101 102 106 110 116 119 121 124 118 107 96 88 88 88 91 101 111 118 115 114 112 114 114 116 118 121 123 121 118 117 115 115 113 119 125 131 131 132 130 132 132 133 131 128 124 125 127 128 130 129 129 132 134 136 137 134 133 131 128 126 127 126 128 128 133 137 141 138 135 132 136 137 141 141 142 142 144 147 148 148 148 148 143 139 134 129 124 120 118 119 120 122 127 131 133 131 129 125 121 119 116 111 108 105 101 96 93 98 104 109 108 107 107 102 97 93 100 107 115 110 103 97 94 91 86 87 89 92 89 83 78 82 90 100 107 110 112 113 109 105 101 100 97 93 79 64 56 72 87 103 115 128 140 144 148 153 153 154 156 154 152 149 144 138 131 129 130 129 136 146 157 161 160 159 155 149 141 140 142 143 142 139 136 132 127 121 115 116 116 117 124 131 138 144 149 155 160 163 166 164 161 158 158 159 160 154 144 137 132 129 127 124 122 118 122 131 140 145 148 151 155 155 158 155 149 142 136 134 135 133 129 127 122 132 141 150 151 149 146 138 127 118 112 110 107 110 111 114 113 111 110 108 110 111 112 112 112 
+250 247 246 243 236 231 227 222 218 217 217 217 215 207 200 198 210 221 229 230 233 235 234 233 233 238 243 247 248 248 251 253 251 251 250 252 253 252 249 249 248 249 253 253 253 254 250 248 246 243 238 234 229 224 215 207 193 181 170 175 180 184 192 196 200 203 201 200 194 189 180 180 180 181 184 187 188 185 182 176 170 163 154 153 155 156 161 166 171 176 175 177 178 176 177 177 174 168 163 163 164 165 166 169 171 171 169 170 172 174 175 177 178 181 182 183 183 172 157 142 137 134 132 130 132 132 136 141 147 150 153 155 154 148 142 136 127 119 113 116 119 121 120 119 119 122 126 129 121 113 106 108 110 114 116 119 120 119 118 115 112 107 101 102 105 109 111 110 110 108 102 96 92 94 96 99 105 112 118 119 121 123 116 113 109 103 98 93 92 90 88 82 78 71 80 91 102 108 116 124 116 104 94 93 98 101 104 107 109 111 109 109 106 102 97 99 110 120 129 128 127 126 123 117 113 113 114 116 119 125 129 125 120 117 119 121 126 122 118 110 115 124 132 138 145 152 145 130 115 109 108 109 111 121 131 137 140 139 140 135 132 129 125 123 123 129 135 139 138 134 132 137 142 147 146 146 146 144 141 140 139 137 138 131 124 118 116 118 120 122 123 125 128 132 138 137 131 125 119 118 118 114 111 106 103 104 103 104 107 112 117 116 115 114 109 104 99 101 102 104 99 92 86 81 76 71 72 77 82 81 77 73 76 86 96 102 107 111 112 107 101 97 96 95 92 84 76 72 84 96 108 116 123 130 135 142 148 149 149 150 146 143 140 140 140 139 140 143 148 152 155 161 162 163 162 159 157 155 153 154 155 153 151 148 145 144 141 140 140 140 140 147 151 155 160 165 167 169 172 170 171 171 171 169 163 159 148 138 126 120 117 115 112 109 106 112 125 139 152 162 173 180 174 169 162 148 134 126 128 131 133 130 129 126 132 138 144 145 147 149 145 140 136 136 137 137 139 141 144 144 143 143 142 142 141 142 145 149 
+233 232 233 228 222 217 214 208 203 201 204 205 203 202 199 201 210 216 219 216 217 213 210 205 206 216 227 236 239 243 243 242 242 241 245 245 249 248 251 250 249 249 248 248 247 245 247 243 239 238 236 229 227 223 218 213 203 193 186 189 193 197 199 201 201 198 193 190 179 169 158 152 147 142 148 156 164 165 165 163 162 157 154 156 161 165 168 171 170 170 168 163 160 159 159 157 157 157 158 160 161 161 161 163 165 167 168 167 169 170 171 172 170 170 171 172 171 158 143 128 122 122 121 120 121 121 124 130 139 144 151 155 158 148 142 134 126 118 112 114 116 120 123 126 131 135 137 139 126 110 97 104 111 117 117 115 114 110 107 106 104 103 105 103 100 98 99 106 110 114 114 114 114 113 112 113 116 119 121 126 130 132 129 126 124 117 108 101 96 93 89 92 95 98 104 109 115 116 117 118 115 108 103 100 100 101 105 113 122 125 127 127 126 123 120 119 121 124 125 125 125 125 123 120 119 114 109 103 112 123 133 131 129 128 125 122 117 116 118 119 124 131 139 141 138 137 128 114 100 97 101 104 113 123 134 139 132 126 120 117 114 112 121 128 136 139 144 147 150 152 155 160 164 170 164 159 152 144 137 131 126 121 115 113 110 107 110 115 121 126 129 133 134 136 135 133 125 117 114 113 115 115 110 107 106 108 111 113 117 121 124 120 118 114 110 107 103 97 93 88 82 77 73 67 60 54 57 65 74 74 71 67 72 81 91 100 104 107 109 105 100 97 95 94 94 93 90 89 97 105 112 113 113 112 121 129 137 141 144 150 152 153 155 153 152 150 151 149 148 148 148 147 144 143 139 138 143 148 154 160 170 176 179 181 183 184 184 184 180 176 172 173 174 175 176 179 178 178 175 172 171 171 169 164 157 150 140 131 121 116 117 116 115 117 119 119 123 125 128 136 144 147 141 131 125 123 125 126 133 141 149 142 134 125 126 126 126 131 139 148 151 151 151 155 159 162 162 164 163 166 164 162 160 157 156 154 155 157 
+213 211 208 204 198 195 193 192 193 189 187 185 186 185 186 190 199 208 215 218 220 219 218 215 212 216 221 225 226 225 228 231 232 229 232 237 242 242 249 252 252 244 241 238 239 239 235 231 231 232 229 229 227 224 222 215 207 201 194 189 184 183 181 180 177 174 168 164 167 164 165 159 152 146 145 148 151 150 152 153 152 152 152 155 162 165 169 166 165 161 154 148 143 140 137 138 143 145 150 153 156 159 159 155 155 157 157 157 155 153 150 150 150 150 149 148 147 145 144 141 141 142 144 144 146 147 149 151 154 155 154 155 153 144 135 129 125 121 118 121 123 127 130 131 134 131 130 128 115 105 91 99 106 114 111 106 102 101 102 101 101 102 103 100 95 92 94 101 110 116 120 126 127 126 125 124 123 124 126 130 136 141 139 138 135 126 115 106 100 95 89 99 111 121 122 124 123 121 118 114 112 112 111 107 103 99 106 121 134 143 145 146 146 145 144 139 134 125 119 120 121 121 124 125 125 114 100 91 106 120 135 137 139 140 129 119 107 112 121 129 135 141 145 141 131 118 107 95 84 84 94 104 113 125 137 138 124 110 101 100 97 100 118 133 147 152 151 156 164 169 176 180 183 186 175 165 154 145 135 126 118 110 103 101 101 102 106 111 117 122 125 128 129 124 123 118 110 104 102 105 109 111 108 103 101 104 109 112 115 118 120 116 110 107 103 99 97 92 89 85 81 77 74 68 62 55 56 61 67 68 67 68 72 80 88 94 96 98 101 103 105 107 105 102 102 104 106 108 111 115 117 110 101 92 102 115 125 133 144 152 158 163 168 166 165 162 157 153 149 145 140 135 131 128 127 127 136 142 150 159 168 176 178 181 186 187 187 191 187 184 182 180 182 180 178 177 173 169 161 154 147 142 135 133 133 135 133 128 122 121 121 123 125 129 135 136 124 110 102 109 118 122 115 106 103 112 120 129 140 148 155 144 134 124 120 118 115 123 132 141 146 149 152 157 161 165 168 169 172 171 169 167 166 162 160 159 158 159 
+201 199 197 197 198 196 192 191 189 186 181 179 178 179 182 185 195 204 214 219 226 229 231 229 229 223 218 214 211 205 204 212 216 219 224 225 229 233 234 237 237 237 235 233 234 230 228 225 221 221 218 219 218 215 215 214 207 200 196 188 180 173 166 161 155 149 143 139 152 166 178 174 168 162 157 151 146 144 141 138 139 143 145 148 148 147 144 140 135 131 127 124 121 124 125 128 135 142 149 151 156 159 158 158 156 151 148 145 142 140 136 138 138 138 139 138 135 141 145 150 154 158 162 162 167 168 169 170 168 166 161 155 147 137 128 124 124 125 127 131 134 137 136 134 132 124 115 107 100 93 85 93 100 108 103 96 89 92 98 104 102 101 99 95 94 92 95 101 108 113 118 121 123 126 129 131 130 130 130 131 134 136 135 136 134 126 117 106 98 89 81 86 91 96 95 94 92 95 97 101 103 105 107 105 102 98 103 111 120 125 129 133 134 134 132 128 118 108 102 105 107 113 123 133 139 133 128 122 130 136 144 144 146 145 138 126 116 122 127 133 134 136 136 131 124 116 110 105 101 100 102 105 112 122 132 135 128 121 116 118 119 125 138 152 166 168 170 172 174 176 176 172 170 167 162 155 146 141 134 129 125 122 119 116 113 111 108 104 101 101 103 104 102 96 90 85 85 84 87 92 98 103 99 95 93 98 102 106 106 108 109 105 101 96 93 90 85 85 85 86 83 80 77 71 64 57 55 57 59 62 66 69 73 79 84 87 88 87 91 97 105 109 108 107 104 108 110 111 109 108 104 96 88 80 86 93 100 106 111 116 123 131 142 146 149 154 153 151 147 143 135 128 126 130 134 137 140 141 141 144 145 149 155 163 168 172 176 179 183 187 188 187 184 185 179 173 166 156 145 136 127 121 115 114 119 122 121 120 121 122 123 126 128 133 137 136 128 118 115 126 136 145 141 138 134 137 140 141 146 150 152 141 133 121 116 112 107 113 125 134 142 147 154 157 162 166 170 171 174 173 169 168 165 162 157 155 153 149 
+190 189 188 194 200 206 205 198 194 191 193 190 194 199 202 207 212 216 217 220 218 215 207 200 198 201 206 209 204 204 204 208 213 218 218 223 223 224 225 227 229 227 228 227 224 225 223 218 214 211 206 205 203 201 201 197 195 190 186 186 184 184 181 180 176 172 167 167 171 175 179 178 174 173 168 163 156 153 150 147 145 147 148 143 139 134 128 122 113 110 106 103 104 108 113 120 129 137 144 150 156 162 162 162 161 149 140 132 132 131 131 131 133 135 138 142 144 147 151 153 157 159 161 164 165 166 168 168 169 169 163 159 153 145 139 132 129 125 123 123 124 125 123 122 121 115 109 102 97 91 85 92 97 104 100 96 92 96 102 108 108 106 105 104 103 100 100 105 108 110 114 117 120 125 129 131 129 127 126 127 126 125 128 130 130 121 113 104 95 86 76 75 74 73 70 68 65 72 81 89 95 99 103 102 100 98 98 100 102 106 112 118 120 121 118 114 102 90 84 89 96 104 122 139 154 156 157 160 157 155 153 153 153 152 144 136 128 130 133 137 134 129 125 122 118 115 114 117 117 116 111 106 108 118 129 134 132 131 131 136 141 147 160 171 182 183 183 186 182 179 174 166 156 148 145 143 142 137 134 129 129 130 129 126 121 118 112 105 97 93 93 92 89 82 75 72 73 73 75 81 89 93 91 89 89 90 92 93 94 98 99 95 92 89 87 85 83 81 79 78 73 69 65 62 59 57 58 61 65 68 70 74 75 75 76 74 73 71 71 83 95 102 103 101 100 100 99 97 91 85 80 76 73 71 71 71 71 71 73 73 82 95 109 121 134 146 149 146 143 139 132 125 124 134 140 145 144 144 144 143 141 143 147 153 157 162 165 169 170 174 175 173 170 166 158 153 147 138 126 116 115 119 123 122 115 106 106 110 116 122 125 130 133 134 136 134 129 127 128 142 157 167 165 163 160 157 151 147 144 141 138 126 114 104 102 103 107 113 119 124 130 137 141 149 155 162 166 169 171 170 170 166 164 158 154 148 142 137 
+186 188 190 198 206 215 209 203 196 199 200 205 210 213 222 224 225 226 225 216 209 197 179 163 155 174 189 206 209 216 221 223 228 228 226 224 222 220 218 218 217 218 218 213 209 207 208 211 214 215 211 208 205 201 197 194 191 190 185 188 192 191 192 191 195 193 194 192 188 183 183 181 181 180 180 177 178 175 171 170 163 160 153 147 139 134 128 123 117 114 111 109 107 107 106 110 117 122 131 137 144 151 153 158 159 151 143 135 132 129 127 128 127 127 133 137 144 144 146 146 149 152 157 158 161 164 164 165 167 167 162 159 157 152 147 140 132 125 117 114 109 107 107 108 109 106 104 104 97 93 88 91 95 100 103 105 107 109 111 114 119 121 126 126 122 118 115 112 108 106 108 111 111 112 115 114 110 107 104 100 97 96 101 105 107 100 95 88 87 87 85 79 73 68 70 72 75 80 87 93 93 92 90 90 93 95 96 96 96 97 101 104 106 103 102 99 97 96 97 107 115 124 133 143 151 148 147 147 147 148 150 150 151 153 148 143 140 138 136 134 130 127 122 122 122 123 124 124 126 127 130 131 135 138 140 141 138 134 135 144 151 158 166 171 178 177 175 173 165 160 153 149 142 137 137 135 134 129 125 119 120 122 126 124 121 118 116 113 112 109 104 98 95 92 89 84 79 73 69 74 80 83 84 86 86 83 80 77 81 85 89 87 84 84 82 83 83 78 72 67 61 56 51 51 54 56 60 65 70 73 75 78 77 73 69 67 64 61 64 75 87 96 96 96 96 94 94 93 91 90 87 88 88 88 87 86 86 85 85 85 89 95 100 106 117 124 129 130 132 133 134 136 137 143 146 151 150 153 153 153 149 149 149 151 151 152 155 156 158 161 164 156 152 145 143 138 136 126 119 112 120 131 141 142 130 121 120 128 136 142 148 154 157 159 161 162 157 153 152 158 164 170 166 164 161 155 149 142 134 122 111 99 87 77 82 95 108 115 114 113 117 125 133 140 147 153 158 157 161 162 159 160 157 154 150 148 141 133 
+182 188 193 205 211 223 216 206 201 205 213 220 223 227 227 227 227 226 220 213 205 197 186 174 169 177 185 194 198 206 210 212 214 216 216 215 216 213 209 207 209 207 206 199 193 184 192 206 218 222 222 223 219 212 210 207 203 203 200 201 199 199 197 195 194 188 183 178 178 175 173 176 179 180 181 183 182 179 175 174 167 159 151 146 139 133 130 126 121 119 117 115 111 107 101 100 104 109 115 124 132 140 146 153 156 153 149 144 137 132 125 122 120 116 122 129 134 131 127 123 126 132 139 141 143 146 146 142 140 139 138 137 136 136 136 135 135 134 132 130 129 125 125 124 122 116 110 104 98 94 91 95 99 105 108 110 114 110 104 100 106 118 128 130 130 129 125 120 112 109 106 104 104 101 100 98 96 93 90 85 80 78 82 88 90 86 82 77 82 86 91 83 75 66 72 79 84 89 93 98 93 85 77 79 86 92 93 91 90 89 91 91 89 86 83 84 93 101 111 123 136 145 147 147 146 141 135 129 135 140 146 147 149 150 151 152 151 146 139 130 126 123 120 121 126 131 133 133 131 138 149 157 162 156 151 146 142 137 137 150 161 170 170 173 174 170 165 159 151 142 134 131 129 127 129 129 130 127 119 113 114 119 123 122 121 117 117 119 122 118 110 104 98 98 97 93 87 80 76 80 83 88 90 92 93 87 82 78 81 85 90 87 84 82 81 81 81 78 74 70 66 60 55 55 60 64 69 74 79 81 80 77 75 73 71 69 72 74 78 83 86 90 90 90 90 93 95 98 104 111 117 118 117 116 115 114 113 111 110 109 105 99 93 93 99 105 111 117 121 126 132 137 141 144 147 149 151 154 155 152 150 148 144 143 141 145 148 152 154 156 157 160 163 163 165 167 169 167 167 167 169 176 180 180 174 171 170 170 174 176 180 184 188 190 191 193 187 180 173 171 170 166 162 160 157 148 140 132 123 113 105 101 97 95 101 110 118 121 122 123 125 128 131 134 133 130 131 136 140 143 145 147 150 148 150 150 140 133 
+187 193 202 209 214 224 219 214 209 214 222 228 232 235 233 231 229 222 220 208 202 199 198 196 192 186 182 180 181 179 179 176 173 172 181 189 194 198 200 202 209 218 225 223 221 215 218 224 232 232 228 228 225 220 214 211 210 208 209 206 205 203 200 198 195 184 174 166 164 165 165 170 175 179 180 178 178 173 167 163 156 149 142 137 136 133 132 131 129 127 127 124 121 119 115 113 111 111 111 116 120 126 132 139 144 142 143 141 137 132 128 124 121 118 119 123 127 121 117 110 112 116 120 123 126 129 126 121 116 115 115 115 116 121 124 130 136 143 148 149 151 152 149 147 143 130 117 106 101 97 93 100 109 115 114 113 113 99 84 69 79 95 110 119 126 131 132 130 125 117 108 97 91 88 85 86 91 97 99 98 97 97 97 97 97 94 92 90 86 83 80 83 85 88 90 91 93 96 100 102 98 93 88 90 95 100 102 102 104 107 113 119 120 116 113 110 112 114 116 120 124 129 127 127 125 121 118 116 127 138 148 150 151 152 149 144 141 139 135 132 131 131 131 130 130 128 133 140 147 154 160 166 168 159 153 150 151 153 153 160 165 169 168 163 159 154 150 145 139 133 127 125 124 124 128 134 141 136 131 126 123 122 120 120 118 118 117 116 116 113 109 104 101 101 99 97 96 94 94 98 102 105 105 104 103 98 93 89 91 92 94 90 86 82 81 79 78 77 76 77 72 66 60 61 65 71 76 83 88 90 85 81 78 77 76 77 83 89 93 93 93 93 94 94 96 98 101 105 112 119 126 126 125 124 124 122 123 122 122 121 115 108 100 100 104 108 110 112 112 114 118 119 123 130 135 139 142 142 145 143 142 140 136 132 127 135 143 150 152 154 154 163 170 180 187 192 197 198 199 202 201 199 198 194 190 187 185 184 183 182 180 182 181 180 179 176 173 167 163 157 149 143 142 140 138 131 123 115 114 115 116 121 127 133 135 133 130 129 131 133 133 131 131 126 123 117 117 124 129 133 138 141 143 145 147 150 143 138 
+196 202 206 209 214 217 220 222 222 227 229 233 237 236 239 237 232 230 223 214 205 198 195 192 188 187 185 183 183 185 184 181 174 171 176 185 193 197 197 203 214 230 247 248 250 249 249 248 247 242 235 227 226 220 215 212 207 206 205 206 208 205 204 202 198 192 183 175 170 165 159 159 158 158 158 158 158 156 155 153 149 146 142 141 142 140 140 139 140 135 133 132 129 128 128 124 118 109 108 107 109 113 118 123 128 131 133 133 135 134 133 132 129 127 126 126 125 120 115 111 109 109 109 110 111 112 110 106 103 103 108 111 112 113 112 118 125 133 139 139 140 141 144 146 145 135 125 116 110 103 99 103 105 110 110 109 110 98 86 76 84 96 109 117 126 132 133 131 129 122 110 97 89 85 80 81 89 98 104 108 111 113 110 107 105 105 104 102 94 85 76 86 97 106 104 103 101 102 103 106 103 99 95 98 103 108 111 114 117 124 133 144 148 145 142 136 132 125 120 116 113 109 107 106 104 103 102 102 119 134 152 151 153 152 147 139 132 131 131 132 135 139 142 139 134 126 133 147 159 167 169 173 171 163 156 154 159 163 166 166 168 166 159 153 147 142 135 129 127 124 121 122 123 122 128 137 143 141 136 132 126 121 115 113 112 110 110 110 109 108 106 103 102 102 101 101 102 101 102 104 106 107 104 102 101 95 92 88 87 89 88 84 81 78 77 78 80 80 80 80 75 66 58 58 64 70 75 83 90 94 96 98 100 99 100 100 105 110 113 110 107 107 108 111 114 115 114 115 117 120 121 122 124 122 125 127 130 130 130 131 125 116 109 105 108 109 110 108 108 111 111 111 116 120 126 129 132 133 135 134 132 133 127 120 115 120 126 131 139 148 156 165 171 178 181 185 186 187 187 187 186 181 177 174 171 172 172 172 174 171 169 167 164 161 157 153 154 153 154 144 134 127 126 127 126 121 116 113 117 123 127 131 133 137 137 133 130 132 134 137 137 134 131 129 127 127 128 130 135 136 137 139 139 141 144 145 144 142 
+203 201 200 190 181 174 189 202 216 222 226 229 235 236 240 237 237 233 224 218 207 198 189 184 181 185 188 192 205 213 219 223 224 224 226 227 228 230 230 232 236 241 247 248 246 245 243 239 239 233 230 226 218 212 204 203 203 202 202 205 204 204 201 200 197 194 188 184 173 163 155 147 137 132 132 132 132 137 141 144 148 151 153 156 157 156 155 154 153 145 134 125 122 123 124 121 115 110 107 107 108 108 110 113 115 118 120 123 123 126 127 128 130 130 129 128 126 122 117 114 109 105 99 99 102 102 100 96 93 96 102 108 109 106 102 104 114 122 126 126 124 125 134 140 146 139 134 128 119 112 105 102 100 97 99 102 103 105 109 111 115 117 119 124 127 132 130 126 123 118 113 109 104 99 93 91 95 99 103 110 116 120 119 121 121 119 116 114 110 108 105 106 105 107 101 98 92 98 103 109 102 92 83 83 86 89 97 110 123 128 130 132 131 129 125 123 119 116 112 107 101 98 101 104 105 103 100 101 119 138 155 157 156 158 146 136 125 129 133 138 140 145 149 143 133 123 123 130 137 144 153 160 164 159 153 150 148 144 142 146 150 153 147 143 136 126 115 105 111 119 126 128 129 131 130 130 128 125 120 119 115 112 108 103 96 90 90 97 102 104 102 101 102 104 106 107 103 101 98 98 99 96 95 91 89 87 84 82 80 78 77 75 72 70 73 78 83 83 84 83 76 66 55 54 62 68 76 84 90 96 103 108 112 110 111 112 114 114 114 113 111 110 111 114 116 112 107 103 103 103 104 106 109 114 115 115 114 114 113 113 107 98 89 88 92 98 105 116 127 134 134 134 131 128 122 118 122 123 123 124 125 125 118 110 101 104 106 107 121 142 160 166 170 175 175 176 175 174 173 173 170 165 158 155 157 159 159 160 160 160 155 151 149 148 149 150 149 149 147 144 141 138 134 129 123 124 128 130 134 137 138 137 133 125 125 127 129 133 136 140 139 135 129 128 132 133 137 137 140 139 140 139 139 139 141 142 141 140 
+209 199 187 162 138 119 148 176 201 206 215 223 225 224 226 222 221 218 217 212 209 207 205 203 202 203 203 208 214 221 228 233 238 244 244 248 246 249 250 252 248 250 247 243 239 235 234 226 227 223 222 218 210 197 186 186 191 195 198 196 196 194 190 185 182 179 174 167 159 148 138 133 126 120 118 117 116 126 133 141 146 150 156 158 160 161 161 159 158 148 135 121 117 120 123 119 114 109 107 107 105 104 104 103 103 105 107 108 109 112 114 120 125 130 131 131 131 127 123 119 112 103 94 99 105 110 108 103 99 99 102 105 104 100 96 97 104 111 112 109 106 107 114 121 126 124 124 122 119 114 110 109 106 105 103 101 100 105 110 117 116 117 117 118 120 121 120 118 115 114 116 115 113 110 103 102 102 102 104 111 118 123 127 128 131 127 124 121 122 122 124 117 111 105 98 93 86 93 101 110 101 87 73 71 71 73 86 107 127 133 125 119 115 113 110 108 106 107 104 98 92 89 96 102 107 105 100 98 117 138 157 158 158 159 148 136 122 125 134 142 147 151 155 148 132 119 114 114 114 121 135 151 158 155 152 147 137 129 122 128 135 139 135 133 129 116 101 89 103 115 130 131 134 135 130 123 118 113 113 111 109 107 106 99 90 80 80 93 102 108 109 109 109 111 111 110 106 102 98 97 94 94 92 91 91 87 84 80 80 82 83 79 75 71 72 75 78 79 80 82 81 78 76 77 76 76 77 77 77 77 78 78 78 80 83 84 84 84 84 89 94 98 99 100 101 93 84 75 76 77 78 85 92 100 101 99 95 94 93 91 85 78 70 71 79 88 102 120 138 151 147 143 138 128 118 110 111 112 113 114 117 119 114 111 106 105 105 104 117 134 149 157 163 167 169 169 167 164 163 161 156 149 142 138 143 147 150 148 147 144 142 138 137 138 144 147 145 143 142 146 145 149 141 132 123 127 130 134 135 135 137 130 117 103 98 101 104 105 104 103 103 107 113 118 124 129 136 139 143 146 143 141 140 139 138 136 135 133 
+209 192 181 162 142 129 153 177 200 200 204 208 209 210 211 212 208 206 207 209 210 216 223 227 227 224 225 225 222 216 217 218 219 223 223 225 227 228 228 231 228 228 228 223 221 215 210 205 201 201 201 203 190 176 164 163 170 176 180 182 184 181 174 170 165 161 157 152 141 132 124 120 114 112 107 104 104 116 127 140 144 146 148 148 147 146 146 147 147 140 132 124 125 128 132 131 127 123 120 120 121 118 114 109 108 110 112 113 113 113 116 119 125 131 130 133 134 130 124 119 112 105 96 101 106 112 109 105 101 100 101 102 100 95 91 91 94 97 97 94 89 88 95 102 106 107 110 112 112 114 115 117 118 121 114 105 98 98 98 98 99 102 102 103 102 100 102 105 107 109 112 114 115 114 113 112 111 109 110 114 117 119 119 120 119 115 112 108 108 107 106 104 101 101 100 97 96 101 106 112 105 97 88 84 84 83 88 96 105 109 109 109 111 112 114 115 118 119 119 120 119 120 127 131 135 129 125 122 128 133 139 142 146 149 139 128 119 118 121 122 128 138 146 145 140 132 122 107 92 94 115 135 148 149 153 153 148 141 139 139 138 137 139 140 141 132 125 117 121 128 134 129 124 119 117 116 115 117 117 118 119 118 117 109 99 88 90 104 116 123 126 128 127 121 116 110 108 104 100 99 96 94 96 97 98 92 87 81 84 89 93 87 80 73 72 73 74 76 78 79 84 92 98 97 91 85 79 74 68 64 60 57 56 59 61 63 63 64 65 74 82 89 90 90 89 80 70 62 62 65 69 74 81 87 88 87 86 85 86 86 87 87 88 91 95 98 105 115 126 131 128 125 122 114 106 100 101 103 103 107 111 113 113 114 116 112 109 106 113 127 139 147 152 159 159 158 157 155 151 150 145 139 133 130 133 135 137 134 133 133 132 132 133 140 148 157 157 156 157 154 151 150 143 137 130 126 123 120 119 122 125 115 97 77 67 70 75 76 72 67 70 85 98 109 116 122 126 128 129 130 128 124 123 118 114 108 106 104 
+205 188 173 164 158 154 171 190 207 199 193 187 191 195 195 198 200 204 205 210 218 216 217 216 208 198 189 188 191 191 194 197 199 199 203 207 208 212 212 214 212 209 207 204 198 196 188 181 174 174 178 181 168 152 140 139 140 142 148 156 161 162 156 152 150 146 142 140 134 128 123 120 118 114 107 101 97 106 115 124 125 125 128 126 125 125 126 127 130 129 127 123 126 131 137 137 133 133 131 134 136 134 125 117 114 118 122 124 122 121 120 124 127 130 132 132 133 127 120 115 113 112 109 105 103 101 98 94 90 93 97 101 99 93 88 86 86 85 86 86 85 87 93 98 102 103 102 103 106 109 112 114 116 118 110 101 93 93 93 93 94 96 97 95 94 93 96 98 101 105 109 112 112 112 110 110 110 108 110 112 114 115 111 109 105 101 97 94 92 92 91 94 96 99 100 103 104 107 110 113 111 106 101 99 96 94 92 90 87 90 98 104 110 114 119 122 127 131 135 142 146 150 153 158 160 155 150 145 137 131 122 129 134 140 133 124 116 111 106 103 112 126 138 143 143 143 128 101 75 74 98 121 138 146 154 159 156 156 154 148 144 139 143 148 151 147 143 139 138 137 136 129 119 111 111 114 116 119 119 122 123 125 128 121 112 101 101 112 121 128 129 129 127 119 113 105 103 101 101 102 102 104 104 104 105 97 90 82 86 90 95 91 86 82 80 79 78 79 83 86 90 95 99 100 99 97 94 88 84 79 76 73 70 67 64 61 62 62 64 72 79 87 84 82 79 72 65 56 58 62 66 68 71 73 74 75 76 78 80 83 88 95 103 109 107 107 108 112 116 119 117 115 112 107 103 99 97 96 93 96 101 105 108 112 115 113 107 103 109 118 127 134 138 143 143 144 146 144 141 141 138 137 134 132 128 124 121 119 121 122 124 127 132 143 155 168 168 168 167 161 154 147 140 135 128 124 119 115 116 119 120 112 97 83 78 83 88 92 92 91 93 95 99 103 102 101 100 100 98 96 96 96 97 89 82 75 73 73 
+199 196 195 193 193 195 199 208 214 205 191 185 184 188 190 195 201 204 211 215 221 216 208 201 182 159 135 136 148 157 165 168 170 178 185 193 199 202 205 207 203 199 195 193 186 184 181 173 170 165 159 155 145 131 117 118 123 128 134 140 150 149 145 140 138 134 132 130 128 125 124 124 120 117 107 99 93 95 98 100 97 95 93 93 94 96 98 103 108 110 110 111 114 119 123 124 122 120 120 121 122 121 121 120 121 125 129 132 129 128 127 128 127 127 129 129 129 123 118 113 114 115 117 110 105 98 94 89 83 88 94 100 99 93 86 81 78 74 75 78 82 86 91 97 101 98 97 96 101 102 106 108 108 108 100 92 85 90 94 99 99 100 99 98 99 98 99 99 99 100 105 108 106 100 92 88 90 91 94 101 108 110 103 97 90 81 75 68 74 80 84 93 101 108 109 111 112 112 113 111 109 108 105 106 108 110 111 115 116 119 124 129 133 134 133 136 139 141 143 147 149 150 152 154 154 150 145 142 138 137 134 140 144 150 143 136 128 122 116 110 116 123 129 131 128 125 115 103 91 91 105 119 133 145 154 162 161 162 162 159 156 154 157 157 158 154 148 144 140 135 129 128 127 125 127 127 129 124 119 113 117 125 134 134 127 120 117 117 115 114 112 110 108 104 99 95 97 97 100 107 114 120 117 113 110 100 92 84 86 90 93 93 94 94 91 86 83 84 88 92 95 98 100 102 104 106 106 101 96 90 87 83 79 73 67 61 63 64 67 73 79 85 83 81 80 75 69 63 62 63 62 62 64 65 66 69 71 76 83 89 96 101 105 109 110 112 115 119 123 126 124 122 120 115 111 109 100 91 82 86 90 95 101 106 113 109 103 98 102 111 118 121 125 128 131 133 136 137 137 137 139 137 137 134 124 113 105 108 112 115 118 122 126 132 141 146 148 154 156 147 135 122 117 116 115 116 118 121 121 120 120 114 108 101 98 103 107 111 112 113 113 108 104 99 95 90 85 87 88 92 92 95 95 92 88 86 88 93 
+194 208 216 226 234 237 231 228 223 211 198 192 196 197 203 210 212 219 221 223 225 220 217 209 193 176 156 147 145 142 146 152 158 165 171 179 187 190 196 197 193 186 182 181 177 174 174 172 169 156 144 130 119 107 97 107 118 129 138 147 153 155 155 152 149 145 141 138 136 134 132 127 124 121 113 107 101 97 96 93 90 86 83 85 87 88 92 97 102 102 104 105 108 111 115 114 111 111 109 107 106 110 117 123 127 131 135 137 136 137 134 131 128 127 124 122 121 117 116 113 115 116 119 118 117 116 108 100 92 90 92 94 93 90 88 84 80 75 74 78 81 85 92 98 102 98 94 92 93 93 94 98 101 104 97 90 83 89 95 99 99 100 101 100 100 99 96 92 88 90 94 98 95 86 76 74 79 83 89 97 107 108 99 92 83 73 64 57 67 76 86 96 108 118 117 118 116 116 112 110 108 106 104 109 116 125 132 136 142 146 151 153 155 150 148 147 148 148 149 149 149 149 149 148 148 145 140 135 139 142 145 149 154 157 152 146 138 130 124 117 118 120 123 119 115 109 107 105 106 107 113 118 126 140 155 164 164 165 166 167 167 166 164 165 161 159 152 149 143 135 128 132 137 141 140 138 136 129 117 107 114 126 139 141 135 129 123 116 108 102 101 100 98 99 98 99 98 95 95 104 112 120 118 113 109 102 93 85 86 89 92 94 96 97 93 87 81 78 77 76 79 83 86 88 90 90 89 85 82 79 77 75 73 70 68 67 71 74 79 80 81 83 84 85 88 84 81 78 72 65 58 57 57 58 60 63 66 74 86 98 105 106 107 109 111 114 117 119 122 124 122 120 120 116 113 111 103 95 87 91 94 98 104 109 116 115 112 111 108 107 105 109 119 129 136 141 146 149 150 149 147 144 139 131 118 104 92 97 104 110 114 116 118 122 123 125 131 139 145 134 119 104 103 107 113 118 123 129 129 124 118 113 110 106 104 106 108 111 115 117 120 116 112 108 101 96 88 93 101 109 107 107 107 106 105 106 111 117 
+207 217 225 231 237 240 234 228 220 201 185 174 184 196 203 212 221 229 227 229 227 224 223 218 212 201 191 173 154 136 135 145 153 159 164 169 173 178 182 182 182 178 176 169 163 157 155 153 150 143 137 128 124 116 108 116 125 136 144 149 154 158 158 159 157 153 148 144 145 141 138 132 126 122 120 117 112 106 101 96 95 93 93 98 102 105 110 115 118 119 119 119 121 122 122 124 124 126 127 126 127 127 129 132 132 133 130 130 128 127 125 125 122 120 119 116 116 116 114 114 115 117 118 120 122 124 116 107 97 94 92 91 92 92 91 88 82 76 74 77 79 85 92 100 102 97 93 88 85 82 81 88 94 99 95 91 86 89 92 96 98 101 103 101 97 94 87 80 72 74 78 82 80 73 67 69 80 89 99 105 112 115 108 101 95 88 82 80 89 99 108 114 119 124 121 119 116 111 106 101 93 85 77 88 107 126 135 141 146 149 151 151 149 142 135 130 128 125 125 125 125 128 133 140 143 138 136 133 136 139 142 145 149 152 142 129 119 118 117 118 119 123 126 125 125 124 118 109 99 97 104 110 118 129 139 148 150 152 156 156 156 157 158 158 159 154 150 145 143 142 139 145 149 156 149 139 132 125 118 112 116 127 140 138 132 123 115 106 98 93 95 97 99 104 109 111 103 94 88 96 104 111 110 109 108 101 92 84 86 89 91 94 97 99 95 86 78 72 66 61 61 68 74 76 75 75 73 73 72 71 70 71 71 72 72 73 78 82 86 85 84 83 83 85 84 81 79 76 72 66 60 59 60 61 63 67 69 75 84 93 100 102 106 106 100 95 90 93 96 96 99 101 103 104 105 105 105 105 105 105 108 108 112 117 122 124 123 123 115 104 92 95 114 127 139 143 148 151 150 149 146 138 131 120 107 96 86 97 109 118 118 115 114 116 119 121 126 129 134 127 119 109 113 122 131 136 139 140 137 128 117 110 108 105 105 106 108 109 116 121 126 124 119 117 110 104 98 105 111 117 118 118 120 117 115 112 108 102 
+216 226 231 235 235 234 228 219 208 181 153 140 156 172 188 201 212 221 221 225 228 222 217 212 207 201 194 182 167 151 148 155 161 163 164 164 163 165 166 166 166 167 164 156 149 141 136 133 129 132 135 137 139 141 141 143 144 146 148 153 155 155 155 155 153 150 146 146 146 146 143 137 131 128 125 123 119 113 108 102 103 101 101 108 114 120 126 130 133 133 134 134 134 133 133 135 138 142 143 144 144 144 141 141 135 130 126 120 116 111 109 111 113 114 114 114 113 113 112 112 114 116 118 115 113 110 107 104 100 100 102 104 105 107 108 103 96 88 84 84 83 86 93 99 103 100 99 96 93 90 89 93 98 100 96 91 87 87 87 87 91 94 98 94 90 85 79 70 61 62 66 70 70 68 64 68 80 91 101 105 110 113 108 104 100 97 94 93 102 110 119 120 120 122 119 116 112 108 101 95 82 70 58 74 99 124 137 143 150 152 152 151 145 135 124 117 112 108 104 105 105 108 119 130 137 135 133 131 134 139 141 144 145 147 133 119 104 107 112 118 122 126 129 132 134 136 127 111 94 89 98 105 113 119 127 132 137 142 147 147 149 152 152 155 154 150 145 141 142 146 150 153 158 163 153 140 127 122 119 117 120 128 136 133 125 114 106 101 95 92 94 97 99 103 108 109 103 98 95 101 107 113 111 110 108 100 91 82 83 85 87 88 87 88 85 81 80 75 70 64 62 64 65 67 69 70 72 72 72 73 76 80 83 82 81 80 83 86 89 88 86 85 81 77 72 71 69 68 67 65 64 64 66 68 70 71 72 77 82 88 93 98 103 104 91 79 71 72 73 75 79 83 87 91 95 98 103 109 115 116 117 116 120 123 127 130 130 132 127 119 111 111 117 122 125 127 128 129 130 131 131 121 109 99 94 90 86 102 116 132 125 117 110 112 115 119 120 121 124 122 118 114 120 128 135 139 140 141 138 127 115 108 108 108 109 112 115 118 124 129 135 132 129 129 125 121 116 117 119 122 123 127 131 127 122 116 104 88 
+223 228 233 231 232 227 220 211 198 177 156 141 156 171 186 194 205 215 216 219 222 216 210 204 199 193 192 187 182 178 176 177 179 178 173 167 162 155 148 145 146 146 144 139 133 128 128 126 127 129 133 136 141 145 151 149 149 148 148 150 151 150 149 148 146 144 142 143 145 150 147 142 136 131 129 126 124 120 116 112 110 107 107 116 124 132 137 142 147 148 149 150 151 152 151 150 150 149 146 141 137 136 135 135 129 125 119 113 106 101 98 99 101 104 105 107 108 109 109 110 112 113 116 112 108 103 101 100 99 103 106 112 114 116 118 113 105 98 93 90 86 87 93 99 103 103 105 105 104 102 102 104 104 105 99 93 86 84 80 77 80 82 86 82 79 75 68 62 56 56 60 64 66 69 71 74 80 84 89 91 95 97 94 93 90 90 89 89 92 95 99 99 99 98 99 101 101 101 101 101 94 85 76 86 102 119 131 140 150 153 149 150 145 139 132 127 123 118 116 116 117 119 123 128 133 136 140 145 148 152 154 154 151 151 142 133 125 124 125 127 128 130 131 130 127 124 114 103 90 91 103 118 127 128 130 132 131 133 136 143 151 158 154 152 149 144 140 136 143 149 154 155 156 157 146 133 118 119 123 129 129 127 126 120 112 102 98 99 99 99 99 99 99 96 93 93 99 103 109 112 118 121 117 113 108 99 90 81 80 82 83 80 77 72 74 77 81 80 73 67 63 61 59 59 62 66 69 70 71 74 78 83 86 84 82 80 82 83 84 84 87 89 85 81 76 75 74 73 73 77 79 82 85 89 89 88 85 85 85 84 84 89 94 95 88 81 75 71 67 63 66 68 71 78 85 92 101 110 119 122 124 125 127 129 131 133 136 139 137 134 128 126 120 117 115 115 114 114 116 117 115 107 99 93 94 95 98 108 120 129 122 114 107 109 115 120 124 127 131 130 125 121 119 119 119 119 127 132 131 122 113 107 109 110 113 116 122 127 131 135 140 138 137 136 132 126 122 118 115 112 111 110 108 106 104 101 97 92 
+223 228 231 229 228 224 212 203 192 184 174 170 180 190 201 205 210 214 209 205 203 197 193 186 188 190 190 187 187 186 183 181 180 176 169 164 157 147 135 129 129 128 128 124 119 117 120 123 126 129 130 132 137 141 146 145 146 143 143 141 140 138 136 134 129 126 122 121 122 124 123 122 119 119 124 127 127 125 119 117 115 113 114 120 127 134 140 145 150 153 155 157 159 160 162 157 155 154 147 138 130 127 127 126 124 119 114 107 99 92 87 88 90 92 95 99 102 103 104 105 108 109 112 109 108 107 102 96 91 93 97 99 101 99 97 94 91 87 87 90 92 93 94 96 98 100 104 105 104 103 102 102 103 101 95 88 81 78 75 71 75 78 82 81 79 78 74 69 64 62 63 63 65 68 70 72 73 76 77 80 82 83 82 80 79 81 83 84 85 86 86 85 83 81 85 90 92 97 100 106 101 95 91 97 106 115 125 136 147 149 146 144 142 140 138 135 132 129 127 128 127 128 127 127 129 139 147 155 159 162 166 161 156 150 149 148 144 141 138 135 133 134 132 127 120 114 107 99 91 95 110 128 137 135 134 132 128 124 124 137 152 164 155 150 142 140 135 131 140 149 156 157 154 153 144 130 118 119 126 132 132 129 125 121 114 109 106 107 105 105 105 105 104 102 99 97 104 110 116 119 124 129 127 123 120 111 101 89 86 84 82 80 79 77 78 79 80 78 75 71 69 69 69 68 66 63 62 64 66 67 69 69 70 69 69 68 68 68 69 75 84 92 93 93 93 90 87 84 86 92 98 103 108 113 112 106 100 93 87 80 78 82 86 88 84 81 79 70 62 53 57 61 64 72 81 89 99 109 120 123 124 126 125 127 126 127 127 126 123 118 111 110 110 113 115 116 116 117 112 106 101 101 102 103 107 110 115 118 121 123 117 111 103 107 114 121 126 132 138 135 129 123 117 112 107 106 112 119 120 113 105 101 101 101 104 112 119 126 132 136 142 138 136 134 127 120 112 105 99 92 87 81 75 75 79 84 89 95 
+222 220 223 218 216 213 209 202 197 191 185 182 193 201 206 206 207 207 197 188 181 180 176 172 177 182 186 188 184 184 181 174 171 165 158 151 144 136 129 127 128 128 130 134 136 137 139 141 141 140 142 142 139 135 134 133 132 131 131 130 128 126 124 119 114 108 103 100 101 101 102 101 101 107 118 128 131 127 123 120 119 117 118 121 124 127 131 137 141 142 145 147 146 146 144 139 136 131 124 119 113 110 108 106 104 101 99 95 90 84 82 84 87 90 92 94 96 97 98 99 102 104 106 105 104 103 96 89 83 84 87 89 87 83 79 78 78 78 83 90 99 100 95 92 93 98 102 105 103 102 99 99 97 95 87 79 73 72 70 68 73 78 82 85 89 91 91 87 84 80 75 69 66 63 61 60 62 62 65 69 74 75 72 69 68 73 78 82 86 89 92 90 89 88 90 90 93 93 95 96 95 94 92 99 106 114 122 130 139 138 134 130 127 127 127 128 131 137 138 134 130 129 131 131 133 142 149 157 157 156 156 154 151 148 148 150 150 147 144 139 131 125 119 117 116 118 119 117 116 120 130 139 145 142 140 136 127 119 115 131 147 160 151 141 132 132 134 133 139 145 151 154 156 158 153 143 135 132 129 127 129 133 138 139 139 136 133 124 115 109 113 116 118 118 117 115 117 119 121 126 131 136 137 137 138 125 113 101 93 88 81 82 83 85 84 82 79 77 76 76 77 76 78 76 70 63 59 61 63 63 62 60 59 58 58 58 60 61 63 71 80 88 89 90 90 87 82 78 81 89 98 104 109 114 115 109 106 102 97 92 89 88 86 85 83 80 77 69 60 51 58 64 71 78 83 91 100 108 117 119 122 123 123 122 121 120 116 113 107 101 97 96 104 110 117 119 121 120 110 99 89 94 98 101 105 109 113 109 106 100 97 94 92 100 107 116 123 129 135 132 124 116 108 103 99 98 102 105 106 99 95 90 89 91 90 103 115 128 132 137 140 136 132 128 122 115 109 104 99 92 89 84 80 78 80 80 81 84 
+222 217 215 208 204 204 207 211 205 197 189 188 192 195 199 195 190 187 175 167 160 166 172 177 182 187 193 191 188 186 181 175 168 163 157 148 145 140 134 134 132 134 139 145 153 157 158 158 158 158 159 155 141 127 116 115 115 114 116 118 119 113 109 104 98 92 86 87 89 92 92 91 90 95 104 114 119 120 119 121 120 121 122 124 125 126 126 129 131 130 130 130 129 128 126 122 116 112 107 102 97 93 88 84 83 84 84 83 80 76 77 83 90 92 91 91 90 90 90 91 94 98 100 95 88 82 81 78 76 77 79 82 79 76 72 74 78 81 87 92 98 99 96 94 94 96 99 99 99 98 96 98 97 96 91 85 80 79 79 77 82 84 88 90 93 95 95 95 94 89 82 76 71 68 64 62 62 60 61 63 66 66 64 61 61 67 73 79 83 87 91 91 90 89 90 91 92 91 90 88 89 92 95 101 107 113 118 123 126 125 121 118 115 116 116 122 132 141 146 139 132 129 133 136 141 145 152 157 154 151 147 147 146 145 149 152 157 152 148 142 130 118 106 107 115 123 129 133 138 143 145 148 149 148 145 139 128 118 112 125 138 151 142 133 124 129 131 136 139 141 144 148 152 157 154 150 145 140 135 127 129 136 142 146 147 147 143 135 125 121 123 126 128 127 127 127 131 132 136 138 142 143 143 139 137 126 113 100 94 90 85 84 84 84 83 81 81 80 77 76 76 77 80 79 76 72 69 68 65 63 61 61 60 57 54 51 57 64 69 72 75 76 76 76 75 72 68 64 69 79 89 98 104 111 114 113 111 109 106 103 98 92 86 82 78 77 73 68 62 57 65 72 80 85 88 93 98 104 109 109 107 105 105 107 108 108 107 106 104 103 101 104 112 121 127 126 126 122 108 95 84 86 88 90 94 97 101 93 84 74 75 77 81 90 100 111 120 126 132 128 116 105 96 94 93 92 95 98 97 94 90 87 88 89 90 101 112 123 127 129 132 128 121 117 113 113 113 110 109 107 104 101 98 95 87 78 73 73 
+222 222 222 222 221 222 223 225 222 215 211 206 206 209 208 199 193 184 172 159 151 159 172 183 186 193 199 195 192 190 182 178 173 169 165 160 162 163 164 163 160 160 159 159 160 159 157 156 154 155 154 153 142 130 117 110 105 98 102 107 111 106 102 96 89 83 75 76 80 84 84 81 77 80 89 98 105 110 116 120 122 124 124 127 129 131 127 124 121 114 107 100 104 108 110 111 111 111 105 99 94 91 89 88 85 84 82 80 79 78 78 81 84 86 87 87 87 86 85 84 87 89 92 88 84 78 76 74 71 73 75 75 74 71 67 72 78 84 89 93 97 98 97 96 95 96 95 95 94 93 94 97 98 100 97 93 92 91 92 91 93 95 96 96 94 93 94 94 93 91 87 83 82 81 80 77 75 71 68 64 60 58 58 58 59 64 68 72 74 76 78 79 81 83 87 90 94 92 88 84 88 93 98 104 110 115 111 106 98 100 107 117 117 113 109 113 122 133 138 133 129 125 132 138 144 148 152 156 150 146 140 142 141 143 145 149 152 151 148 145 132 113 95 98 113 129 137 142 146 149 147 149 148 146 143 140 136 131 127 127 126 126 126 129 129 132 136 140 138 135 133 136 141 144 145 144 144 142 139 136 136 138 140 139 139 136 136 137 139 138 136 134 132 133 134 134 141 149 154 154 152 150 145 138 133 120 109 97 92 92 89 86 85 82 82 83 83 82 79 77 76 79 82 83 81 81 78 73 67 62 61 60 59 56 52 49 56 64 70 69 67 65 64 63 62 62 62 63 68 78 86 94 99 105 106 103 97 92 85 78 73 71 70 70 68 66 64 69 73 78 84 89 94 95 95 96 96 97 96 94 89 83 84 88 93 97 97 99 100 104 107 112 121 131 135 133 130 126 115 103 94 98 98 101 104 104 105 97 86 75 78 85 91 99 105 110 115 119 123 117 101 87 79 84 88 91 93 94 94 92 88 87 88 89 91 100 109 119 121 120 120 115 109 104 105 109 114 117 116 118 119 118 118 114 106 99 94 92 
+219 223 228 234 240 241 239 242 240 237 234 233 234 237 233 230 226 218 206 197 189 192 194 199 200 201 204 195 192 187 185 180 178 174 172 170 172 175 179 178 172 169 168 165 162 159 156 152 149 150 147 146 140 135 127 112 97 84 90 98 103 106 107 107 99 91 81 80 80 81 79 77 74 76 79 84 89 95 100 104 106 108 111 114 117 118 115 111 107 100 93 85 89 94 97 102 106 109 104 97 89 89 90 91 88 85 82 80 81 81 80 77 75 76 80 84 85 82 80 80 80 81 82 87 91 94 86 80 73 75 77 78 77 74 72 73 76 79 80 82 83 83 84 84 84 82 79 79 80 83 85 92 97 101 98 94 92 91 91 90 91 92 92 91 89 88 86 85 84 82 79 77 79 84 88 86 81 76 71 66 61 59 62 64 65 67 68 69 69 71 70 73 75 77 84 90 96 92 86 82 88 96 105 110 113 116 108 95 81 85 100 117 121 112 106 107 117 126 132 128 127 125 131 140 146 149 150 150 145 138 133 134 137 139 143 147 149 149 147 148 132 109 86 92 113 134 145 148 153 154 150 149 147 143 138 136 139 140 139 128 119 112 119 129 137 138 139 139 136 131 126 130 131 135 136 136 137 138 138 137 136 137 137 137 136 135 136 141 146 149 145 142 139 139 139 139 144 150 154 150 147 143 137 130 125 116 109 102 99 98 96 92 86 81 80 83 85 85 85 85 85 84 83 82 82 82 81 74 67 61 58 56 53 53 52 53 57 61 64 62 58 54 52 51 50 54 60 66 73 79 85 91 95 98 98 91 83 75 65 56 49 54 58 62 61 60 59 70 79 89 93 94 97 96 95 93 91 89 87 87 87 88 92 96 100 104 106 109 112 114 117 120 126 131 135 136 136 135 132 129 125 127 128 130 127 122 118 107 95 83 86 96 105 109 110 110 111 113 115 108 94 81 75 81 87 90 88 86 84 81 79 76 81 85 91 98 104 111 105 99 92 89 87 87 94 103 112 121 124 128 131 133 136 135 127 122 116 111 
+188 189 200 210 223 229 235 237 237 236 234 233 232 232 233 234 232 232 228 219 216 215 214 213 211 208 205 197 190 183 181 181 179 177 178 177 174 171 168 156 147 134 130 128 127 125 127 125 127 130 130 130 128 123 119 109 99 89 92 95 100 103 106 110 103 96 88 85 82 80 77 74 70 70 71 72 74 78 81 84 86 86 87 90 93 94 92 91 91 92 94 95 95 96 97 99 104 106 103 98 93 90 87 85 85 86 86 85 83 80 79 79 78 78 78 80 81 82 83 83 82 81 81 89 97 102 92 83 73 76 78 81 79 77 75 75 76 76 74 71 70 70 72 74 73 68 63 62 68 72 78 86 95 101 97 93 90 89 86 85 84 83 82 82 82 82 77 71 66 64 61 60 67 77 87 87 80 73 71 72 73 75 78 81 81 79 76 74 75 76 76 77 78 79 84 88 93 91 87 85 94 105 116 119 123 126 119 111 101 105 117 130 133 125 119 119 128 138 142 141 140 140 137 135 133 136 137 138 135 131 128 132 138 141 144 147 147 147 145 144 131 114 97 104 121 139 150 154 160 159 156 151 146 139 129 125 130 133 137 134 131 130 134 141 145 143 139 135 135 135 133 134 132 130 127 123 118 121 126 131 134 136 136 137 138 141 142 147 151 154 150 150 148 146 145 144 144 144 143 140 136 132 126 122 118 114 110 107 105 105 105 99 90 80 78 83 87 89 91 93 93 89 86 84 85 84 83 76 68 61 58 55 52 54 55 57 60 61 63 61 57 54 52 52 51 55 59 65 69 73 76 79 83 87 86 79 71 64 62 61 61 64 67 69 70 70 71 76 80 85 87 88 90 88 87 86 84 81 78 83 93 102 108 110 112 115 117 121 121 124 126 128 129 131 131 132 132 134 133 132 131 129 128 125 121 117 114 106 98 89 92 101 107 109 111 112 113 114 114 112 105 97 94 93 91 88 81 74 68 66 63 62 71 81 91 95 99 103 94 82 72 71 76 79 88 101 113 121 124 126 128 129 129 128 125 122 119 117 
+159 159 172 190 206 217 221 230 229 228 221 217 209 204 203 207 208 208 206 204 201 200 195 191 183 178 171 167 164 161 164 166 169 170 170 168 161 154 148 136 123 107 101 99 98 97 100 100 104 109 114 115 110 107 102 106 108 107 105 100 98 96 95 94 94 94 93 92 91 88 87 85 84 81 77 74 72 73 74 74 74 74 75 77 80 81 78 77 77 82 88 93 92 92 91 95 99 101 100 98 95 90 84 79 82 88 92 91 85 79 79 81 85 84 79 76 76 82 90 93 91 89 88 93 98 101 92 82 72 76 79 82 81 79 77 76 76 77 73 69 65 68 76 84 86 83 80 80 83 86 90 92 97 97 92 87 83 83 84 84 87 89 90 87 86 85 77 69 61 60 61 61 70 81 93 92 86 78 74 74 73 75 82 86 89 87 84 82 83 83 83 83 83 82 86 90 93 94 93 93 101 112 123 126 129 130 129 127 122 125 132 139 141 135 128 131 138 147 151 151 152 149 142 133 128 128 128 127 125 123 121 127 134 141 143 145 147 143 141 136 128 117 106 112 126 142 149 154 160 160 156 152 146 136 125 118 125 132 139 140 141 144 147 149 150 144 138 131 133 135 136 134 129 125 121 118 113 114 121 124 127 131 133 137 143 147 151 153 155 155 152 147 145 141 137 134 130 127 126 124 122 120 121 120 122 120 117 115 113 110 109 104 97 91 89 92 94 97 99 101 102 100 96 95 91 90 87 79 72 65 63 61 58 60 62 63 64 65 66 66 64 62 62 60 59 60 60 62 63 64 65 67 71 75 75 67 58 53 59 66 72 74 76 77 79 81 83 83 83 83 83 82 82 84 87 92 94 93 93 98 106 113 117 116 114 115 116 119 120 120 122 122 123 121 119 116 112 108 108 108 108 104 102 97 99 100 102 102 99 97 99 104 109 111 113 113 113 112 110 107 105 101 97 91 87 82 77 72 67 64 62 59 69 79 89 94 96 99 94 89 82 82 86 89 96 106 115 119 119 119 118 118 115 114 116 121 123 123 
+145 135 151 166 185 191 195 201 201 201 200 197 193 190 189 191 193 194 195 194 191 184 179 171 156 142 133 133 134 133 139 144 150 150 147 146 136 128 118 116 113 108 106 108 107 107 107 105 106 107 108 108 107 105 105 111 116 120 113 109 103 98 93 87 90 94 97 97 97 96 98 97 98 93 84 76 72 70 69 68 67 67 68 71 74 75 72 69 68 69 72 73 73 72 72 80 88 97 94 92 90 90 89 89 90 93 96 94 88 84 83 85 86 86 80 76 76 82 89 93 91 89 89 92 95 96 89 82 74 77 79 81 81 79 78 78 77 77 73 68 62 68 80 92 98 98 99 100 101 103 103 102 100 96 88 81 75 79 82 86 93 99 105 101 97 92 83 74 66 67 71 75 83 93 103 103 96 89 81 71 60 59 67 76 82 86 90 92 94 96 96 95 94 92 96 99 101 105 107 109 112 113 115 119 124 129 133 137 139 139 138 137 136 135 135 136 143 151 155 152 152 150 147 143 141 137 131 127 119 112 104 113 120 129 129 132 131 129 129 127 122 115 110 112 119 128 135 137 140 141 141 139 137 135 130 129 136 142 148 148 149 148 148 146 144 141 136 131 133 134 135 131 124 116 117 119 120 121 120 120 122 126 131 136 147 156 160 159 157 156 150 144 137 129 121 114 112 108 104 106 108 110 116 124 130 130 127 125 121 118 113 110 106 103 102 102 102 104 107 110 111 108 106 102 97 93 88 83 77 71 69 67 63 64 65 65 67 68 70 68 66 64 63 62 62 64 65 68 67 65 61 61 63 66 66 61 56 55 66 77 87 88 90 92 93 95 96 94 90 86 83 79 75 82 94 106 113 116 119 122 124 125 125 119 115 112 115 118 119 118 117 115 112 109 108 102 97 91 92 90 88 88 86 87 88 90 91 94 98 102 107 112 117 117 115 111 105 99 90 84 82 79 76 75 73 73 73 73 73 69 65 61 69 78 87 90 93 95 94 91 89 89 89 88 92 101 109 113 111 110 109 109 109 110 112 114 116 114 
+139 123 137 148 164 165 168 166 169 170 173 179 182 187 190 192 195 195 196 196 193 195 193 188 175 163 152 147 143 139 142 145 146 143 139 134 123 111 100 100 103 107 109 112 115 114 113 111 110 106 102 103 107 111 115 119 123 126 123 119 115 109 101 95 93 94 93 96 99 102 103 106 107 102 96 90 86 84 84 81 81 79 79 82 82 82 79 76 73 71 70 68 66 64 63 72 80 91 89 88 86 89 93 98 98 98 98 96 93 90 89 87 86 84 81 78 78 81 86 88 86 85 83 84 84 86 84 83 82 79 77 75 77 79 80 78 76 74 72 69 67 71 80 89 93 91 90 90 90 89 90 90 90 89 86 82 79 80 81 82 86 90 94 91 87 84 77 70 61 67 73 79 87 93 101 102 96 91 82 69 56 55 65 76 84 92 96 103 101 103 103 100 98 97 99 101 103 109 115 121 118 113 110 114 122 127 134 142 148 146 142 136 134 135 137 139 145 150 153 149 148 146 148 150 150 142 135 125 116 105 96 103 111 118 120 120 120 120 120 120 118 115 114 114 115 116 120 122 125 128 129 130 132 136 137 140 147 151 155 154 156 156 149 143 136 135 134 134 134 136 138 134 126 123 122 128 131 132 130 129 129 134 138 145 154 163 165 161 158 153 147 139 129 123 113 105 102 100 97 100 104 108 116 123 129 128 124 119 115 111 108 108 111 114 115 115 115 114 112 112 110 105 102 97 92 88 85 84 84 83 78 72 68 65 63 62 64 69 73 71 65 61 60 61 64 67 71 75 74 67 60 55 56 56 56 54 54 56 70 85 98 99 99 100 102 105 108 104 100 96 93 89 87 96 110 123 130 135 137 138 139 136 135 128 123 118 114 109 105 101 95 93 94 96 97 96 92 91 85 81 74 76 82 86 85 84 82 87 97 107 114 120 127 125 117 109 101 90 79 73 73 74 77 79 83 86 91 95 98 97 93 90 93 97 99 100 98 97 94 92 87 83 77 70 73 84 96 103 102 101 100 102 105 107 109 109 110 107 
+172 170 174 178 182 184 183 184 183 179 179 177 179 180 184 188 189 193 196 198 200 200 202 200 192 182 172 166 159 153 152 152 150 145 138 131 119 104 90 92 93 96 99 102 105 104 106 106 102 96 90 92 100 111 116 118 123 124 118 114 109 104 99 94 92 90 88 93 99 103 108 112 115 114 109 104 104 103 102 102 100 99 99 99 99 99 96 95 94 89 87 83 79 75 72 77 83 87 88 87 87 90 93 96 95 92 90 89 90 91 91 90 91 90 88 87 88 89 92 93 90 88 85 83 81 79 80 82 84 81 78 76 78 82 85 82 77 73 72 72 72 75 82 87 87 84 81 79 76 74 74 77 79 82 83 84 85 82 79 76 75 74 74 72 71 70 65 60 54 60 68 76 81 86 90 91 87 84 78 71 61 63 75 87 96 101 105 108 104 101 98 98 94 93 93 94 94 101 109 116 115 116 116 118 121 125 129 131 134 136 137 138 139 137 135 133 132 130 130 129 129 130 134 139 142 140 137 134 130 124 119 120 122 121 121 120 119 120 122 123 123 122 122 117 111 105 107 115 123 128 131 134 138 142 148 151 155 159 163 162 161 161 151 138 127 131 134 137 138 140 140 141 141 144 143 143 143 146 148 152 154 157 158 160 163 167 166 160 153 148 139 130 122 116 109 102 99 96 94 98 103 109 115 122 127 124 117 112 107 104 102 105 114 124 128 127 125 123 118 112 108 102 97 93 89 87 83 84 84 85 78 71 65 63 62 61 65 69 74 70 63 57 57 61 66 69 72 75 74 68 65 61 58 55 54 54 55 57 67 77 86 88 92 94 102 108 116 116 114 113 115 115 117 122 131 141 146 149 151 152 151 150 145 139 133 123 113 104 93 88 82 78 85 91 97 99 101 104 100 96 91 97 105 113 112 108 107 109 110 114 115 117 118 117 112 107 104 97 92 90 94 100 104 109 115 118 124 129 134 132 128 125 122 118 113 109 105 102 99 97 95 88 79 70 71 89 105 115 113 110 109 108 108 107 112 118 123 121 
+201 210 206 202 197 201 204 207 205 200 197 187 179 171 173 177 181 188 195 201 203 194 186 181 177 171 163 158 148 141 140 138 137 134 131 126 116 103 90 89 90 90 92 94 97 99 100 101 95 85 76 79 94 108 116 117 117 114 104 95 86 84 80 77 78 78 78 84 88 94 97 99 103 103 102 102 101 101 101 99 98 98 98 97 96 96 97 96 94 91 88 85 83 81 79 81 83 84 86 87 89 92 93 96 91 86 82 83 87 90 93 95 98 98 99 98 98 101 102 103 100 97 94 87 80 76 78 79 82 85 87 88 92 94 94 91 87 83 82 83 84 85 85 86 82 76 68 66 67 66 69 75 82 85 86 87 88 86 85 83 80 76 74 72 71 70 65 61 56 60 65 72 76 79 83 83 82 80 78 74 69 73 84 96 105 106 108 108 103 99 95 93 91 91 90 89 88 97 105 114 116 118 120 121 122 124 124 125 126 131 137 143 143 142 138 132 125 115 110 112 114 117 125 132 139 139 142 143 142 140 138 134 131 126 125 123 122 123 125 126 127 126 125 119 112 103 104 116 124 133 135 139 143 148 154 159 161 163 167 165 164 162 150 138 126 132 137 143 142 142 142 146 151 157 156 152 150 151 155 160 163 165 166 166 166 164 160 152 145 138 133 130 127 124 121 118 114 108 105 108 111 114 119 124 129 122 113 103 97 90 85 88 98 108 112 114 113 112 108 104 101 98 95 93 91 90 88 82 75 66 63 60 55 58 61 64 67 70 72 67 60 53 53 60 66 70 71 72 72 70 69 67 62 56 52 54 56 60 65 70 75 78 82 84 94 103 112 115 117 120 122 125 127 131 137 140 142 144 145 145 142 140 140 135 131 127 120 116 112 109 109 109 113 119 123 127 132 136 136 138 139 143 149 154 153 148 144 138 130 120 114 113 112 111 111 111 110 108 105 105 109 110 111 114 117 118 122 126 130 130 130 130 130 131 129 131 131 131 130 129 127 119 109 98 98 115 133 143 137 131 126 119 112 105 115 125 134 132 
+218 219 217 215 212 211 207 207 205 206 205 198 185 176 174 175 175 181 191 198 196 186 175 165 162 159 155 144 133 126 121 118 115 117 119 120 114 109 104 99 96 93 99 105 112 110 106 103 99 93 87 90 99 109 114 114 112 109 102 94 87 82 79 75 77 78 78 81 82 85 86 88 90 94 97 100 99 96 94 93 92 91 89 85 83 81 82 83 82 77 72 69 72 76 79 80 82 83 85 87 89 92 96 99 97 95 92 93 94 97 97 97 98 99 100 102 102 103 103 105 104 105 102 94 88 83 83 82 83 87 90 93 96 97 99 97 94 91 92 92 93 90 87 83 76 67 57 54 57 59 65 75 85 91 91 90 91 91 93 92 89 83 80 79 78 77 72 68 63 63 64 66 70 74 78 79 79 79 79 80 80 84 94 103 107 103 102 99 95 93 92 90 90 89 90 89 89 97 107 115 117 119 120 121 121 121 125 130 137 142 145 151 152 153 152 144 133 118 111 113 114 118 130 142 151 152 153 153 151 149 145 143 138 134 136 136 137 137 136 135 132 126 121 120 125 126 131 136 139 144 145 148 150 151 155 157 159 161 161 159 155 152 149 144 141 144 147 149 146 144 144 146 149 156 156 151 149 150 153 157 160 162 164 164 161 157 152 141 132 123 128 133 138 140 141 143 136 128 121 119 121 120 124 126 131 122 110 97 86 77 69 70 81 91 97 99 101 102 100 97 96 95 94 92 92 90 89 78 68 58 56 55 52 55 59 62 64 65 68 64 57 50 51 57 62 66 68 70 71 70 69 68 63 59 57 61 65 68 69 69 69 68 67 65 72 79 87 93 102 110 116 119 123 125 126 126 128 128 130 131 130 129 128 128 129 129 130 131 130 133 134 138 141 146 148 154 157 159 163 164 167 169 173 177 174 172 167 163 157 151 147 145 145 143 145 147 145 136 126 116 108 100 92 92 93 93 98 103 108 114 121 130 135 141 147 151 155 159 160 156 151 143 134 122 119 132 143 148 139 133 125 122 121 121 124 130 132 133 
+223 221 222 221 223 216 208 200 206 207 210 206 199 194 187 183 176 174 173 172 173 173 172 170 168 166 163 157 151 145 139 133 129 129 127 125 122 118 115 110 104 100 105 112 120 118 111 103 102 102 100 103 106 112 112 110 108 108 108 108 106 99 95 90 93 97 99 93 88 82 83 83 84 86 89 92 93 93 94 92 90 89 88 88 87 86 84 83 80 74 69 66 71 75 80 81 82 83 86 88 92 94 98 102 103 104 103 103 104 102 100 99 95 96 98 102 103 101 100 102 104 107 108 106 102 100 96 93 89 86 85 82 85 88 93 93 94 94 91 86 81 77 75 71 69 69 68 68 71 73 78 86 93 96 93 89 88 90 91 91 85 78 72 71 70 68 66 64 62 63 64 66 69 72 75 78 81 83 84 85 85 89 95 103 104 100 97 94 92 90 87 87 87 87 88 91 92 100 108 115 118 119 122 122 122 120 125 132 140 145 148 154 154 156 159 153 139 125 118 119 120 126 138 151 161 160 162 160 156 151 148 145 144 142 145 145 148 146 143 141 133 126 119 122 133 144 149 148 148 150 149 151 152 152 152 152 155 154 154 150 147 144 145 147 148 150 148 150 149 145 142 145 147 149 148 144 143 144 144 147 148 148 149 148 146 144 141 134 128 124 127 131 133 130 129 126 125 122 119 121 122 122 124 129 129 123 114 105 97 89 81 78 81 84 89 92 96 100 102 101 101 98 96 91 87 82 78 73 69 65 63 61 58 57 56 55 55 58 60 57 53 49 49 53 57 61 64 68 70 70 68 67 66 63 62 69 74 79 75 72 69 64 62 59 64 68 73 82 94 106 111 114 117 118 118 120 120 122 123 125 128 132 137 141 145 150 152 155 157 159 160 160 167 170 174 173 170 168 171 171 175 180 184 190 190 190 188 188 185 185 182 181 176 173 177 181 178 163 149 135 123 113 104 107 109 112 118 124 129 135 143 150 156 161 166 169 171 172 170 164 157 150 145 140 137 141 141 141 132 124 117 122 131 137 135 133 130 134 
+196 203 204 203 203 198 193 188 189 194 197 191 186 181 179 175 173 169 166 161 165 169 174 177 172 171 171 171 173 171 167 162 158 150 143 139 135 132 129 123 120 116 110 105 101 100 99 97 99 104 107 112 118 122 124 121 119 116 115 114 115 113 110 109 110 114 114 103 92 81 80 79 79 81 83 85 87 90 93 91 90 88 90 96 101 101 98 94 89 85 79 76 77 80 81 83 83 85 90 93 98 96 95 94 91 88 85 84 83 82 85 89 92 94 95 96 96 95 95 95 99 102 103 104 105 103 99 94 90 83 78 73 77 82 86 89 91 95 88 80 72 68 66 63 67 72 78 82 84 87 91 96 100 100 94 89 86 87 89 88 79 69 60 59 57 55 55 56 57 61 65 69 71 72 74 79 85 91 91 90 87 88 90 93 95 97 98 98 92 86 82 82 83 84 88 93 96 102 107 113 117 121 124 124 123 122 122 125 127 129 133 136 139 144 148 147 144 139 137 140 142 146 153 158 165 162 161 157 152 147 143 143 143 143 145 146 148 142 137 131 126 122 117 122 133 141 145 143 140 141 141 140 142 141 139 140 139 139 139 138 138 138 138 139 139 143 146 149 148 144 142 140 139 137 134 134 132 133 132 132 129 127 120 120 123 126 129 130 132 132 129 126 120 112 103 96 102 108 113 118 122 125 127 128 129 125 119 114 107 100 91 86 81 79 79 87 94 99 101 102 103 98 94 89 81 75 68 68 67 68 66 63 61 59 57 55 55 55 55 53 51 47 48 51 54 56 57 56 56 58 59 60 60 60 61 69 77 85 86 87 89 88 90 90 87 85 81 86 94 102 108 111 112 115 116 115 116 116 117 121 130 137 146 155 161 170 174 179 182 181 182 180 185 187 190 186 180 177 179 184 189 192 199 203 205 203 201 199 199 197 196 194 193 193 195 197 196 187 179 171 167 163 161 161 161 161 162 165 168 170 173 176 179 180 184 185 184 187 182 175 171 164 166 166 168 166 166 166 164 159 159 163 165 169 159 148 136 144 
+178 186 185 184 182 181 178 174 174 175 176 167 161 154 156 158 160 169 178 187 190 189 190 186 182 174 172 173 177 176 174 171 167 163 157 151 146 140 135 132 130 127 114 103 92 89 89 91 97 105 114 121 128 134 136 136 136 132 125 117 115 121 128 130 128 126 121 108 93 80 80 80 79 81 84 86 92 98 102 102 101 99 101 104 107 107 103 99 94 90 85 82 83 83 84 84 85 86 91 97 101 95 90 85 80 74 68 64 63 59 68 79 89 91 89 88 87 87 86 87 88 91 92 93 95 95 91 88 83 79 74 70 75 80 85 85 85 87 84 79 76 76 77 77 81 84 88 90 92 93 95 97 100 99 96 92 89 89 90 88 81 74 68 66 66 65 63 60 58 64 69 74 74 74 73 78 83 89 91 90 89 87 85 82 84 87 92 93 88 83 79 81 82 83 89 95 101 107 112 117 121 124 129 127 124 122 119 116 113 116 120 126 130 135 141 144 147 151 152 155 156 159 162 164 163 158 155 151 145 138 132 134 138 140 142 142 145 140 133 124 120 119 115 121 128 136 139 137 134 134 133 133 132 133 133 132 131 130 130 130 131 133 133 134 135 139 142 148 145 141 136 134 132 131 129 131 133 131 129 126 125 123 123 122 126 132 132 133 131 130 127 123 118 115 113 112 115 117 121 120 119 118 119 121 123 118 110 102 95 91 87 83 81 78 79 86 93 96 94 92 90 87 86 83 76 70 64 64 63 63 62 61 60 61 61 61 59 56 53 51 48 46 46 50 53 53 47 43 40 45 49 53 55 56 60 70 80 90 93 98 103 105 106 107 102 96 91 94 100 106 111 115 119 122 124 126 127 130 132 136 142 148 152 160 164 169 174 179 183 187 189 192 190 190 187 187 185 185 192 198 206 212 217 220 219 213 208 205 206 206 207 206 210 212 211 214 216 210 204 201 200 200 200 198 196 192 188 184 178 182 186 191 196 195 199 201 203 201 202 199 199 198 200 202 204 206 209 211 212 213 216 212 207 201 184 164 143 153 
+174 179 173 173 171 176 176 177 179 178 178 167 157 147 153 157 165 173 186 197 201 202 201 195 185 176 172 174 177 178 177 175 175 172 167 162 152 141 134 134 131 131 124 116 110 106 101 98 101 106 111 116 121 126 128 127 127 123 117 109 110 119 128 134 130 125 120 108 93 81 80 79 78 80 84 87 95 104 112 114 114 113 113 114 113 110 105 100 96 92 88 84 85 86 87 87 87 87 87 87 87 84 82 80 79 76 75 75 75 76 79 84 88 89 87 86 84 84 82 82 82 82 83 86 88 89 86 84 83 79 76 73 77 81 86 84 84 81 81 80 80 82 86 89 92 93 96 97 98 98 99 100 100 99 97 95 94 92 92 90 86 83 80 81 82 82 76 70 63 68 73 79 78 76 74 75 76 80 82 87 91 89 80 71 68 74 79 81 80 80 80 81 82 86 93 100 108 116 124 132 132 134 136 130 124 118 112 107 99 104 113 123 130 136 143 147 150 155 156 153 150 150 152 152 151 147 142 137 128 121 111 118 124 130 132 134 136 133 128 121 117 115 113 115 119 123 126 127 128 129 127 127 126 131 133 135 133 132 131 129 127 128 132 136 140 142 143 145 139 133 127 126 128 130 134 137 140 140 136 133 131 137 141 147 146 148 147 138 129 121 120 119 119 127 134 141 139 135 131 124 117 110 111 114 119 111 100 88 83 83 83 82 81 78 81 86 93 96 91 83 78 78 78 77 73 67 61 59 58 56 58 59 61 60 60 61 58 54 51 50 49 50 50 52 53 52 49 47 46 47 48 50 55 60 66 71 77 80 84 88 92 93 94 94 97 101 105 109 113 116 122 128 135 139 141 144 147 152 155 156 159 159 159 163 164 168 173 176 182 187 191 193 189 187 182 182 186 189 194 204 213 217 222 224 225 225 224 225 227 228 230 231 232 233 233 233 233 226 224 221 217 221 220 216 214 211 204 196 186 187 195 204 210 211 215 217 218 220 221 222 223 225 229 229 233 231 235 236 236 235 234 228 222 214 201 190 175 176 
+176 174 170 164 164 169 178 182 185 185 185 174 161 151 162 174 183 181 179 180 184 191 194 189 176 166 161 160 159 158 157 157 155 157 158 158 148 142 135 134 134 131 129 126 122 116 109 103 104 106 108 110 111 114 113 110 108 104 100 96 98 106 114 118 113 109 104 99 93 86 81 77 74 73 73 73 80 87 94 97 100 101 103 104 105 103 99 96 92 88 85 84 83 83 84 86 87 87 85 82 79 79 78 78 79 80 82 85 90 95 92 90 87 86 86 85 83 80 78 77 76 76 77 80 84 86 87 88 88 87 86 85 88 90 94 90 87 84 83 81 81 81 82 83 82 82 82 82 84 87 89 90 92 92 92 91 89 83 79 77 78 79 82 82 82 82 78 73 69 73 79 85 84 82 80 78 76 75 77 82 86 84 77 70 68 71 75 78 78 79 80 83 86 90 97 107 114 124 132 140 140 139 140 134 128 120 111 101 91 97 110 125 135 141 148 151 152 154 155 149 148 144 144 144 143 138 135 129 120 110 101 109 118 126 129 129 130 127 122 118 116 112 112 113 117 120 124 126 128 129 126 125 125 130 135 138 137 134 132 128 126 123 130 138 144 144 140 139 133 128 122 126 131 139 144 147 151 153 151 151 155 162 168 172 169 166 161 152 143 135 134 133 134 137 141 143 140 137 135 127 121 116 114 114 116 111 104 96 93 93 94 95 94 95 98 99 100 98 89 80 72 72 72 71 68 64 62 57 53 49 53 57 62 61 58 55 53 51 49 50 52 56 57 55 53 52 53 54 55 52 48 47 55 63 71 71 71 72 75 78 81 83 84 86 92 101 108 111 113 116 120 127 135 139 141 142 146 149 153 156 158 158 159 161 163 163 165 165 166 165 167 168 171 173 176 180 183 189 195 202 209 214 218 221 227 234 240 244 247 252 254 251 252 251 248 249 245 243 239 233 237 235 236 234 230 232 224 218 211 216 221 227 231 233 233 235 236 241 240 243 242 243 242 246 247 250 249 250 245 244 241 237 232 225 219 209 201 191 
+193 191 191 190 190 194 199 200 200 199 197 187 180 172 180 186 194 187 182 173 178 182 186 178 168 160 151 145 137 136 133 131 132 135 137 140 140 138 138 136 134 132 124 116 110 107 105 102 108 116 123 122 119 116 113 109 105 103 100 98 98 101 104 105 100 95 90 91 91 88 83 77 71 68 64 61 64 69 73 77 81 84 87 89 93 91 89 87 85 83 81 79 76 74 74 77 80 83 87 91 94 93 93 91 92 93 94 93 94 95 91 88 84 84 84 84 83 82 81 81 80 80 81 83 85 86 85 86 86 88 90 91 93 92 92 90 86 83 82 80 79 78 77 76 75 72 70 70 73 74 77 81 84 86 86 86 82 74 65 61 69 75 81 80 79 77 77 76 74 80 84 90 90 89 88 83 79 74 74 75 77 77 77 77 77 79 81 82 81 81 82 86 91 96 104 113 120 127 134 141 141 142 141 139 134 131 119 106 92 100 119 137 147 150 154 154 150 146 143 143 146 146 144 144 143 141 138 134 130 124 120 125 131 136 135 133 129 124 117 112 111 113 116 122 130 138 141 140 141 139 136 132 132 135 138 141 139 139 137 131 124 118 128 137 147 142 135 128 126 124 125 133 144 155 161 161 163 169 176 185 192 196 201 199 191 182 176 170 164 159 156 155 152 149 143 136 136 136 135 131 128 124 119 117 114 112 109 106 104 105 104 105 109 111 112 108 105 99 88 77 68 68 69 68 66 64 60 56 52 47 50 55 60 58 55 52 52 52 54 56 58 62 62 57 53 50 53 55 56 54 51 50 54 57 61 62 63 64 66 67 69 72 76 81 86 92 98 100 101 103 107 116 124 129 130 132 135 139 144 149 153 154 157 158 159 160 156 152 150 149 148 147 153 159 164 172 177 184 189 195 202 207 208 212 215 224 231 236 239 242 243 247 248 253 253 252 252 248 249 247 247 248 248 246 248 248 246 247 247 249 251 254 252 255 254 255 253 253 255 255 255 253 255 253 255 255 255 255 251 245 243 237 231 223 218 210 203 198 
+203 204 206 209 212 217 220 220 217 214 212 206 204 201 199 199 196 194 193 189 185 179 173 166 156 147 140 135 131 128 125 125 123 119 118 120 125 131 134 129 126 123 116 108 100 101 103 102 113 126 139 133 126 119 115 112 110 108 109 108 105 101 97 93 89 84 81 85 87 88 87 86 84 80 74 70 67 67 66 68 71 73 76 76 79 78 79 79 79 79 79 77 74 71 70 73 75 80 87 95 101 103 103 102 103 103 103 101 98 95 90 85 80 81 83 83 85 85 87 88 89 90 90 90 91 88 82 77 74 80 87 91 86 81 77 76 75 76 73 71 69 69 71 71 71 70 71 70 68 67 67 67 68 69 71 73 72 65 58 55 63 72 78 74 70 66 69 72 73 77 82 86 86 85 85 81 78 75 76 79 83 83 84 84 85 86 86 88 88 88 89 93 96 101 107 112 119 125 130 136 139 141 141 141 140 139 128 116 102 111 130 149 158 160 162 159 152 143 138 143 147 149 148 148 146 143 143 141 141 138 138 140 145 147 144 139 137 132 125 119 120 125 128 137 148 157 161 159 156 153 147 141 138 141 142 144 145 145 145 140 132 125 134 143 153 145 136 128 128 133 137 148 159 171 175 176 175 179 188 194 202 204 208 206 194 183 174 169 164 159 158 155 154 150 145 141 142 144 146 145 142 139 137 135 135 129 123 116 113 114 114 114 110 108 105 101 99 95 89 81 75 74 73 73 68 65 62 59 57 54 53 52 52 52 52 52 55 58 62 65 67 68 66 59 52 48 52 55 57 56 55 54 53 52 50 53 55 57 59 59 60 64 69 74 78 84 88 89 87 84 86 93 99 103 105 107 111 115 122 126 129 133 137 134 131 130 132 138 141 142 141 143 145 148 149 154 163 167 174 184 191 197 198 198 204 209 216 224 226 228 234 240 245 250 250 247 246 248 250 253 254 252 255 255 252 250 247 242 241 239 242 249 255 253 254 255 255 255 253 255 255 253 255 253 253 255 255 255 251 245 244 236 229 223 218 212 205 203 
+201 201 205 204 205 204 206 203 200 196 192 192 192 192 191 190 189 189 189 190 183 173 163 154 143 136 130 127 123 122 122 122 117 108 98 98 107 117 121 115 107 102 101 101 99 105 111 116 117 119 121 117 113 107 103 97 91 93 96 101 101 99 96 92 87 81 79 81 83 87 89 91 93 88 83 77 71 65 59 60 62 64 65 65 65 66 68 70 73 77 81 81 79 76 74 74 75 76 78 81 84 89 92 97 100 102 104 101 99 97 90 83 77 76 77 77 80 83 85 88 91 94 96 96 95 93 88 83 80 87 93 96 86 76 68 68 69 70 68 67 65 67 68 68 70 71 73 70 65 61 58 55 52 53 56 60 60 55 50 50 59 67 74 67 59 54 60 65 70 73 76 80 78 77 75 76 76 76 82 90 99 100 96 93 91 93 95 97 97 98 99 102 103 105 105 103 103 111 119 128 130 133 136 138 141 143 139 133 128 134 147 159 166 168 172 167 158 150 146 150 152 153 154 155 157 155 154 153 152 152 152 153 155 157 158 160 163 159 155 152 154 156 157 163 172 181 184 180 176 170 163 154 149 147 146 146 149 152 155 154 153 152 152 154 155 150 145 138 142 150 157 168 178 190 192 191 188 189 190 193 195 198 202 200 189 176 165 160 155 151 150 150 150 149 148 147 149 156 160 157 158 157 155 155 155 148 137 125 120 122 125 121 113 104 98 95 95 92 90 87 83 81 78 77 73 68 64 63 63 63 60 57 52 52 52 52 55 59 63 64 63 63 60 58 54 53 57 60 63 62 62 62 57 52 48 50 52 53 55 58 61 63 64 64 69 74 81 79 71 63 59 62 66 69 73 78 83 89 95 99 105 109 114 110 106 103 113 123 132 134 135 136 135 135 137 141 149 156 163 174 182 187 185 186 186 192 199 201 203 203 203 209 211 213 215 215 215 227 238 250 253 255 254 252 248 246 238 231 219 220 231 243 251 252 253 254 252 254 254 254 255 254 254 254 254 254 254 253 250 246 242 238 231 224 221 215 213 209 
+194 194 195 196 197 195 195 189 178 171 166 165 165 168 166 168 169 168 166 165 164 161 156 148 139 128 124 124 120 122 126 131 128 121 113 109 115 120 120 110 99 93 93 94 97 108 118 128 121 112 102 99 97 94 87 77 68 71 77 84 90 95 101 100 96 91 87 84 82 80 80 82 83 81 78 76 78 80 81 82 83 86 84 82 80 77 73 70 72 76 82 83 82 80 79 78 76 76 72 70 70 77 85 91 95 100 104 101 99 97 89 81 72 71 71 71 73 77 80 85 90 97 99 100 99 100 102 102 103 106 109 108 94 79 68 69 71 73 74 74 75 75 74 74 77 80 83 79 71 64 61 60 58 58 59 59 60 59 60 61 64 69 71 66 61 57 59 61 64 66 68 71 69 68 66 70 74 78 85 91 98 99 97 95 96 100 104 107 107 108 106 105 101 99 100 99 99 110 118 128 132 136 140 142 145 146 146 145 147 151 158 164 169 171 174 171 165 159 156 157 159 159 163 166 168 167 168 166 165 163 164 163 165 165 171 174 180 180 180 178 179 179 179 183 189 194 197 192 188 181 173 165 159 154 152 151 156 159 162 163 165 166 165 165 162 160 158 154 160 170 176 186 194 202 203 199 195 191 187 183 182 186 190 187 175 165 153 150 148 146 143 141 138 137 138 139 142 148 154 154 150 148 147 145 145 139 128 117 113 114 115 113 107 101 97 98 98 98 96 94 93 90 88 86 80 73 67 68 71 74 72 67 61 58 56 53 53 56 59 59 55 52 51 54 57 60 63 66 68 68 69 67 60 53 47 48 49 50 53 56 59 59 56 55 57 63 68 67 61 55 52 51 51 52 58 65 71 79 86 93 94 96 99 103 106 111 115 118 121 121 119 119 121 123 126 131 139 147 156 164 172 178 175 174 172 175 178 178 177 175 172 177 182 186 189 191 194 208 221 238 237 238 237 234 233 226 224 219 215 221 231 243 251 252 248 248 250 250 251 253 254 252 253 253 253 253 250 254 247 243 241 237 231 228 226 221 219 212 
+170 171 174 177 179 180 181 182 178 173 169 168 162 160 159 159 157 152 151 147 147 150 151 143 135 127 123 119 116 123 131 140 143 143 143 141 137 133 128 118 107 97 94 92 91 102 112 124 123 120 118 113 106 100 91 81 71 72 78 83 88 92 96 98 96 94 91 86 82 78 78 77 77 76 75 75 84 94 102 106 110 112 110 107 104 95 83 74 73 77 81 83 84 84 84 84 84 80 73 66 63 72 80 86 89 91 94 91 89 86 81 76 69 71 74 76 80 85 88 92 95 99 101 99 98 100 102 105 107 110 112 110 99 86 75 76 77 78 79 80 80 80 79 79 82 86 91 85 77 67 64 64 64 63 61 58 60 65 70 73 71 69 67 66 64 62 61 59 57 58 60 62 60 58 57 64 72 79 83 85 87 89 90 93 98 107 114 119 118 116 111 101 90 84 92 100 106 118 128 138 144 150 156 153 153 150 151 152 154 157 160 161 163 162 163 168 169 173 172 170 168 170 175 180 186 185 182 182 178 175 174 171 169 169 173 181 186 188 190 194 192 191 189 191 192 195 191 187 185 181 178 172 167 163 161 158 162 163 167 165 165 164 168 171 172 175 174 175 181 188 195 201 208 211 207 202 195 188 179 173 170 169 170 168 158 149 140 140 143 143 137 131 124 126 127 125 131 139 144 142 141 138 137 136 135 127 119 110 105 106 107 106 104 100 99 100 102 103 100 97 94 93 92 90 84 77 71 74 80 83 81 77 72 69 66 63 60 59 57 55 53 51 51 54 57 60 62 65 67 65 63 61 57 54 51 51 52 53 53 52 50 49 46 44 45 48 51 53 55 58 57 53 47 46 51 58 65 73 81 89 87 85 81 93 105 115 114 112 109 107 106 105 107 109 114 118 126 133 139 147 152 156 155 153 152 154 156 157 154 153 150 162 176 189 190 195 198 202 205 209 210 207 203 203 205 206 208 209 213 222 231 244 249 249 249 248 247 246 249 250 249 252 254 251 253 255 253 253 249 247 239 232 224 217 209 208 207 204 
+165 164 165 167 167 168 169 173 178 182 179 172 165 160 157 153 151 145 140 136 141 145 151 147 143 138 131 122 114 123 137 150 153 154 153 149 143 135 130 121 113 106 103 99 96 106 114 122 125 127 132 124 115 107 99 89 80 82 86 92 91 87 85 85 88 91 91 89 86 86 85 85 85 82 80 79 84 92 98 102 106 110 109 106 105 96 86 77 75 76 77 78 81 83 85 85 86 83 74 65 61 68 77 83 84 85 85 82 79 76 73 69 66 72 78 83 89 95 100 102 102 102 101 98 95 94 95 95 97 99 102 103 100 95 92 92 92 91 86 83 79 78 77 76 78 81 82 82 81 79 76 74 72 69 68 68 69 74 78 81 78 75 72 70 69 67 63 60 57 58 59 60 62 64 67 73 83 90 95 96 99 99 100 99 102 108 113 114 111 109 103 97 89 86 93 103 112 123 132 142 149 155 162 160 157 154 154 157 161 160 160 159 156 157 155 159 168 176 178 178 176 176 183 191 198 194 195 195 193 187 186 181 181 176 181 185 193 195 197 200 201 200 197 199 196 192 190 189 183 183 181 178 177 172 169 168 169 171 172 169 165 162 169 177 182 184 184 187 190 193 196 200 200 202 199 191 184 176 170 162 158 160 163 162 155 144 138 138 138 139 133 129 125 123 122 121 125 128 132 130 127 121 122 126 130 129 120 112 110 111 113 114 113 113 112 109 105 100 93 86 79 82 84 88 85 80 77 80 86 91 90 88 85 83 81 79 73 65 56 51 52 52 53 55 57 58 61 63 65 61 57 54 54 55 56 56 57 58 56 52 50 47 45 43 42 42 42 46 53 59 63 59 55 54 58 62 67 69 72 74 74 74 74 80 85 91 91 90 89 89 92 93 95 96 99 102 107 112 118 122 128 131 130 131 132 133 135 135 131 129 128 146 166 183 188 190 190 191 190 188 189 190 194 196 200 202 206 214 217 226 236 246 253 252 251 249 251 252 254 253 253 254 254 252 254 252 254 254 251 246 241 232 218 202 192 192 193 193 
+188 187 185 182 181 178 178 178 180 183 180 173 164 158 155 151 149 145 141 137 140 145 151 150 151 151 138 126 111 122 141 160 163 158 153 147 139 131 126 124 122 119 121 122 124 129 133 137 133 128 126 118 111 105 97 89 81 80 83 86 83 78 73 75 79 84 87 88 89 90 89 89 88 85 82 80 85 89 94 97 100 103 102 101 99 93 87 81 76 74 71 71 74 76 79 81 82 81 75 69 66 72 78 83 83 84 84 81 78 75 74 72 71 77 84 91 94 96 99 100 99 99 99 96 95 93 93 91 93 94 96 97 97 98 97 95 94 93 88 82 77 76 74 72 74 74 75 79 84 89 87 82 78 75 76 75 78 82 87 88 84 81 77 76 74 71 67 62 58 59 59 60 68 75 82 90 98 105 113 119 125 124 118 111 106 104 102 99 93 88 86 92 98 102 106 110 113 121 129 137 146 151 158 160 160 159 162 162 162 161 160 159 153 148 142 144 153 164 172 177 184 188 191 197 199 202 203 205 203 202 200 197 194 191 194 199 201 204 203 206 207 206 207 204 196 191 188 188 186 187 186 183 182 182 182 178 181 182 181 173 167 157 168 179 188 191 192 192 190 187 184 182 181 180 177 170 166 161 158 154 152 158 163 163 156 146 139 138 134 132 129 129 127 124 121 118 118 119 119 116 110 103 107 116 126 127 122 115 113 114 118 121 121 121 119 112 106 99 89 80 70 75 80 83 80 78 76 78 80 82 82 81 81 79 78 76 73 66 62 59 59 60 60 61 62 62 59 56 54 55 57 58 60 62 64 65 65 67 67 67 67 64 61 57 53 49 45 45 54 62 68 68 68 70 70 71 70 66 62 56 60 63 67 68 69 68 70 72 75 80 87 94 97 101 103 106 110 115 118 123 126 130 130 130 131 130 128 126 127 128 130 139 148 157 157 160 160 162 166 170 180 189 200 205 206 205 208 217 224 231 238 246 254 254 252 254 254 252 254 252 252 254 255 255 255 252 254 254 248 242 230 216 194 172 162 167 175 176 
+202 202 201 196 193 187 185 184 183 184 178 170 163 156 155 151 148 152 152 152 153 155 160 158 156 155 149 143 135 136 141 145 145 143 141 136 132 127 124 125 125 129 132 134 138 141 143 144 136 126 117 112 106 101 95 88 81 77 75 72 70 68 65 67 70 73 76 80 83 84 81 79 77 75 73 72 76 79 82 86 89 92 92 91 91 87 84 78 75 72 70 71 74 77 79 81 83 82 79 76 75 78 81 84 84 84 83 81 79 76 76 74 73 82 91 99 99 96 93 94 95 97 97 96 94 94 94 93 94 93 93 93 92 90 88 84 81 77 76 74 74 70 68 66 68 71 75 79 83 86 84 80 75 73 72 72 75 83 92 95 89 83 79 77 76 73 67 61 56 58 61 64 67 71 75 84 93 104 111 118 127 124 117 110 104 102 99 97 94 90 91 99 108 115 115 116 117 121 127 132 141 147 154 157 159 163 164 165 170 168 166 162 159 149 140 142 150 160 170 178 189 194 195 196 198 202 204 209 210 211 211 209 206 203 202 205 206 206 205 204 207 208 210 206 198 192 186 187 190 188 190 190 192 188 189 190 189 190 190 183 176 166 175 182 192 192 191 189 186 181 177 173 172 169 163 157 149 146 139 133 130 131 132 132 125 120 115 112 109 106 106 106 108 104 102 100 103 107 111 108 103 98 101 110 119 119 113 107 104 108 111 113 113 112 110 106 104 101 93 85 78 77 76 75 72 69 66 63 61 57 57 60 63 63 63 62 63 66 70 72 71 69 68 68 68 66 58 50 42 49 55 62 65 68 69 71 71 72 73 74 76 73 69 63 59 52 46 45 51 57 62 65 68 71 69 65 62 60 58 56 58 59 59 59 59 57 63 71 80 91 102 115 121 125 129 132 134 136 137 138 137 136 137 136 136 130 125 118 121 127 131 134 139 141 144 148 149 154 160 165 171 185 197 204 206 207 213 220 226 232 238 238 241 245 247 249 250 253 254 251 252 254 255 255 253 254 255 254 248 233 219 201 172 148 139 150 163 171 
+207 205 200 199 194 191 189 187 187 186 177 169 158 152 150 147 146 149 151 154 156 161 163 161 160 158 159 160 161 148 136 124 122 122 124 123 123 122 124 127 130 130 130 128 127 123 122 119 117 114 109 106 103 99 96 93 90 89 87 86 83 81 79 77 76 74 77 80 83 83 79 74 70 69 68 67 69 71 73 75 78 80 81 81 83 81 77 74 74 73 73 75 79 82 84 86 88 89 90 90 90 88 88 85 87 87 87 89 91 91 91 91 91 96 102 108 102 95 88 87 88 87 87 87 88 88 89 89 89 89 90 89 87 87 84 77 70 64 67 69 71 68 65 62 67 71 76 78 82 83 81 77 73 71 70 69 73 86 96 101 94 86 80 79 77 74 67 59 52 58 62 67 65 63 61 71 83 97 103 110 115 113 107 99 98 98 98 101 104 108 112 115 121 124 123 122 122 124 126 128 135 142 148 151 155 158 164 173 179 180 177 176 170 160 153 152 159 166 172 184 192 198 196 193 192 195 202 205 208 212 218 215 213 212 212 206 205 203 202 202 202 204 202 200 194 188 185 185 188 190 191 196 198 199 194 195 195 195 195 195 193 190 191 191 190 187 183 180 179 174 175 170 166 162 153 143 134 124 117 106 99 96 91 89 86 84 83 80 77 74 78 80 82 81 81 79 86 94 102 102 97 91 95 104 110 112 106 100 98 101 105 107 105 101 100 100 101 99 95 90 86 82 79 75 73 70 67 63 58 54 55 57 59 60 60 59 62 69 78 83 82 79 77 75 74 72 67 63 60 65 69 74 71 67 61 61 62 61 64 66 68 67 63 60 55 51 46 44 46 48 51 56 62 67 62 57 51 53 55 57 56 54 53 51 49 48 58 71 84 99 112 124 132 134 137 136 138 139 139 137 136 135 136 139 140 140 139 141 145 148 152 159 166 171 176 178 181 180 177 170 174 182 191 196 204 209 217 222 228 233 233 230 232 236 239 243 245 246 248 248 246 248 247 245 240 238 236 232 226 220 213 209 198 188 184 187 190 192 
+205 204 201 199 198 195 192 190 190 187 179 167 155 148 146 146 144 140 138 140 149 158 163 162 160 159 158 159 159 140 120 101 101 104 107 109 110 112 115 119 123 123 121 120 116 111 105 100 101 101 101 101 98 97 98 100 100 105 108 111 110 109 107 102 95 88 87 88 91 90 85 80 78 79 81 82 83 84 84 83 82 81 83 85 86 83 79 76 74 73 71 73 76 80 81 83 85 88 91 94 94 91 88 86 87 89 91 95 100 104 105 106 106 110 113 116 106 95 84 79 77 75 75 77 78 80 80 81 83 84 84 85 87 90 88 76 64 56 61 65 69 70 70 72 74 78 81 80 76 73 70 67 64 67 75 82 88 92 97 97 91 84 79 77 75 71 66 60 55 60 65 69 66 62 59 67 79 90 95 97 99 97 93 89 89 91 94 98 103 108 115 119 124 127 128 128 129 129 133 134 137 142 148 151 153 156 160 166 172 171 171 170 167 162 158 159 166 170 177 184 192 196 192 190 187 188 193 193 204 210 218 216 215 210 208 202 198 196 193 192 192 194 196 194 189 182 181 184 188 192 196 200 205 204 202 203 202 201 201 200 202 205 200 191 186 182 179 174 173 171 169 164 160 157 149 137 127 117 111 105 101 98 94 91 91 90 90 90 90 89 89 89 88 90 93 95 101 105 110 109 105 100 101 106 111 110 105 99 97 95 94 92 90 88 85 88 91 95 93 93 93 92 90 89 86 84 82 78 75 70 69 69 67 66 63 61 64 76 87 94 91 88 85 83 80 77 77 77 78 81 83 86 77 67 56 55 55 56 58 61 65 66 63 61 58 55 51 49 48 47 48 54 59 64 61 60 58 58 57 56 56 56 56 55 54 53 62 73 86 96 105 114 118 119 123 124 126 129 130 131 132 133 136 140 142 150 156 165 167 170 170 178 186 194 198 201 204 199 191 183 184 189 194 196 199 202 204 208 210 212 215 218 221 224 228 233 233 237 237 239 238 235 231 227 224 218 210 203 201 205 210 215 221 223 224 217 212 203 
+197 195 193 191 193 195 196 194 195 193 186 181 170 163 157 153 147 142 140 138 145 153 160 158 157 154 155 154 154 130 102 76 79 86 93 95 95 95 98 101 104 107 108 109 109 107 104 103 100 99 98 97 96 95 98 102 104 107 109 112 111 110 109 103 98 90 90 93 97 96 90 87 84 88 91 94 95 96 95 91 87 83 86 88 91 87 84 81 75 71 67 66 68 70 70 73 75 76 79 80 81 81 79 80 83 87 88 88 87 87 87 86 85 89 92 96 93 90 86 87 87 87 87 87 89 90 92 94 94 94 94 94 95 96 93 81 69 58 63 67 72 73 77 79 80 81 84 80 75 70 66 64 61 69 82 96 101 98 96 93 88 82 78 74 71 68 65 62 59 64 69 73 69 65 61 68 77 86 85 83 80 78 77 76 77 81 85 88 95 100 106 115 122 129 132 134 136 140 143 145 148 153 157 155 154 155 152 149 148 146 144 142 145 151 154 160 169 173 181 183 184 186 181 179 175 176 175 176 187 197 207 204 201 197 192 187 180 178 174 173 174 181 188 184 180 172 173 182 189 196 201 207 211 210 211 213 210 208 208 207 206 206 199 190 179 178 176 174 169 166 161 158 155 151 145 134 122 116 115 113 114 113 112 113 111 110 110 112 115 116 111 106 100 104 110 116 117 119 119 117 112 108 106 108 109 108 104 99 95 90 86 82 78 76 74 79 85 90 93 95 99 98 100 99 97 94 92 90 89 87 85 82 79 78 77 76 81 90 101 108 104 101 97 95 91 89 85 82 79 82 87 90 81 72 61 59 59 60 63 68 72 73 72 70 68 65 61 59 56 53 52 55 58 61 63 65 68 64 59 54 55 57 60 60 59 58 65 75 85 93 98 104 107 108 110 112 116 117 119 117 114 112 114 116 117 130 141 154 160 166 174 180 189 199 202 204 207 206 203 201 200 200 199 196 195 192 189 189 189 187 194 204 209 212 215 214 219 220 223 223 224 225 225 219 219 218 213 211 210 215 213 215 212 208 205 199 193 187 
+195 193 191 188 192 197 203 201 200 198 199 194 190 183 173 162 157 153 150 148 150 151 152 147 143 138 133 129 124 116 106 95 99 103 109 108 105 100 99 98 98 98 98 98 98 98 99 99 97 95 94 93 94 93 99 102 107 107 105 103 100 99 97 92 87 82 86 94 101 103 97 90 89 91 92 94 92 92 90 87 83 80 79 79 80 79 78 76 75 73 72 73 73 74 74 74 74 75 75 74 75 75 76 78 80 84 86 80 76 71 69 68 66 67 69 72 78 85 92 98 102 106 107 107 107 110 113 117 118 118 116 115 110 106 101 91 81 74 77 80 83 83 84 85 82 81 78 82 87 92 94 96 99 102 107 112 111 106 100 95 91 88 83 80 77 72 70 68 67 67 67 67 68 70 71 76 80 85 85 83 81 80 81 81 82 83 85 89 95 100 108 111 116 120 126 128 132 134 136 138 141 144 148 148 148 149 145 142 139 136 135 133 137 146 155 161 167 175 178 178 179 176 175 173 171 169 166 167 175 184 193 189 185 181 175 171 166 163 160 156 163 169 177 179 173 169 173 180 188 195 199 203 208 209 210 213 209 208 206 207 207 208 198 188 178 174 174 169 165 158 152 145 142 138 133 125 119 114 111 108 107 108 108 107 101 95 89 94 98 104 101 98 95 97 100 102 105 105 106 106 104 102 102 103 104 103 101 99 96 91 88 84 81 78 76 82 86 90 95 98 103 103 104 104 103 101 99 99 101 103 101 98 94 94 96 98 103 110 118 122 119 116 111 107 103 100 93 86 80 84 88 93 85 74 64 62 62 64 67 70 75 75 72 69 65 62 60 59 59 61 63 65 69 71 74 75 76 69 61 54 58 63 68 67 63 60 63 71 79 85 92 99 101 102 103 104 105 105 105 98 91 84 86 88 89 105 123 141 154 164 175 183 191 197 201 201 204 206 208 207 206 204 203 200 198 195 191 188 187 184 184 185 184 187 188 190 194 197 201 206 214 219 222 223 224 223 226 228 228 224 222 213 205 196 189 182 177 171 
+201 200 197 197 200 203 206 204 199 199 192 184 179 171 163 155 151 150 148 147 144 143 141 136 129 123 114 107 99 105 110 115 121 127 133 128 121 115 110 105 100 96 89 85 81 81 79 80 83 84 87 92 96 100 104 106 108 104 100 95 95 97 97 90 83 75 80 88 97 99 96 94 93 95 96 96 91 90 86 82 79 75 71 69 65 66 68 70 74 78 82 84 86 88 88 87 86 85 84 84 83 81 79 80 81 83 83 79 74 72 72 73 73 74 74 76 79 83 87 90 94 97 99 103 103 107 112 118 121 123 123 123 118 114 109 102 95 90 91 91 93 92 92 91 88 84 80 88 101 111 118 123 130 130 129 126 119 111 104 97 95 92 89 85 82 78 77 76 74 71 65 61 69 77 84 84 84 85 87 88 90 91 94 96 95 93 91 93 100 108 111 109 107 106 111 115 116 115 114 113 117 121 125 130 135 139 142 143 146 146 144 143 146 152 157 161 164 168 171 168 169 169 167 168 166 168 168 169 169 172 174 170 166 164 160 155 150 149 145 144 149 157 167 171 172 174 177 181 185 189 192 194 197 198 201 203 202 201 199 201 204 206 197 185 175 172 169 164 157 147 137 130 124 120 117 117 116 112 106 97 93 93 95 93 80 68 57 67 76 85 86 88 87 88 87 86 89 90 93 94 95 96 98 97 98 99 99 98 97 95 92 90 89 84 83 86 89 92 97 102 107 106 108 109 106 103 100 101 104 109 108 107 104 104 105 107 111 117 121 124 124 123 122 117 112 108 99 93 85 83 83 83 76 69 61 60 61 63 64 67 71 69 61 53 48 49 49 52 60 69 78 81 84 87 86 84 82 74 63 53 59 67 76 76 69 66 67 74 79 84 89 94 96 97 97 97 100 101 102 100 97 97 102 106 110 125 140 154 162 169 175 179 185 188 191 194 194 197 197 201 201 203 204 204 201 199 197 190 184 178 173 169 166 167 167 171 171 175 174 180 188 199 203 203 204 203 202 200 197 188 182 177 174 174 174 169 164 160 
+187 193 196 199 202 203 204 202 201 197 187 173 160 152 146 140 135 136 137 133 132 129 126 123 119 117 110 107 103 112 119 127 128 131 133 129 125 118 112 105 100 93 85 78 73 72 72 71 75 78 83 91 98 105 106 109 110 102 94 86 92 100 105 95 84 72 72 74 78 84 90 93 98 102 107 108 105 102 100 98 95 90 84 76 70 72 74 76 76 77 78 83 88 92 92 91 91 89 90 90 88 86 82 81 82 83 83 78 75 72 74 77 79 80 80 80 80 80 80 80 80 79 83 88 93 98 102 106 110 114 117 120 120 120 118 112 106 102 101 101 101 100 99 98 101 103 104 108 112 115 118 121 123 122 120 119 113 107 101 96 94 93 89 83 77 72 70 70 69 67 66 65 76 87 97 98 97 96 96 95 94 97 98 100 101 101 100 105 111 117 120 118 115 113 115 114 115 113 109 106 106 105 106 115 122 130 137 143 148 149 146 145 146 147 148 152 154 156 155 157 159 161 161 163 163 164 166 166 167 164 162 159 158 153 149 145 141 141 140 140 145 150 156 164 167 170 170 173 176 178 179 181 183 185 187 188 186 186 182 186 192 197 185 173 159 153 153 148 139 128 116 109 104 101 98 101 103 102 97 93 88 88 89 88 80 73 65 71 76 81 83 85 88 88 88 88 88 89 89 89 91 93 94 92 92 93 94 97 100 103 106 108 107 105 103 101 99 96 100 104 109 110 108 109 104 100 95 96 99 104 106 108 110 111 113 114 115 118 120 122 127 129 131 126 121 115 106 96 86 81 77 73 69 63 58 57 58 59 60 62 63 61 53 45 42 45 48 52 60 67 73 75 76 78 78 78 78 76 74 72 76 81 85 86 86 88 92 94 97 97 95 93 90 91 93 95 98 102 105 111 115 121 126 133 138 148 156 164 167 172 176 177 177 175 177 177 176 179 182 185 188 190 195 197 197 194 193 187 181 176 177 180 180 179 172 171 161 151 140 143 154 164 172 170 169 171 165 161 156 148 143 137 147 153 160 158 155 151 
+156 166 175 183 182 180 181 180 177 175 171 165 158 153 148 142 140 135 135 132 125 121 116 114 111 110 107 105 105 117 127 137 133 132 129 126 123 117 111 103 96 90 86 81 82 86 88 89 86 85 86 91 96 100 99 97 97 91 86 81 86 93 99 92 83 74 73 71 70 75 84 93 101 106 112 115 115 114 113 111 111 106 96 86 78 80 83 86 80 73 67 74 82 89 90 89 89 90 92 92 90 85 80 80 86 92 93 84 75 70 72 75 77 79 81 83 86 89 92 92 92 93 93 92 93 96 101 103 107 110 113 116 115 116 115 111 106 103 101 100 99 100 100 102 106 110 115 114 112 111 111 111 112 112 111 108 106 101 97 95 93 93 90 81 71 64 63 61 61 64 68 71 85 97 110 111 111 112 108 103 98 98 99 101 103 109 114 119 124 129 131 132 132 131 128 123 119 118 116 114 104 97 88 99 112 122 131 135 141 141 141 140 137 134 131 130 134 135 136 143 148 152 154 152 154 157 158 162 161 161 159 158 154 152 145 140 133 134 141 144 147 149 150 153 154 153 154 157 159 161 161 158 160 162 166 165 164 159 155 165 171 183 166 149 130 126 126 123 115 103 91 86 82 79 79 82 85 89 88 89 88 88 88 87 84 83 82 81 81 79 83 86 89 90 91 91 90 87 85 84 86 90 89 88 86 87 93 98 104 109 116 120 118 117 114 109 103 98 99 101 103 105 105 106 104 101 98 99 101 106 107 109 111 112 114 114 115 114 114 113 114 115 116 108 102 94 85 76 67 65 64 64 61 58 54 52 51 49 49 50 51 50 47 44 44 49 55 59 60 60 60 61 62 62 64 67 71 77 84 92 93 92 91 94 99 105 108 108 110 107 101 94 91 93 93 93 98 103 108 112 116 119 122 125 129 134 142 150 155 160 164 164 160 157 153 153 150 151 156 161 167 173 182 186 188 187 188 183 177 174 180 188 194 191 182 177 164 152 140 143 151 160 161 156 153 146 141 136 133 133 135 136 143 151 157 153 151 148 
+146 155 165 174 172 167 163 162 158 155 158 159 161 158 156 153 149 145 142 136 128 120 114 111 107 104 99 94 94 109 124 137 128 121 115 112 108 105 100 94 90 87 85 84 87 94 100 101 94 89 87 91 94 95 90 85 82 80 79 76 79 83 86 86 85 82 80 76 73 77 83 89 94 98 103 105 107 108 109 111 113 110 106 99 96 96 97 97 89 81 73 75 77 81 83 86 88 90 94 97 93 87 81 81 90 98 100 90 78 70 72 75 77 80 84 87 93 99 104 108 110 113 108 103 96 98 102 106 109 109 111 110 108 104 103 97 91 88 86 85 84 87 91 94 91 88 85 83 83 81 78 79 77 80 85 89 92 94 94 93 89 87 81 75 69 65 66 68 69 74 77 81 87 93 99 97 94 93 95 98 100 104 104 106 111 117 123 128 128 129 129 126 123 122 120 120 119 119 121 120 112 108 99 111 119 132 136 139 143 144 142 141 137 132 127 126 127 127 129 133 138 138 141 140 141 144 146 149 150 151 152 149 145 142 136 132 125 126 130 131 136 137 138 138 137 135 134 137 139 140 138 138 137 140 143 146 141 139 135 144 151 161 147 130 115 109 105 103 96 90 82 79 78 77 78 80 83 85 85 86 85 86 86 86 84 82 80 80 81 81 83 85 86 85 84 82 81 79 78 80 82 85 87 90 91 94 98 103 107 111 113 115 111 106 101 99 95 93 91 89 88 91 95 99 102 105 109 109 111 111 112 111 111 111 113 114 113 110 105 102 99 98 95 88 81 74 66 57 49 50 53 56 55 54 52 50 47 44 43 44 45 47 48 48 49 51 53 53 52 51 51 54 57 60 64 68 73 76 79 82 82 78 74 79 88 97 104 105 107 107 104 100 97 96 96 94 101 106 111 113 111 111 113 114 115 120 128 135 142 149 154 152 144 139 135 134 133 134 136 139 143 150 158 166 170 175 180 181 184 188 192 198 204 204 204 204 199 196 190 188 184 178 169 155 141 129 123 116 113 120 130 137 144 150 154 152 152 149 
+156 164 172 178 175 173 170 166 163 160 158 159 159 158 158 157 152 146 142 136 129 121 116 111 105 102 94 87 86 102 120 134 122 111 99 96 91 88 86 85 84 83 83 83 88 96 104 102 94 86 83 85 88 91 94 95 95 91 86 83 86 90 92 91 90 89 85 81 77 80 84 89 92 92 95 96 100 103 106 109 114 116 116 115 113 111 110 108 100 93 85 80 75 70 75 81 87 92 96 101 99 92 86 85 91 97 98 92 86 84 90 97 102 108 114 118 119 119 119 117 115 115 110 105 100 100 101 102 104 105 106 107 105 102 98 91 85 80 80 78 79 81 84 87 80 73 65 64 62 61 57 53 50 55 63 71 79 86 93 93 86 80 73 70 66 65 71 76 81 84 88 90 87 86 83 77 71 63 75 89 103 109 112 114 119 125 131 131 128 126 121 110 103 98 103 109 112 117 122 127 129 131 134 140 146 152 152 152 152 149 148 145 143 141 135 133 133 132 130 126 124 121 123 122 122 124 126 128 133 137 141 135 130 124 121 117 114 111 109 104 108 113 120 121 117 112 111 114 114 113 113 112 113 118 121 125 124 120 118 124 130 137 126 114 102 97 91 85 84 81 82 82 82 82 84 85 86 86 84 82 81 82 83 84 82 78 75 78 79 82 83 83 84 81 77 73 72 71 71 74 77 81 85 89 93 96 102 105 109 109 110 109 103 97 91 90 90 90 88 86 86 88 92 94 99 104 111 113 114 114 111 108 105 102 101 100 98 92 87 84 81 79 77 73 68 63 59 55 50 51 51 52 53 55 57 56 52 47 46 48 51 53 55 57 58 52 46 40 42 43 44 49 54 60 65 70 75 76 75 74 70 65 61 66 80 91 101 103 108 110 110 110 111 112 113 116 123 130 136 138 140 141 141 141 141 141 142 140 140 143 147 144 136 131 128 128 129 128 125 121 120 127 134 142 151 162 172 181 189 199 203 205 209 212 215 220 217 217 217 209 201 192 183 171 162 154 150 146 143 147 147 150 154 158 162 160 158 156 
+177 180 184 187 184 183 177 175 169 164 162 160 158 158 158 157 151 142 136 131 128 124 120 115 111 108 103 98 100 114 129 141 133 125 115 107 98 91 90 88 87 88 89 90 95 101 108 107 98 89 85 85 86 90 97 106 110 103 97 91 97 102 107 102 97 92 88 86 82 85 89 91 93 94 94 97 101 104 108 109 111 111 110 108 107 106 106 104 98 93 87 82 77 72 76 84 89 93 99 103 101 95 91 90 92 95 97 96 95 96 105 114 123 133 143 151 145 139 133 126 118 113 109 106 103 102 99 98 98 101 102 103 104 104 101 92 83 79 80 82 82 82 81 81 78 74 71 71 72 73 68 61 55 57 61 65 74 87 98 101 96 92 85 79 72 69 73 78 82 84 87 90 87 84 80 79 77 74 80 89 98 99 100 101 107 113 122 125 124 124 121 113 105 100 104 108 112 119 126 132 139 146 151 154 160 164 164 163 160 157 151 146 143 138 133 132 133 132 129 120 113 107 105 104 103 102 102 102 111 117 125 119 113 106 106 105 106 102 96 91 93 99 107 107 104 99 97 99 100 99 97 96 95 100 104 107 105 102 100 104 107 111 105 99 93 89 83 78 78 81 83 83 83 83 84 83 84 84 84 83 85 83 81 80 80 79 78 81 83 85 84 83 82 80 76 73 72 70 68 71 75 79 81 82 81 84 91 98 102 101 100 99 95 91 89 89 89 89 91 94 96 96 93 91 94 101 108 111 112 114 111 105 98 92 87 83 78 73 68 64 62 62 60 58 56 54 54 54 53 53 52 52 55 59 62 60 55 50 49 51 54 57 60 62 63 57 51 46 47 48 49 54 59 64 68 71 74 74 73 72 70 67 65 69 82 94 102 106 109 113 120 126 132 137 141 148 156 163 172 174 177 179 177 172 170 163 154 148 144 145 148 146 142 138 136 139 143 142 139 135 133 138 144 148 150 152 154 162 169 177 178 181 182 187 192 199 200 198 201 200 198 198 197 194 195 195 191 186 182 176 170 163 166 171 171 172 169 167 
+207 205 204 206 203 199 196 189 183 176 171 167 163 162 161 160 154 146 138 134 133 131 127 123 119 115 113 110 113 124 137 147 146 143 139 126 114 102 101 100 98 99 103 106 108 110 114 113 112 109 109 109 111 111 113 113 111 100 89 82 90 98 105 99 95 90 86 83 80 83 87 90 93 94 95 98 102 107 108 108 108 106 104 101 100 98 97 95 93 89 85 85 83 80 85 89 94 97 99 101 100 95 91 91 95 99 100 97 94 96 100 107 112 120 127 133 131 129 125 123 123 119 118 117 114 112 108 104 102 100 97 97 97 99 95 86 78 75 79 83 87 86 85 83 81 78 77 78 79 80 74 66 58 58 59 60 71 87 102 109 105 102 98 88 78 75 77 81 84 85 88 88 85 82 80 84 87 90 90 89 89 86 82 79 85 96 106 115 119 125 128 124 118 116 115 113 115 123 130 140 144 153 158 162 166 170 170 171 170 164 153 142 136 130 123 123 127 132 128 115 103 93 90 87 83 79 73 71 82 94 105 100 94 88 90 97 101 98 93 89 90 92 97 97 94 92 91 94 95 94 90 86 82 86 89 92 89 85 81 83 83 86 84 85 85 82 80 77 78 83 87 87 84 82 80 80 78 79 84 87 89 84 78 73 77 80 83 85 86 87 87 84 81 79 77 75 71 69 66 67 72 78 79 77 74 75 83 91 97 95 95 93 91 91 89 89 91 91 95 97 100 99 96 94 98 104 110 115 117 119 117 108 99 90 84 77 70 68 65 63 63 62 62 63 64 65 67 69 71 71 69 68 67 67 66 63 57 52 50 52 55 57 61 64 67 65 64 62 61 59 56 61 65 69 70 72 73 73 72 70 69 69 69 75 85 97 105 111 116 121 131 140 148 155 161 169 172 176 181 183 184 185 183 180 178 174 172 167 168 168 172 173 172 171 173 174 177 179 176 173 173 172 170 165 158 149 139 143 149 152 156 159 163 167 174 180 183 186 189 192 195 197 199 199 199 198 192 185 180 180 181 182 185 188 191 190 189 188 
+216 217 217 216 214 212 210 200 194 187 181 175 168 166 165 163 158 153 147 144 142 140 136 133 130 126 127 124 126 127 130 134 133 132 131 123 115 106 106 105 105 108 112 113 116 117 118 118 120 122 125 128 130 129 125 119 109 94 79 68 78 88 97 93 88 84 79 74 69 74 80 86 91 95 99 103 105 109 108 107 106 101 93 86 81 84 86 88 85 83 80 81 82 82 85 88 90 94 98 102 100 94 91 93 98 103 104 102 99 99 100 101 105 109 113 117 117 118 119 121 124 127 127 127 127 124 121 117 111 101 92 88 87 87 83 77 70 68 77 84 91 94 97 99 93 89 84 79 75 71 68 63 59 59 61 63 71 82 94 100 102 103 103 97 92 89 91 92 92 88 85 82 80 79 77 82 86 91 90 89 88 85 82 80 81 85 89 95 102 108 113 110 109 107 106 105 106 116 122 131 135 139 143 146 152 155 158 161 164 156 144 132 122 116 109 109 114 118 117 106 96 88 85 84 81 76 72 68 76 83 90 89 88 86 89 93 99 97 93 89 89 91 93 91 88 84 83 86 88 90 87 84 81 83 84 85 83 79 77 79 81 83 82 83 82 82 81 80 83 84 88 86 83 80 78 77 76 75 76 77 78 77 76 76 77 79 81 82 82 82 81 80 78 77 75 73 72 70 68 70 78 85 89 86 84 84 90 95 99 98 99 97 96 95 94 95 95 96 96 96 95 98 102 106 110 114 116 121 123 127 125 114 105 94 84 74 66 65 64 64 64 65 65 69 73 76 80 84 88 86 83 80 75 71 68 63 59 54 52 55 60 63 68 71 75 77 79 79 79 77 76 76 76 75 74 71 68 69 69 70 72 75 79 86 95 105 113 122 130 139 146 154 160 166 173 179 180 182 183 182 182 184 186 184 183 185 186 184 186 190 191 193 194 195 198 199 198 197 199 196 194 187 183 178 168 158 148 152 157 164 167 172 178 176 177 171 174 178 181 187 191 195 197 194 192 189 183 178 173 182 190 196 197 197 200 197 194 192 
+208 213 215 218 214 213 207 200 192 186 173 162 153 151 149 147 147 146 147 148 148 147 146 141 137 138 138 139 135 130 123 120 120 120 119 116 112 109 110 111 111 112 114 115 116 118 119 118 113 110 111 113 116 116 113 110 105 99 91 85 85 85 86 88 89 88 84 79 74 75 77 81 86 93 99 103 104 107 107 106 103 96 82 69 61 69 74 79 77 76 73 77 80 83 82 80 79 86 94 101 100 95 89 93 103 111 114 116 114 115 117 120 124 127 130 133 131 129 129 129 128 129 128 126 125 123 122 118 113 105 98 92 89 87 83 78 73 72 78 84 90 95 101 104 98 91 85 78 70 64 62 61 59 62 65 67 73 79 85 92 97 103 107 105 105 104 103 103 100 91 83 75 74 75 75 79 84 89 89 89 88 88 87 86 81 75 70 72 80 86 89 88 87 86 89 93 95 102 109 115 115 115 114 118 124 128 133 138 143 136 126 116 107 100 94 93 95 98 98 95 90 89 90 92 93 93 92 91 87 84 81 86 92 97 98 99 99 97 94 92 91 93 93 90 83 77 75 79 83 86 86 85 86 86 86 86 84 82 80 85 89 94 91 88 83 85 85 86 87 86 85 84 82 78 75 74 72 70 67 64 62 68 74 80 79 79 79 78 76 76 76 76 76 75 74 74 73 71 70 74 82 91 95 93 91 90 96 100 103 105 104 105 103 103 102 105 107 109 110 110 109 114 119 124 128 128 131 134 135 138 135 124 114 103 93 81 72 72 72 71 74 78 82 83 85 86 88 89 90 85 78 71 66 65 62 60 58 56 57 63 69 73 78 83 87 91 95 99 99 99 99 95 89 82 76 70 63 64 66 69 74 81 86 93 100 108 116 127 137 146 150 157 162 167 171 175 175 172 169 168 166 164 163 163 162 164 167 171 176 180 184 188 194 201 202 205 204 207 206 205 202 199 194 189 180 170 161 163 168 173 177 186 189 188 179 169 164 168 173 174 177 180 181 178 180 180 176 172 168 166 162 158 160 166 171 175 174 175 
+200 204 206 208 205 205 202 194 189 181 165 150 135 132 129 127 131 136 141 146 150 155 153 148 144 142 142 144 141 131 122 115 115 114 113 112 113 113 112 111 111 111 113 112 113 114 117 114 108 101 99 102 105 103 102 101 101 105 107 106 94 84 77 85 91 97 95 94 92 85 79 72 78 85 93 93 92 90 89 91 91 89 84 78 76 82 87 90 87 83 81 85 88 91 90 86 83 88 93 97 96 93 90 96 108 118 124 124 126 130 133 136 140 142 146 147 144 142 140 137 133 131 127 123 119 117 118 117 114 111 105 101 97 92 90 88 86 85 84 82 84 88 93 97 90 84 78 70 63 57 57 57 58 66 74 82 84 81 79 82 86 91 94 95 96 95 91 89 84 79 74 68 67 65 64 69 75 81 84 86 89 90 91 93 91 85 80 80 82 85 87 87 88 88 92 93 96 101 105 109 107 104 102 106 109 112 118 124 129 127 123 117 112 108 104 101 100 99 97 96 94 94 95 96 97 97 97 98 94 89 84 89 95 98 99 100 103 99 95 91 90 91 91 89 82 75 74 80 86 90 89 86 85 87 89 90 89 88 85 87 90 92 88 86 82 81 82 81 81 81 82 81 80 78 76 75 74 71 68 65 63 67 71 73 74 75 77 75 75 74 74 75 75 77 77 78 78 77 76 78 83 87 89 88 87 87 95 104 111 114 116 119 117 117 119 124 131 137 140 143 146 146 149 150 148 150 150 150 148 147 142 134 125 115 103 90 80 80 79 79 85 92 99 98 96 95 94 91 89 82 73 65 60 58 58 57 57 57 58 64 69 73 77 79 82 85 89 92 90 88 84 80 76 71 66 59 52 52 55 57 63 70 77 85 94 103 113 122 131 140 146 149 155 157 158 162 160 159 155 151 145 140 138 138 138 143 152 159 169 174 179 186 195 202 206 205 206 209 208 204 202 199 199 196 191 185 183 185 190 192 194 196 197 191 179 170 164 162 159 156 156 156 156 160 166 171 169 166 164 150 137 125 132 143 157 162 165 170 
+194 188 181 182 183 185 183 177 170 163 154 145 135 131 128 124 128 132 136 141 148 154 153 150 144 143 145 145 141 129 117 110 109 107 109 111 114 115 113 110 105 106 105 106 106 106 106 105 104 102 103 105 106 107 106 105 105 109 113 110 101 92 84 85 87 89 90 92 93 84 76 66 71 78 86 86 83 78 78 79 81 83 85 87 91 97 102 106 100 96 93 95 99 102 102 100 100 96 93 89 91 91 93 100 110 122 126 127 128 130 134 139 141 141 140 139 135 129 124 122 121 118 118 117 116 115 113 111 107 102 96 93 91 88 87 87 87 86 84 81 80 83 87 88 84 80 76 68 61 53 55 57 59 68 80 91 89 82 75 74 77 80 84 86 88 86 81 75 70 67 64 62 58 55 52 59 66 73 78 84 89 93 98 103 102 100 98 97 93 90 91 94 98 101 102 103 104 105 106 108 104 101 98 100 101 103 109 114 121 124 128 132 133 132 130 126 121 115 110 109 106 104 100 95 92 93 94 95 95 96 96 96 94 93 97 101 105 102 96 90 87 89 90 88 83 78 78 88 96 100 93 85 81 87 93 98 96 94 92 89 86 84 82 81 80 78 75 72 72 74 77 77 78 79 79 77 76 74 72 69 67 67 67 66 69 71 74 73 72 72 72 74 76 78 80 82 83 83 83 83 84 86 86 86 85 88 99 110 120 123 123 124 125 126 128 134 142 150 155 158 162 161 159 155 153 150 148 144 137 129 123 116 109 102 94 87 80 78 76 73 78 82 87 86 85 83 79 75 70 66 63 60 58 57 55 55 54 54 56 58 60 63 64 65 67 69 72 73 69 64 60 59 58 59 54 47 41 40 44 47 53 62 70 79 89 97 105 113 120 127 131 132 134 136 138 140 140 140 141 144 144 147 150 149 147 153 162 170 175 181 187 190 194 199 202 203 205 206 200 198 193 197 198 198 201 204 207 207 210 210 207 205 204 197 190 180 175 172 166 162 160 157 154 155 156 155 155 154 154 153 154 155 162 170 176 182 184 188 
+205 193 181 175 174 175 172 164 157 149 145 140 136 133 129 126 128 130 132 136 141 145 143 141 137 136 135 136 131 122 113 108 110 110 109 109 110 109 107 107 104 105 106 106 107 106 106 106 106 107 106 107 109 109 109 109 110 112 115 114 109 103 96 86 78 72 75 78 81 75 71 65 68 73 79 81 83 85 87 90 93 95 96 96 99 99 101 102 99 95 93 96 98 100 101 101 101 96 91 87 91 97 103 111 119 126 131 132 131 133 137 141 143 139 137 131 125 118 110 108 109 106 109 112 114 111 106 103 97 88 81 79 78 78 78 78 79 79 79 79 79 79 78 78 80 82 84 76 68 61 62 61 62 66 71 76 78 79 79 79 80 80 80 81 83 84 81 78 76 77 77 79 78 78 77 78 78 80 83 85 88 93 98 103 101 99 96 95 94 93 93 96 98 100 103 105 108 108 110 109 107 105 102 105 107 108 111 114 118 122 128 134 134 133 131 126 122 114 111 109 107 104 100 94 91 91 92 93 95 96 97 95 94 92 93 94 97 94 92 87 87 88 89 87 86 81 83 88 93 95 88 80 77 81 86 89 89 89 87 85 82 79 80 80 82 79 76 72 72 75 78 78 77 76 75 75 74 75 75 76 76 75 74 72 72 72 72 73 75 77 77 77 77 78 79 80 81 85 89 92 96 97 100 100 99 102 111 121 130 124 123 118 119 121 124 130 137 145 150 155 158 155 151 148 143 138 133 125 113 102 93 88 84 80 79 80 79 75 71 67 71 72 76 76 74 72 68 62 56 56 58 61 61 61 59 57 58 58 59 60 63 65 66 67 69 68 67 65 61 57 53 52 53 53 51 49 47 48 54 59 64 70 76 81 84 87 90 96 101 107 107 106 106 108 110 112 117 122 128 138 149 160 163 161 158 160 167 172 175 176 177 181 183 187 191 191 190 190 193 196 198 205 206 211 216 216 219 222 222 221 221 219 217 214 210 208 205 202 196 191 183 174 165 157 148 138 139 142 144 155 167 179 186 188 193 195 196 198 
+230 218 207 197 189 181 174 165 156 150 150 150 148 142 137 133 135 138 140 136 133 131 129 127 124 123 123 122 119 114 109 106 108 110 110 107 103 100 103 104 105 106 109 111 115 118 121 120 118 117 115 113 112 110 110 107 108 112 115 115 110 105 101 90 79 70 71 72 73 72 70 67 68 69 71 77 84 91 95 101 104 105 107 108 104 101 99 96 95 93 92 92 93 94 93 94 94 92 89 86 97 108 122 129 133 138 139 139 139 140 142 144 145 139 136 129 125 118 113 112 108 106 106 106 106 104 103 102 96 90 85 82 81 81 80 78 77 76 75 75 74 73 73 74 78 84 88 81 75 67 66 64 62 62 63 63 69 75 80 81 80 79 78 78 79 79 79 81 82 86 90 94 98 102 105 100 94 90 89 87 88 92 97 101 99 94 89 89 91 94 94 94 94 95 101 104 109 111 112 113 113 112 111 116 118 124 121 120 118 120 123 127 125 120 114 110 109 105 104 101 100 98 96 93 91 91 92 93 92 91 89 91 93 95 90 85 80 80 83 85 86 88 90 89 89 87 86 85 83 81 77 74 71 72 73 74 75 78 79 78 77 76 78 81 83 82 79 75 76 78 80 80 76 71 69 71 72 74 79 84 87 84 83 80 76 73 70 73 77 81 81 80 78 79 77 77 81 87 94 99 102 105 108 110 111 111 120 127 133 127 121 115 120 121 124 130 135 141 146 149 155 155 149 144 139 132 128 119 108 97 89 85 82 80 80 79 79 75 71 68 68 69 69 71 75 78 78 73 70 70 75 80 81 77 72 70 69 69 69 71 74 76 79 82 84 77 69 62 58 54 51 49 48 47 48 50 52 58 64 69 75 78 80 81 79 76 76 83 88 95 98 100 103 106 109 111 118 124 130 134 140 147 147 144 140 137 132 124 121 125 131 138 147 159 169 167 166 165 179 193 212 217 221 224 228 231 230 231 230 231 230 227 224 222 220 218 214 206 198 189 178 168 158 153 148 145 146 147 148 154 161 167 174 182 191 196 199 202 
+226 220 216 207 197 184 176 166 157 152 155 159 160 152 145 139 145 149 152 138 124 111 108 106 103 102 101 99 98 97 96 96 97 97 99 103 106 108 107 107 106 109 110 114 116 121 125 123 122 119 116 114 111 109 109 108 108 112 114 116 111 108 103 93 85 78 74 72 71 73 74 75 72 67 63 72 83 94 100 102 106 110 114 117 115 109 102 97 93 89 88 94 98 100 100 99 98 96 92 91 101 113 125 130 134 137 138 139 140 140 141 143 142 136 131 128 123 121 118 114 111 107 104 99 96 97 99 100 99 98 95 94 92 92 88 85 80 76 71 66 64 68 72 76 80 84 88 82 77 72 68 63 59 58 58 57 59 62 64 70 75 81 81 77 73 72 71 71 73 79 86 92 96 101 104 99 97 93 93 96 96 97 99 100 97 92 87 88 90 94 96 100 104 107 112 116 119 118 118 116 116 117 118 120 123 127 125 123 122 123 126 126 124 119 114 110 105 101 98 96 92 91 91 90 91 89 88 88 86 84 81 84 88 91 86 82 78 78 80 83 83 84 84 84 83 83 83 82 83 82 81 78 77 76 75 74 74 75 76 76 77 78 78 77 75 74 74 73 76 79 84 85 80 76 73 72 71 71 75 79 82 80 76 74 74 74 76 76 75 74 76 76 79 79 78 78 79 82 85 88 91 94 96 102 106 112 118 124 129 126 124 122 126 130 136 137 138 141 144 150 154 153 148 143 137 133 127 122 112 102 95 92 88 84 83 81 79 76 73 69 67 65 64 70 77 85 85 83 81 84 89 94 95 88 81 76 76 76 77 81 84 87 88 91 92 84 75 65 61 58 54 53 52 52 55 61 67 71 74 77 78 75 73 70 67 65 65 75 86 95 103 112 121 123 123 125 128 129 132 133 133 133 129 128 125 117 103 90 87 98 109 120 137 150 163 164 163 166 176 189 197 202 205 208 209 209 209 208 210 211 211 207 208 206 204 199 192 182 171 161 154 147 141 145 150 155 156 154 152 153 154 156 164 175 187 193 198 202 
+203 207 209 205 196 187 177 169 160 153 153 153 150 145 139 136 140 146 149 139 127 116 107 101 95 90 88 85 85 87 89 88 87 85 88 101 112 117 113 111 108 111 112 114 112 113 114 110 105 98 100 103 105 108 111 113 112 108 105 103 103 104 101 92 83 77 76 75 74 77 80 83 76 69 62 72 84 97 102 106 108 113 120 126 124 114 105 97 92 87 86 96 106 112 111 109 106 105 101 98 103 107 112 114 116 119 118 120 122 120 122 120 118 116 115 113 113 112 114 115 116 117 115 113 109 111 112 113 111 106 105 99 96 91 88 82 77 72 69 64 63 68 73 77 80 83 85 83 80 76 72 67 63 60 57 55 54 54 53 60 70 81 83 76 71 67 65 63 65 73 82 90 93 97 100 99 98 97 100 102 104 103 101 100 96 91 86 88 91 94 100 109 119 126 128 130 132 127 124 121 120 120 120 122 124 126 126 126 126 127 130 132 129 124 120 114 107 102 95 91 86 84 86 89 91 86 84 81 77 76 73 77 79 84 84 83 85 84 82 82 80 79 76 75 73 71 73 80 87 92 90 88 87 85 83 81 78 75 73 76 80 85 79 70 63 62 66 70 75 81 88 90 87 83 79 74 69 67 70 73 75 72 69 66 71 76 81 77 73 69 71 74 79 79 79 78 78 77 77 78 80 83 88 95 103 109 111 116 119 119 120 121 126 132 136 136 137 137 140 144 149 148 146 142 139 135 133 125 118 109 103 94 86 79 79 78 77 83 88 94 93 94 94 92 90 88 87 85 85 88 92 95 95 86 78 75 77 80 83 87 92 96 96 97 96 88 80 71 67 64 60 59 58 57 62 71 79 84 84 84 81 76 68 62 60 58 58 69 80 90 98 106 113 115 116 116 116 116 116 113 110 108 109 109 110 112 119 126 135 143 148 155 165 172 178 180 182 188 185 182 176 178 178 182 186 185 185 188 189 189 189 189 189 189 185 181 180 172 164 158 154 152 149 153 154 156 151 145 139 139 141 143 152 166 178 189 193 198 
+200 202 204 198 191 186 178 170 164 156 153 147 142 136 131 128 133 136 141 140 141 137 123 111 98 96 95 93 94 98 102 103 105 105 106 109 113 116 113 109 108 108 108 110 107 105 104 98 92 86 90 95 100 105 110 116 112 104 96 94 97 101 97 88 79 73 77 81 84 85 87 88 83 77 70 78 86 95 100 106 110 115 119 124 124 116 111 103 94 88 86 97 109 119 118 117 116 114 113 111 112 113 114 114 115 112 115 113 115 115 112 109 107 106 104 105 106 107 111 116 121 125 127 126 125 128 129 131 125 118 111 103 96 88 80 73 67 65 67 69 70 72 75 77 80 80 82 82 83 82 82 81 80 74 69 63 61 58 57 61 68 74 79 81 85 84 80 77 76 78 82 84 88 89 92 90 87 84 92 99 107 106 106 105 105 103 103 102 101 99 105 113 122 127 129 129 129 128 126 125 128 130 132 135 135 138 137 135 134 135 135 135 131 125 120 114 109 104 98 92 86 83 83 84 84 81 80 77 76 75 74 77 80 83 83 82 81 80 79 77 77 76 77 76 72 69 70 76 83 87 87 88 87 86 85 83 79 76 72 75 78 81 77 73 68 68 72 74 76 78 79 79 80 79 78 73 70 66 67 67 68 70 71 74 75 76 77 73 70 65 69 75 81 82 79 76 75 73 73 73 78 81 86 91 96 100 98 96 94 98 104 108 114 119 124 127 131 132 135 136 140 141 140 141 140 138 136 133 125 117 108 96 84 73 73 73 73 88 103 117 120 120 120 111 99 90 85 87 90 91 94 95 92 83 76 70 75 78 82 87 93 98 98 98 98 92 85 79 75 70 66 64 63 62 67 73 81 85 86 88 87 78 68 60 59 58 56 66 73 81 84 88 92 93 96 98 98 94 91 91 89 87 87 90 94 106 128 149 165 165 166 165 167 169 172 173 176 180 177 176 177 178 181 182 182 182 181 179 172 162 158 159 162 167 169 170 171 172 171 173 172 168 168 163 159 153 145 136 127 128 135 139 149 161 172 181 184 189 
+206 197 193 187 180 173 168 166 161 157 155 151 148 144 142 138 137 137 137 136 135 134 125 115 104 102 101 100 103 107 111 118 121 124 125 119 117 111 109 105 103 101 102 102 100 99 98 92 88 83 86 90 94 96 98 101 98 92 86 85 88 89 88 83 78 74 77 80 83 86 89 91 89 86 82 86 90 96 101 106 111 115 118 122 121 117 114 107 97 88 86 100 113 124 124 125 125 126 127 129 131 130 131 131 130 131 131 134 133 134 132 131 130 132 132 135 134 134 133 133 134 135 136 134 133 134 134 134 128 121 114 109 103 98 93 88 83 77 74 72 70 71 72 74 76 78 81 82 83 84 85 86 87 80 73 66 64 63 61 63 66 70 75 83 93 95 92 88 86 83 81 79 81 83 84 80 76 72 84 96 109 109 110 112 115 118 122 120 114 106 108 114 122 125 124 122 121 124 127 129 136 142 147 150 151 151 148 145 142 141 140 138 132 124 117 112 111 109 105 97 90 84 80 76 74 75 77 78 79 81 82 84 85 87 83 78 74 71 70 69 73 77 83 82 77 71 69 71 73 76 78 81 82 82 81 81 79 76 73 74 74 74 76 77 77 79 79 80 77 72 67 64 69 74 75 73 70 68 64 61 60 68 75 83 80 76 73 69 65 62 68 76 84 84 79 74 72 71 70 73 77 82 85 89 93 95 90 86 82 90 98 106 111 116 122 124 127 131 132 131 132 133 132 131 131 127 124 119 115 112 108 105 101 99 102 105 107 113 118 121 117 112 107 98 87 78 77 84 91 95 92 90 85 78 69 65 67 70 72 81 89 96 96 96 97 94 91 89 83 77 70 68 67 67 69 75 80 84 87 90 89 80 70 62 60 59 57 64 69 75 78 81 84 85 86 86 84 82 80 81 83 85 88 96 104 112 119 124 127 125 122 120 127 135 143 145 147 151 159 168 182 185 186 185 187 181 179 169 154 141 130 136 141 146 151 155 159 160 161 160 160 160 160 159 159 159 161 160 162 164 167 167 168 168 164 164 171 177 
+201 197 195 186 181 172 168 163 162 160 158 156 154 154 153 150 144 140 134 128 122 117 115 113 110 109 108 106 105 104 104 106 110 114 112 111 109 105 100 96 94 96 99 98 95 90 88 85 83 79 82 85 87 88 87 87 84 81 78 76 77 78 78 78 78 77 77 76 78 81 86 89 94 96 97 99 99 101 103 106 108 110 113 115 114 110 106 100 90 81 79 89 100 108 113 117 120 122 127 128 132 135 136 138 140 140 142 145 148 147 147 148 148 152 156 156 155 154 151 149 148 145 144 142 141 139 137 135 129 124 118 116 116 116 114 112 110 100 87 72 66 65 64 65 73 79 84 83 83 82 78 75 73 67 61 55 58 63 67 70 72 74 74 74 74 77 80 82 85 87 86 88 91 94 97 95 92 90 96 104 109 109 107 106 109 113 118 118 117 114 114 116 116 116 114 112 111 115 119 125 132 138 144 147 149 150 150 148 146 141 135 129 123 118 112 108 108 106 102 96 88 83 78 75 71 72 73 74 76 78 79 80 81 82 81 79 77 77 75 74 75 79 81 82 81 79 79 78 76 77 79 82 84 82 80 78 78 77 76 74 72 69 72 76 80 82 82 82 79 73 67 65 70 73 75 73 72 71 69 68 68 73 76 82 78 75 72 72 72 74 77 82 85 83 82 79 78 79 81 83 84 86 88 92 95 99 96 95 93 102 111 120 125 128 131 132 132 131 130 128 127 122 119 116 111 106 101 98 101 104 107 115 123 131 136 140 146 139 133 125 115 105 95 85 76 66 69 80 90 94 88 83 79 71 65 61 65 68 71 80 89 97 99 99 102 99 95 90 86 80 74 71 67 64 65 70 74 78 81 83 84 80 76 72 68 65 61 64 68 70 75 80 86 84 81 76 74 72 71 73 77 82 90 101 111 118 109 104 98 98 98 97 109 119 130 132 137 141 151 159 168 171 170 169 166 162 155 150 138 125 119 125 131 135 137 137 138 135 133 131 134 137 141 148 155 165 175 185 194 196 194 191 186 175 167 163 171 175 
+191 195 201 198 193 190 181 177 173 169 170 167 165 161 158 156 151 146 142 132 125 117 113 113 110 111 113 112 108 102 97 97 98 100 101 101 101 97 91 85 84 89 95 97 90 83 76 76 75 73 75 75 77 80 83 85 86 85 85 85 85 85 84 80 78 76 74 72 73 76 79 83 88 93 99 99 100 101 101 104 105 107 108 109 107 105 99 93 82 72 69 76 82 90 96 101 108 111 114 116 123 127 132 134 138 140 144 146 149 149 151 149 148 149 150 149 144 140 138 139 140 140 137 137 134 134 134 133 132 130 128 126 124 122 119 118 114 104 88 71 61 60 57 58 66 73 78 78 77 75 71 67 62 57 53 48 54 62 70 73 74 75 71 64 58 59 67 77 84 89 92 97 100 104 108 109 109 110 110 110 110 107 102 98 101 104 109 114 117 121 121 116 110 105 103 101 100 104 110 115 121 127 133 137 140 144 145 145 145 137 125 115 110 107 105 103 101 98 95 89 85 80 77 73 71 69 68 68 69 71 72 72 72 73 77 82 88 87 85 83 81 78 77 78 85 91 93 88 85 82 84 87 87 83 78 75 76 78 80 74 68 62 67 74 83 85 84 83 80 76 70 67 70 73 74 73 73 73 74 76 77 78 79 79 76 73 69 74 80 86 87 86 85 84 82 82 83 85 88 89 88 88 89 93 97 100 100 97 96 107 115 124 128 133 135 137 138 137 136 136 133 130 124 119 113 108 101 99 104 109 114 119 124 128 132 136 141 137 129 125 117 109 102 91 78 64 63 72 79 83 79 73 70 66 62 60 66 72 79 87 95 101 104 106 109 103 98 92 86 82 77 72 67 62 61 66 69 72 75 78 80 80 78 78 73 68 63 64 65 66 70 74 78 75 71 66 66 70 75 79 85 90 96 101 105 107 104 100 98 102 108 112 120 127 133 138 141 143 145 148 152 150 149 148 146 140 134 127 119 112 108 115 123 130 132 133 133 136 134 138 144 149 156 162 170 178 182 185 188 190 192 192 193 190 187 189 185 182 
+191 195 200 201 196 198 191 182 177 174 176 177 174 169 163 159 159 156 152 144 135 128 120 112 105 108 112 114 110 105 100 97 94 92 93 94 96 94 93 91 91 90 92 92 87 81 77 74 72 70 69 69 68 72 78 84 86 89 91 93 93 94 90 83 76 73 71 70 69 69 71 71 73 75 79 82 86 91 94 98 101 102 101 102 101 98 96 94 90 87 87 93 99 104 105 107 109 110 113 114 119 124 131 135 138 145 147 151 153 153 153 154 152 151 148 144 137 131 127 130 133 136 133 130 127 129 130 132 134 137 141 135 128 124 118 113 108 97 82 68 59 56 53 52 56 60 63 65 66 66 64 61 58 54 50 47 52 58 65 66 65 64 60 54 48 49 57 64 72 81 88 93 90 88 86 90 91 96 101 105 112 112 112 112 109 105 101 101 104 106 107 105 104 103 102 102 102 104 106 109 113 116 120 122 126 129 130 131 131 125 114 104 101 100 99 97 95 95 92 88 85 82 78 77 74 73 71 69 70 71 72 73 74 76 81 86 91 91 88 87 83 79 75 77 82 88 90 87 84 81 83 86 86 83 79 75 78 80 83 79 74 68 72 78 85 86 83 81 78 73 69 67 71 74 75 74 73 72 75 78 82 83 87 90 85 82 76 79 82 85 85 85 84 84 85 86 86 83 80 80 83 86 89 90 92 93 91 90 88 97 105 114 121 130 137 141 145 148 150 151 152 148 140 132 124 117 111 107 112 119 125 122 121 119 124 128 132 130 128 125 119 113 107 95 80 65 62 68 73 75 73 71 69 67 64 64 69 75 82 88 95 102 105 106 108 105 101 97 91 84 76 71 68 65 64 66 68 70 71 74 75 75 74 74 69 66 63 62 61 61 63 64 67 64 60 56 58 68 78 87 92 99 101 99 98 97 97 95 97 104 111 117 121 125 128 128 127 127 130 133 141 141 138 134 131 123 114 108 105 104 105 114 124 133 140 144 151 156 161 167 172 177 183 187 190 189 189 186 183 184 189 192 197 198 202 203 192 187 
+195 192 191 191 192 192 184 179 172 170 172 171 166 158 150 148 151 154 154 149 143 136 125 113 104 107 110 114 109 103 99 94 90 84 85 88 91 94 98 102 101 95 89 87 88 88 87 81 76 71 70 69 68 70 72 75 76 78 80 84 87 90 88 83 77 74 73 73 71 69 68 66 67 68 68 72 77 82 87 92 97 98 97 96 95 94 92 95 100 105 109 116 123 126 122 118 116 115 115 115 121 126 131 138 145 152 155 157 159 160 160 160 160 159 158 156 150 143 139 137 132 129 124 120 116 118 120 121 120 119 119 115 111 106 101 96 91 83 74 65 59 57 55 53 54 56 58 60 62 65 63 62 61 57 54 50 54 59 64 63 60 58 54 49 44 45 49 55 63 75 86 92 83 74 67 72 76 81 91 102 113 118 123 128 119 107 93 89 89 88 90 94 98 101 102 104 106 105 105 104 105 105 106 109 110 111 113 114 115 108 102 94 93 92 91 90 91 90 89 88 86 84 83 83 80 78 76 74 74 74 75 78 82 85 88 90 93 93 90 87 84 80 75 75 78 79 81 79 78 77 81 84 87 83 79 76 80 84 87 84 81 77 80 83 87 85 82 79 75 71 67 67 71 75 77 76 73 71 76 80 85 90 94 99 94 89 84 84 85 86 86 85 84 86 89 93 92 87 82 81 86 91 96 97 98 99 99 99 100 109 118 127 135 143 153 157 160 164 167 168 167 163 155 147 139 134 128 126 129 132 133 133 132 132 133 134 134 131 126 120 115 111 106 97 88 78 73 73 73 73 76 79 80 78 75 73 75 77 79 86 93 100 102 104 105 104 103 103 96 86 75 71 70 68 68 67 67 66 67 68 69 68 68 67 64 61 59 58 59 59 64 68 73 75 72 70 71 74 76 77 77 77 77 79 82 85 89 94 100 102 103 105 108 111 114 111 107 103 108 119 131 134 129 124 117 106 96 90 96 101 107 117 127 137 143 149 155 159 164 168 172 175 178 181 182 184 186 187 189 191 197 200 202 202 199 199 192 185 
+190 190 190 188 188 188 180 174 168 165 165 163 157 147 137 136 144 150 154 150 148 142 130 117 106 107 108 108 101 93 86 85 85 84 87 92 96 97 96 96 94 88 83 80 83 86 87 83 78 73 73 73 71 69 68 67 67 69 70 74 80 84 84 81 78 76 76 77 75 73 70 69 70 70 71 74 76 79 82 85 88 90 92 93 95 97 97 100 107 112 116 120 122 125 124 121 118 118 120 121 127 134 141 147 154 162 163 165 167 168 168 169 169 169 169 167 162 158 151 142 132 123 117 110 107 109 109 109 103 96 91 87 86 83 80 74 69 67 65 63 62 62 61 61 61 61 61 65 70 73 73 74 74 69 66 62 66 71 74 73 71 68 65 63 61 60 60 61 66 79 93 102 100 97 96 99 101 104 106 111 113 113 114 114 104 91 81 81 89 94 99 101 103 107 109 113 114 114 113 112 111 111 110 109 108 106 106 106 108 104 100 96 93 90 88 87 88 88 88 87 85 84 82 81 79 76 74 72 72 72 72 75 79 82 84 85 87 88 88 89 85 80 75 72 74 77 77 75 73 72 74 76 78 77 78 79 82 83 85 83 81 80 82 85 87 86 81 77 74 73 74 74 75 75 76 73 71 70 76 80 85 86 85 86 87 88 89 90 93 95 96 95 95 99 102 107 109 111 112 114 118 119 121 124 125 127 133 138 146 154 162 171 176 180 185 188 189 187 185 185 186 179 171 163 154 153 153 150 147 144 143 143 145 146 144 143 139 131 123 115 111 107 104 100 95 90 85 79 72 69 73 77 80 79 78 77 77 78 78 83 87 92 93 91 92 92 92 91 86 81 75 72 73 72 71 66 60 55 55 55 55 56 57 58 56 54 51 54 57 60 68 79 89 93 92 91 88 81 73 66 62 56 54 61 67 75 83 91 98 99 98 98 102 107 110 108 105 102 104 108 111 111 110 110 109 109 110 112 118 123 129 134 138 141 144 145 145 149 151 153 156 159 164 167 173 177 182 188 194 199 204 206 208 203 200 200 193 187 
+181 188 195 190 187 180 178 176 171 163 152 144 141 137 136 133 137 141 140 137 134 130 122 114 106 106 105 104 94 86 77 78 81 83 89 96 101 98 92 85 81 80 77 76 76 76 77 78 79 79 81 82 83 78 73 70 70 69 70 70 71 72 75 78 81 83 81 81 78 73 69 65 67 68 69 71 73 74 76 79 81 84 88 91 95 99 103 106 113 118 120 120 118 120 119 119 119 121 123 126 138 147 157 161 166 172 172 175 177 178 179 180 179 178 177 175 171 166 164 158 155 150 143 136 129 129 130 128 117 107 94 93 90 87 84 76 72 69 67 66 65 62 60 60 61 62 64 69 73 77 80 82 85 84 80 78 81 82 84 83 80 78 77 76 76 74 70 66 70 84 98 109 114 119 122 123 125 125 121 117 114 108 103 98 88 77 65 73 89 104 110 111 111 113 116 120 123 123 124 124 122 121 118 113 108 102 103 105 106 104 103 101 96 91 86 85 86 86 86 85 84 82 79 76 73 71 68 66 67 67 68 69 71 73 74 75 77 81 86 91 88 80 72 70 72 75 76 72 69 67 66 66 67 72 77 82 82 82 81 81 81 81 83 85 88 85 79 73 73 77 80 82 79 76 74 72 69 68 74 79 84 80 77 74 81 87 94 98 100 102 103 103 104 107 113 118 124 131 137 142 143 144 145 149 154 156 163 174 181 187 196 204 204 207 207 206 203 198 195 194 192 185 178 172 167 163 163 158 155 152 145 143 139 135 133 128 124 120 114 108 107 106 108 106 103 99 92 80 67 59 60 61 62 66 69 74 75 77 79 79 80 78 77 76 75 75 75 76 74 74 73 73 75 76 74 64 55 49 48 48 48 51 52 54 54 53 53 55 56 57 63 71 79 80 78 76 72 68 64 62 60 60 61 64 70 74 78 83 88 92 97 101 106 110 115 116 116 116 110 101 88 84 89 94 101 113 123 132 137 142 144 144 143 144 141 139 134 134 135 137 143 152 162 172 177 184 193 196 203 208 208 210 209 209 206 202 200 193 
+161 170 179 180 177 174 173 176 176 163 147 131 128 132 133 133 130 127 123 118 113 110 107 105 100 100 99 97 92 88 83 80 77 75 78 82 86 87 88 86 83 80 77 77 76 76 77 79 81 81 83 83 85 80 76 71 70 69 69 66 61 57 65 75 85 88 86 86 81 72 65 59 59 60 60 63 66 69 70 73 75 80 83 86 93 102 109 111 112 112 113 114 114 115 117 117 117 118 119 124 137 151 163 166 170 174 175 182 184 187 188 189 187 185 183 180 176 172 171 173 174 174 166 160 153 152 152 149 135 120 104 104 101 102 95 88 83 78 76 72 67 61 54 54 59 63 67 70 73 77 83 89 95 96 98 99 96 96 94 93 90 89 87 84 83 78 75 71 72 79 86 94 100 107 113 117 119 123 121 120 119 114 108 101 96 89 82 84 91 98 101 104 105 109 113 116 119 122 127 128 128 126 125 122 117 112 110 110 109 106 102 100 96 91 86 84 82 81 82 83 84 83 79 74 71 70 70 70 69 69 69 71 74 77 75 73 72 74 79 83 80 73 66 64 68 73 74 73 72 72 71 72 72 77 80 85 82 78 73 73 74 73 77 80 84 82 78 74 72 75 77 78 75 72 71 72 73 74 79 84 88 85 82 81 84 89 94 94 91 89 89 91 93 98 107 115 127 134 146 153 156 162 166 171 174 181 188 196 203 210 217 224 225 224 223 218 213 206 198 197 194 190 186 179 174 171 169 167 159 155 147 139 131 121 118 114 111 109 106 104 104 109 111 112 110 108 100 85 72 62 61 59 58 63 67 73 75 77 79 76 72 68 66 66 67 69 73 76 78 78 78 77 74 70 67 65 62 61 60 61 60 60 60 61 61 62 64 61 57 52 53 54 57 56 52 50 48 51 54 57 60 63 66 68 70 72 74 76 79 83 88 92 97 101 106 106 106 106 103 101 100 104 113 119 128 132 137 141 143 144 145 143 141 139 133 125 116 118 119 121 132 148 164 177 185 194 200 207 210 213 212 212 211 211 208 210 209 210 
+135 141 151 157 162 169 169 170 170 165 159 153 148 144 140 135 128 124 117 111 105 100 96 95 91 92 90 89 88 87 85 80 75 69 69 69 69 76 82 89 89 85 81 80 82 85 84 83 82 79 74 69 65 65 64 64 63 62 61 63 63 63 66 70 75 77 78 78 77 75 71 67 66 62 61 64 67 68 72 74 76 80 83 88 95 105 115 116 110 105 105 107 109 111 111 113 114 112 111 112 128 146 163 165 167 169 174 181 185 187 187 189 186 186 184 177 171 164 160 158 157 153 145 137 130 133 135 134 122 108 96 93 90 87 85 81 78 76 71 69 64 59 54 53 56 61 64 66 68 72 80 87 95 99 104 107 104 100 96 96 97 96 93 90 89 85 80 76 74 76 78 82 91 99 107 111 115 120 121 122 123 117 112 107 105 103 100 96 93 89 91 94 98 102 106 110 116 121 127 133 134 134 132 131 128 124 122 117 114 108 103 98 93 91 87 82 79 74 75 80 85 85 79 73 69 71 74 77 75 73 72 76 81 85 80 74 68 68 70 71 69 63 58 57 63 68 73 76 77 80 81 81 83 84 87 88 81 74 66 65 65 65 68 74 81 80 76 73 72 72 73 71 70 68 68 72 76 80 83 86 90 89 87 86 88 92 95 91 86 80 80 83 87 94 105 116 127 136 148 160 166 170 174 178 182 186 197 207 217 223 232 236 234 234 232 226 218 210 204 200 196 189 178 171 161 155 152 147 145 142 139 137 137 135 131 127 122 121 119 118 118 119 119 118 115 112 109 103 95 90 83 77 71 73 73 73 76 78 80 72 64 56 56 58 60 65 71 79 82 83 84 81 73 66 60 64 67 70 68 68 67 66 64 63 65 67 68 65 60 55 55 57 58 58 58 58 58 60 61 61 62 62 62 62 61 61 65 69 73 72 71 68 73 80 86 89 86 84 91 104 120 133 139 149 153 151 148 147 145 144 143 141 137 135 129 121 111 113 113 116 126 142 157 170 174 181 187 190 193 196 196 197 198 205 212 219 224 231 
+140 142 147 154 161 167 167 167 168 167 167 168 161 153 145 136 129 121 113 107 101 95 89 83 79 79 79 79 81 81 82 81 80 78 79 82 83 82 81 81 80 79 77 78 81 84 83 81 78 74 67 60 54 55 57 59 58 57 56 60 66 71 69 65 62 62 64 66 71 79 85 87 81 75 71 74 77 80 86 89 95 97 100 102 105 107 111 110 107 107 104 103 102 101 99 98 98 102 105 111 122 135 146 149 153 156 164 171 180 182 186 186 183 182 179 173 165 157 150 146 141 135 125 116 110 112 116 117 106 95 83 77 71 67 66 68 68 67 64 61 59 58 57 57 56 56 56 59 61 62 69 74 80 87 92 99 95 90 85 87 89 91 93 94 95 91 86 81 82 88 94 100 106 113 117 121 123 124 123 125 124 125 127 126 127 127 128 127 122 120 119 119 119 119 119 119 122 125 130 134 133 133 132 127 123 118 117 114 111 106 101 94 91 88 86 82 78 74 74 79 84 84 80 75 73 74 76 77 75 73 71 78 84 91 87 81 75 74 75 75 74 69 65 64 66 68 71 73 76 77 79 78 78 81 83 85 78 71 64 64 64 66 69 73 79 80 81 81 81 78 76 74 72 72 71 74 78 81 82 81 82 84 84 86 91 96 100 102 101 101 101 101 101 104 110 116 125 135 145 153 157 162 165 165 165 164 182 201 219 227 235 238 242 241 236 232 226 218 208 203 197 186 170 153 139 132 126 122 122 126 128 136 142 150 147 139 134 132 132 132 131 129 127 125 121 116 113 112 110 107 97 84 74 73 72 71 72 73 74 67 59 51 53 58 63 67 70 73 75 75 75 74 66 60 56 56 57 57 59 62 64 63 63 62 63 65 67 66 64 63 64 66 68 70 72 73 74 72 70 68 64 61 57 55 53 52 56 61 66 63 59 56 60 67 73 76 77 78 83 91 98 103 110 116 120 123 122 125 129 133 137 136 137 134 130 123 118 117 117 117 124 136 149 159 163 167 171 173 176 179 182 186 191 200 209 219 228 237 
+156 156 160 163 170 174 172 169 167 162 156 150 140 130 120 116 111 110 105 101 97 91 84 77 73 71 71 72 75 77 81 82 84 86 89 92 96 88 80 70 69 71 72 74 76 78 78 73 70 66 65 63 62 62 62 63 64 64 65 68 70 74 72 70 67 67 69 71 75 81 88 90 86 83 80 83 86 88 94 99 104 108 111 114 111 110 106 106 106 106 104 100 98 92 85 79 80 92 102 111 114 119 124 127 133 137 147 158 168 170 172 176 174 173 169 165 158 152 146 142 136 131 121 113 106 105 105 105 95 85 75 73 70 68 66 66 65 65 64 63 62 62 62 62 62 62 61 60 57 58 63 68 72 78 84 90 86 81 77 81 85 90 94 97 101 99 93 87 89 99 107 114 120 124 128 127 128 128 127 127 126 132 137 145 149 153 155 156 156 154 150 147 141 138 134 131 129 130 132 134 132 132 131 123 116 109 109 109 108 104 98 92 89 86 85 82 79 75 75 78 81 82 81 79 78 78 77 77 74 72 70 79 87 97 93 90 84 83 84 84 82 80 77 74 72 69 69 70 72 73 73 72 71 75 78 81 75 69 63 64 65 67 70 73 76 81 85 91 90 86 81 77 76 74 74 77 79 81 78 76 73 78 82 85 92 97 105 109 113 116 116 115 112 112 116 119 124 132 140 147 150 153 155 155 157 159 179 198 216 224 229 234 232 235 231 229 223 218 214 206 199 191 180 167 157 151 144 141 139 138 136 142 147 153 147 141 137 136 137 140 138 137 133 130 124 120 114 112 109 103 90 76 65 65 65 65 66 66 68 62 55 49 52 61 69 71 70 69 68 67 67 65 60 56 52 51 49 49 53 57 60 59 60 59 61 62 64 63 59 56 58 61 66 68 71 73 74 71 68 65 58 51 45 46 48 50 52 54 57 56 56 56 59 62 65 69 73 78 79 75 69 66 74 80 88 93 98 103 109 118 127 127 129 129 127 123 121 118 114 110 111 117 122 126 126 130 134 142 151 161 170 180 188 197 207 216 223 228 
+155 155 159 162 168 173 170 168 165 153 142 131 120 107 94 93 95 98 96 95 92 87 82 75 72 69 67 66 72 77 82 84 85 87 84 84 83 80 77 71 72 73 74 73 73 73 71 68 65 63 63 64 64 65 66 67 69 71 74 75 76 77 77 76 75 76 78 81 82 82 83 83 85 85 86 90 93 94 96 96 98 104 109 115 113 109 107 105 103 103 101 98 96 94 89 85 84 92 99 105 108 111 113 120 123 128 137 147 156 158 160 165 162 159 156 152 149 143 138 133 128 122 116 108 101 98 94 91 84 77 68 71 72 73 71 67 64 65 66 68 68 68 66 69 72 77 76 67 60 57 62 68 73 75 76 78 78 77 76 82 90 95 99 103 105 105 103 100 102 108 113 118 125 127 131 130 132 132 134 137 138 142 145 147 152 154 156 157 155 156 155 153 153 150 145 141 136 133 129 126 123 120 117 114 112 108 112 112 115 110 102 95 91 88 86 84 82 79 78 79 78 78 79 82 83 81 80 78 74 70 66 74 82 89 87 83 80 82 84 88 86 82 76 74 73 72 72 74 77 78 77 77 76 78 82 84 78 72 66 68 70 73 75 79 81 83 84 85 85 83 82 81 81 81 81 80 80 78 76 75 72 75 77 80 88 95 104 106 110 110 112 115 117 118 119 120 122 129 134 139 143 144 146 156 165 175 187 200 213 216 217 218 218 217 219 220 217 217 211 209 203 198 193 191 187 181 175 170 163 156 148 151 151 151 147 143 138 140 144 145 145 142 138 133 127 118 112 108 104 98 83 70 58 59 59 60 61 62 62 58 52 45 48 54 59 61 60 59 58 56 56 55 53 52 52 53 54 56 56 56 56 56 56 56 58 59 60 56 49 41 42 49 57 63 65 69 71 68 66 62 53 45 37 43 49 55 56 57 59 61 64 68 69 69 70 73 76 80 82 79 76 74 77 77 77 75 72 70 81 94 106 110 114 117 119 120 122 117 110 100 96 94 91 91 90 91 95 111 128 144 157 170 183 190 197 205 208 212 
+148 147 148 152 157 160 158 158 153 137 122 107 104 100 96 96 96 96 96 96 96 92 84 77 73 71 68 68 74 78 82 83 85 86 82 77 71 72 74 76 76 76 77 75 70 66 65 65 65 63 61 59 59 62 65 69 71 74 75 76 77 77 77 76 75 75 76 77 81 84 87 90 92 94 96 97 99 100 98 97 96 100 107 113 111 109 106 104 102 98 97 98 96 96 96 96 96 95 95 97 102 105 110 116 123 129 134 139 146 147 148 148 147 142 137 132 126 119 113 107 101 96 94 90 89 89 86 86 81 75 70 70 70 71 71 71 71 73 75 77 78 77 75 76 77 79 77 71 64 60 64 68 71 73 75 76 78 80 81 84 89 94 97 100 103 105 106 106 109 114 119 123 125 128 132 133 133 135 139 145 151 150 150 151 154 154 155 155 157 158 158 160 162 161 155 150 143 134 125 116 112 106 101 105 107 109 115 118 122 116 108 101 96 92 88 86 85 84 82 78 75 74 79 84 87 85 83 82 74 67 61 67 73 80 78 75 72 76 83 90 88 81 74 71 72 74 76 80 83 86 84 83 81 84 86 86 81 76 70 72 76 78 81 84 87 86 82 78 77 80 83 86 87 88 88 84 80 75 74 73 73 73 73 74 83 92 101 102 103 104 108 112 117 118 117 115 116 121 125 130 131 134 137 151 163 175 185 194 203 205 203 200 198 197 195 195 196 198 196 195 191 185 180 171 165 162 159 156 154 152 150 150 153 155 149 147 142 140 145 147 145 140 135 128 120 110 103 99 95 87 77 66 56 56 55 55 56 57 59 54 49 42 42 45 47 48 48 48 47 47 45 45 47 49 51 55 58 61 58 55 52 52 52 52 54 57 59 56 50 45 45 52 58 64 69 74 79 79 79 79 75 70 66 72 77 82 82 82 82 85 87 91 90 86 82 81 83 85 86 87 89 90 82 74 67 62 57 51 66 80 96 105 111 116 120 121 124 120 113 108 103 98 92 88 86 83 82 99 117 135 145 154 165 172 176 182 185 187 
+146 145 145 146 149 150 146 143 137 125 109 93 94 97 97 97 96 95 97 101 103 98 89 81 77 77 77 77 79 79 80 79 78 78 78 77 75 76 78 80 81 83 84 80 73 66 64 66 67 67 63 59 59 63 68 73 74 76 77 78 77 77 76 75 74 73 71 69 76 87 96 102 104 106 108 107 104 103 102 100 99 100 101 102 102 103 102 99 95 92 92 91 92 94 95 96 96 93 91 91 95 99 102 111 118 124 129 132 136 136 136 136 134 128 125 119 111 102 94 86 78 74 75 75 76 78 80 80 78 75 72 70 68 66 72 76 81 83 85 87 87 87 88 84 79 74 71 70 68 68 66 65 66 75 81 88 90 92 94 88 81 75 76 78 82 86 89 93 99 105 112 116 117 120 123 123 126 129 133 139 143 143 147 147 148 149 151 152 154 155 156 159 162 161 157 155 151 141 133 124 118 111 106 107 109 110 113 116 117 113 108 103 98 93 88 86 86 85 84 81 78 77 78 81 82 81 82 81 72 64 55 62 70 77 77 74 72 76 81 87 85 80 75 74 76 79 80 80 80 80 81 82 83 81 77 74 73 72 71 74 77 80 83 86 90 88 84 80 81 84 87 90 88 86 83 79 75 71 73 74 76 77 76 76 78 81 86 88 90 94 97 101 105 105 100 96 95 99 106 111 116 121 126 137 148 159 167 179 186 185 181 181 173 168 162 163 167 173 175 173 171 167 153 140 130 131 134 135 138 144 149 152 154 156 154 149 144 143 146 146 145 138 132 124 116 107 99 93 88 80 73 65 58 57 57 56 56 56 56 54 51 49 49 50 52 52 53 53 52 51 52 52 53 55 56 57 57 58 55 52 50 49 48 48 51 57 62 61 59 57 57 60 62 65 73 82 88 91 93 95 94 92 90 93 94 96 94 93 93 92 94 94 91 86 81 79 79 79 81 88 94 100 98 96 95 94 92 91 98 106 115 119 125 128 129 128 127 125 122 121 117 109 99 90 82 74 70 92 111 130 138 147 153 160 165 170 173 172 
+146 148 147 145 145 141 132 124 118 115 111 107 105 103 103 100 97 94 95 96 100 96 89 82 79 78 78 79 80 80 80 77 74 73 76 77 79 80 83 84 86 89 91 86 77 69 68 69 71 71 69 67 67 72 76 81 83 85 87 84 80 78 81 84 87 87 86 84 89 97 103 108 111 113 113 111 109 108 106 105 103 100 98 95 96 96 96 93 88 85 85 86 87 89 92 94 95 91 87 86 89 91 95 103 112 118 122 127 129 127 125 125 123 121 121 116 110 104 97 87 78 74 75 77 78 78 77 78 79 80 80 79 76 74 76 80 84 84 85 86 84 81 77 74 70 66 64 66 67 68 67 65 65 73 81 91 94 97 102 92 80 69 68 71 73 77 82 88 94 100 107 111 110 111 112 115 118 120 125 130 135 137 139 142 143 143 145 149 151 154 157 158 160 159 160 160 156 150 141 134 126 118 113 113 112 113 110 110 108 107 105 105 100 94 87 85 86 85 87 85 84 82 79 76 74 76 78 79 69 60 49 59 67 76 77 76 75 77 80 83 82 80 79 78 81 85 85 79 74 71 75 80 83 76 67 60 63 68 72 74 78 82 85 89 91 90 87 83 84 89 93 94 89 83 78 73 70 67 71 75 80 79 78 76 76 74 73 76 81 86 90 93 96 94 89 83 81 86 91 97 103 110 117 125 136 146 151 159 165 163 159 155 151 148 143 144 149 155 158 159 160 158 148 140 133 133 132 133 140 150 158 161 163 167 162 159 155 153 150 148 143 136 130 122 116 109 104 94 85 77 72 68 64 64 63 62 60 57 55 55 56 58 59 60 61 60 59 58 57 58 58 58 59 60 61 59 58 56 53 50 47 46 45 44 46 51 55 56 55 54 53 55 55 57 64 71 78 80 84 87 86 87 87 83 77 71 73 76 80 81 78 76 74 72 71 71 71 71 73 86 98 110 114 117 121 121 122 122 120 121 122 121 121 120 119 118 118 118 119 120 121 115 112 109 108 108 109 119 129 140 146 151 157 160 165 169 170 167 
+140 145 147 145 144 137 127 116 109 113 115 118 115 111 108 103 97 92 93 94 94 91 87 82 78 75 72 73 78 83 85 80 76 73 75 75 75 75 74 72 74 77 79 77 73 70 69 71 73 73 71 70 72 78 85 89 90 93 93 88 83 77 86 95 102 104 104 105 106 108 110 112 113 114 115 113 113 112 110 107 106 104 103 102 99 97 95 88 81 74 77 85 90 94 97 101 100 97 93 92 91 90 92 99 105 111 111 111 112 110 109 107 107 110 111 108 104 103 95 85 76 72 74 76 78 76 75 75 80 85 89 86 85 82 82 82 83 83 82 83 76 67 57 55 55 56 58 60 62 64 65 65 67 70 75 81 86 92 98 95 92 90 91 93 94 96 99 102 102 102 102 102 102 101 103 105 106 109 114 118 122 127 132 137 140 142 144 147 147 151 152 154 155 157 157 157 156 150 143 136 132 126 121 120 117 115 113 110 108 106 105 104 99 93 87 84 82 80 80 83 86 85 79 74 70 75 81 82 73 63 53 62 70 77 78 77 75 78 80 84 84 81 78 78 80 82 81 76 72 70 76 82 87 81 76 70 70 71 71 73 76 77 82 87 92 89 82 75 72 79 84 87 81 78 73 74 75 75 77 79 81 82 83 84 82 79 75 76 80 84 87 89 90 91 90 90 90 92 92 93 96 101 106 115 125 135 136 135 138 134 131 127 127 128 131 134 137 141 143 148 152 154 150 148 144 139 135 131 144 154 168 170 172 173 171 166 164 158 153 148 142 135 128 123 117 114 109 100 88 80 77 74 71 68 64 61 57 55 52 53 56 58 59 60 60 60 59 58 58 62 65 69 67 66 65 63 61 58 54 49 45 42 40 39 39 41 42 43 43 43 43 44 45 47 52 59 65 69 73 76 78 79 80 73 63 55 57 62 68 67 62 59 58 62 66 70 71 74 77 85 93 99 102 105 106 107 108 107 107 106 105 101 95 89 89 94 100 105 110 116 121 123 127 130 135 140 145 147 150 153 156 161 164 168 172 176 177 173 
+131 141 144 143 141 139 132 127 120 120 118 118 117 114 111 105 99 94 95 98 101 96 89 83 80 79 76 77 81 85 88 83 79 75 74 73 72 68 63 59 60 61 62 65 67 68 70 72 73 72 71 69 72 82 93 98 95 90 88 89 91 91 96 101 106 108 109 110 112 112 111 111 111 110 111 111 112 111 111 108 108 107 107 106 102 98 94 84 74 63 72 83 93 100 104 107 108 105 102 99 95 91 90 94 99 102 95 90 85 84 84 84 84 86 88 88 87 86 81 74 67 64 66 70 71 73 74 75 77 80 82 80 79 78 78 80 81 81 81 80 76 71 65 62 61 60 60 62 63 64 66 66 67 69 72 75 81 87 92 95 98 101 102 102 105 105 106 108 106 103 99 96 98 98 97 99 100 102 104 107 109 117 124 131 136 138 142 143 145 146 147 151 152 152 153 155 154 149 145 141 136 133 130 126 121 116 114 112 110 107 105 103 99 92 88 83 78 72 73 79 85 86 79 71 68 76 82 87 79 69 60 66 73 79 79 77 76 77 81 85 84 81 78 76 77 78 77 74 72 72 79 86 93 89 85 82 78 75 71 71 72 74 79 85 91 87 76 65 62 69 75 78 75 72 70 74 79 82 81 81 80 84 88 91 87 82 77 78 81 82 84 85 85 88 90 94 97 94 92 91 93 95 96 105 113 120 119 117 116 116 118 118 122 126 130 133 135 136 140 145 151 155 153 150 148 146 141 140 144 146 149 151 150 152 153 154 155 156 151 149 146 139 133 128 123 120 114 107 101 95 89 83 78 70 62 54 51 49 48 49 52 54 56 57 59 59 59 58 59 66 73 77 74 71 68 64 61 57 53 49 45 43 42 41 42 42 44 44 45 45 45 46 46 46 47 48 50 53 57 60 63 64 67 64 60 56 55 55 53 51 47 42 44 53 62 71 76 80 84 86 87 87 89 91 92 94 95 97 97 97 96 91 87 82 83 93 101 109 117 125 133 136 140 145 148 153 157 162 167 170 174 180 182 187 188 189 187 185 
+145 150 151 149 149 146 141 136 130 126 121 118 115 114 114 108 101 95 100 105 111 103 94 85 85 87 90 90 88 89 87 86 84 82 80 78 75 73 69 66 64 62 61 63 67 71 72 75 76 75 71 68 71 83 96 101 94 87 81 89 95 102 104 107 108 110 112 113 113 113 113 110 106 101 100 101 101 103 105 107 108 108 108 106 101 98 92 85 77 70 71 75 79 86 92 98 101 101 102 100 96 92 91 93 95 96 91 87 81 81 83 83 81 80 78 78 77 76 72 67 60 60 63 66 68 71 74 76 75 73 74 73 72 72 73 76 78 79 79 78 81 82 83 80 76 71 69 68 70 69 68 66 66 69 72 75 80 83 88 93 95 99 98 96 95 94 93 93 95 98 100 102 106 110 110 111 110 108 103 96 91 97 102 109 118 128 138 142 142 145 146 146 147 145 143 140 137 130 125 121 122 123 123 119 117 116 112 107 103 99 95 90 88 85 82 81 79 77 77 79 81 81 76 70 69 74 80 84 77 69 62 66 70 74 75 75 76 78 83 87 86 81 77 77 81 85 85 82 79 77 80 83 86 85 85 84 80 78 76 75 75 75 78 81 84 81 76 69 68 74 79 82 80 79 77 75 74 73 74 76 77 80 83 85 86 86 86 85 81 77 76 78 80 82 87 93 97 96 95 95 95 95 93 96 100 101 101 99 97 104 115 124 131 132 138 138 137 135 137 145 153 156 155 153 149 150 149 151 144 136 128 127 130 131 136 142 149 152 150 148 145 139 133 127 121 116 109 106 102 98 92 84 77 72 66 61 58 57 54 54 54 54 55 55 55 56 58 60 62 68 73 78 73 69 64 60 54 49 48 49 49 50 51 51 52 53 54 53 54 55 54 51 49 47 43 38 34 38 42 46 50 54 56 58 59 60 59 56 53 52 51 49 52 60 66 72 73 73 73 74 74 76 80 85 90 92 95 97 99 101 103 103 99 97 99 107 115 122 132 140 148 151 155 157 162 165 168 171 175 180 183 187 189 192 193 193 192 187 
+166 163 162 162 161 157 153 147 140 133 125 119 114 110 106 100 95 88 95 101 108 104 98 93 93 95 97 97 95 93 91 90 89 89 84 82 79 78 76 74 70 66 62 66 69 73 76 79 81 78 74 69 71 79 86 88 83 77 73 78 84 89 90 93 93 94 94 96 95 95 94 95 95 95 94 97 99 100 102 104 106 106 105 104 101 97 93 87 81 76 72 68 64 70 78 87 91 96 99 99 97 93 92 92 92 92 96 99 102 105 107 110 104 98 92 89 84 81 75 71 67 67 72 76 79 79 81 81 83 84 85 82 78 75 77 79 81 79 77 75 78 79 81 79 73 68 66 67 69 70 71 72 74 77 78 81 83 87 88 91 94 98 96 94 91 89 86 85 89 96 103 109 115 120 125 123 121 117 103 90 80 84 89 93 106 120 133 138 141 144 145 142 142 138 131 125 119 111 105 101 108 112 115 114 114 114 107 102 96 89 83 77 75 76 78 78 80 83 82 80 76 74 72 71 70 73 76 79 74 70 64 65 66 66 69 73 76 81 85 90 88 82 75 76 84 91 97 91 87 83 81 79 77 80 82 85 83 82 81 80 79 77 77 76 77 76 75 73 75 78 84 86 85 84 82 77 71 66 69 72 75 76 78 80 84 88 94 89 82 74 71 72 73 76 82 89 94 96 97 99 97 95 94 97 99 101 103 106 109 117 128 139 145 146 148 148 145 141 139 141 144 142 140 138 136 133 129 126 124 122 119 117 115 113 119 126 134 137 137 135 132 125 116 109 102 96 89 89 87 87 82 78 74 73 75 77 75 69 65 61 58 55 53 52 50 51 56 60 64 69 73 77 71 67 63 56 49 42 44 49 53 56 58 61 61 59 56 56 56 56 55 54 52 50 47 44 41 48 55 62 63 64 65 66 68 68 70 71 73 74 74 75 75 75 75 72 68 64 59 61 63 64 71 79 85 89 91 94 96 100 103 104 104 103 106 112 118 124 127 132 138 139 142 145 148 151 153 157 161 166 171 176 180 184 187 188 190 188 
+169 168 165 160 160 155 149 144 136 130 120 114 109 104 99 93 88 85 89 96 104 103 103 102 102 101 101 101 103 103 101 97 95 92 88 86 83 80 77 74 73 70 69 69 71 73 74 76 79 77 74 70 71 75 78 79 75 70 67 71 73 77 76 77 77 75 75 73 72 71 70 74 82 88 93 96 99 99 98 96 97 98 98 98 97 96 95 92 89 85 81 76 72 75 80 86 92 99 106 108 107 103 104 103 104 106 110 115 121 124 126 131 123 114 106 99 91 83 78 75 71 73 78 84 87 86 85 86 90 95 97 90 85 79 81 83 85 81 77 73 72 72 73 69 64 59 59 61 64 69 76 83 89 91 93 93 94 94 94 96 97 99 99 102 103 100 97 94 98 104 112 119 125 132 136 135 134 133 125 118 110 110 109 110 116 123 131 134 136 139 138 140 138 133 128 121 115 110 105 100 102 102 104 104 105 106 102 98 96 88 82 75 74 75 76 75 74 74 74 72 72 71 69 67 67 70 72 73 72 71 68 68 67 66 70 73 76 80 86 91 91 86 84 83 85 88 89 89 88 87 86 84 84 83 83 83 83 83 83 79 76 72 73 76 78 79 80 79 82 86 88 90 86 81 77 74 70 67 70 74 78 77 75 73 77 83 90 88 81 75 71 70 70 72 76 82 88 94 98 103 101 100 98 105 112 119 127 134 139 146 154 162 165 164 166 163 155 149 144 137 131 125 123 121 119 113 106 100 103 105 111 108 103 98 103 114 124 128 127 128 125 116 107 100 92 84 76 77 79 81 79 78 77 79 81 84 78 70 63 58 57 55 54 55 55 56 56 56 56 59 61 63 63 63 62 56 48 41 44 50 55 59 64 68 68 62 56 53 54 54 55 55 54 54 53 50 49 58 66 74 74 74 72 72 72 71 73 77 81 83 83 82 80 75 71 67 62 58 56 57 58 59 65 71 77 79 78 79 82 86 92 96 101 103 108 111 114 116 117 119 121 124 128 135 135 135 138 141 145 149 152 157 158 162 166 171 176 175 
+174 170 163 155 148 142 133 124 117 108 100 96 96 96 96 94 91 89 90 92 94 96 97 98 98 97 97 99 100 104 103 98 95 92 91 90 87 82 79 76 76 76 76 72 71 69 70 72 73 72 71 70 71 73 75 75 74 72 70 69 69 68 68 67 67 68 69 69 67 64 62 66 72 78 81 86 90 91 89 89 87 87 87 87 89 92 94 94 94 93 90 85 79 79 83 86 93 105 115 119 118 117 117 120 125 127 132 136 139 141 142 143 136 128 119 107 94 81 77 75 73 72 73 75 76 77 78 80 86 91 96 91 87 83 82 82 81 78 74 70 71 73 75 71 66 60 59 60 63 68 76 86 94 96 99 102 102 103 101 100 98 96 99 103 107 107 105 103 107 113 119 125 130 137 142 143 146 147 144 140 137 135 131 127 128 129 130 133 133 134 136 135 135 132 123 117 111 109 105 100 97 93 92 95 96 98 97 97 96 89 81 73 72 74 75 72 68 63 63 65 67 68 66 63 63 65 68 69 70 72 72 71 69 67 70 72 75 80 86 92 94 94 93 90 86 82 80 85 87 90 90 92 92 88 85 82 82 84 84 79 74 67 70 75 79 83 84 87 89 91 94 93 86 79 72 71 69 68 72 77 81 77 73 69 72 78 85 84 80 76 73 72 71 71 75 79 84 90 97 104 105 104 104 114 122 130 138 146 156 161 163 169 172 168 168 163 154 146 137 126 117 109 113 116 120 118 116 115 114 114 114 109 108 104 109 117 126 130 130 133 132 124 116 107 96 83 73 76 79 81 83 85 87 87 86 84 77 65 55 51 53 54 56 58 60 61 57 52 49 51 51 51 55 57 59 53 46 39 42 46 51 56 60 66 66 59 53 51 51 52 53 53 55 55 55 54 54 57 62 64 67 70 73 72 68 63 64 69 75 78 77 76 74 69 62 57 56 54 54 54 55 54 60 65 71 72 71 71 75 80 86 92 97 104 108 108 109 109 111 114 115 119 121 123 124 124 122 123 125 127 126 123 122 123 132 143 149 157 
+162 155 150 143 136 130 124 117 109 99 90 86 89 94 96 95 94 93 89 87 85 87 86 88 88 88 87 89 91 93 92 89 85 85 86 88 87 83 79 76 74 72 70 70 69 68 69 70 71 72 72 74 74 74 74 75 74 74 72 69 66 62 60 58 57 61 64 67 66 63 62 61 63 64 67 70 73 75 76 76 76 75 73 73 76 79 81 85 89 93 95 96 98 98 101 101 108 115 122 124 123 123 124 127 129 130 135 139 142 143 144 146 137 128 120 106 93 80 75 74 72 70 69 67 67 69 72 76 82 89 93 90 88 86 82 79 76 73 71 68 72 77 82 79 73 68 65 63 63 65 73 81 89 94 101 107 109 109 111 103 95 88 91 94 97 103 109 116 116 116 115 116 122 126 133 138 144 149 150 150 151 151 151 150 149 151 152 150 151 150 149 147 147 140 132 125 118 111 104 100 96 92 90 92 94 95 93 91 89 84 78 73 74 79 82 81 76 70 69 70 70 71 69 68 67 68 68 69 71 73 74 75 74 74 74 75 75 79 84 91 90 88 85 82 82 82 83 88 91 95 93 92 90 87 84 80 81 81 81 79 75 72 74 81 87 89 89 90 91 91 91 90 84 77 72 72 71 72 77 81 85 82 77 73 73 76 79 78 77 75 76 77 78 80 79 79 80 87 94 99 104 109 115 121 128 135 141 147 156 160 164 166 169 166 168 161 150 140 127 115 103 94 104 113 122 125 128 133 128 121 115 114 112 111 115 120 125 130 132 134 134 128 122 116 106 95 87 91 94 98 99 101 102 100 97 93 88 80 71 67 65 64 63 63 62 61 61 60 60 58 56 53 52 50 47 45 42 40 39 38 38 41 48 55 57 53 50 48 49 49 50 52 54 56 57 57 58 57 57 57 61 66 71 69 63 57 57 63 69 72 71 70 69 66 63 60 63 65 68 69 72 73 73 74 74 76 79 82 84 88 90 93 97 101 104 104 103 103 106 111 115 114 113 113 112 112 111 111 111 113 113 111 110 114 123 133 141 150 
+144 138 133 127 123 122 123 123 118 108 98 94 97 101 100 96 91 88 85 83 81 82 85 86 85 82 82 82 82 83 82 79 76 76 79 84 85 82 79 75 71 66 62 65 68 71 71 71 71 75 77 80 80 80 81 79 77 75 73 71 68 67 67 68 69 70 71 72 71 70 68 67 65 63 64 65 67 68 69 71 70 68 66 64 67 70 73 78 85 92 99 107 115 116 117 118 120 125 129 131 129 127 126 126 125 125 129 130 132 133 135 133 123 112 101 92 84 76 72 70 67 67 68 68 69 71 72 75 81 88 90 85 80 76 74 74 72 71 69 67 70 72 75 72 67 62 61 62 62 65 70 75 83 90 97 104 105 106 107 100 91 84 85 87 91 99 110 122 124 123 119 119 121 125 128 137 145 152 157 160 163 165 167 169 169 169 168 167 165 162 158 157 155 149 139 131 121 114 106 99 96 92 87 90 92 94 89 84 82 78 75 72 77 85 91 91 85 81 77 76 76 75 73 73 71 71 70 70 71 74 76 78 79 82 80 78 75 79 84 90 89 82 75 75 79 83 87 92 97 99 96 92 89 84 82 79 79 79 78 79 78 77 81 87 93 95 94 93 91 90 88 87 81 75 70 72 75 77 81 85 89 86 81 75 74 74 75 76 76 77 79 83 85 87 86 86 88 92 95 100 106 114 121 126 132 138 144 154 161 162 165 166 164 165 161 156 147 138 129 124 119 114 120 124 127 131 131 134 130 126 122 121 117 115 116 117 119 120 124 126 128 128 127 126 124 123 123 125 128 130 128 124 120 117 114 109 105 99 94 89 83 78 72 68 63 61 64 68 70 64 59 55 50 44 40 39 40 40 39 37 36 39 44 50 52 51 49 48 49 49 50 53 56 59 58 58 58 57 55 54 55 57 58 58 57 56 58 61 64 66 65 64 63 65 66 69 74 78 84 87 89 90 87 83 80 82 87 93 95 96 96 97 100 102 104 101 100 99 104 108 113 113 112 112 111 111 110 112 115 119 122 127 131 134 137 139 142 146 
+145 137 130 124 118 121 125 130 125 114 103 99 101 104 103 96 90 84 82 80 78 82 85 88 84 80 76 75 75 74 72 70 67 65 65 65 67 69 71 71 70 69 66 66 66 66 66 66 66 70 75 79 81 82 83 81 80 76 75 74 74 73 75 77 80 79 78 78 77 77 77 74 71 68 68 67 68 68 69 70 69 68 68 67 70 73 76 79 82 85 89 94 98 99 100 101 106 113 120 124 122 124 122 121 119 118 119 119 119 120 120 120 110 99 88 84 81 76 73 69 65 65 67 69 71 71 72 75 80 86 88 80 72 65 67 68 70 69 69 67 67 65 65 62 56 51 52 57 62 66 68 70 74 82 90 96 94 92 90 88 86 84 84 84 85 96 110 123 130 133 137 141 141 142 145 152 156 161 162 164 166 166 165 166 165 163 161 159 155 155 148 143 138 130 125 119 113 109 106 101 96 92 87 86 85 83 82 81 78 77 76 75 79 83 89 88 84 79 76 77 78 77 76 75 74 74 73 72 75 78 80 84 86 88 83 77 71 73 78 83 83 79 74 74 77 80 82 85 89 91 89 87 85 84 81 78 81 84 87 86 84 82 84 88 92 93 90 87 86 87 87 87 77 68 61 69 77 84 85 86 87 83 78 74 75 79 82 83 83 83 83 85 88 91 98 104 109 108 106 106 111 116 122 129 135 141 149 158 168 170 169 167 163 159 154 148 144 140 136 138 141 142 141 137 133 134 134 135 133 131 129 126 123 120 118 116 114 114 115 118 120 122 125 127 130 132 135 136 138 139 134 129 124 119 116 111 106 100 94 88 77 69 62 62 62 61 57 53 49 51 52 54 50 46 41 41 43 44 45 45 46 48 49 50 50 50 51 50 51 50 51 54 57 61 60 58 57 55 53 51 51 51 51 53 57 60 64 67 70 73 73 73 72 73 74 74 76 77 79 84 88 93 95 94 95 97 100 103 105 106 106 106 106 105 103 100 98 96 101 107 112 113 113 112 111 109 107 109 113 118 124 131 139 143 142 143 144 146 
+144 136 131 126 119 124 129 136 127 113 101 95 94 92 91 89 86 84 84 84 85 84 85 87 84 80 76 75 74 74 70 67 64 60 57 54 55 59 64 68 70 72 71 67 63 60 59 58 57 62 67 74 76 78 79 80 80 81 82 85 88 88 86 84 82 84 85 86 88 89 89 88 84 82 80 80 79 78 77 77 77 77 75 75 76 78 79 79 80 80 80 82 83 82 83 83 92 100 110 113 115 118 116 114 111 110 107 105 104 106 108 106 99 92 84 84 85 86 80 74 68 67 68 69 70 68 67 69 72 77 79 77 75 74 72 70 68 67 65 63 63 63 62 61 59 57 58 61 64 67 66 67 70 79 86 91 87 83 79 80 82 83 85 87 88 98 111 123 131 139 145 150 149 152 154 157 159 162 162 161 164 162 162 161 159 155 150 149 145 145 137 129 122 116 110 104 103 103 104 103 97 93 87 83 77 74 74 75 75 76 76 77 80 84 87 85 81 77 76 77 79 79 78 77 76 75 75 74 77 81 84 88 91 94 86 75 66 66 71 76 77 75 75 75 75 75 76 79 81 83 82 82 82 81 80 79 83 90 95 95 91 88 87 88 89 88 86 84 83 84 86 85 73 63 54 67 80 91 90 89 88 82 78 73 75 81 87 88 86 85 84 86 87 91 101 108 115 112 110 107 112 118 125 132 139 146 155 164 172 175 173 174 170 166 164 159 157 154 151 152 151 150 144 138 132 129 128 124 122 123 124 124 120 120 118 117 116 112 108 105 104 109 112 116 116 115 114 120 124 128 126 121 116 112 109 106 100 94 87 79 67 56 50 54 60 62 52 40 31 39 47 56 54 49 46 47 49 51 53 54 55 54 52 51 50 51 52 53 53 53 52 52 51 50 49 48 47 48 49 50 52 56 60 64 68 71 76 82 87 92 91 91 90 87 83 79 77 75 72 79 87 96 101 103 106 107 106 105 104 103 102 101 98 97 96 97 100 102 105 107 112 109 107 103 99 95 89 90 97 103 110 119 130 139 142 146 148 147 
+149 144 138 130 121 126 132 138 127 112 99 90 87 83 81 83 83 85 88 90 90 88 86 83 83 82 81 80 78 78 76 73 70 68 66 64 65 69 73 76 76 75 75 70 65 61 60 59 57 62 68 74 76 78 78 79 81 83 87 93 100 100 95 89 85 89 92 95 98 101 102 101 98 96 97 98 98 97 93 91 91 92 93 91 90 86 84 83 83 82 84 86 89 89 88 88 94 102 108 111 111 111 109 106 101 99 99 98 96 95 93 92 89 87 84 85 86 89 83 76 69 67 69 70 68 66 65 64 67 68 71 75 80 82 77 72 67 64 61 57 59 61 63 64 66 68 68 67 67 66 68 69 72 79 85 89 83 78 74 78 81 85 89 95 100 107 112 119 124 126 129 134 136 140 142 144 145 145 143 140 138 137 139 136 135 132 130 126 125 125 121 118 115 108 99 91 88 91 93 94 90 88 85 82 78 75 78 80 82 81 81 80 82 85 88 86 81 77 74 74 74 74 76 76 77 75 73 73 74 77 79 84 88 92 84 76 67 67 74 78 79 77 74 75 78 81 83 81 80 80 85 90 96 91 88 84 86 89 91 90 88 87 84 84 82 83 86 89 89 84 79 75 72 68 68 75 82 89 92 92 94 89 82 75 76 82 87 88 84 81 79 80 81 84 89 96 101 102 103 107 113 121 127 134 142 151 161 170 180 184 183 181 183 179 177 175 174 171 170 164 159 153 145 138 131 125 119 113 116 118 121 121 123 123 123 120 119 116 110 100 98 100 104 105 103 103 102 109 116 122 121 118 114 109 103 94 85 77 67 59 54 48 46 52 57 60 54 49 43 52 61 70 68 64 61 61 64 65 65 63 60 56 54 52 50 52 53 54 54 54 54 49 44 38 37 38 39 43 47 50 57 62 67 72 75 78 83 88 93 95 94 92 91 84 76 69 68 69 70 74 80 86 89 91 92 92 89 86 83 80 77 75 77 82 87 93 101 109 111 110 109 107 101 97 91 87 83 86 95 103 113 123 135 143 148 151 155 153 
+154 155 145 135 125 129 133 138 126 111 96 89 86 82 81 83 86 88 90 93 94 92 90 88 86 84 84 83 81 80 79 78 77 76 75 74 75 79 82 84 82 80 78 73 67 62 62 63 62 68 74 80 80 80 79 79 81 82 86 94 100 102 95 88 85 87 89 91 92 95 96 95 95 95 96 96 99 96 93 90 91 92 95 95 92 87 84 84 84 84 86 89 93 93 93 92 97 103 108 110 107 105 100 96 91 89 91 93 91 85 79 76 80 85 89 86 84 81 77 72 67 67 67 67 70 72 73 74 73 72 72 74 76 77 75 73 71 66 62 58 61 65 68 69 68 68 67 65 64 64 64 65 67 72 77 80 76 72 70 75 79 84 89 94 98 103 108 112 116 117 118 121 125 131 133 133 133 131 126 122 119 120 119 119 116 112 110 108 106 106 106 107 107 100 89 79 75 79 83 86 85 84 83 80 78 75 80 85 89 86 84 82 84 87 90 88 82 78 73 71 68 67 72 74 77 74 71 69 70 72 74 78 83 88 82 75 68 70 76 80 81 78 75 77 81 88 90 84 79 77 87 97 108 101 95 87 87 87 86 86 86 86 83 79 75 78 85 92 93 83 73 66 69 74 77 81 85 89 92 96 98 91 83 76 78 83 88 89 84 82 80 82 83 83 87 90 92 98 102 107 114 122 130 138 147 155 165 173 182 188 188 189 190 184 183 181 179 179 174 173 170 168 163 158 155 151 148 146 147 149 149 148 148 147 145 141 137 131 124 118 110 105 100 93 97 98 100 106 113 119 119 117 116 108 94 81 68 56 43 37 39 42 44 49 54 57 56 55 54 62 70 77 76 72 69 68 68 66 63 60 57 54 52 51 50 50 50 50 51 52 53 52 51 50 50 50 49 53 59 65 69 72 73 75 76 78 80 84 86 88 86 84 82 73 63 53 57 63 68 71 74 77 78 79 79 77 73 69 66 66 66 67 72 77 80 85 91 95 96 96 97 100 105 111 115 116 120 126 133 138 144 150 153 158 159 161 163 160 
+130 128 125 120 115 122 128 134 121 108 92 86 84 81 83 85 87 89 93 96 98 96 95 94 91 89 87 84 81 78 79 82 84 84 83 83 83 85 87 85 80 75 71 67 62 59 62 63 65 69 73 77 76 74 72 74 77 79 84 89 97 98 94 88 83 84 86 86 86 85 85 86 86 87 87 87 87 84 79 75 73 74 77 76 75 73 73 77 79 81 82 82 83 85 85 87 94 99 105 106 106 105 102 96 92 90 92 93 92 85 79 74 79 83 87 84 81 77 73 70 67 67 68 68 72 76 82 81 79 75 73 72 70 70 72 73 75 69 63 59 63 69 75 72 68 64 61 61 59 59 60 60 60 62 64 66 66 66 66 71 76 80 81 81 82 87 93 101 105 109 114 120 122 125 127 126 127 125 123 120 119 119 119 119 114 109 103 103 102 101 101 104 105 100 90 81 77 79 79 80 82 85 85 84 80 78 81 84 87 83 79 75 77 83 86 85 82 78 76 76 76 76 75 73 71 71 71 71 74 75 77 79 82 83 78 73 67 68 71 73 75 78 79 82 84 87 88 85 81 80 86 92 98 92 87 81 82 83 83 86 87 89 86 81 75 75 81 87 88 80 71 66 71 75 79 83 85 88 89 91 92 88 83 78 81 85 92 94 93 93 91 92 94 96 95 96 97 100 103 107 115 125 134 142 150 159 166 176 185 191 193 193 193 191 185 184 182 179 177 178 180 184 180 179 177 176 176 176 175 175 175 174 173 169 166 158 152 145 139 132 124 115 105 98 101 102 104 109 115 120 119 115 111 101 89 77 68 61 55 53 56 59 62 61 61 59 57 55 53 56 60 64 64 65 65 60 53 46 43 43 45 46 48 49 50 48 45 44 46 49 52 55 60 64 63 60 58 62 69 75 78 76 75 73 73 73 72 73 73 72 71 69 67 62 59 55 58 63 67 70 72 75 74 71 66 64 61 58 58 64 70 77 78 78 78 77 76 75 76 80 83 94 108 123 134 142 150 153 155 157 159 160 157 158 157 158 156 154 
+102 97 98 99 100 109 118 125 113 100 86 83 84 84 86 89 93 95 95 94 94 92 91 89 88 88 87 83 81 78 81 84 87 88 88 88 88 89 90 87 79 70 63 60 57 55 59 64 68 67 66 66 63 62 59 63 68 72 73 73 75 77 81 85 87 88 88 89 91 92 93 93 95 95 92 86 83 78 73 68 66 67 67 67 68 68 69 72 77 79 78 76 75 78 81 82 87 94 101 103 105 107 105 100 96 95 97 98 98 92 87 83 82 82 82 79 77 73 74 72 71 71 72 74 77 81 85 85 79 73 69 70 70 69 69 69 68 63 59 54 60 67 73 73 72 71 68 66 63 62 60 58 58 59 61 62 63 64 66 68 71 74 73 72 72 76 83 89 96 103 109 114 120 124 125 124 123 123 121 120 118 117 118 117 111 104 98 97 96 95 97 100 103 99 92 84 80 78 75 76 81 85 88 86 83 81 82 83 86 80 73 67 70 77 83 83 80 79 79 82 86 85 78 71 66 69 71 74 75 78 80 80 78 78 74 70 67 66 66 66 70 77 83 87 86 87 86 85 82 82 85 87 89 84 80 76 77 79 81 84 88 91 88 82 76 74 79 83 83 77 71 67 72 77 81 83 86 88 88 87 87 86 82 80 83 89 95 98 97 96 96 98 99 101 102 100 102 105 111 116 124 130 140 145 150 156 163 171 178 181 180 179 176 173 170 168 168 167 166 166 163 163 163 162 163 166 167 170 174 177 179 181 180 178 173 165 158 152 147 143 139 133 128 121 121 118 116 119 121 124 119 111 104 94 85 77 72 73 75 77 78 80 80 74 67 61 59 55 51 51 52 52 54 57 60 56 46 37 34 37 40 43 45 47 48 48 50 51 54 58 62 64 66 68 67 64 62 62 64 66 66 64 63 62 62 61 59 56 52 49 48 49 49 52 55 59 62 64 67 69 71 73 70 65 59 56 54 54 54 62 69 75 77 77 81 84 88 92 99 103 109 115 125 134 140 143 147 150 150 150 150 149 148 146 146 145 143 143 
+100 93 95 97 99 104 109 115 106 95 83 82 84 86 88 94 97 99 97 93 90 88 85 83 83 84 85 83 83 81 81 82 82 84 83 84 84 83 82 79 72 65 61 58 57 56 58 62 65 62 61 59 59 58 57 59 63 67 66 63 59 61 72 82 89 90 90 93 96 102 105 107 107 109 100 91 82 77 74 70 69 70 70 72 76 78 79 79 80 79 77 74 73 75 79 82 83 87 89 90 92 94 95 95 94 95 93 91 92 91 91 89 87 83 81 77 74 71 71 72 73 74 75 76 79 83 88 86 79 71 67 68 69 69 66 64 61 57 53 48 57 63 71 75 76 79 77 74 71 67 63 60 58 60 62 64 65 67 69 67 66 65 66 67 68 72 77 82 87 92 98 107 116 126 129 128 127 125 123 122 120 118 115 113 104 95 86 84 84 83 88 94 100 98 91 83 80 81 81 84 87 91 92 88 85 82 84 86 89 84 79 75 76 79 82 83 85 87 88 90 92 90 84 77 72 73 74 76 79 81 84 82 81 80 77 73 70 71 74 76 79 80 82 83 85 85 88 87 86 85 87 90 92 89 87 84 82 79 76 77 79 82 81 80 79 79 81 82 82 77 73 70 73 75 79 83 87 92 90 89 87 86 85 84 87 92 97 98 94 90 87 91 95 100 103 104 108 116 124 133 138 141 146 148 147 150 154 160 166 166 162 156 154 150 147 145 147 152 153 148 145 138 142 145 148 153 159 166 172 179 184 187 186 183 179 169 161 154 150 146 140 136 132 128 127 124 122 123 125 126 120 111 101 95 91 89 86 88 88 88 88 88 86 80 72 66 61 54 48 47 46 46 49 53 57 56 49 43 41 42 43 44 44 44 45 51 57 62 66 70 73 74 73 73 70 67 65 62 61 59 58 58 57 57 57 57 56 52 46 42 42 41 41 44 47 51 53 56 59 61 63 66 66 66 66 65 62 59 57 59 60 61 69 76 84 94 107 120 127 132 137 140 142 141 140 141 139 139 139 139 140 142 143 143 144 145 148 148 
+99 94 97 99 102 102 103 104 96 90 83 84 86 88 88 88 88 86 82 78 76 76 76 77 77 77 78 77 75 74 75 76 75 77 77 79 78 76 75 71 66 60 58 58 59 59 60 59 60 58 57 55 59 62 65 65 65 66 66 65 65 66 70 74 77 78 80 82 87 93 97 99 100 101 95 89 83 81 80 79 78 77 76 78 81 84 86 84 82 79 77 74 71 74 78 81 79 77 77 77 78 80 83 88 92 90 84 80 79 85 88 92 89 87 83 77 72 65 68 69 71 71 72 73 75 76 80 80 77 74 72 70 69 66 63 61 59 58 57 56 59 62 65 69 72 75 75 76 77 74 70 66 65 67 69 71 71 72 72 72 71 71 73 75 77 79 82 83 87 91 94 103 114 126 132 131 129 128 127 124 122 118 113 109 101 91 82 79 77 76 81 89 96 95 88 82 81 83 86 89 91 95 97 91 88 83 85 88 90 88 84 82 81 81 80 84 89 94 96 97 96 95 88 81 77 77 77 78 81 84 88 86 84 83 79 76 73 75 81 86 86 83 80 80 83 86 88 88 88 89 89 91 92 93 93 93 87 80 74 72 72 73 75 79 83 83 82 82 80 78 75 73 74 75 76 81 87 91 90 89 88 87 87 86 88 93 99 97 92 87 85 89 93 95 100 103 109 118 127 135 139 143 147 149 150 152 157 163 170 170 167 164 160 155 151 149 150 150 148 150 152 156 158 162 163 168 174 181 184 184 186 182 177 174 167 161 157 150 139 127 116 115 113 110 115 118 122 124 124 125 118 111 101 99 100 104 105 103 101 99 97 94 92 84 77 70 61 54 45 45 44 43 47 51 56 56 53 50 48 46 44 42 42 42 43 47 51 55 59 65 70 69 68 66 65 64 62 62 63 63 64 62 62 61 62 63 63 57 52 45 43 40 37 38 40 41 43 47 50 53 56 59 61 65 68 69 66 64 62 65 67 69 77 84 91 98 105 111 114 115 115 115 114 112 112 113 113 114 119 124 128 134 139 146 149 152 156 157 
+96 94 95 97 98 100 101 102 96 90 85 87 88 91 88 84 79 74 68 63 61 64 68 70 71 70 69 66 64 61 63 64 64 66 68 68 69 68 69 68 68 65 65 65 65 64 63 62 62 60 58 56 59 63 66 67 67 67 67 67 67 67 67 66 67 68 69 72 77 82 86 86 86 86 86 85 85 88 92 95 94 89 85 84 85 86 86 83 81 80 80 79 79 82 84 86 84 83 82 79 76 73 74 79 84 83 80 77 76 81 86 88 87 86 83 77 72 64 65 66 67 69 70 72 71 72 73 74 75 78 76 73 69 66 62 59 57 59 61 63 62 60 59 62 65 68 73 77 82 81 77 74 73 76 80 81 80 79 78 81 83 86 91 96 100 99 100 98 99 100 100 106 113 120 125 128 131 132 129 126 122 120 118 115 111 107 101 96 91 86 85 87 87 86 83 79 78 79 79 81 87 92 96 93 90 89 88 87 87 88 89 91 87 82 78 76 78 79 81 85 89 90 85 80 76 76 75 76 82 86 92 89 86 82 81 81 80 81 82 84 83 83 83 84 87 89 92 90 88 88 87 89 89 92 95 99 94 88 84 80 77 74 75 81 85 87 86 84 82 80 77 75 74 73 72 75 78 80 83 86 89 89 87 85 86 89 91 93 93 93 91 90 89 88 95 99 106 111 116 121 129 138 146 152 156 160 165 172 179 183 180 179 176 171 167 161 155 148 142 151 163 173 174 176 177 182 188 195 193 189 183 178 168 160 155 151 146 143 128 115 102 106 110 113 121 123 128 128 126 122 114 102 90 85 86 86 87 87 87 89 87 86 84 75 66 58 56 55 54 53 52 50 52 55 59 60 59 58 55 49 43 38 39 40 41 41 41 40 47 55 63 63 61 60 60 61 61 62 65 67 68 68 68 68 69 69 69 64 59 53 52 52 52 53 55 57 59 60 61 59 59 56 56 55 56 57 61 65 71 78 87 96 98 100 101 100 99 95 94 92 92 91 89 90 92 95 98 103 111 119 124 130 134 138 139 140 141 139 
+94 95 94 93 93 99 103 106 101 95 88 90 93 96 91 85 78 74 70 68 67 67 69 70 70 69 68 68 66 65 64 63 62 63 62 62 62 62 62 65 68 70 72 70 70 69 68 68 66 64 62 61 60 62 62 66 69 71 68 64 59 59 61 64 66 67 69 72 77 82 88 89 90 92 91 90 89 94 99 104 101 95 90 87 86 87 86 84 82 81 83 85 87 88 90 90 89 89 88 82 74 67 68 70 73 75 76 76 77 79 80 82 82 82 83 77 73 68 64 62 60 64 69 73 74 71 70 72 74 78 78 77 76 72 69 64 62 63 65 66 63 60 58 61 65 70 71 72 74 73 73 72 74 77 80 82 83 84 85 86 87 88 94 100 107 106 105 104 105 106 106 111 117 122 126 129 134 134 130 126 123 121 119 119 118 115 113 107 99 92 88 85 82 81 79 78 76 74 73 74 82 89 95 93 92 91 88 87 84 89 92 97 91 82 74 70 67 65 68 75 82 85 81 78 76 75 73 74 81 89 95 91 87 82 83 85 87 86 84 82 83 84 86 88 90 93 94 91 88 86 86 87 87 92 96 101 99 95 92 87 81 74 77 82 88 91 89 87 84 81 78 75 73 70 67 71 74 77 81 85 90 90 88 86 86 86 87 89 93 96 97 93 89 87 94 100 107 110 113 118 124 132 139 144 149 153 158 163 167 169 169 167 169 164 161 160 156 156 155 157 162 164 160 153 148 151 160 165 168 165 163 158 148 140 132 129 128 123 116 109 104 116 128 141 144 143 145 137 129 121 106 91 74 64 61 59 58 64 71 75 76 77 75 66 56 46 51 55 60 59 58 56 58 59 60 60 59 59 56 51 46 43 43 43 42 41 41 40 44 48 52 53 55 57 59 62 64 67 68 70 73 75 76 78 78 78 76 73 68 65 67 69 73 75 76 77 76 73 71 66 61 57 54 54 54 55 63 71 77 84 91 97 95 95 91 90 89 87 89 93 98 103 105 111 115 120 123 127 129 131 131 131 128 123 122 120 117 115 
+102 100 98 99 99 101 104 106 102 98 93 96 98 99 93 85 77 74 73 72 71 70 70 69 69 69 71 74 79 81 78 75 72 69 67 65 63 60 57 59 63 68 69 69 68 68 68 68 67 65 62 60 60 60 59 62 65 69 65 60 54 55 58 62 66 67 69 72 77 84 90 94 98 101 99 97 95 99 104 108 103 97 89 87 87 87 87 87 88 88 88 89 91 97 103 108 110 109 109 106 100 94 93 93 94 91 88 87 86 85 85 86 86 85 84 80 76 72 68 64 61 64 70 75 74 73 70 71 74 78 79 79 80 79 73 68 65 66 67 68 65 60 57 62 69 74 71 65 60 61 65 68 71 73 74 78 83 88 91 88 82 80 86 91 97 98 99 99 104 108 114 120 127 134 138 136 134 131 129 127 123 120 116 112 109 107 104 100 94 88 87 88 87 85 81 77 73 71 68 70 77 84 90 89 89 88 87 85 83 85 88 90 86 78 72 69 69 69 70 72 74 76 79 82 83 80 76 74 78 82 87 84 83 80 81 83 83 85 86 87 88 87 86 87 90 93 95 90 87 82 86 88 91 92 94 95 94 93 93 90 86 82 82 86 89 90 88 85 82 79 75 71 69 68 65 72 78 85 87 89 89 90 89 88 88 86 84 85 90 95 99 96 93 92 97 103 108 113 117 121 122 127 128 130 135 138 140 143 146 146 149 151 151 152 153 154 161 165 170 165 161 154 143 133 121 125 133 143 147 147 149 146 136 126 119 117 112 109 107 103 102 117 130 145 144 142 140 131 121 111 98 84 71 63 61 60 61 65 69 71 69 67 63 60 58 55 54 53 52 55 60 66 67 63 61 58 55 51 50 51 51 52 50 47 45 44 43 42 42 41 40 43 48 53 58 62 67 69 70 70 72 74 77 79 77 77 74 72 69 66 68 70 71 73 75 76 75 72 69 69 71 75 77 77 77 76 79 80 81 82 83 81 79 76 75 75 76 79 85 94 103 111 118 124 130 133 135 137 137 135 133 130 128 126 124 124 123 119 
+107 106 106 107 108 106 106 105 104 103 100 99 98 97 90 83 74 71 69 66 66 66 67 69 72 76 80 83 87 90 87 83 79 76 71 68 63 58 53 55 59 65 66 66 67 66 67 68 67 64 61 59 59 58 58 57 56 56 56 55 54 56 59 62 63 63 64 66 74 81 86 87 87 89 92 97 98 101 105 108 105 100 95 92 90 89 89 89 90 90 91 91 95 103 112 121 125 128 131 129 127 123 121 121 119 115 108 101 98 99 98 97 94 92 89 85 81 77 76 74 73 74 74 76 75 75 75 74 74 74 76 76 77 75 70 65 62 62 62 62 62 62 62 63 65 68 65 60 57 58 61 65 68 71 75 79 84 89 94 91 88 85 88 92 96 98 97 99 103 108 112 120 129 137 140 135 130 125 124 121 118 114 109 105 103 101 98 93 88 83 84 89 92 89 83 78 72 70 65 66 74 81 86 87 86 86 85 84 82 83 84 84 81 76 70 69 72 74 73 69 67 69 76 84 90 84 78 73 75 77 79 79 79 79 79 80 80 83 87 92 92 89 87 88 91 94 95 90 85 80 86 91 96 94 91 89 90 93 94 92 90 87 87 89 89 89 86 83 80 76 72 70 69 68 67 75 84 92 93 92 91 91 92 91 90 87 85 83 88 92 94 92 88 87 93 102 109 112 114 117 120 122 124 127 132 138 142 144 148 151 152 153 154 154 154 156 160 165 172 172 173 174 170 163 158 158 161 165 166 166 167 160 147 134 124 118 111 106 102 99 94 104 114 123 123 122 121 115 107 99 90 82 73 68 69 71 71 70 69 67 62 56 51 54 58 62 57 53 49 54 63 71 71 64 57 52 49 47 46 51 55 59 55 51 47 48 48 49 47 44 42 43 46 49 53 57 61 63 61 60 58 61 64 66 66 66 65 64 63 63 63 63 63 66 69 72 74 69 68 72 81 90 97 96 95 94 91 90 88 87 86 85 83 82 81 81 82 82 84 87 90 92 99 105 110 114 117 120 122 124 128 131 134 137 139 138 139 132 
+113 110 109 109 108 107 106 105 103 103 101 98 95 92 86 80 74 70 66 62 60 62 64 68 76 85 89 91 92 92 91 89 87 81 75 69 65 62 59 59 60 61 63 66 69 70 71 73 72 68 63 59 58 58 57 55 53 50 50 53 54 57 60 63 63 60 58 61 70 78 82 77 74 73 84 93 103 103 106 106 107 106 106 103 98 95 92 90 89 89 89 91 92 97 104 108 111 113 117 120 123 125 122 122 122 118 115 112 110 108 107 106 103 99 95 92 88 83 82 80 78 77 77 76 76 76 76 75 73 72 72 73 73 72 67 62 59 58 57 56 60 64 67 65 63 61 58 58 55 57 59 62 66 70 75 80 85 89 93 97 100 103 102 101 100 100 101 102 101 101 102 110 119 129 131 126 119 113 108 102 100 99 98 97 97 97 97 88 81 73 79 86 93 91 86 80 76 75 73 74 80 86 91 89 87 85 83 80 76 78 80 80 78 76 74 73 72 72 72 69 67 68 75 81 84 78 72 67 71 74 77 81 84 88 86 82 79 79 82 85 87 86 87 87 88 91 91 89 86 85 90 93 97 95 94 93 90 88 86 86 87 88 88 89 88 86 83 79 76 76 77 76 77 78 79 85 90 95 96 95 95 94 94 94 93 92 89 87 86 85 82 78 73 72 84 96 107 109 109 110 114 119 123 129 135 141 146 152 158 162 162 161 161 162 159 160 163 167 171 179 188 196 196 194 191 188 188 185 184 183 180 171 154 138 124 118 113 106 104 101 99 104 108 110 111 111 109 105 99 92 87 84 83 83 82 83 82 76 70 66 62 58 54 58 62 66 64 61 58 62 66 72 69 59 49 43 43 44 46 52 58 63 59 54 50 52 54 56 53 49 45 44 45 45 47 52 56 57 54 50 49 53 55 59 61 62 62 64 66 69 72 75 78 82 86 90 93 93 93 95 97 99 99 100 101 101 100 100 99 99 100 100 99 97 94 93 90 87 85 80 75 76 84 92 98 102 106 110 115 119 123 128 130 132 131 129 127 123 
+117 114 111 108 107 107 107 105 102 100 96 91 87 81 78 77 74 74 73 73 71 68 67 69 75 81 86 89 94 95 92 89 87 82 76 71 69 66 64 62 60 58 61 65 71 75 78 80 79 73 65 60 59 58 57 56 54 53 52 53 52 58 64 70 68 62 55 56 63 70 73 69 64 63 73 83 93 95 95 97 99 101 102 101 99 96 94 90 88 85 86 87 88 91 94 96 98 101 103 110 117 124 121 120 119 118 118 120 118 116 116 114 109 106 102 99 96 93 86 80 74 74 76 77 75 74 72 71 69 68 66 65 64 64 63 64 62 58 56 53 54 56 57 57 56 56 56 56 57 58 60 62 64 69 73 76 77 79 82 89 96 101 100 99 96 97 100 102 100 99 98 102 111 118 118 113 108 102 97 91 87 87 88 89 91 93 95 86 78 68 74 85 94 94 88 83 81 80 79 82 86 91 93 90 88 85 81 76 72 73 74 76 77 77 78 76 74 72 69 68 66 68 73 78 79 73 67 63 67 71 74 82 89 96 92 84 78 77 78 79 81 84 86 89 88 88 89 88 88 88 90 93 95 95 95 96 91 85 80 82 86 90 90 88 86 82 79 76 74 77 79 82 84 85 87 90 93 96 95 93 93 94 95 96 95 93 91 89 85 81 78 76 74 74 84 93 104 103 101 98 103 107 112 118 125 132 139 147 154 161 163 165 169 172 175 179 186 192 198 207 211 218 218 213 211 206 200 195 188 182 174 163 146 131 118 115 113 111 114 116 121 118 113 109 107 105 103 98 92 87 85 89 95 98 97 96 93 83 72 63 61 60 59 63 67 71 71 68 66 67 68 70 66 56 46 41 42 44 46 51 56 59 58 58 57 59 62 64 60 56 51 48 44 40 40 46 50 53 50 47 46 51 56 61 62 63 64 69 75 82 87 93 99 104 108 111 114 115 117 115 110 105 102 102 103 103 100 99 97 94 91 88 86 83 82 81 80 80 80 82 85 89 96 102 109 111 113 116 119 119 121 121 119 119 116 113 109 109 
+118 117 116 114 111 108 102 100 97 95 91 86 80 74 74 74 74 77 80 82 80 75 70 69 72 74 79 86 93 96 89 85 81 79 79 79 73 70 66 65 64 62 64 67 69 70 70 70 70 69 69 66 63 59 56 54 52 51 50 51 51 57 65 72 71 62 54 52 57 62 64 59 55 54 62 71 78 81 83 86 86 86 87 90 93 95 92 86 80 79 79 82 83 84 85 87 91 95 98 103 110 115 114 113 111 111 110 110 109 109 109 106 103 101 100 97 95 92 85 79 73 73 75 76 73 70 67 65 66 65 63 60 58 57 61 64 64 59 54 49 48 47 46 48 50 51 53 55 58 59 60 62 64 66 68 68 66 64 65 74 81 87 87 88 87 91 94 98 98 98 99 99 100 102 102 100 98 95 91 86 83 84 84 84 87 90 92 86 80 74 80 86 93 94 92 92 88 85 83 83 86 90 91 88 83 80 77 75 73 74 75 75 75 75 74 73 72 72 70 69 67 68 71 74 75 74 72 70 72 72 74 81 90 97 93 88 81 81 83 84 87 90 92 95 94 93 93 92 90 88 84 80 76 81 87 93 91 90 87 88 91 94 92 86 80 78 75 72 72 76 80 84 85 86 86 89 90 92 90 86 82 85 91 96 97 93 91 87 84 82 80 82 86 89 92 95 99 94 88 82 86 91 96 102 109 116 125 136 147 156 161 168 176 184 192 201 212 219 227 231 235 237 234 231 224 219 211 201 193 183 172 161 148 132 123 122 121 121 126 130 135 126 115 106 102 100 99 96 91 89 92 100 108 111 104 96 89 84 79 74 76 78 81 83 85 86 82 76 70 68 65 64 60 55 51 48 47 47 46 48 50 52 56 61 65 68 70 72 69 64 58 52 44 37 36 41 46 48 48 46 45 51 55 60 61 62 63 67 71 75 79 83 87 89 90 92 92 92 92 91 93 95 97 96 95 95 90 85 82 74 64 55 54 57 61 64 67 70 75 84 93 99 104 107 111 112 112 112 111 110 109 106 102 98 95 94 92 94 
+119 121 121 120 115 106 97 90 89 87 84 81 77 73 73 74 74 78 81 84 81 76 71 70 70 71 75 80 86 88 82 75 70 72 73 74 72 69 65 66 67 67 67 67 68 65 61 56 59 66 74 76 68 61 53 51 48 44 46 47 48 52 58 64 63 58 54 54 58 62 63 62 60 60 64 68 74 78 82 85 84 82 82 85 89 93 90 85 79 76 77 77 78 78 78 79 84 90 95 98 102 105 106 107 106 104 99 96 94 93 93 92 92 91 90 87 84 82 81 79 77 74 73 72 68 64 60 60 62 63 63 62 61 61 62 61 61 59 56 54 51 47 45 46 48 50 51 53 55 58 61 65 67 68 70 71 69 68 68 71 74 77 78 79 81 83 86 88 91 95 97 96 93 90 89 88 87 86 86 84 84 82 83 83 84 86 88 86 84 80 84 89 93 94 94 94 93 88 84 83 86 89 90 85 80 76 76 75 76 75 74 73 74 72 72 72 71 71 70 70 68 69 70 72 74 74 76 77 76 74 74 81 90 96 94 89 85 85 87 89 91 95 98 100 99 98 97 93 91 85 78 70 62 70 80 90 92 92 93 94 95 97 93 85 78 72 71 71 71 77 81 86 87 86 85 85 85 85 83 79 77 81 86 92 93 91 90 88 87 87 87 90 92 93 93 92 91 87 84 80 82 86 90 96 101 107 113 121 130 137 145 152 160 169 180 190 198 204 213 216 219 221 217 215 211 207 204 197 190 183 177 170 164 159 153 150 146 142 142 141 142 129 116 101 97 96 96 95 95 95 100 110 121 124 110 96 84 84 84 84 91 97 103 102 100 98 91 83 75 68 65 62 59 57 54 52 51 51 50 51 53 54 59 63 68 67 66 64 60 55 50 46 43 41 40 43 47 48 48 48 48 51 55 57 59 60 60 61 62 62 63 65 68 68 70 70 70 69 70 73 81 88 94 93 92 90 86 81 75 70 64 58 59 63 67 69 68 68 69 76 82 86 88 89 90 90 90 92 90 89 87 83 79 73 72 73 75 77 
+126 126 124 121 115 106 96 91 89 87 86 83 79 76 76 76 76 80 85 87 83 77 73 70 69 68 69 72 76 76 69 62 57 56 54 54 55 57 57 59 61 63 64 62 62 61 60 58 60 64 68 70 64 57 52 50 48 46 45 46 46 48 51 55 55 55 54 55 58 61 64 65 67 69 69 69 71 78 85 91 89 88 86 87 88 89 88 85 83 81 80 78 78 79 80 82 85 90 94 96 97 99 99 98 98 96 94 90 90 88 88 87 86 87 85 82 79 76 76 76 76 73 71 69 65 62 58 60 63 65 65 66 66 65 63 61 59 59 59 58 53 49 44 46 47 49 50 50 51 56 62 68 71 73 75 76 78 79 78 73 70 68 70 73 75 75 74 75 80 88 93 92 87 83 80 79 77 78 83 86 89 88 87 87 86 84 82 84 87 89 90 92 93 92 90 87 85 83 81 82 88 93 96 88 81 76 80 85 89 83 76 68 70 72 73 73 69 66 66 70 72 74 74 76 77 78 79 79 79 79 79 82 85 88 87 86 85 85 86 88 91 96 100 103 102 103 99 91 84 75 75 74 73 79 84 90 92 93 96 96 97 98 93 83 73 68 72 75 78 81 83 86 85 85 85 81 75 69 71 76 81 82 83 82 83 87 90 92 94 96 97 96 93 91 88 86 83 83 83 84 84 85 88 91 95 99 103 107 110 116 124 132 143 153 166 176 183 191 200 202 202 205 203 201 199 196 194 193 188 184 178 175 175 172 170 166 161 158 158 157 158 147 136 126 122 120 118 117 117 118 121 126 133 132 125 116 110 109 110 109 110 112 112 109 104 101 94 85 78 72 71 68 65 60 56 53 54 55 56 58 60 61 64 66 67 64 59 55 50 46 42 41 42 43 45 46 48 50 49 50 50 52 53 56 56 56 56 56 57 58 60 65 69 72 73 75 77 82 88 92 95 98 100 98 95 93 89 85 81 80 80 81 81 81 81 78 73 67 64 68 74 78 78 77 76 79 81 84 85 85 85 83 81 80 82 86 91 96 
+133 130 127 121 113 106 97 94 94 94 94 92 89 87 88 88 88 90 93 95 86 77 67 65 64 63 64 68 69 68 63 57 52 51 49 47 48 49 51 54 57 59 59 58 56 57 60 63 63 61 60 58 56 53 51 53 54 54 51 49 47 46 45 44 48 51 54 57 57 59 58 57 56 57 61 63 67 73 80 88 89 90 91 90 90 90 88 89 89 88 86 84 83 83 83 84 89 91 93 93 93 94 92 90 89 88 88 86 86 87 87 87 86 85 83 79 77 74 74 72 72 70 68 66 68 69 69 71 73 74 73 71 69 68 67 68 67 63 59 55 53 51 49 48 47 46 48 49 50 54 59 63 67 69 72 75 77 80 79 74 68 65 68 71 74 73 72 70 76 80 86 85 84 83 80 78 76 76 83 89 93 93 94 92 88 83 78 83 88 94 94 94 94 90 87 84 82 81 81 83 89 95 97 91 83 78 86 94 100 89 77 66 68 71 76 73 70 65 66 72 76 78 80 80 81 81 80 81 82 82 83 82 82 81 81 83 83 84 86 86 90 97 101 104 105 103 101 89 79 70 74 79 83 86 87 88 91 94 95 96 96 95 90 80 70 67 72 78 84 84 85 87 86 87 86 80 73 65 70 76 84 83 79 75 77 83 89 94 97 100 103 99 96 91 87 83 79 82 85 89 89 89 89 89 90 90 93 99 106 109 113 116 120 130 140 147 155 161 167 171 174 176 180 182 183 184 183 185 184 178 171 167 166 163 159 163 167 168 173 178 184 181 178 172 168 161 156 152 151 149 145 145 141 139 139 139 139 137 137 136 130 125 119 113 108 100 93 86 79 75 73 72 69 65 60 58 58 59 59 62 66 69 66 63 60 57 55 52 49 47 44 44 45 46 47 50 53 53 52 51 49 51 53 55 54 53 51 52 55 57 62 68 74 78 79 80 84 93 100 105 103 101 99 96 94 94 93 90 90 90 91 91 92 94 94 93 90 86 84 89 92 95 94 94 93 95 98 98 98 99 98 98 99 100 103 108 113 119 
+125 121 118 114 108 101 94 91 91 92 94 93 92 92 94 95 96 97 99 100 88 76 62 59 58 57 59 62 65 65 60 57 55 58 60 61 57 55 53 55 56 60 60 60 60 63 66 70 70 65 61 58 57 56 56 57 58 58 54 50 47 44 41 39 43 48 55 57 56 56 53 48 44 44 50 57 62 67 73 78 85 91 97 96 95 93 93 94 95 97 99 102 100 95 91 88 90 92 93 92 90 89 87 86 85 85 84 85 86 88 87 88 88 87 85 82 79 76 75 74 71 70 68 66 70 75 79 81 81 82 79 75 71 71 72 73 72 65 58 53 54 55 55 51 47 43 45 48 50 52 55 57 60 63 66 69 72 76 77 72 68 64 67 72 76 75 74 74 74 74 75 78 84 90 90 88 86 87 89 90 94 97 99 100 92 85 77 83 87 92 93 93 93 93 91 90 89 89 89 90 90 92 93 93 92 91 93 94 95 89 81 75 76 76 78 79 79 79 80 80 80 82 84 86 87 83 81 78 81 81 84 84 87 87 85 81 79 78 78 79 82 89 96 99 100 101 99 94 89 84 83 84 84 83 83 82 86 90 93 91 86 82 77 74 70 69 74 79 83 84 86 87 90 93 95 90 84 79 80 82 84 82 79 75 75 82 88 93 96 100 103 100 97 94 89 84 80 84 88 94 95 93 92 88 84 81 84 93 103 109 105 100 97 105 113 121 125 131 137 143 147 150 156 161 165 167 171 174 172 168 162 157 155 154 153 161 167 174 182 189 195 197 195 191 182 171 160 152 149 146 139 131 119 113 120 129 137 136 136 137 128 120 111 103 95 86 81 77 73 71 70 69 68 67 66 66 64 62 60 65 70 75 69 59 51 49 50 51 51 49 47 46 48 49 51 53 55 55 52 49 46 47 49 50 49 47 46 47 49 52 55 59 62 64 66 70 73 74 74 74 74 77 81 83 85 90 93 97 101 101 99 97 98 102 107 109 108 107 107 108 108 108 107 105 103 102 102 101 100 98 96 93 92 91 92 95 100 103 
+116 113 110 106 101 94 87 85 86 87 87 88 90 92 93 94 95 94 91 91 82 74 64 63 63 62 63 63 64 63 61 58 57 61 65 67 62 58 53 55 56 58 60 62 64 68 72 78 76 70 64 62 63 64 63 62 60 59 53 49 44 46 48 49 50 52 53 55 56 58 58 55 52 53 55 59 63 67 70 74 80 86 92 93 94 94 95 97 98 102 107 112 111 103 95 90 92 93 94 90 87 83 82 80 80 82 83 86 87 89 91 91 91 91 90 87 82 81 79 78 77 74 72 70 74 79 84 84 84 83 82 80 76 74 73 71 69 65 60 57 58 57 58 57 58 57 60 63 68 67 67 66 68 72 75 79 82 87 89 83 78 75 77 80 83 83 84 86 83 82 80 82 88 93 95 94 94 95 93 94 96 100 105 106 97 86 78 82 86 91 91 92 93 93 93 93 92 92 93 92 90 88 89 92 97 100 97 94 91 87 84 80 80 80 80 82 86 90 90 88 85 85 89 91 92 86 82 76 80 81 85 86 90 92 88 80 75 72 73 72 76 83 89 94 95 98 99 98 96 94 92 88 85 84 81 80 83 87 93 88 80 72 68 69 70 73 78 82 86 87 88 90 92 95 97 95 93 91 90 88 87 84 79 75 75 80 86 91 94 97 101 98 94 92 89 85 84 86 88 91 91 89 88 86 86 87 90 95 100 103 100 98 97 103 112 119 121 121 122 122 123 122 124 127 129 133 139 145 146 143 138 135 139 144 150 158 165 175 182 189 195 193 190 188 174 160 145 135 134 132 125 107 89 81 97 115 132 132 134 134 125 115 105 96 87 78 76 76 77 76 74 72 69 69 68 67 66 66 65 68 70 72 65 58 50 49 48 47 47 47 48 49 52 56 57 55 51 48 45 42 39 40 41 43 42 41 40 42 44 46 46 46 46 47 52 59 63 58 52 49 55 61 67 72 75 78 82 86 90 90 90 88 90 93 97 99 99 99 99 99 97 98 95 95 93 92 90 90 86 83 81 78 74 70 70 74 80 83 
+101 101 101 100 95 90 83 83 83 84 85 87 87 88 89 92 92 88 84 80 76 72 67 68 69 70 69 66 65 63 62 61 60 61 63 62 59 56 52 53 52 53 56 59 62 66 69 73 73 70 67 65 64 64 63 63 62 60 55 51 46 49 52 56 55 53 51 53 57 61 62 63 64 64 64 64 65 68 70 73 75 77 80 84 88 93 94 95 97 98 100 101 101 98 92 91 90 91 91 90 89 88 87 87 86 85 83 83 85 90 94 95 93 92 90 86 82 80 81 82 83 79 77 75 80 86 93 92 89 88 85 82 80 76 73 69 66 64 62 61 61 61 60 64 68 71 77 81 87 85 81 77 79 83 88 92 98 103 105 100 94 91 92 93 96 97 101 102 101 98 98 95 94 93 92 96 98 100 98 98 100 104 109 111 100 90 82 84 87 88 88 88 89 89 89 89 89 86 85 83 85 86 86 89 93 94 93 91 91 84 79 74 74 74 74 78 82 86 87 88 88 89 89 89 89 87 84 83 84 85 86 88 90 93 88 82 76 74 74 74 77 84 90 94 96 98 98 97 95 94 93 93 95 92 91 90 92 93 95 91 83 74 72 73 75 78 84 90 93 93 93 94 94 93 93 94 98 102 99 95 92 87 80 76 75 79 83 88 90 93 95 91 90 87 89 89 92 90 88 86 84 83 81 84 90 96 101 99 97 96 97 97 98 104 113 119 115 111 108 105 101 98 97 98 99 106 114 123 127 124 122 122 129 137 144 151 159 169 174 178 184 180 175 170 160 152 143 137 135 134 130 123 117 116 122 129 134 132 129 126 120 113 105 103 100 99 98 101 101 97 90 81 74 70 66 63 66 69 73 70 67 64 60 56 53 50 47 44 43 46 49 53 57 61 63 57 51 46 44 42 40 42 43 44 46 47 47 47 47 47 47 48 50 52 57 61 64 64 64 65 67 71 73 68 61 52 55 59 63 68 69 73 76 79 83 85 87 89 92 92 92 92 93 94 94 96 94 94 94 95 94 93 92 91 91 95 97 98 
+90 90 91 94 91 86 82 82 83 85 85 85 86 84 84 82 81 76 72 69 69 68 66 68 70 72 70 67 65 63 62 62 61 60 59 59 58 56 54 52 52 50 53 56 59 62 64 67 69 69 70 68 64 61 59 61 63 63 60 56 53 54 54 56 54 53 51 55 61 66 69 70 71 70 69 67 67 69 72 74 71 68 67 74 82 89 90 91 92 92 93 93 93 91 89 87 88 88 89 90 91 91 92 93 93 88 83 77 83 91 98 98 96 92 88 83 78 77 81 85 88 85 83 82 89 97 105 103 99 96 90 84 78 73 71 69 67 63 61 60 63 66 69 71 73 75 80 85 90 90 88 86 88 89 90 94 98 103 105 100 96 92 91 89 89 95 101 107 106 105 105 105 104 103 104 107 110 109 107 104 105 107 110 111 102 95 86 86 85 86 86 87 87 85 85 85 84 81 80 80 83 85 87 86 86 87 88 88 88 82 74 67 68 71 72 75 79 82 84 87 90 92 91 88 87 87 87 87 86 87 87 89 91 93 89 84 79 77 78 78 80 85 89 94 95 97 97 96 93 91 93 97 98 98 97 96 96 97 99 93 86 78 75 75 77 80 85 89 95 95 94 94 91 90 90 95 99 105 102 99 96 89 83 76 75 80 85 89 91 92 92 89 85 83 86 90 94 94 93 92 89 85 81 83 89 95 98 98 97 95 97 99 102 108 114 121 122 122 123 118 113 108 108 107 109 113 119 126 131 131 132 132 131 133 132 139 146 152 155 158 162 156 150 144 142 143 146 147 145 141 141 148 156 161 154 146 136 131 125 120 117 114 110 110 112 112 113 113 114 107 96 84 75 71 67 65 70 75 79 76 73 70 66 63 59 55 51 47 46 49 52 54 57 60 61 60 59 59 57 55 53 54 56 58 59 60 61 60 55 50 49 52 57 60 62 63 65 71 76 82 82 82 82 74 65 55 57 63 70 76 81 87 92 96 98 103 107 110 113 115 117 117 117 120 122 122 123 124 125 124 125 125 126 128 128 124 121 115 
+112 110 109 107 102 99 95 91 87 86 85 83 82 79 77 74 72 67 64 60 62 65 67 69 71 74 71 68 65 63 62 62 60 57 54 54 57 60 62 58 55 52 53 54 55 57 58 60 62 61 62 62 62 61 61 61 62 62 61 59 57 57 56 56 55 54 52 58 64 71 74 76 78 77 73 68 68 71 74 76 67 59 52 64 74 86 85 84 82 83 85 86 85 80 76 75 78 81 81 83 85 86 86 86 86 83 82 81 83 87 91 93 92 93 89 83 79 76 79 82 85 84 84 85 92 101 109 106 103 99 93 84 75 71 70 69 67 63 59 59 65 71 77 78 79 79 84 88 92 93 93 94 94 92 91 92 95 97 97 93 91 88 81 76 73 84 92 101 103 106 107 113 118 124 126 128 127 124 119 113 109 109 111 109 102 95 89 87 85 84 85 88 89 86 83 81 80 81 82 83 86 88 89 86 82 79 82 85 88 79 71 62 66 73 80 81 82 82 84 87 91 92 91 90 88 86 84 83 87 89 93 92 95 95 92 89 87 87 89 91 92 90 90 90 94 98 99 96 91 89 91 92 94 94 96 97 97 96 95 91 86 81 78 75 73 73 75 79 82 84 85 87 87 87 88 92 97 101 102 98 97 91 84 75 75 84 91 96 96 95 93 89 83 78 84 90 95 98 100 103 97 89 83 82 87 91 94 94 94 95 97 102 106 112 118 122 127 132 136 132 126 120 119 120 120 123 128 131 135 138 140 140 136 131 128 131 135 139 139 138 140 134 129 123 124 127 132 135 132 131 133 144 154 163 161 158 159 156 152 149 145 136 130 124 114 105 100 99 97 93 86 79 74 74 73 74 77 82 85 84 82 80 75 71 66 61 56 51 49 52 54 56 57 60 61 64 65 67 63 61 58 59 60 61 61 60 60 59 59 59 61 65 69 73 77 82 85 89 93 96 97 98 100 96 93 91 93 96 101 105 110 116 121 122 122 125 128 133 135 135 134 136 137 135 136 135 136 136 136 135 135 134 133 135 136 133 130 130 
+132 128 124 121 117 113 110 102 95 88 83 79 75 72 70 68 68 67 66 66 68 71 73 70 67 65 66 67 67 66 65 63 62 59 57 57 61 65 68 63 59 55 54 52 50 52 52 54 53 52 50 54 58 62 64 61 58 57 58 59 60 60 61 61 59 56 54 59 64 70 71 71 72 72 70 67 68 72 77 78 70 64 58 65 73 82 80 78 76 77 79 82 78 73 68 66 69 72 75 76 79 80 80 79 78 80 81 83 82 82 82 84 88 91 90 86 82 78 76 75 75 78 81 83 88 93 98 96 95 93 88 82 75 70 68 64 61 60 59 59 66 73 78 82 85 88 91 96 99 98 99 99 99 98 97 96 97 97 97 99 101 100 95 91 89 97 103 110 113 113 115 120 125 132 133 132 131 128 122 117 113 112 111 109 102 96 89 86 85 83 85 88 91 87 82 77 78 81 84 87 88 90 90 85 80 76 80 84 87 78 70 62 68 77 86 86 83 81 83 86 90 92 92 91 90 85 81 77 84 89 96 95 96 97 96 95 94 95 98 100 99 94 89 87 93 98 100 95 90 87 88 89 92 94 96 97 96 95 92 89 86 84 80 77 73 71 72 74 76 78 80 83 85 86 89 94 96 101 101 100 98 93 86 78 76 83 89 93 93 94 94 90 87 83 85 89 90 93 98 102 98 89 81 80 84 86 90 91 92 94 96 98 101 110 116 124 130 137 142 145 146 145 146 144 142 142 144 143 144 146 146 145 140 135 130 129 128 127 124 121 118 113 109 105 106 108 110 111 114 116 121 133 144 155 163 173 181 180 179 176 168 156 147 133 118 102 94 91 87 85 81 78 77 76 76 76 78 79 82 79 75 72 69 67 65 62 61 60 59 58 57 58 60 63 64 64 65 64 60 57 54 55 55 56 55 52 49 51 59 68 75 79 82 86 92 97 101 100 101 100 101 101 105 105 105 107 107 108 110 112 115 118 119 119 118 118 119 121 122 123 126 127 126 125 124 124 126 128 130 129 129 130 131 132 135 137 140 144 
+145 140 135 131 124 120 115 104 93 83 77 74 69 67 66 65 64 66 67 69 72 75 78 70 62 54 59 65 71 70 68 66 66 67 67 67 67 67 67 65 65 62 57 53 48 51 54 56 56 55 53 54 57 59 60 58 56 55 58 59 61 61 62 62 61 60 58 61 65 69 69 68 67 66 66 66 67 73 78 80 78 75 73 73 74 77 75 75 74 75 79 81 79 74 68 67 67 67 68 71 73 76 79 82 84 87 90 93 93 93 92 92 94 95 93 88 84 81 81 80 78 79 78 79 82 85 88 86 85 84 81 78 74 71 66 61 59 60 61 63 70 76 81 87 91 95 98 103 106 105 104 103 104 103 103 102 100 98 100 106 115 118 119 119 121 120 123 124 125 126 127 128 129 129 128 125 121 119 117 117 115 116 114 112 104 95 89 87 86 85 87 89 91 87 83 78 80 85 89 91 90 88 86 85 84 84 86 87 89 85 82 78 81 84 88 87 82 79 80 85 90 91 93 94 92 82 73 66 76 84 93 96 99 100 100 99 97 97 97 97 96 91 87 87 92 99 101 95 89 83 89 94 99 98 96 95 94 92 91 90 88 86 84 83 82 80 80 79 78 82 84 87 90 93 96 98 102 105 104 102 98 94 88 83 80 80 81 81 86 90 94 93 93 92 89 85 83 87 92 98 95 86 79 78 80 83 85 88 91 93 94 95 96 106 114 125 133 141 148 155 163 167 168 164 159 155 154 151 147 147 146 145 141 140 138 136 135 134 132 130 128 125 120 115 112 110 108 107 107 106 109 118 126 133 144 153 163 164 160 159 153 147 139 132 124 115 107 100 92 86 85 84 83 80 76 73 72 72 72 68 63 58 58 60 61 63 66 68 69 66 63 62 65 68 70 69 67 66 63 59 56 56 57 57 56 53 50 50 54 57 59 57 56 55 59 62 65 63 60 57 64 72 82 88 92 96 99 101 104 106 108 109 110 109 108 107 108 108 108 109 112 115 113 112 111 112 114 117 116 115 113 111 109 107 106 109 112 117 
+157 150 146 139 131 125 118 103 89 75 69 68 67 65 64 63 63 63 64 66 66 68 68 64 61 57 60 64 68 67 65 64 66 70 74 74 71 68 66 68 69 69 61 54 48 52 55 59 60 60 60 58 56 54 53 54 55 56 58 60 61 59 57 55 59 61 64 65 67 68 67 66 64 64 66 68 70 74 77 81 81 81 80 81 81 81 81 80 80 81 83 85 83 77 73 70 69 67 66 67 70 73 79 85 89 94 99 103 106 106 107 106 102 100 96 90 86 86 90 94 94 85 77 71 73 76 79 76 74 71 70 71 72 70 68 66 68 73 78 82 85 88 90 89 87 87 91 94 97 98 98 100 97 95 92 89 87 84 88 98 109 117 122 128 132 135 138 139 141 142 143 142 140 138 134 128 123 119 118 116 115 113 109 106 100 94 89 87 88 87 89 90 92 89 85 82 83 88 91 92 89 87 85 87 89 90 90 91 90 89 89 89 89 89 89 86 82 79 81 85 90 91 93 94 92 81 70 62 71 82 91 96 100 105 104 102 100 98 97 95 94 90 87 86 90 95 97 93 88 84 90 96 101 100 97 94 94 93 91 91 90 89 87 87 85 84 83 83 83 85 88 90 93 95 99 100 101 103 100 97 94 91 89 87 86 85 84 84 88 93 96 97 97 97 92 85 80 84 91 98 98 92 87 84 84 84 86 91 96 100 98 96 96 105 115 124 129 134 138 146 153 161 163 160 158 154 148 141 137 136 134 136 141 147 152 154 156 159 159 162 164 159 150 141 132 122 114 107 104 100 97 102 107 110 122 133 144 146 144 143 139 134 130 126 121 115 108 98 89 83 83 83 83 81 80 79 77 74 71 72 72 73 75 77 81 84 84 85 86 84 82 81 83 84 85 84 82 81 77 71 66 65 65 64 63 59 56 53 49 43 38 32 25 20 24 31 37 35 33 32 42 55 68 75 80 84 86 88 88 89 87 87 86 84 82 81 79 78 77 81 85 90 91 91 94 96 97 100 99 94 89 85 80 75 71 76 80 86 
+154 148 143 137 129 122 117 102 88 74 69 67 66 65 64 63 64 63 63 62 60 59 59 60 60 61 62 62 63 62 61 61 65 71 78 77 73 67 66 69 72 73 68 62 57 61 65 68 66 64 62 61 60 59 59 58 57 58 59 60 61 58 56 54 57 61 66 67 67 68 66 64 61 63 67 71 73 76 78 80 82 83 85 87 90 92 93 94 95 95 95 95 93 90 87 85 84 83 83 82 82 85 92 99 105 108 110 113 117 117 121 119 115 113 107 101 95 95 99 103 102 91 79 70 71 71 73 70 66 63 65 68 71 71 71 70 75 83 90 95 96 98 97 90 83 77 81 85 88 90 94 96 90 83 77 73 70 68 73 85 98 110 120 128 137 143 148 153 155 158 161 158 156 152 146 139 132 125 121 116 110 104 97 92 91 89 88 90 90 91 91 91 90 90 89 89 89 88 87 87 86 86 87 89 92 93 92 92 91 88 86 83 84 85 86 86 85 84 85 87 90 92 90 89 87 82 77 75 82 88 95 98 104 107 105 102 100 98 97 97 94 92 90 88 86 85 83 86 89 92 93 94 96 96 96 97 96 93 91 91 91 92 89 83 77 73 77 83 87 89 90 92 94 96 97 96 94 92 89 87 83 85 88 90 93 94 94 95 98 99 101 100 99 99 92 85 78 84 93 101 102 99 97 94 90 86 86 94 102 109 105 99 96 105 113 121 126 128 132 139 146 154 156 155 153 149 143 137 133 136 138 142 151 162 169 170 174 178 178 181 182 176 169 159 149 141 133 127 124 122 121 122 125 125 129 134 138 137 135 135 128 121 113 105 97 87 81 77 75 73 74 74 75 80 85 91 87 82 77 81 88 94 99 101 104 106 105 104 102 101 98 97 95 94 93 90 86 84 78 72 66 63 63 64 62 60 58 54 50 46 43 42 40 41 49 57 66 65 64 62 65 68 71 71 71 70 69 68 67 66 63 61 60 56 53 51 49 50 51 57 65 70 74 75 76 76 79 83 83 80 76 73 70 66 64 67 71 74 
+151 145 138 132 126 119 113 101 88 76 73 69 67 67 70 71 69 65 62 58 55 52 51 55 58 60 59 57 56 57 58 59 65 72 79 79 73 68 66 69 72 74 71 67 65 69 74 77 73 68 63 65 67 70 68 65 62 60 59 59 59 59 59 58 59 58 59 62 66 70 66 62 58 60 65 69 73 77 81 83 87 90 92 95 98 100 102 106 109 109 108 109 108 106 103 102 101 101 100 97 95 96 103 112 120 121 123 123 127 130 133 133 129 126 122 115 109 105 107 108 105 95 84 75 74 73 72 68 66 63 66 70 73 73 72 70 73 79 84 86 84 82 79 77 74 71 73 74 75 79 82 85 81 76 71 69 67 66 72 85 98 112 121 131 139 146 153 158 160 162 164 160 156 151 146 140 134 128 124 118 111 103 95 90 91 92 94 95 95 95 93 90 87 89 91 92 90 87 84 82 84 85 87 89 92 95 95 94 92 88 83 78 79 81 83 85 86 87 88 90 92 91 89 86 84 84 84 85 89 92 97 100 105 109 106 103 101 99 97 96 95 94 93 90 86 79 77 84 92 98 97 96 93 95 97 98 95 92 90 90 92 94 93 84 76 74 81 87 91 91 91 90 92 94 95 93 90 87 84 82 81 83 88 91 94 95 96 96 99 101 103 99 94 90 86 82 77 82 89 96 95 92 89 87 86 87 89 95 101 107 107 109 108 115 123 128 134 138 142 146 151 155 154 148 142 137 139 141 144 154 165 175 180 184 190 191 190 190 190 189 187 183 179 174 170 162 156 151 151 152 150 148 147 144 141 135 129 127 124 122 116 106 98 89 80 72 68 70 71 72 71 72 73 79 84 91 86 81 76 80 86 92 97 97 98 99 100 101 101 99 96 95 91 87 83 77 72 65 60 56 52 52 55 58 58 57 56 54 53 52 52 55 59 63 73 82 91 89 87 84 81 79 75 74 73 72 72 72 72 73 75 76 80 78 77 76 77 77 77 77 75 72 69 64 58 57 62 66 69 68 69 69 66 63 60 61 62 63 
+136 133 130 125 117 110 103 94 83 74 71 70 68 68 70 71 70 66 61 56 52 48 45 50 54 59 56 52 49 52 55 58 64 71 77 78 74 71 68 67 66 66 62 58 57 61 65 69 66 61 57 57 59 61 61 60 59 58 58 58 58 58 58 59 57 56 54 59 64 69 66 61 55 57 63 68 73 78 82 87 92 97 101 103 105 107 111 116 121 124 125 127 127 126 123 123 121 120 120 116 113 112 113 114 115 116 115 115 120 123 124 124 121 119 113 107 100 97 98 98 95 86 77 70 69 67 66 65 63 63 65 69 72 72 70 69 71 75 79 80 75 70 67 66 66 66 65 65 64 67 70 73 71 69 67 66 67 68 76 89 102 115 124 133 141 146 152 156 160 160 162 155 150 145 140 133 128 126 122 120 117 111 106 101 104 106 107 104 103 101 95 89 84 85 88 90 88 85 81 80 82 82 84 88 91 94 96 97 98 90 82 74 76 81 83 84 83 84 86 90 94 95 92 89 87 87 86 85 88 90 92 98 102 107 107 106 105 101 97 93 91 93 95 95 92 90 89 94 97 101 101 101 100 98 96 94 93 90 88 89 93 95 96 95 93 94 96 97 99 95 90 87 89 90 93 92 90 88 87 85 84 84 86 90 91 91 93 94 97 102 106 95 87 75 76 76 77 81 85 88 86 83 79 78 83 86 92 96 99 104 111 117 122 128 130 135 139 144 149 151 152 155 151 144 138 139 145 151 161 173 185 198 197 200 201 200 198 197 194 190 188 185 184 180 176 172 166 163 162 161 157 149 140 128 119 110 99 98 96 95 92 89 88 85 84 86 85 85 83 81 79 79 77 79 80 82 79 75 71 75 80 85 88 89 89 91 94 97 100 98 96 92 86 80 73 66 59 53 49 47 46 48 53 57 59 59 60 60 59 58 59 61 64 67 73 79 85 83 82 81 81 81 84 85 87 88 90 91 92 93 99 105 110 108 107 105 103 101 98 92 84 76 69 64 59 60 66 72 77 79 81 83 79 77 74 75 75 77 
+126 124 121 118 109 101 92 86 78 71 70 69 69 66 63 61 62 63 64 63 61 59 58 59 62 62 59 55 51 53 55 57 61 67 72 72 70 69 66 63 60 57 54 51 50 54 58 62 57 53 49 47 47 46 48 50 52 54 56 58 58 56 53 52 54 57 58 59 60 61 61 59 57 58 60 62 65 70 75 79 84 89 93 97 101 105 111 116 122 126 129 134 132 132 131 131 133 133 130 128 126 123 119 114 111 111 110 109 110 111 113 110 108 106 99 91 83 80 79 79 76 69 61 56 56 56 57 59 61 62 63 63 64 63 63 63 65 70 75 78 77 76 75 76 76 76 73 71 69 69 69 70 67 64 60 61 64 66 74 85 98 108 119 129 138 144 148 155 156 156 158 154 150 146 141 136 132 129 128 126 124 118 113 109 108 110 109 107 106 103 97 92 86 86 90 93 89 86 82 80 80 81 83 87 91 94 94 95 96 88 81 72 76 80 84 86 85 84 86 90 94 95 94 91 89 88 87 86 88 89 91 96 101 107 107 107 107 102 97 90 89 93 97 99 97 96 95 98 100 102 104 104 106 100 97 93 92 91 91 91 92 94 96 98 100 103 101 99 98 93 87 83 87 89 91 91 88 85 86 88 90 90 89 89 90 92 94 96 98 99 99 90 83 75 76 78 81 84 86 89 88 82 78 77 82 86 90 92 93 96 103 111 119 119 119 119 120 123 125 129 133 138 142 148 156 164 171 178 187 192 201 205 205 204 204 202 200 197 192 189 185 183 181 181 180 175 174 171 168 164 161 145 129 112 99 87 73 70 71 71 73 76 78 84 89 94 97 96 94 93 89 86 82 81 81 79 78 75 73 76 79 81 85 87 89 93 95 97 96 95 92 88 81 73 65 60 54 50 48 49 48 51 56 61 64 65 66 67 67 65 65 67 69 71 75 78 79 78 77 76 79 81 82 83 82 81 81 79 78 79 84 89 94 92 89 86 85 84 83 82 81 81 83 86 90 93 96 100 103 103 105 106 100 95 90 90 91 91 
+128 125 120 117 114 111 105 98 90 83 79 75 72 68 63 58 59 61 64 66 67 67 68 67 67 66 62 59 55 55 54 53 57 60 64 64 61 59 58 57 55 54 53 52 51 51 50 50 51 50 50 47 45 43 45 48 52 54 55 57 57 54 52 50 53 56 59 58 57 55 57 59 61 60 57 56 58 61 65 69 73 76 81 86 91 96 102 109 114 116 118 119 119 119 119 117 117 115 112 111 108 105 101 98 94 93 90 87 89 89 89 89 90 88 84 78 71 68 68 68 66 61 56 52 51 49 49 53 57 60 59 57 56 57 58 59 62 67 72 76 79 80 83 84 83 83 80 77 73 71 68 67 62 58 53 55 59 64 70 81 89 100 111 123 133 140 146 152 153 155 155 154 154 153 149 144 141 138 136 133 129 125 120 115 111 106 101 100 100 100 100 99 98 98 99 100 97 91 85 83 82 82 82 86 90 93 88 84 81 78 76 74 79 85 90 92 91 91 91 93 93 92 91 88 87 87 88 89 91 93 97 99 103 107 105 102 100 98 97 95 95 97 97 97 95 93 90 92 94 96 98 102 106 102 98 94 94 97 99 99 94 90 88 91 95 96 94 91 88 85 81 77 82 87 92 90 87 83 85 91 96 97 94 90 90 94 100 104 99 93 89 85 82 78 80 83 86 88 90 92 90 85 79 78 81 86 88 87 87 87 96 106 116 112 108 102 103 104 104 108 117 124 135 150 165 178 186 192 198 200 204 205 206 204 200 196 194 189 186 181 177 174 173 174 172 171 168 164 165 161 158 147 135 122 107 93 77 72 70 68 70 76 80 86 92 96 100 101 102 103 99 94 89 86 82 79 79 79 79 79 80 81 82 87 91 94 94 95 94 92 88 86 78 70 62 58 55 52 52 53 55 58 63 69 73 74 75 77 78 79 82 83 85 86 82 76 69 69 71 74 73 71 67 63 58 53 48 48 47 47 54 61 68 68 65 65 67 68 70 74 79 84 90 96 103 106 107 108 109 109 110 111 107 103 100 101 101 102 
+130 124 120 117 119 121 121 115 108 101 92 85 78 74 70 66 63 60 58 59 60 61 62 62 61 61 61 60 59 58 56 55 55 56 57 56 54 53 52 51 51 51 52 52 52 48 44 40 44 48 51 49 46 44 46 50 54 55 55 55 55 55 55 55 54 54 54 55 55 55 59 63 67 67 65 64 65 68 70 73 74 76 79 81 84 87 90 94 97 101 103 107 106 105 104 102 100 97 95 92 90 87 84 81 77 74 70 65 65 65 64 67 70 72 69 65 61 59 60 60 60 59 59 56 51 47 43 48 53 57 55 53 51 53 57 59 64 67 71 74 77 80 81 80 79 77 75 73 71 66 63 59 57 56 55 58 63 69 76 86 95 104 113 123 131 138 145 151 155 155 158 155 155 154 151 148 147 140 136 131 128 122 119 115 109 104 97 97 96 96 98 100 101 102 102 102 98 93 88 86 85 85 85 88 90 90 84 79 75 76 77 77 82 88 95 96 95 95 94 92 92 90 88 86 86 87 90 94 96 99 102 103 106 108 103 99 95 94 96 97 98 97 97 96 94 92 91 90 90 92 96 100 104 100 97 94 96 100 103 101 94 88 85 88 92 94 90 87 83 82 81 80 85 90 94 93 87 83 86 91 99 100 96 91 92 95 99 102 99 95 93 89 86 82 84 87 89 91 92 93 92 89 86 86 87 90 92 91 90 90 97 102 109 104 98 93 92 93 94 101 109 119 129 139 151 160 172 181 191 192 195 199 196 194 188 187 183 179 174 168 162 161 162 163 164 161 157 157 156 155 153 147 139 133 116 99 83 76 73 69 73 79 85 89 94 98 101 103 105 106 100 96 90 88 86 84 84 83 82 82 82 83 84 87 88 90 88 88 88 88 88 89 84 80 75 70 65 61 60 62 64 68 73 79 83 85 85 88 91 94 98 100 100 100 88 75 63 62 67 71 70 65 62 58 54 51 49 51 52 54 61 68 74 75 76 77 78 78 78 79 82 84 86 88 92 93 97 100 103 105 106 110 110 110 109 110 111 112 
+136 133 130 128 126 126 125 120 114 109 99 90 82 77 73 68 66 62 58 57 58 59 59 58 57 56 58 60 62 60 60 59 56 52 50 49 49 50 49 50 50 51 52 53 53 50 47 45 48 51 54 53 51 50 51 53 56 56 56 56 56 56 56 56 56 54 53 54 55 56 62 67 73 73 72 72 74 75 78 80 80 81 80 80 79 78 75 75 74 81 88 95 92 91 87 86 83 80 78 75 73 70 68 66 65 67 68 69 65 62 58 59 62 64 63 62 61 61 61 61 61 61 61 59 53 47 43 46 50 53 51 50 47 50 54 58 62 66 68 72 74 78 78 76 73 71 70 68 67 62 57 51 52 55 56 62 68 75 82 93 103 110 117 123 129 137 144 153 156 159 160 157 154 151 149 148 147 141 130 120 115 113 111 108 104 102 98 95 92 87 91 94 97 97 95 94 92 92 91 91 91 92 92 90 88 87 87 88 87 85 84 82 86 91 95 96 95 95 94 93 92 90 87 84 84 91 100 105 106 108 108 109 109 109 105 98 93 92 93 95 96 97 97 98 98 99 98 96 93 91 92 93 94 95 94 94 95 97 99 98 93 89 88 90 92 94 90 87 84 86 88 89 94 96 99 96 90 86 88 92 96 97 96 94 93 94 94 95 98 99 101 97 92 86 87 90 92 93 93 93 94 94 94 96 95 95 94 95 94 94 98 100 103 96 89 83 82 84 85 93 101 111 118 125 132 140 153 164 176 181 183 187 186 180 180 175 172 170 163 154 144 141 144 147 152 155 158 163 164 164 166 163 158 155 145 132 119 112 107 101 99 100 100 100 101 102 101 101 99 98 95 91 89 89 91 93 91 89 85 85 86 87 87 86 86 84 82 82 81 84 87 89 87 85 82 79 76 73 74 76 79 82 87 90 94 92 92 90 87 85 81 81 80 79 75 71 67 68 70 72 72 71 69 70 70 71 72 73 76 77 81 82 85 87 89 89 89 87 85 82 82 82 82 83 84 83 88 90 92 95 97 101 102 102 102 102 101 101 
+142 140 139 136 134 131 127 123 119 113 103 94 84 78 73 66 66 67 67 67 68 69 68 66 63 62 63 65 65 61 57 54 53 51 50 49 48 48 49 51 52 53 54 56 56 53 51 50 53 54 56 57 57 57 57 57 56 57 58 59 58 56 53 53 57 60 61 60 59 59 63 66 70 69 68 66 67 67 68 70 71 73 75 76 78 80 78 76 75 81 87 94 89 86 82 79 77 75 71 68 62 60 58 55 56 61 68 72 65 59 53 55 57 59 61 63 65 66 66 67 66 66 65 62 58 53 49 49 49 49 48 47 47 48 50 53 56 61 65 66 66 67 66 63 62 60 57 55 53 52 51 50 53 55 58 62 66 71 79 88 97 104 107 110 114 120 127 131 134 135 137 141 141 142 140 138 134 129 118 110 105 105 105 104 103 102 100 95 90 85 87 89 91 91 89 90 90 90 91 92 93 92 91 88 85 83 89 94 97 94 91 87 90 93 96 95 94 93 91 91 91 90 88 85 87 95 104 111 110 109 107 108 108 108 104 98 93 92 94 96 97 99 100 102 103 103 103 99 95 90 91 91 91 92 93 93 95 96 97 97 95 91 90 91 93 93 89 87 85 88 92 95 99 102 106 101 94 86 88 93 98 100 96 94 92 92 92 92 95 99 101 99 98 96 96 94 92 90 88 86 86 90 93 94 92 90 89 88 90 89 90 91 92 87 81 77 77 79 82 86 90 93 99 106 111 119 130 141 153 157 162 167 168 169 171 170 166 164 155 141 123 119 123 130 138 149 162 173 176 177 180 179 178 180 171 161 153 142 136 128 121 118 112 108 106 104 102 99 96 95 93 91 89 90 91 92 89 85 83 81 81 80 79 78 78 77 78 77 77 78 80 81 81 81 82 85 87 90 93 96 98 100 102 103 103 100 96 91 82 72 61 61 60 59 63 67 72 73 72 71 70 70 70 70 69 68 66 67 69 70 72 75 79 79 78 77 76 75 74 73 75 77 78 78 79 79 80 79 78 83 86 90 92 93 93 93 91 89 
+145 143 142 140 135 132 126 120 115 109 99 91 81 78 74 69 70 72 74 74 76 77 75 72 69 68 68 68 66 60 54 47 50 54 57 53 51 47 50 56 61 63 62 61 60 58 54 51 51 50 50 51 51 52 52 53 53 55 56 58 58 56 55 55 59 62 64 63 62 60 62 65 67 66 64 62 60 59 58 58 61 63 68 76 82 87 90 93 95 98 102 106 102 98 93 94 95 96 92 87 83 79 77 76 74 72 72 71 71 71 69 70 70 70 68 66 64 64 65 66 66 65 64 62 59 55 52 51 50 49 48 48 48 48 49 50 52 56 59 60 58 57 55 54 52 51 47 44 41 44 47 50 54 57 60 63 65 67 72 81 89 94 94 95 96 99 102 105 104 107 107 114 122 129 126 122 117 111 105 99 97 99 101 102 102 102 102 97 93 87 86 84 82 83 85 87 88 89 90 88 85 83 81 81 81 83 90 97 102 100 98 96 96 96 97 93 88 83 82 83 85 85 87 90 93 98 102 105 100 96 92 96 99 104 101 97 92 93 96 99 103 105 106 108 106 104 102 98 95 93 94 95 96 95 94 93 94 97 99 100 96 94 92 91 90 89 87 86 86 89 93 96 104 109 116 108 97 85 87 94 103 105 100 95 91 90 89 89 92 95 98 103 105 110 104 98 92 86 81 76 76 83 89 92 88 85 81 82 84 85 84 83 81 79 76 75 74 77 79 81 82 83 86 91 94 100 110 120 128 134 139 145 150 155 161 163 163 163 155 143 130 127 131 137 146 159 172 184 187 190 191 191 185 181 173 162 152 144 138 132 128 122 117 113 109 105 101 101 100 98 96 94 93 91 88 85 83 82 80 78 76 72 71 71 71 72 71 72 73 74 74 74 78 81 84 89 95 99 103 103 105 105 102 100 97 93 88 84 73 63 52 53 55 56 61 69 75 75 73 69 66 62 60 56 53 48 44 47 49 52 58 63 68 69 66 64 63 63 64 66 68 70 72 71 69 68 66 65 63 65 66 67 68 69 71 71 70 71 
+145 144 142 139 136 131 124 117 108 102 93 84 77 78 78 78 77 76 75 75 75 75 75 73 72 70 70 70 69 64 59 53 55 58 60 56 52 47 52 58 65 67 66 64 63 59 56 52 49 46 44 44 44 44 46 47 48 50 53 54 56 58 60 61 60 60 60 60 59 59 63 66 70 70 69 68 67 64 64 64 66 68 73 79 86 93 98 101 106 107 109 110 108 104 101 103 106 109 107 102 96 94 93 92 89 81 74 69 76 82 88 87 86 85 78 69 61 60 62 63 63 61 61 59 56 54 52 52 52 52 53 53 54 53 52 50 50 50 50 51 52 53 53 52 51 52 52 54 54 55 56 57 63 68 74 76 75 77 82 89 98 104 103 106 107 109 110 111 111 111 111 115 120 123 118 112 105 101 98 96 96 96 99 101 100 101 100 95 89 84 82 80 77 80 84 88 88 88 87 84 82 79 78 80 82 86 93 98 103 101 98 97 95 95 95 90 84 79 79 80 82 86 90 94 98 97 98 97 93 87 83 88 94 98 97 93 91 93 97 101 104 107 110 109 106 103 100 97 94 93 93 93 94 93 93 91 92 95 98 98 96 95 94 92 88 87 87 88 89 91 91 92 98 104 109 105 97 92 92 96 102 102 98 95 91 89 87 85 89 91 93 96 99 102 99 96 93 89 83 80 80 86 92 94 86 81 75 78 81 83 82 81 78 81 82 85 86 86 86 87 88 88 88 88 88 90 97 102 108 111 114 118 128 139 150 154 157 161 159 153 149 147 150 153 157 170 186 197 200 203 206 199 191 183 171 161 151 144 140 136 132 128 124 120 113 107 100 98 98 95 93 90 87 84 82 80 78 77 77 74 70 65 62 61 62 63 65 68 71 74 78 81 85 90 92 95 97 98 98 98 99 98 94 88 84 81 78 75 65 55 45 46 50 53 60 67 75 75 70 65 62 58 56 52 47 43 39 42 44 47 52 57 62 62 61 59 60 62 66 66 66 64 62 59 54 51 50 49 48 45 43 41 41 44 46 48 51 52 
+136 135 132 130 127 124 120 112 106 99 92 86 78 78 78 79 77 74 73 73 73 73 73 72 72 71 72 72 71 69 66 64 63 61 61 57 53 49 51 56 61 60 58 57 55 52 50 49 49 50 50 49 48 47 48 49 51 51 51 52 56 59 64 64 62 59 57 57 58 58 62 67 71 71 73 73 72 73 71 72 75 77 81 86 90 95 101 106 110 109 108 107 107 105 105 105 105 104 102 100 97 96 92 90 89 84 79 76 78 81 83 84 85 86 80 72 64 63 65 66 66 67 67 65 62 59 58 57 57 56 57 58 59 57 56 54 53 51 49 50 51 52 53 53 53 55 59 63 66 66 65 64 72 80 87 88 89 87 93 101 109 115 117 120 123 124 124 127 127 127 127 125 123 122 113 105 97 95 96 96 97 99 101 101 99 99 96 89 81 73 74 75 77 81 86 92 91 87 83 84 84 85 88 90 92 94 96 97 97 94 92 89 89 89 89 87 84 83 84 87 88 91 95 98 99 96 93 90 89 89 87 89 90 92 92 91 90 92 94 96 98 101 103 103 100 100 98 96 94 92 88 84 80 83 87 89 91 93 95 95 96 98 95 92 89 86 89 93 97 91 85 81 84 89 92 95 98 102 102 99 97 95 95 95 94 89 85 82 84 86 88 88 89 91 90 91 93 90 87 84 85 90 95 95 86 76 69 73 78 82 80 78 75 80 87 92 93 91 89 89 90 90 89 88 87 85 88 91 93 98 102 106 120 132 146 151 157 161 164 163 162 164 166 167 169 177 185 190 191 196 200 193 184 179 166 155 143 135 135 137 135 134 133 130 121 112 102 96 92 86 83 79 75 74 73 72 73 73 74 71 64 58 53 54 53 54 58 62 66 72 77 82 86 88 91 92 92 91 91 91 90 87 84 81 78 74 71 68 63 60 56 57 57 58 59 59 59 59 58 58 59 57 57 55 51 48 44 44 45 46 49 53 56 57 55 54 57 62 66 68 65 63 61 55 51 47 48 50 51 52 52 52 54 57 60 61 60 59 
+126 123 121 119 117 116 112 108 103 98 93 90 84 80 76 74 71 68 64 65 65 65 65 65 64 65 66 68 67 64 62 59 58 57 55 54 52 51 53 56 58 57 54 51 48 47 46 46 50 53 57 55 54 53 53 54 55 54 52 51 55 60 66 67 64 62 60 58 57 57 61 64 68 70 71 72 71 71 70 72 75 78 80 84 86 91 96 101 104 101 99 97 98 99 100 99 98 98 96 95 95 94 91 88 85 85 83 83 81 79 78 81 84 86 81 75 68 68 70 72 73 75 76 75 72 68 65 64 62 61 62 63 63 63 61 60 62 65 67 67 65 64 64 68 70 72 73 76 77 78 78 78 82 88 93 95 96 97 99 103 107 109 110 111 114 117 121 124 124 125 125 123 119 118 112 105 99 97 98 98 98 97 97 97 97 98 96 87 79 70 72 75 77 83 88 94 93 88 84 84 85 87 92 94 97 99 96 94 91 89 86 83 85 86 88 88 87 88 89 90 91 94 96 100 100 94 89 85 88 91 95 93 91 90 91 91 93 93 93 94 94 96 98 99 98 98 98 95 93 90 85 80 73 78 84 89 91 92 94 94 95 97 96 93 90 88 91 95 97 91 84 78 79 80 81 87 94 100 102 99 97 95 94 92 91 87 85 82 84 87 90 92 93 95 96 95 95 93 91 88 88 89 91 90 83 77 72 77 80 85 81 77 73 76 79 84 84 82 79 80 82 86 89 89 90 91 90 89 87 95 104 110 120 132 142 150 157 162 167 171 173 178 179 180 181 181 180 179 185 188 192 187 181 175 161 148 133 128 131 133 133 135 138 138 127 117 109 102 96 89 85 82 78 77 77 77 75 75 73 69 61 53 47 47 47 48 52 55 58 60 62 64 66 70 74 76 77 79 79 78 77 75 75 75 75 70 65 61 63 65 68 67 65 62 59 53 48 48 52 56 59 58 57 56 53 51 49 49 49 48 49 50 51 53 55 57 60 63 66 68 69 71 71 67 62 58 60 63 66 69 69 72 73 74 74 73 69 66 
+114 111 109 108 107 105 102 96 91 86 84 82 78 74 71 68 65 63 61 60 60 59 58 58 57 59 61 63 62 59 54 51 49 47 46 49 51 53 56 59 61 59 55 51 50 50 50 51 51 52 53 53 52 51 53 55 56 54 52 50 54 58 64 65 64 63 61 60 58 57 59 62 65 68 69 71 71 69 68 70 74 78 79 78 79 82 87 91 93 87 82 78 80 83 85 85 85 85 85 86 86 83 79 76 75 74 75 75 74 72 71 74 76 79 76 72 69 67 66 65 68 71 75 76 73 71 68 66 63 62 63 63 64 64 65 64 68 73 77 78 75 73 74 78 81 84 84 86 87 89 89 91 93 96 99 102 104 106 106 104 103 101 100 100 101 106 111 116 116 119 119 118 116 114 112 108 105 103 101 101 98 94 91 91 95 99 99 90 80 72 75 79 81 86 90 93 93 92 90 88 87 86 87 92 98 100 94 89 84 84 85 84 87 89 92 94 96 98 96 92 89 90 96 101 104 97 90 86 93 101 108 104 100 95 97 100 103 101 98 95 94 96 99 101 100 98 97 95 94 92 87 82 77 81 87 92 94 94 94 94 96 96 97 96 93 92 93 94 93 90 85 81 79 77 75 80 86 91 95 97 100 99 93 88 84 84 84 84 88 92 94 99 101 105 103 102 99 97 94 92 90 88 86 83 81 78 76 80 84 87 82 77 71 71 73 75 75 74 73 74 78 83 86 88 89 90 90 88 87 95 103 110 119 129 139 146 152 158 163 168 173 176 179 179 181 178 177 175 178 183 186 181 177 171 157 139 122 116 117 119 124 130 135 138 133 127 122 115 108 102 98 94 90 88 87 85 81 77 74 67 58 48 41 41 42 42 46 50 52 52 52 52 55 60 63 66 69 71 73 72 71 71 72 71 73 70 68 65 66 65 64 64 66 67 63 56 50 48 55 62 66 62 57 53 54 54 55 54 53 51 50 49 48 50 56 61 64 67 68 71 74 76 78 75 72 70 73 77 81 84 86 88 90 90 92 90 87 83 
+104 101 98 96 95 93 89 83 77 73 71 69 67 64 61 59 61 61 62 60 59 57 55 51 49 51 57 63 64 60 56 51 48 44 42 47 52 58 59 60 61 59 56 53 51 52 53 53 53 52 50 51 50 50 51 53 54 54 53 52 52 55 56 58 60 62 62 62 60 60 60 61 62 64 66 68 70 72 74 74 74 75 75 76 78 80 84 88 90 84 80 76 78 78 79 79 80 79 78 78 77 74 72 68 67 68 69 70 68 67 66 67 69 71 69 69 68 64 59 55 58 64 69 71 70 69 67 63 60 58 59 60 62 62 63 64 67 70 73 74 75 76 75 75 77 78 80 84 84 87 89 92 93 95 97 96 93 93 93 91 91 89 89 90 92 97 101 107 110 112 113 114 112 113 110 108 107 106 105 104 101 96 92 90 92 95 95 89 83 77 79 82 85 87 90 93 93 94 92 90 88 86 86 92 98 99 93 85 80 81 83 84 89 92 96 99 101 102 99 94 88 88 95 102 105 98 91 86 97 106 117 110 105 99 101 104 107 104 100 95 94 97 99 100 101 101 100 97 95 92 88 84 81 84 91 96 98 96 93 93 93 92 93 93 93 93 91 89 89 87 85 84 83 81 81 84 86 89 93 95 98 97 91 85 82 83 85 89 90 94 96 100 103 105 101 98 95 91 88 86 86 87 89 89 86 85 83 82 82 81 77 75 71 71 69 68 69 69 71 74 77 80 83 82 82 82 85 89 93 97 101 105 114 125 136 142 146 150 154 160 166 171 171 174 177 175 174 174 176 179 182 178 171 167 151 133 116 110 114 116 122 130 138 143 140 136 132 128 125 119 114 109 107 103 100 97 93 88 85 80 72 65 60 60 60 60 59 58 56 56 56 57 59 62 63 65 67 68 70 71 71 73 71 70 69 70 70 72 69 65 61 63 66 68 65 57 50 49 56 63 67 65 62 61 62 64 65 65 66 65 66 67 67 68 70 70 71 73 77 78 79 78 78 78 80 81 86 90 96 99 101 103 105 106 108 106 101 97 
+97 98 96 94 92 90 83 76 68 64 64 64 64 63 60 58 62 64 68 63 59 55 51 47 43 46 55 63 65 62 59 54 50 45 42 48 55 62 61 61 60 60 59 57 56 54 52 52 53 54 53 52 50 49 50 52 53 54 54 55 53 53 52 53 55 58 59 62 62 63 61 61 60 62 63 64 70 76 81 79 74 71 71 74 76 79 84 87 90 90 89 87 86 86 85 84 85 84 81 77 73 72 73 72 73 76 77 79 80 80 82 81 80 81 79 78 76 71 65 58 58 63 67 68 67 65 63 58 54 52 53 54 56 57 58 59 62 65 69 71 72 73 74 72 72 73 76 80 84 87 89 92 93 93 93 89 84 78 77 77 76 77 78 80 82 86 92 98 102 106 110 109 110 109 109 107 106 106 108 109 106 100 95 92 91 89 88 87 85 84 84 86 88 89 90 92 91 92 93 91 88 87 87 92 95 97 93 86 82 81 81 81 87 94 101 101 100 99 97 94 89 90 95 100 103 98 91 88 97 108 117 113 108 105 103 104 103 100 98 96 94 95 95 95 101 105 109 101 94 88 87 86 86 91 97 102 100 98 93 90 87 85 85 86 87 89 87 86 84 84 84 86 89 92 96 95 94 92 91 92 94 93 87 81 78 83 87 91 94 96 99 100 101 103 99 92 87 84 81 79 79 85 91 93 93 91 89 85 82 77 75 75 73 71 68 65 65 66 69 70 73 77 78 77 76 75 80 86 90 92 95 97 103 110 118 122 126 129 134 137 140 144 144 145 145 145 146 147 149 153 156 153 149 145 140 136 130 131 137 141 146 150 155 156 153 146 143 143 140 139 135 129 124 118 114 108 104 102 98 94 89 84 80 79 77 76 71 67 61 61 60 60 60 60 58 59 62 64 66 67 67 68 66 65 63 64 64 65 64 64 63 62 60 56 53 52 50 50 55 58 62 66 70 76 77 77 77 78 80 82 85 87 89 88 83 77 74 76 77 78 77 76 76 80 84 88 92 96 99 100 101 101 104 106 107 109 107 106 
+94 94 95 93 88 85 78 69 60 57 60 63 64 64 64 64 69 74 78 69 60 52 50 49 48 49 53 57 59 59 58 56 51 46 43 48 53 59 59 59 59 59 60 60 58 55 52 51 54 56 57 53 51 49 49 50 51 54 57 59 57 53 50 49 48 48 51 57 62 64 63 61 59 61 63 64 68 72 76 74 70 67 69 74 78 82 87 90 92 91 91 91 90 89 88 88 88 89 83 78 72 71 73 76 78 81 84 87 90 93 95 95 94 93 91 88 86 80 73 64 63 64 66 65 63 61 58 52 48 44 44 45 45 47 47 48 53 58 64 64 63 62 63 66 68 71 74 79 82 82 82 82 83 83 84 81 79 76 76 77 77 79 81 84 88 93 97 102 106 110 114 115 116 116 114 110 107 106 107 107 106 102 100 98 96 94 92 90 90 89 88 86 85 86 86 87 91 93 93 94 92 91 90 90 91 90 86 82 77 79 80 81 86 92 97 97 95 95 93 92 90 90 94 97 98 94 90 88 96 106 113 111 108 105 105 105 105 103 100 96 94 92 90 92 99 106 112 104 96 89 89 90 89 94 99 104 102 97 93 89 86 83 81 85 88 88 87 86 86 88 91 93 95 95 98 98 98 98 98 96 95 91 85 77 75 83 91 99 100 101 101 100 101 100 96 92 86 84 85 86 87 89 91 92 94 94 96 89 83 75 76 78 79 80 78 77 74 68 62 60 63 67 69 70 71 72 74 75 76 80 83 87 89 90 91 93 97 101 105 107 108 111 111 109 109 111 115 119 122 126 129 129 127 125 127 133 138 145 150 155 160 161 161 164 159 156 153 152 151 150 145 138 133 125 118 109 104 102 100 99 97 96 94 90 86 81 78 74 70 66 62 57 53 50 47 47 52 58 61 61 61 60 59 58 57 57 57 57 59 62 65 61 53 46 44 46 48 50 51 52 53 59 65 71 68 67 66 67 67 67 69 70 71 68 61 53 49 50 51 52 58 65 71 78 85 91 95 96 98 99 98 97 101 104 107 109 110 112 
+90 93 96 95 95 95 91 86 82 77 75 74 73 72 71 71 75 77 81 70 59 48 49 50 52 52 52 51 52 55 58 57 52 47 43 46 48 51 53 56 58 58 57 56 55 53 52 52 55 58 60 58 57 56 56 55 55 55 56 57 55 54 52 49 47 45 47 53 59 63 62 60 58 60 62 64 66 68 71 68 65 63 67 73 80 85 89 93 95 93 90 89 88 88 89 90 92 93 90 84 79 78 78 78 79 81 84 85 85 85 85 86 87 86 85 82 80 76 72 68 66 65 64 64 65 66 64 58 53 49 48 47 47 45 43 42 47 53 59 59 57 55 56 60 65 68 72 76 79 77 76 74 74 75 75 75 74 74 75 77 78 82 86 89 94 99 105 110 113 118 121 122 124 126 120 115 109 106 103 102 103 104 105 105 104 102 100 98 95 92 89 84 79 80 82 83 87 93 99 101 99 97 94 88 82 78 74 72 68 74 80 85 85 86 86 87 87 87 88 88 91 91 91 91 90 89 88 88 94 100 106 105 104 103 107 111 116 113 104 96 92 88 86 87 96 105 110 106 101 97 96 93 91 95 99 103 101 97 93 90 88 87 86 88 90 92 92 92 91 96 101 105 101 95 89 93 100 107 107 103 98 91 82 75 71 83 95 107 106 105 104 103 100 98 94 89 85 85 90 94 95 93 91 90 94 98 101 92 83 74 77 80 84 85 85 85 80 71 62 58 60 62 64 66 68 70 70 71 72 74 77 79 80 81 83 85 88 91 95 98 103 105 106 107 109 109 111 110 112 113 114 112 107 103 107 117 127 135 141 145 150 155 161 164 163 163 164 159 155 154 148 143 137 128 117 106 100 100 100 101 103 105 108 101 94 88 84 80 77 71 65 59 54 49 45 44 49 53 55 55 54 54 54 53 53 52 51 50 50 50 50 48 44 42 41 43 45 45 44 44 42 44 46 47 47 46 46 46 46 45 47 49 51 49 42 35 31 34 38 42 52 62 71 77 85 90 90 88 85 82 81 80 83 87 92 98 98 99 
+93 96 99 100 100 101 104 105 106 102 94 87 82 81 79 77 77 76 74 64 55 45 46 48 49 49 49 49 51 55 59 59 53 47 43 46 48 50 52 55 57 56 55 54 53 52 51 53 56 60 63 63 64 64 63 61 60 56 53 49 51 54 56 55 51 47 48 51 54 56 58 59 59 59 59 59 62 65 68 66 64 63 65 69 73 78 85 90 94 89 88 86 86 88 90 90 91 92 90 88 85 84 82 80 80 81 83 82 79 76 75 77 79 80 77 74 70 71 71 70 68 65 62 64 71 78 79 73 68 63 62 60 58 52 46 40 45 51 57 58 57 57 57 58 59 61 65 69 71 70 69 69 72 76 79 81 83 86 89 92 96 101 104 108 112 116 119 122 124 124 126 127 126 128 122 116 110 108 104 102 100 100 102 102 101 101 100 96 92 89 87 86 84 83 83 82 87 94 102 103 102 102 97 88 80 74 73 73 72 78 83 90 88 85 84 83 84 85 88 91 96 96 93 91 89 90 89 88 95 99 103 103 103 101 108 115 121 117 108 100 94 90 85 86 94 101 108 104 102 99 96 94 91 95 98 101 100 96 93 92 91 91 92 90 88 88 90 92 95 100 104 109 104 98 92 93 98 103 103 98 94 90 85 81 79 88 97 106 103 103 101 100 99 99 96 93 89 88 90 93 93 91 90 88 87 87 86 81 75 71 72 76 78 80 80 80 79 78 76 74 71 69 66 67 67 67 70 73 76 75 74 71 76 81 87 90 90 89 91 97 101 105 109 112 114 112 108 105 103 101 99 94 88 83 88 100 111 120 125 130 134 140 145 149 149 149 150 145 140 137 133 126 122 111 100 87 80 80 80 83 88 96 103 96 91 85 82 79 77 75 74 73 69 62 55 51 51 50 48 47 47 46 48 49 50 48 45 43 40 38 37 37 38 39 39 40 41 41 40 40 39 38 37 36 37 39 41 42 41 41 42 46 49 50 49 49 50 56 62 69 73 76 79 82 83 84 80 73 65 61 61 60 63 69 78 84 86 89 
+107 108 110 110 109 110 108 109 109 102 93 85 79 77 75 74 71 68 65 59 52 45 45 46 47 47 48 47 50 56 61 60 53 46 43 47 51 55 55 55 56 55 55 54 53 50 49 50 53 57 59 58 58 58 56 54 53 53 52 50 52 54 56 55 53 51 49 50 50 52 55 59 60 58 56 54 58 61 64 65 64 64 64 64 63 68 78 86 89 86 83 82 86 90 93 89 87 86 86 88 89 87 84 82 80 78 77 76 74 71 69 72 74 75 73 72 70 70 70 71 70 67 65 67 73 80 81 77 73 69 66 63 60 55 49 44 46 50 54 56 57 59 59 56 55 56 59 63 65 65 64 64 71 78 84 89 93 96 102 109 113 119 125 127 131 133 134 136 133 133 132 130 128 127 124 117 111 109 106 102 98 96 92 91 92 94 94 90 84 81 85 90 94 92 90 86 91 94 99 101 102 101 98 90 81 78 82 85 88 90 94 97 94 92 89 89 90 91 95 99 103 104 102 99 97 95 94 95 98 104 107 106 103 102 106 112 119 117 111 106 100 96 92 89 93 96 99 98 97 96 94 92 92 94 97 100 98 95 92 92 95 97 96 90 86 81 87 91 95 99 103 108 105 102 97 96 94 93 90 89 86 86 88 90 91 95 99 101 100 98 97 98 98 99 97 96 93 91 92 91 89 90 88 85 82 79 74 73 71 69 70 72 73 75 76 78 80 81 83 82 78 74 71 70 68 67 71 74 78 77 75 73 74 77 80 81 81 81 82 82 83 83 89 94 99 96 93 91 89 87 84 81 79 76 77 81 86 90 95 99 104 109 111 115 114 112 113 112 110 109 105 101 96 87 77 64 57 58 59 62 72 85 96 91 87 82 81 80 78 79 80 81 77 69 61 56 53 50 47 45 44 42 45 48 51 48 45 41 40 41 43 43 41 38 38 38 38 39 41 43 45 42 38 33 35 39 43 43 41 38 40 43 47 50 55 59 63 69 75 81 78 77 75 74 73 72 66 58 51 49 52 56 61 66 71 76 79 82 
+109 112 114 115 114 115 114 112 109 99 89 78 71 67 63 60 58 57 55 55 55 53 50 48 46 47 49 51 53 55 57 57 56 53 51 52 53 54 54 53 53 53 53 53 52 50 47 48 51 54 55 54 53 51 48 46 44 49 52 56 54 53 52 52 53 53 52 52 51 52 56 60 61 57 53 51 57 62 67 67 66 66 66 66 66 69 76 83 86 85 84 84 86 89 92 88 84 81 82 83 86 85 82 80 77 75 72 69 67 65 63 66 68 70 70 70 70 70 70 71 71 70 69 71 74 77 78 75 71 67 63 58 53 54 53 53 52 51 50 54 57 61 61 59 57 57 59 62 64 65 65 66 76 86 97 100 102 105 107 111 115 117 118 119 121 121 123 125 124 123 122 121 120 118 112 108 104 101 99 97 95 93 89 88 89 90 90 87 85 83 86 89 91 90 89 87 89 92 95 96 97 98 95 89 83 81 87 93 99 99 101 101 97 93 89 90 93 96 100 102 105 106 103 103 100 101 99 99 101 104 106 105 102 101 104 110 112 113 109 107 104 100 98 94 96 96 97 98 99 99 97 94 92 93 96 99 99 97 94 96 99 103 103 97 91 86 88 89 89 96 102 108 105 100 94 93 93 93 94 94 94 93 94 93 93 94 95 97 97 96 95 98 101 104 102 98 96 92 89 85 82 80 77 77 79 83 85 82 79 75 74 73 71 74 78 84 84 79 73 72 74 78 80 76 72 69 72 75 78 79 79 78 75 71 67 65 68 70 70 65 60 57 64 73 80 79 78 76 75 73 71 71 70 70 69 68 67 68 72 76 78 80 81 83 84 85 85 84 83 82 80 78 76 72 66 59 57 59 62 66 71 78 83 82 82 81 80 79 80 80 79 79 75 68 61 56 54 52 50 46 42 38 43 48 53 50 44 39 40 45 49 48 43 39 36 36 37 38 41 45 48 44 39 34 37 39 42 42 40 38 38 40 42 43 45 45 46 51 55 59 59 58 58 57 55 53 48 43 37 37 45 53 60 63 66 69 73 78 
+96 97 99 97 96 96 94 93 92 87 81 74 69 63 58 55 53 52 52 54 56 59 54 50 45 48 52 55 55 54 53 54 58 61 61 57 53 51 49 49 49 49 49 49 50 49 48 50 53 56 57 56 56 54 53 51 50 51 52 53 52 51 49 50 52 53 54 53 53 55 57 61 61 56 52 49 56 63 71 69 67 67 68 69 70 73 77 80 84 86 87 89 88 86 86 85 82 81 78 75 73 72 71 70 68 66 64 62 60 57 56 58 61 63 67 70 72 75 77 78 76 74 71 71 74 76 75 71 66 62 58 55 53 53 53 54 53 51 50 53 57 62 63 62 60 61 62 64 65 66 66 70 82 94 106 109 110 112 113 114 115 114 111 109 108 109 110 109 110 112 112 110 107 105 101 96 94 92 92 90 89 89 89 89 88 87 87 89 90 90 87 85 82 83 84 84 84 87 87 89 90 91 90 87 84 84 91 98 103 102 102 100 95 88 83 86 94 100 102 100 98 99 99 101 101 102 103 103 101 100 98 98 99 100 101 103 103 104 103 103 102 102 103 102 102 100 101 104 108 110 105 97 90 92 96 99 101 101 101 103 106 109 109 107 102 99 94 88 82 91 100 109 104 96 88 88 93 99 102 103 105 105 101 96 92 91 91 91 93 94 95 99 103 108 108 102 98 92 86 80 75 72 69 69 77 86 94 90 87 83 78 76 71 75 82 90 88 79 71 66 72 79 84 79 74 69 72 75 78 79 79 81 78 72 66 64 67 68 70 69 67 68 70 72 73 73 73 72 76 79 84 83 79 73 70 71 71 71 69 67 64 61 60 57 60 63 65 62 60 57 56 58 60 59 59 59 60 63 68 71 71 71 71 73 76 79 79 79 80 79 78 78 75 68 62 57 56 53 51 47 42 38 40 42 44 42 40 39 39 41 43 43 40 37 36 37 38 39 42 45 48 45 41 39 39 39 40 39 39 37 37 37 37 38 37 36 35 40 43 47 47 49 50 49 48 48 46 43 40 40 47 52 58 64 71 77 83 88 
+83 85 85 83 81 77 76 74 73 73 74 74 69 62 55 52 53 53 54 56 58 60 56 52 48 49 51 54 52 51 49 50 52 55 55 52 49 47 47 47 48 48 49 50 49 49 49 51 54 58 58 58 57 58 58 59 58 54 50 47 47 48 48 48 50 51 53 56 59 60 60 60 59 57 55 54 58 61 66 64 64 64 67 71 75 77 77 77 80 83 87 88 83 81 78 80 80 80 76 70 65 64 64 64 62 61 58 57 55 52 52 54 55 57 63 70 77 80 83 87 82 77 71 71 73 76 73 66 60 55 55 55 55 53 50 49 50 51 52 55 58 62 64 65 66 67 68 69 70 70 70 73 85 96 108 110 112 114 117 117 119 118 115 112 111 111 112 113 115 116 118 113 108 103 98 93 87 86 86 87 89 92 95 93 90 86 85 87 90 90 89 87 86 86 87 87 87 85 84 85 86 88 87 86 86 87 93 97 102 102 103 102 95 89 83 88 93 98 98 94 91 92 94 98 101 103 105 106 102 97 93 95 97 100 98 97 96 96 97 99 100 102 105 105 103 101 99 103 108 113 106 98 91 93 97 101 103 103 105 107 110 112 113 109 106 102 97 91 86 94 104 112 109 101 95 94 98 102 106 107 107 107 102 98 95 95 94 94 93 93 92 96 101 106 105 102 99 94 87 80 75 76 79 81 86 90 95 91 87 83 80 80 78 82 88 95 94 85 77 73 74 77 78 75 73 70 71 73 75 77 79 82 81 76 72 70 71 71 73 77 82 85 80 75 70 69 69 68 77 87 96 93 85 76 71 73 74 73 67 62 57 53 49 44 47 51 53 52 50 48 50 52 56 58 60 61 61 61 61 62 61 60 61 64 69 73 75 76 78 79 80 81 78 71 64 58 56 54 52 47 42 38 36 34 32 33 35 37 38 39 39 39 38 37 37 38 40 41 44 46 49 47 45 43 42 41 41 41 41 41 42 45 47 49 47 45 43 46 48 50 50 50 50 50 50 51 50 49 48 48 50 52 55 65 75 84 91 96 
+76 76 76 79 79 80 73 68 62 66 69 73 71 66 61 59 59 59 60 60 61 61 58 54 50 51 51 52 50 48 45 44 44 45 45 44 42 43 45 47 49 52 53 55 53 50 47 49 52 56 55 52 49 48 50 51 51 50 48 46 47 48 49 50 50 51 53 56 59 60 59 58 58 59 59 60 61 61 61 61 60 60 66 73 80 79 75 74 75 79 83 83 77 72 69 73 77 80 76 70 66 66 66 67 66 63 61 61 61 62 65 69 74 78 80 82 84 88 91 94 89 83 76 76 78 80 76 67 58 52 54 56 57 53 51 48 48 50 51 53 57 60 63 65 68 70 71 72 73 72 72 74 85 95 108 109 113 114 117 120 121 121 118 114 114 116 116 118 121 124 125 118 111 104 96 88 81 80 82 85 90 96 101 101 93 87 82 84 87 88 92 94 97 96 95 94 91 88 85 83 85 86 87 89 90 92 93 94 97 99 101 104 99 96 92 91 91 90 89 85 82 84 89 95 100 103 105 108 103 96 91 94 98 101 97 93 89 89 92 95 98 100 103 103 99 95 92 96 100 106 102 99 97 97 101 103 105 107 109 110 113 114 116 110 104 99 99 99 99 105 111 116 114 110 105 105 105 106 105 106 107 106 102 99 99 98 98 97 95 92 89 93 98 103 103 102 99 94 87 80 76 82 87 91 93 94 96 91 88 84 83 83 84 86 93 97 97 89 83 78 78 76 76 74 72 71 73 73 75 76 76 76 74 73 73 71 71 71 71 75 79 82 78 75 70 74 78 82 86 90 94 91 84 79 76 74 75 72 69 65 61 56 52 46 47 48 49 49 49 48 51 55 59 61 61 62 62 58 54 51 51 51 52 57 63 68 70 72 73 74 75 76 74 68 61 57 55 54 52 48 45 41 39 37 36 37 39 41 43 43 45 45 43 42 41 42 44 45 47 49 51 50 48 47 45 44 43 43 44 45 47 52 56 58 55 52 50 50 51 52 52 52 52 52 52 53 53 54 55 56 59 63 65 74 82 89 94 99 
+71 70 71 74 78 80 70 61 51 58 65 72 73 72 71 70 69 69 68 67 65 63 60 58 54 51 48 45 47 48 49 47 45 43 42 41 41 42 45 48 50 52 54 55 53 49 46 48 51 53 51 46 41 39 40 42 43 45 46 47 49 50 51 52 53 54 53 52 51 53 55 56 59 62 65 66 65 63 62 63 64 64 69 73 78 79 79 78 79 82 85 85 78 73 69 74 79 82 77 72 68 68 69 71 69 67 65 66 69 71 76 84 92 98 96 93 92 95 99 101 96 89 82 81 83 85 80 69 59 53 55 57 58 57 55 53 50 46 43 46 49 53 56 58 60 63 65 67 67 65 62 62 72 82 91 92 93 94 100 106 112 111 112 109 108 105 104 103 103 103 104 102 100 97 93 88 83 82 82 82 86 92 97 97 90 85 82 86 88 92 94 97 99 98 95 94 92 91 89 88 87 84 85 89 93 96 94 92 91 95 97 99 99 100 100 96 91 86 82 79 75 77 85 92 97 100 104 106 101 98 93 96 97 101 97 91 85 86 90 92 96 98 101 102 97 92 89 93 96 101 99 97 94 97 101 104 106 106 107 108 110 111 111 107 102 100 102 105 106 110 112 116 111 108 102 101 102 104 105 106 106 106 102 99 97 98 99 101 97 91 86 90 97 104 105 104 105 100 94 85 82 84 86 88 91 93 96 93 89 87 85 83 82 84 89 92 93 89 87 83 81 80 77 76 76 75 76 78 79 75 70 65 65 67 70 71 70 69 69 71 74 75 74 73 72 78 86 93 94 92 91 88 85 81 78 75 73 71 68 66 64 59 55 51 52 51 52 52 52 53 55 57 60 62 64 67 68 62 57 51 54 56 58 60 63 65 65 65 64 63 62 61 59 57 55 54 53 53 52 49 47 45 44 42 41 42 43 45 46 49 51 51 50 48 46 46 46 46 48 49 50 50 50 50 48 46 44 44 45 47 49 50 52 52 51 50 50 51 51 52 52 54 54 54 54 55 56 59 61 66 69 73 77 82 86 90 93 96 
+72 70 71 74 77 79 72 65 57 63 68 75 76 76 76 74 71 69 67 66 64 62 61 59 57 52 46 40 44 49 54 52 47 42 41 41 41 43 44 46 48 48 49 49 48 46 44 45 47 49 50 50 50 48 45 43 42 43 44 46 48 51 53 54 55 56 54 51 48 49 53 57 60 65 71 73 69 65 63 66 68 69 72 74 76 79 82 84 87 88 90 89 84 78 76 81 85 89 83 78 71 72 73 75 75 74 72 72 71 70 75 83 91 96 88 80 75 78 81 86 83 80 77 75 76 76 72 63 55 51 53 56 57 57 55 55 50 46 42 44 47 49 52 54 57 60 63 66 67 62 60 57 63 70 76 76 77 78 85 94 101 103 103 103 101 96 91 86 83 81 79 83 86 89 89 88 88 85 81 79 81 86 90 91 87 84 83 87 91 96 97 98 100 97 93 90 93 95 97 95 89 83 83 90 96 99 94 89 87 87 88 90 96 102 106 100 92 82 77 73 70 73 80 88 94 96 98 99 99 99 99 98 97 96 92 89 85 86 89 93 95 97 98 98 96 94 91 94 96 98 95 92 89 92 98 104 105 103 102 101 103 104 103 104 104 104 107 111 113 113 112 111 105 100 93 93 97 101 103 105 106 105 101 97 94 97 100 103 96 89 82 87 95 103 107 108 108 105 99 92 86 87 86 86 88 90 92 92 89 89 87 83 80 81 84 88 89 87 85 83 81 79 77 77 76 75 76 79 81 77 72 67 66 67 68 67 67 67 68 71 75 78 76 76 76 78 81 85 84 83 82 80 79 79 76 73 69 66 64 63 62 62 61 61 60 60 58 58 59 59 60 60 61 62 67 71 74 68 60 53 57 60 64 64 64 63 62 60 59 58 55 52 50 51 51 51 51 52 51 49 48 46 46 47 47 48 50 52 54 54 54 54 54 53 53 50 47 43 44 45 47 48 49 51 50 48 46 45 47 49 50 49 48 47 49 52 54 55 56 57 57 58 58 58 56 53 53 57 61 65 66 68 68 70 71 72 76 83 
+68 69 69 71 73 74 72 68 64 70 74 78 79 78 77 73 66 60 57 57 58 57 57 57 56 53 49 46 48 50 52 52 50 47 45 42 40 40 43 46 47 45 44 43 44 45 45 46 47 47 50 54 59 57 51 45 42 42 43 44 48 51 55 56 56 58 56 54 51 52 55 58 62 70 76 78 71 66 61 67 71 76 77 78 79 81 83 85 86 87 88 87 83 80 78 81 85 88 82 77 71 72 73 75 75 74 74 73 71 69 71 81 90 92 80 67 57 59 63 66 68 68 69 67 64 62 58 54 49 48 51 53 56 55 54 53 51 50 48 48 50 52 55 58 61 66 72 78 80 78 74 73 75 76 77 76 74 72 76 81 87 89 89 90 90 89 88 87 86 84 84 86 89 91 88 87 86 85 84 84 85 86 88 89 87 86 86 89 91 94 96 96 97 96 95 94 95 97 99 96 91 87 88 92 97 97 90 83 78 83 88 92 99 104 111 105 96 89 83 79 75 77 83 90 95 96 96 97 98 100 101 99 98 96 94 90 88 87 91 94 95 96 98 97 93 90 88 89 92 94 93 92 90 94 99 105 106 105 103 102 99 98 97 99 101 104 107 111 115 113 111 107 100 94 87 86 90 93 96 98 100 101 98 95 93 95 97 100 96 90 85 88 94 100 104 106 109 108 101 95 89 87 85 84 82 81 79 82 86 89 86 82 77 77 80 82 83 82 79 77 77 75 75 75 73 71 75 78 82 80 78 77 73 69 65 63 63 65 67 71 77 81 80 79 79 78 77 76 75 73 71 71 73 75 74 69 65 61 62 63 65 65 65 64 63 63 64 63 60 59 58 57 57 59 64 69 72 66 62 57 62 67 71 71 67 66 64 63 61 60 57 54 51 50 49 47 48 49 51 49 48 47 48 50 52 55 57 59 60 59 57 56 57 56 56 52 47 43 44 43 43 45 47 50 49 47 45 44 46 46 47 48 51 53 58 63 69 70 70 70 69 67 65 62 56 51 48 54 59 64 64 63 62 60 59 57 65 74 
+63 65 65 62 60 58 58 57 56 61 66 71 73 74 76 71 64 57 53 52 53 53 53 53 54 53 52 51 51 51 51 52 53 53 50 44 39 38 41 44 45 42 40 38 43 47 51 51 51 50 51 51 52 51 49 47 45 46 46 47 49 51 53 54 55 56 56 55 54 55 56 58 63 70 77 79 72 66 61 68 75 83 82 82 81 82 82 83 83 83 83 82 80 78 77 78 80 81 75 70 65 65 65 65 62 60 58 59 61 63 67 73 79 82 74 66 60 62 64 67 66 65 65 63 60 59 57 54 51 50 52 54 55 55 55 56 55 54 53 53 52 52 55 58 61 68 77 85 90 86 85 83 81 79 77 74 71 68 70 72 74 75 76 77 79 83 86 88 89 90 91 91 93 92 90 86 83 85 87 90 90 88 88 88 89 88 90 90 90 90 92 92 93 96 98 100 100 96 95 96 95 96 96 95 95 92 82 73 68 81 93 103 107 111 114 111 107 104 99 94 88 88 92 96 99 98 98 98 98 98 99 99 100 100 98 96 93 92 93 93 94 97 100 99 92 85 80 84 86 89 92 94 96 99 103 107 109 109 110 106 100 95 91 93 98 101 105 110 114 110 109 103 97 90 82 80 82 84 86 89 93 95 94 93 92 94 95 96 94 91 89 90 94 96 100 106 110 109 103 96 92 88 86 82 79 75 70 77 83 89 87 82 78 76 78 79 80 78 78 78 77 79 79 78 76 75 75 75 75 75 75 76 74 70 66 64 66 68 70 73 76 79 76 74 70 71 72 73 70 66 61 61 64 68 69 65 60 58 64 69 76 71 67 62 63 64 67 65 60 55 53 53 52 54 58 63 67 65 63 62 67 72 78 76 71 68 65 63 62 59 56 53 50 48 46 45 48 50 52 52 52 52 54 56 58 60 60 61 60 58 56 53 52 50 47 47 47 47 45 42 40 40 44 47 47 46 44 44 43 43 43 49 55 61 68 74 81 81 82 82 80 78 76 73 67 62 59 62 66 67 66 65 63 64 66 67 74 81 
+64 66 64 58 51 47 48 48 49 53 57 61 66 71 75 70 63 56 52 50 49 48 48 48 48 46 45 43 45 46 47 48 49 50 47 43 38 37 40 43 44 43 41 39 45 50 56 55 55 54 52 49 46 46 46 47 49 50 51 51 51 51 50 52 52 53 54 55 55 56 57 58 60 62 65 67 65 63 61 65 68 72 76 80 83 80 78 76 76 77 76 76 76 76 76 73 72 70 67 65 61 61 60 58 57 53 50 52 56 60 63 66 70 71 69 66 64 65 67 67 65 63 61 61 60 59 58 57 56 54 55 55 55 58 59 61 60 59 58 55 53 50 52 54 57 64 73 83 86 82 78 74 73 72 72 73 73 73 73 73 73 73 74 75 78 83 87 90 88 86 85 86 89 90 89 87 86 88 90 93 94 92 91 92 94 96 96 93 90 89 89 91 93 94 95 98 94 91 88 90 93 96 98 96 94 91 83 75 70 83 95 108 108 110 111 108 106 102 98 94 90 90 96 100 104 101 101 99 98 97 97 99 101 103 101 97 94 94 97 99 100 100 99 97 93 87 83 86 88 92 94 98 101 103 104 105 105 107 109 105 99 94 90 90 91 94 100 107 114 111 108 106 98 89 80 76 76 74 77 85 92 97 95 94 94 96 98 99 96 91 87 88 90 92 94 98 101 101 98 96 93 89 86 83 83 85 86 87 89 91 90 86 83 81 80 79 79 81 84 87 87 88 88 88 86 85 79 73 64 64 67 70 71 69 67 67 70 73 75 75 75 75 71 66 62 65 67 71 68 61 54 54 59 64 66 62 58 55 63 70 77 72 66 61 61 63 65 63 58 55 54 55 56 58 61 64 68 66 64 63 67 71 75 74 71 68 64 60 55 52 50 47 45 45 44 44 48 52 56 58 58 59 61 62 64 64 63 62 61 58 55 52 49 46 43 45 47 48 46 44 42 43 47 50 51 51 50 50 54 59 63 69 75 80 82 83 82 85 88 91 92 91 90 88 84 80 77 77 74 71 69 67 66 69 73 77 83 89 
+74 73 69 63 58 55 54 54 54 56 59 61 64 67 71 67 62 57 53 50 48 46 47 47 47 44 41 39 41 43 44 45 45 45 43 40 37 37 39 42 45 46 47 48 50 53 56 56 56 56 55 53 51 49 48 46 46 47 48 50 51 53 55 55 54 54 55 57 59 57 56 55 56 57 58 59 59 60 62 61 61 62 70 77 85 81 74 70 69 68 69 70 73 75 73 67 61 57 59 61 63 61 59 58 59 61 62 63 62 62 63 64 65 66 67 66 67 70 73 76 71 66 60 59 57 56 55 54 53 52 52 51 51 55 58 60 62 62 62 59 56 53 52 53 54 60 69 78 81 77 72 70 69 68 68 71 74 78 76 74 72 72 73 73 77 84 90 91 86 80 77 80 83 86 87 89 90 92 95 97 97 96 96 98 102 105 104 98 92 87 90 91 92 92 92 93 88 83 79 82 86 93 95 95 94 92 87 82 81 90 99 107 107 105 104 99 94 89 85 83 80 83 93 102 107 104 102 98 97 94 93 96 101 103 101 95 90 93 100 107 109 104 99 95 94 94 94 95 98 99 101 103 106 103 102 100 100 102 102 101 96 94 90 88 86 86 94 104 112 112 111 109 101 90 80 74 71 66 69 80 92 101 99 97 96 99 100 101 96 91 84 85 86 87 90 92 93 93 94 94 94 90 86 82 87 91 96 94 92 90 88 89 88 87 84 82 81 84 87 91 90 90 90 90 91 90 83 74 65 65 68 71 73 72 70 70 72 75 75 74 71 68 65 64 62 64 70 74 73 67 62 60 62 64 63 60 56 53 58 64 69 66 63 60 60 59 59 58 57 55 56 59 63 65 66 69 69 67 66 64 65 69 71 70 68 66 63 58 53 49 48 47 46 46 46 46 50 55 58 60 61 62 63 62 62 61 60 59 59 56 54 52 50 48 47 47 48 48 49 49 48 50 53 56 58 57 56 58 66 75 82 87 91 94 89 85 80 81 83 86 86 83 78 76 74 72 72 70 70 70 73 76 80 84 88 93 96 100 
+76 75 72 69 65 62 62 60 59 60 61 62 63 64 65 64 61 59 56 52 49 49 52 56 57 53 48 45 46 47 48 49 49 50 47 43 40 41 43 46 47 48 48 50 52 54 56 56 55 56 56 56 55 53 48 44 43 44 44 46 52 57 61 59 58 57 61 63 66 60 54 48 51 58 64 66 63 60 58 61 63 65 70 75 82 80 80 79 78 77 78 79 82 86 85 77 70 66 66 68 69 66 64 62 65 70 75 73 70 66 64 63 63 64 65 68 70 75 82 87 78 69 60 57 54 52 50 50 48 47 46 44 45 49 53 56 59 62 64 63 61 60 57 55 52 55 61 66 71 74 76 76 75 71 69 75 80 85 80 75 70 70 72 73 78 85 92 93 88 84 80 79 79 79 83 86 90 90 89 89 87 86 84 86 89 94 94 90 86 84 87 89 93 94 95 96 90 84 79 81 86 92 95 94 94 93 90 88 88 93 99 106 105 104 103 100 95 90 85 82 78 80 89 99 104 101 97 94 93 92 90 95 100 105 101 96 91 93 99 104 106 102 97 96 98 101 101 101 100 100 103 106 111 107 102 97 95 94 95 94 94 95 95 93 91 91 95 99 103 104 106 108 103 95 88 84 81 79 80 87 94 99 97 95 92 95 100 104 98 91 84 86 90 95 96 94 92 89 90 90 90 90 90 92 91 91 90 88 86 81 84 87 91 92 89 86 85 86 88 88 87 85 83 86 88 91 86 80 73 72 74 76 77 76 74 73 74 76 76 72 67 62 61 60 61 66 71 77 76 71 67 65 65 65 64 60 55 53 56 60 64 64 62 61 59 57 56 55 55 55 56 58 62 65 66 67 69 66 65 64 62 60 58 58 60 61 61 59 57 55 55 54 54 53 52 51 54 57 60 62 63 65 64 62 59 57 57 57 56 55 53 52 51 50 50 49 50 50 50 51 51 51 52 53 53 52 52 53 57 60 63 67 70 74 71 69 65 64 63 63 60 55 49 45 48 54 58 60 63 67 75 84 91 94 98 100 102 103 
+71 70 72 72 73 72 70 67 64 62 60 58 58 58 57 57 56 55 54 51 50 50 53 58 59 56 53 50 50 51 51 53 54 54 51 48 44 45 49 52 52 48 44 43 48 54 57 55 52 50 51 53 54 52 49 46 45 46 47 49 53 57 60 58 57 56 58 61 64 58 52 44 49 58 67 69 65 60 58 61 64 67 70 73 77 82 86 90 91 91 91 94 97 101 101 98 95 91 87 85 81 77 74 71 74 80 85 83 78 74 73 74 74 74 72 70 70 73 74 75 69 63 55 52 49 46 46 48 50 50 48 47 46 49 52 55 57 60 62 62 62 61 58 55 50 51 54 57 63 68 75 79 74 71 68 74 81 87 82 76 69 69 72 74 79 86 94 95 91 87 82 79 74 72 78 84 89 87 83 80 77 73 68 69 73 78 80 80 79 80 84 88 94 96 100 102 96 90 84 84 89 93 94 95 95 94 92 91 90 94 99 103 105 105 107 104 103 101 94 85 79 78 85 92 96 93 90 86 87 87 88 93 99 105 103 99 95 94 93 93 94 95 97 99 102 105 108 104 102 98 103 107 113 110 102 97 93 89 85 86 93 98 104 103 101 101 98 93 89 93 100 105 104 101 98 96 95 94 95 97 98 98 93 90 87 94 101 107 100 92 83 86 94 101 102 96 91 88 87 85 85 89 93 96 92 89 87 84 80 77 81 86 94 96 94 92 90 91 89 87 85 82 79 82 85 89 85 79 73 73 74 76 76 73 70 68 70 70 71 71 70 70 69 68 65 66 69 70 69 67 65 64 65 67 67 62 57 53 56 59 62 63 62 63 61 57 53 51 52 53 55 57 60 62 64 65 67 65 64 63 59 54 48 49 53 57 59 59 60 59 61 61 61 60 59 57 58 59 60 61 62 64 65 66 67 67 64 60 57 57 56 55 54 53 52 52 52 52 52 52 52 50 48 45 43 45 46 46 46 45 45 49 53 56 56 54 53 51 49 47 45 41 38 37 45 53 59 62 65 68 68 64 61 65 71 78 83 86 
+67 66 69 73 78 79 76 73 69 63 58 54 52 51 49 49 48 48 48 49 49 48 47 47 47 47 48 48 47 47 47 51 55 58 56 51 47 47 48 49 49 46 43 42 46 51 55 53 49 46 48 50 52 52 50 48 48 50 51 52 54 55 56 55 54 52 52 52 53 51 48 46 50 56 63 65 64 63 62 61 61 62 65 69 72 80 87 94 98 100 103 103 106 107 106 104 101 98 94 88 84 84 81 78 83 88 92 90 86 81 81 83 86 85 79 74 70 68 66 64 60 55 50 46 42 39 42 49 55 56 54 51 51 53 54 55 55 55 55 56 56 56 53 50 47 48 51 53 56 61 65 67 64 61 60 64 68 72 75 77 79 79 79 78 83 90 97 99 95 91 86 81 77 73 80 86 92 92 90 88 85 82 79 79 80 82 83 83 83 83 89 92 94 95 96 96 93 89 87 88 91 94 95 93 91 89 91 93 95 98 101 103 103 104 103 103 103 103 98 91 83 82 86 89 91 89 85 84 87 88 90 94 99 102 100 100 97 95 93 91 91 93 96 98 100 102 104 103 101 100 104 108 112 109 104 98 95 90 85 84 91 99 103 101 99 98 97 96 95 99 104 107 107 105 102 100 99 97 97 100 102 104 100 97 92 96 100 103 99 95 90 91 94 96 97 95 95 93 91 88 85 84 83 81 84 86 89 86 84 81 83 88 94 97 99 99 99 95 93 89 85 81 77 79 82 85 81 76 70 69 72 74 74 69 64 61 62 64 65 70 74 79 76 73 69 67 66 66 65 64 63 64 66 69 69 66 62 58 60 63 64 65 67 67 65 60 56 55 55 56 57 58 59 59 62 65 68 66 63 61 57 53 49 50 53 57 59 59 60 62 64 66 68 67 66 65 63 60 58 58 61 62 66 72 76 77 70 63 57 57 55 54 53 53 52 51 50 50 49 48 48 47 46 47 47 49 51 53 52 51 50 50 50 50 49 48 48 46 44 41 40 39 40 42 50 58 66 68 69 70 59 47 36 41 54 66 75 80 
+65 63 66 70 74 75 73 73 70 66 61 57 56 54 52 51 51 50 50 50 51 48 44 41 40 42 44 45 44 44 43 50 56 62 59 55 50 48 44 42 42 45 47 47 47 46 47 48 48 48 48 48 48 49 51 52 52 52 51 52 54 54 54 51 48 47 50 53 55 53 51 49 51 55 59 62 63 67 66 63 59 57 60 64 67 79 88 96 102 109 114 113 112 109 106 101 95 91 87 84 81 82 83 85 87 90 93 91 89 85 86 88 90 88 83 79 73 71 68 65 61 56 52 50 48 46 47 49 51 53 53 52 53 53 53 52 51 50 48 49 50 50 50 48 47 47 49 51 53 55 57 58 57 56 54 57 60 62 71 79 88 87 85 83 86 93 100 103 98 94 90 85 78 75 81 89 94 96 97 97 97 95 95 93 92 91 90 90 91 91 92 95 96 93 90 85 86 86 86 90 94 96 95 89 85 83 89 94 97 101 104 106 101 98 94 96 97 100 99 96 92 90 89 89 88 87 86 85 89 91 94 95 97 98 98 97 97 96 94 94 94 94 94 93 93 93 94 98 101 106 106 107 106 105 105 102 99 93 88 86 92 95 97 95 92 90 96 102 107 109 109 111 110 108 106 104 100 98 98 102 108 109 106 102 97 99 98 99 98 98 97 96 94 93 93 96 98 99 95 91 87 82 77 71 78 85 93 93 89 85 87 92 96 99 100 102 102 98 94 90 86 81 77 78 78 79 76 72 69 68 71 73 73 69 66 64 65 66 67 70 75 78 74 70 65 64 62 62 63 64 66 67 69 70 71 71 71 72 71 71 71 71 72 72 70 67 63 61 62 60 60 59 57 56 61 65 69 66 63 59 56 53 50 51 53 56 58 58 59 61 64 67 69 66 62 59 57 56 55 55 58 59 60 62 63 63 60 58 56 51 46 41 43 45 46 45 44 42 41 41 41 43 46 50 52 56 58 60 59 57 55 51 48 44 43 43 43 42 41 39 39 40 42 44 53 61 70 70 69 69 66 64 64 70 78 87 94 99 
+68 65 65 67 69 70 72 71 70 67 65 62 60 59 56 57 57 57 56 54 53 50 47 45 44 44 45 46 46 45 45 50 57 62 58 55 51 47 44 40 40 43 46 47 46 44 43 45 47 48 47 45 44 46 50 54 55 53 52 52 53 53 52 48 43 41 51 60 69 64 60 55 56 58 60 62 64 65 65 62 60 58 61 64 66 75 85 94 100 106 112 111 105 99 97 94 89 86 81 76 74 79 82 87 87 89 90 89 89 87 88 90 93 91 86 81 77 74 71 67 62 58 53 54 55 56 53 49 46 47 49 52 53 51 50 47 45 42 40 42 43 45 47 48 50 51 53 55 55 55 55 55 56 57 59 65 71 77 82 88 92 90 88 85 87 90 95 96 91 89 86 85 84 85 88 93 98 97 96 94 94 94 94 92 92 91 90 92 93 95 93 93 91 91 88 87 89 89 90 92 95 99 97 92 88 86 91 96 100 100 99 99 97 95 93 95 96 98 98 97 97 97 96 94 94 91 89 88 91 93 96 95 93 92 92 93 95 95 97 98 97 97 98 97 95 94 92 96 100 104 104 104 103 104 104 104 101 95 90 88 90 92 94 92 91 89 94 100 104 107 106 109 107 107 106 105 101 98 98 102 105 107 104 100 97 96 97 97 98 100 102 102 101 102 101 98 97 96 98 99 99 94 87 80 86 94 102 101 100 98 98 100 101 101 100 98 98 96 94 92 87 82 76 74 74 72 71 69 69 69 70 72 72 71 69 68 69 70 70 73 75 77 73 67 61 59 59 59 61 64 68 70 71 70 70 73 75 78 77 77 76 74 73 71 69 69 68 66 65 64 63 63 63 65 69 72 76 73 68 63 59 55 50 50 53 56 58 57 57 58 60 62 63 57 52 45 46 48 50 52 54 55 55 52 49 48 51 52 54 47 40 33 36 39 42 42 41 41 41 40 40 41 44 46 49 50 52 54 53 50 49 46 42 39 39 39 41 42 42 42 43 44 44 45 54 64 73 72 70 67 73 79 85 90 94 95 99 100 
+75 73 70 66 64 65 67 70 68 63 58 56 55 55 55 57 59 61 59 56 54 52 50 47 47 47 48 48 47 47 47 52 57 62 58 54 50 47 44 41 40 41 42 42 44 44 44 45 46 46 45 45 44 45 47 49 50 51 52 52 53 54 52 48 44 41 51 62 72 68 63 60 59 59 60 61 63 65 65 63 62 61 61 62 64 73 81 89 95 102 107 102 94 87 84 83 83 80 74 68 64 71 78 85 82 81 80 81 79 80 82 85 88 87 84 82 79 77 76 73 66 60 52 55 57 60 56 49 44 43 47 50 50 47 45 43 42 41 41 42 43 44 48 51 54 57 60 64 64 61 60 59 62 66 69 77 85 92 93 95 97 94 90 88 89 90 92 91 88 84 83 87 90 96 97 100 102 98 93 90 90 91 92 91 91 89 89 94 99 99 93 88 83 87 91 94 94 95 95 97 99 102 101 98 94 93 97 101 101 96 91 85 89 93 97 97 96 95 97 97 100 102 102 102 102 98 93 91 93 94 96 92 89 85 85 88 91 93 97 101 103 103 105 104 100 98 94 95 96 96 98 100 101 103 103 104 101 97 92 89 90 92 91 91 90 90 93 95 98 100 103 105 107 106 105 104 103 99 99 101 102 103 101 99 96 97 96 97 99 103 106 109 109 110 107 101 96 93 98 105 110 102 94 86 93 99 106 106 104 102 101 102 104 104 99 96 93 93 92 91 87 85 82 80 78 77 75 73 72 71 71 71 70 69 69 68 69 71 73 74 75 75 70 63 57 57 60 64 67 68 69 69 68 67 66 69 72 76 77 78 79 76 70 64 64 67 70 71 69 66 65 68 70 73 76 79 82 77 72 68 62 57 54 53 56 59 60 61 63 65 63 63 61 57 51 46 46 46 46 47 49 51 52 50 49 48 48 48 47 44 41 38 39 39 40 41 43 45 45 43 42 40 41 41 41 43 45 47 45 44 42 40 38 36 36 38 40 43 44 46 47 47 47 48 54 59 64 62 59 57 59 63 66 68 69 70 71 70 
+78 79 73 65 59 59 63 67 65 59 52 48 50 51 52 56 59 62 61 58 55 54 51 50 50 51 52 52 52 52 52 54 57 59 56 51 48 46 44 41 40 40 40 41 42 43 44 45 45 45 45 44 43 44 44 44 45 49 51 53 54 55 54 50 46 45 52 59 65 65 64 63 61 61 60 61 65 67 68 68 67 67 64 62 62 69 77 85 88 89 91 89 86 84 81 80 79 76 69 62 59 66 74 80 77 74 71 71 71 71 74 78 81 83 81 81 80 80 82 79 70 60 52 55 59 63 57 50 42 41 44 46 46 42 39 37 41 45 48 47 48 48 52 56 61 67 74 80 82 80 79 79 83 87 90 96 101 106 103 102 100 98 97 95 96 101 104 104 99 95 92 92 90 90 92 93 95 91 87 82 84 86 90 92 93 93 94 95 97 96 91 85 81 83 85 87 89 90 91 94 97 99 100 98 96 95 96 97 96 91 87 83 88 92 98 95 93 91 94 97 103 105 104 104 102 96 92 89 91 91 93 90 87 84 85 87 90 91 91 91 93 98 105 107 103 100 98 97 97 96 98 100 102 104 105 107 104 97 90 87 93 98 102 99 97 94 94 96 97 99 102 104 104 102 100 99 100 100 100 99 101 100 100 99 96 97 97 97 100 104 106 106 105 104 100 95 88 87 95 102 109 101 91 85 88 93 98 97 94 90 93 98 104 106 101 95 91 89 87 87 88 89 92 91 89 87 84 80 77 74 72 70 68 67 66 66 70 72 77 75 75 74 69 61 53 55 60 67 69 70 70 69 67 64 63 65 66 69 71 73 76 72 67 62 61 66 70 72 68 64 62 67 72 75 77 77 78 75 71 68 66 66 66 67 68 69 72 77 80 84 77 70 61 59 57 56 52 47 43 42 45 47 49 48 47 47 46 44 42 42 42 41 40 39 37 39 43 47 48 46 43 41 42 41 41 42 44 44 42 40 38 37 36 36 38 42 46 48 49 50 51 51 51 51 51 51 51 50 48 46 46 47 48 49 49 48 48 48 
+77 80 71 64 57 55 55 56 56 55 54 53 51 51 50 51 53 54 54 55 55 53 51 48 50 52 55 55 55 55 56 56 56 56 53 49 46 45 43 41 41 41 41 41 41 41 42 44 46 47 46 46 45 45 44 44 45 47 49 51 53 54 54 52 49 48 51 55 59 59 60 62 62 62 62 64 67 70 72 72 73 71 67 62 59 66 73 81 78 75 72 75 80 84 83 79 77 72 66 61 58 64 70 75 72 68 65 62 62 61 65 72 77 77 74 70 70 72 75 75 68 61 54 55 57 59 55 49 43 42 43 45 44 42 40 41 47 54 59 56 54 52 56 60 64 72 81 89 91 90 89 90 96 100 105 108 110 112 109 106 103 101 99 98 102 106 112 113 108 104 100 95 90 85 86 87 88 83 78 74 77 83 87 92 95 97 98 97 94 93 88 83 78 78 78 78 80 83 86 89 92 97 98 97 96 94 92 90 88 87 86 83 87 91 95 93 88 85 89 97 105 107 105 101 97 93 88 84 86 86 86 86 87 86 87 90 91 87 82 75 78 89 99 107 104 103 101 100 99 98 100 101 102 105 108 111 106 96 86 85 96 108 116 110 104 98 98 97 97 100 102 104 101 98 93 93 97 99 100 101 99 98 98 97 98 98 98 98 100 103 105 104 100 97 92 87 83 82 91 100 107 99 91 83 85 88 91 90 87 84 87 93 99 101 98 93 90 89 89 88 91 92 94 92 88 84 83 80 79 77 75 73 71 72 72 73 73 73 73 71 70 68 64 59 55 55 60 64 67 69 69 70 67 64 62 60 59 57 60 63 67 66 63 60 61 64 69 69 66 61 58 65 72 78 76 75 74 73 72 71 72 76 80 81 81 82 84 89 94 99 90 84 78 75 72 70 66 63 59 57 56 54 53 52 52 52 51 50 50 47 44 41 38 36 33 36 41 46 49 47 45 44 44 44 43 42 42 42 39 37 35 35 36 36 39 43 49 52 53 53 53 53 52 52 53 52 52 49 45 41 40 40 41 40 39 36 35 37 
+73 74 69 64 57 53 51 48 48 51 55 56 53 50 47 45 43 41 46 49 53 50 46 43 44 47 50 52 52 51 52 54 56 57 54 51 48 47 46 45 45 44 44 44 42 41 42 44 48 49 48 47 46 45 44 43 44 45 47 49 51 54 54 53 51 51 50 50 51 52 53 56 59 64 68 70 72 74 75 75 76 75 72 67 65 68 70 73 72 70 70 71 74 76 77 79 79 76 68 61 57 61 65 67 66 63 61 59 57 55 59 64 70 70 67 62 61 65 69 70 66 61 55 56 55 55 51 48 43 43 43 44 44 44 45 48 56 65 71 66 60 56 59 61 65 71 79 87 89 87 86 87 91 95 98 99 100 100 99 98 97 91 87 82 85 92 99 101 98 95 92 93 91 90 87 84 82 82 81 79 82 86 89 91 92 92 92 92 92 90 87 83 80 81 82 82 84 84 85 87 91 95 96 96 97 95 93 89 87 87 88 89 90 92 95 94 92 91 94 99 104 103 98 94 89 88 86 84 86 88 90 88 86 84 87 91 94 92 84 77 79 88 98 105 105 105 105 103 101 99 99 99 99 100 102 102 99 92 86 86 95 104 112 107 103 98 99 101 103 104 107 107 104 98 92 90 94 96 98 99 100 100 101 100 99 98 98 98 100 104 106 104 97 91 85 83 81 82 88 94 100 95 90 84 83 82 81 83 85 87 89 88 90 89 89 88 89 91 93 95 92 91 89 86 80 75 75 77 79 80 78 77 75 78 78 80 77 73 68 66 64 62 60 59 57 58 60 61 64 65 68 69 66 64 61 59 57 54 60 64 69 71 72 72 74 77 81 83 82 82 82 85 90 93 92 90 89 88 90 89 90 91 92 93 96 98 100 102 103 106 104 104 104 100 93 88 84 82 81 77 70 62 57 56 56 56 56 56 57 53 48 42 41 39 38 40 43 47 48 48 49 49 49 48 47 46 44 43 42 42 42 41 38 36 37 44 50 54 54 53 53 52 53 53 54 54 55 50 43 36 34 34 35 34 31 29 28 33 
+64 64 64 65 64 61 58 54 52 51 50 49 48 48 47 44 42 40 43 47 50 47 44 40 43 46 49 51 50 49 51 52 55 57 55 53 50 50 52 52 51 50 49 47 46 45 45 47 50 52 48 45 42 41 40 40 42 44 46 48 50 52 52 51 50 49 49 49 49 50 53 54 59 64 70 72 73 75 76 77 77 78 76 73 71 69 67 66 68 68 70 69 67 66 71 78 84 82 72 63 57 56 56 57 59 61 63 61 60 59 59 60 60 60 59 59 59 62 65 66 61 57 54 52 51 50 48 47 45 45 47 48 48 46 45 48 56 64 69 66 62 58 59 61 62 67 74 81 83 82 81 82 86 90 93 91 92 93 92 94 94 87 79 73 75 82 88 91 89 88 88 90 94 94 89 84 77 80 83 86 87 89 91 91 87 86 86 86 87 89 86 84 83 86 88 90 89 88 86 88 91 93 95 96 97 97 94 91 89 91 93 93 94 94 94 96 100 102 102 102 101 98 91 85 82 83 85 87 89 94 97 92 85 80 85 92 100 99 94 89 88 93 97 101 105 108 111 106 102 98 98 96 94 93 91 89 88 87 87 88 94 99 103 101 99 96 101 105 110 110 111 113 106 99 92 89 90 93 95 97 101 104 104 102 102 101 98 96 100 104 109 104 94 84 80 81 81 83 86 89 92 92 89 88 84 78 75 77 82 87 88 86 84 82 83 84 85 89 91 96 93 89 85 82 78 75 74 76 79 78 75 72 70 72 72 74 73 71 71 69 68 68 66 63 60 59 59 59 60 61 62 63 62 61 61 61 62 63 69 76 83 86 88 91 93 96 99 102 105 108 111 110 110 109 107 105 102 102 103 103 102 101 99 98 101 105 109 107 106 105 107 108 110 105 97 90 85 82 79 76 72 69 66 63 61 58 60 64 66 61 55 49 48 50 52 52 49 47 46 49 53 56 55 53 52 50 47 44 45 46 48 45 40 37 38 45 51 54 54 54 55 55 54 54 54 53 53 50 46 42 40 39 37 36 35 34 34 39 
+62 60 62 64 67 64 62 58 54 50 44 42 44 46 47 45 44 43 44 45 46 46 44 42 46 52 58 59 58 58 57 55 55 54 52 50 49 49 49 50 49 48 47 46 45 43 45 48 51 53 48 45 41 40 38 38 39 42 44 47 48 50 50 49 47 46 48 49 51 53 56 59 61 63 66 66 67 69 71 71 72 73 73 72 71 69 68 67 68 68 69 70 70 71 75 82 89 87 77 68 61 60 60 59 62 65 67 66 65 63 61 58 55 54 55 57 58 59 61 61 57 55 51 49 46 44 45 45 46 48 51 54 53 49 45 45 51 56 61 61 60 60 59 57 57 60 65 69 70 72 73 75 78 82 85 86 89 90 94 98 102 99 95 93 90 91 90 92 94 95 96 96 96 95 89 82 76 79 82 84 88 91 95 92 89 86 84 86 88 90 89 87 87 89 92 94 91 89 87 90 94 97 99 100 100 98 93 89 86 88 90 93 93 93 94 95 98 100 101 103 104 100 93 87 82 84 86 89 94 97 102 97 93 88 92 98 104 104 98 93 91 92 92 94 99 103 107 104 101 98 94 90 87 85 82 80 81 83 86 88 91 93 94 93 93 93 95 95 97 98 101 102 100 96 91 92 95 98 102 102 101 101 100 99 97 94 91 87 90 94 98 96 92 87 84 86 87 89 87 86 84 87 91 94 88 79 70 73 78 85 87 85 82 81 80 79 78 83 88 93 89 87 82 81 80 79 79 78 77 75 70 65 63 64 66 67 68 70 71 72 71 72 69 66 63 62 60 59 58 58 59 59 59 59 58 62 66 70 75 80 86 90 94 98 100 103 105 109 112 115 118 115 111 108 102 98 93 91 92 92 90 88 87 87 93 99 106 104 101 99 100 101 102 97 93 87 83 78 73 71 72 74 74 70 65 62 65 68 72 66 60 54 54 55 56 53 49 45 43 46 49 52 50 48 47 44 41 38 39 40 42 42 43 44 46 48 48 49 52 55 58 57 56 55 53 51 51 49 49 48 46 43 40 38 39 40 41 46 
+65 63 63 63 63 60 58 55 52 50 47 45 43 41 41 44 45 47 48 49 50 49 48 47 50 55 60 62 63 63 61 58 54 52 49 48 46 45 45 44 44 43 43 41 39 38 40 44 48 50 50 49 47 46 45 43 42 42 42 45 49 53 53 51 49 48 48 48 49 53 57 61 60 58 57 59 61 63 65 67 69 70 70 71 70 70 68 68 68 68 67 72 75 80 83 88 93 90 82 73 69 71 74 75 74 73 72 71 70 68 67 64 62 60 58 56 58 62 66 69 65 63 60 58 55 53 52 51 50 51 53 54 52 49 46 44 48 51 53 54 56 57 58 58 58 60 62 64 65 66 67 69 73 78 81 82 83 85 93 101 109 110 110 111 107 101 96 96 100 103 104 102 99 95 88 81 75 77 80 82 87 92 99 96 90 85 83 86 89 91 91 91 91 92 93 94 93 91 89 93 99 103 106 105 104 100 94 87 82 85 87 89 89 90 93 94 95 95 98 103 108 106 98 90 85 87 89 91 95 101 105 104 101 99 102 104 107 105 100 94 90 88 86 85 91 96 101 98 98 98 92 87 79 77 74 72 74 80 86 88 88 87 87 87 88 88 86 84 82 84 88 91 92 91 90 93 98 106 109 104 101 97 96 94 92 88 84 80 82 85 89 90 90 89 89 91 92 92 88 84 80 85 91 96 89 81 73 73 77 81 84 83 83 82 80 78 76 82 88 93 90 85 81 81 80 80 80 79 78 76 71 65 61 61 61 61 64 66 68 68 68 68 67 68 68 68 66 64 63 63 65 65 61 57 52 59 66 75 78 81 83 87 92 97 102 105 107 112 114 120 123 118 112 106 98 91 83 81 81 80 79 77 75 76 84 91 98 96 94 94 91 90 87 83 77 72 67 64 61 61 66 70 73 70 67 64 65 65 64 62 59 56 54 52 49 46 44 42 41 42 43 44 43 41 40 38 35 33 33 35 37 40 44 48 50 48 47 46 49 53 56 55 54 53 51 49 46 44 43 43 42 41 40 41 44 47 50 54 
+62 61 62 61 61 58 55 52 50 50 50 47 41 36 36 41 46 51 53 55 57 56 55 55 53 52 52 53 55 56 56 53 50 48 47 46 45 46 47 48 47 46 45 43 40 37 38 42 45 49 50 53 53 51 49 48 45 42 38 43 50 57 57 55 52 50 48 46 46 52 57 62 56 50 45 49 52 57 60 64 68 70 70 69 69 68 67 67 69 71 72 75 79 82 85 87 91 88 84 80 77 80 82 84 82 82 81 79 77 75 72 70 67 64 60 55 57 64 70 74 72 70 68 66 65 63 60 57 55 53 53 52 50 49 46 45 45 46 46 47 50 51 56 60 65 65 66 66 66 66 66 68 72 77 78 75 72 71 84 99 111 117 122 126 125 121 117 116 115 113 111 104 99 94 87 81 75 79 81 84 89 93 98 96 91 87 87 91 95 97 93 90 87 88 88 89 88 88 87 91 96 102 105 106 106 104 99 93 89 90 91 91 92 91 90 93 95 98 100 102 105 104 99 96 94 94 94 95 98 101 105 102 101 100 101 103 105 102 96 92 88 85 83 84 89 96 100 98 96 92 90 85 80 78 76 74 75 79 82 85 85 87 89 91 94 97 92 88 83 87 93 99 99 97 94 94 97 102 104 102 102 100 99 97 95 94 93 93 91 88 87 86 89 92 92 91 90 88 88 88 88 88 87 87 86 84 83 83 80 79 79 82 84 85 83 79 79 84 90 95 92 85 81 80 80 80 80 80 80 77 72 66 61 59 58 56 59 61 65 65 65 65 66 69 71 72 70 68 66 67 68 68 64 59 55 61 67 74 77 79 82 85 85 86 88 90 92 93 93 92 91 86 81 76 73 69 67 66 65 64 63 62 62 65 71 79 85 86 87 88 83 77 71 64 57 51 47 47 48 51 58 66 72 71 69 67 64 62 59 58 56 55 52 48 44 40 39 38 38 38 39 40 39 38 37 36 35 34 35 35 36 38 42 46 49 46 44 43 45 47 50 50 51 52 49 45 41 39 38 39 40 41 43 47 51 54 57 60 
+54 54 56 58 60 58 55 52 50 48 46 45 45 44 44 47 51 53 55 58 59 59 60 60 55 50 45 47 50 53 53 50 47 45 44 44 44 47 50 52 52 52 51 48 45 41 40 40 41 45 49 54 57 52 48 44 45 45 46 48 51 54 54 53 52 50 48 46 45 50 56 60 54 48 42 45 49 53 58 62 66 68 68 68 68 67 66 67 71 75 79 80 82 83 83 84 84 85 85 85 85 85 85 87 89 90 91 88 86 83 78 73 68 62 56 51 52 56 61 64 65 66 66 64 63 61 56 51 46 47 50 52 53 53 53 53 52 52 52 54 55 57 61 66 70 70 69 68 67 66 65 67 71 74 76 72 68 67 83 97 114 120 129 138 137 136 135 131 127 122 116 107 99 92 86 82 77 80 83 86 90 93 97 95 93 89 90 96 102 103 96 87 81 82 83 83 82 83 83 87 93 98 101 105 107 108 106 103 100 98 97 95 93 90 87 92 98 103 103 101 98 98 100 102 103 102 101 100 101 103 104 101 99 96 97 98 100 97 91 86 82 83 83 85 91 96 101 97 92 86 86 85 85 84 81 79 77 78 78 80 84 87 92 97 102 107 101 94 87 93 102 109 109 103 97 95 96 96 96 99 102 104 102 100 98 100 101 104 99 91 84 83 88 93 95 92 88 87 89 90 93 88 86 81 83 86 89 87 83 80 79 83 86 87 83 79 77 82 87 92 89 84 80 79 78 79 79 79 78 75 69 61 56 57 57 57 61 65 70 70 70 69 69 69 68 67 66 65 65 66 67 67 67 67 67 68 68 68 70 75 80 80 76 70 67 68 70 70 65 61 56 53 49 46 48 50 53 53 52 50 50 53 55 57 63 68 73 75 79 82 77 69 63 57 51 46 44 45 48 51 58 64 70 68 67 66 63 58 54 52 49 48 44 42 39 37 36 35 34 35 36 37 36 35 34 34 34 35 36 36 37 38 42 46 48 47 45 45 47 50 53 55 57 60 60 59 58 58 57 56 56 59 62 64 64 63 63 62 
+50 49 53 56 59 57 55 53 50 46 44 45 49 52 54 54 54 54 57 58 60 60 60 60 55 50 44 47 53 58 58 56 54 52 49 47 46 48 50 52 52 52 52 50 47 43 42 41 40 42 48 55 58 53 47 41 45 49 53 52 51 50 51 51 51 50 48 45 44 49 53 57 54 53 50 52 54 57 59 60 61 64 66 69 70 72 73 75 77 78 81 78 75 72 75 79 81 83 84 85 85 85 84 84 86 87 88 86 84 82 77 71 65 60 55 49 48 50 53 56 59 62 64 63 60 58 51 44 35 40 46 51 55 59 62 63 63 63 64 66 69 70 72 73 74 73 72 69 67 66 65 66 69 71 73 76 78 82 93 104 115 120 125 132 134 133 133 128 125 121 115 109 102 95 92 88 86 86 86 86 88 90 94 93 89 86 88 95 103 106 99 94 88 89 88 88 88 88 88 90 93 96 99 102 105 104 100 95 92 94 94 94 89 86 81 87 92 98 98 99 97 98 100 102 103 103 102 103 102 101 102 100 100 99 96 95 93 92 91 90 88 88 85 86 92 98 103 100 96 94 93 91 89 86 85 83 82 82 82 82 87 91 95 98 101 103 98 94 88 93 98 105 104 101 98 96 95 94 93 93 95 95 97 97 98 101 104 108 104 95 85 84 88 92 95 93 93 91 90 91 92 88 85 81 82 84 86 87 87 86 87 88 88 88 83 77 72 77 81 86 84 80 78 77 77 77 76 76 75 72 65 57 51 54 57 59 64 69 74 74 75 74 72 69 66 64 65 65 66 67 67 68 70 72 74 72 70 66 68 71 73 73 70 68 67 68 68 66 63 59 55 52 52 50 51 53 55 56 55 54 54 56 58 60 60 60 60 66 70 77 72 66 59 54 50 46 45 47 51 53 58 63 66 65 64 62 58 53 48 45 43 42 41 40 39 39 39 40 40 41 42 42 39 35 31 32 34 37 39 39 40 42 45 49 50 50 49 49 53 56 61 64 68 70 73 75 77 78 76 74 73 73 75 77 72 67 63 60 
+47 46 50 53 57 57 56 56 55 52 51 50 49 48 49 50 51 52 54 56 57 59 61 62 57 50 44 48 54 60 62 61 60 58 54 51 48 49 50 51 51 51 51 49 46 44 43 43 43 44 47 50 53 52 50 49 49 50 51 52 53 53 54 53 52 51 49 47 47 48 50 51 52 52 52 55 57 60 59 60 59 62 66 71 74 77 80 82 83 83 83 74 66 58 65 72 79 82 82 82 81 79 78 76 74 72 70 68 66 63 63 62 61 58 56 54 51 49 48 48 54 59 64 65 65 65 57 50 43 45 49 54 58 62 66 69 69 71 71 73 76 78 78 78 78 76 75 74 72 71 70 71 73 75 78 83 88 93 99 106 112 116 120 124 124 125 125 124 120 116 112 107 103 99 97 94 92 90 89 86 87 89 91 89 85 82 85 94 102 106 103 101 97 97 96 95 95 94 94 94 95 95 96 98 100 98 93 85 81 85 86 88 84 79 74 79 84 89 92 94 98 99 99 100 101 101 102 103 101 102 101 102 101 103 97 91 86 86 90 96 97 93 89 88 94 100 104 104 105 104 100 98 93 91 90 88 87 86 86 87 92 96 99 98 98 97 95 92 89 93 95 99 99 99 97 96 94 92 90 89 88 87 91 94 97 102 108 114 107 97 87 84 88 92 93 93 92 93 93 91 90 88 85 83 84 85 86 87 89 92 93 91 89 86 81 76 72 75 78 81 79 76 75 75 75 76 74 72 70 67 64 61 60 61 61 63 67 72 76 76 76 73 73 69 66 66 69 71 74 73 72 70 72 72 73 72 71 70 69 67 64 65 68 72 74 72 70 67 64 60 56 55 54 53 55 57 59 60 59 58 58 59 58 58 56 54 52 57 61 65 62 57 53 50 48 46 46 46 46 46 49 52 53 51 49 46 43 40 37 36 38 39 40 42 43 44 46 49 52 51 50 49 43 36 29 30 34 39 42 43 44 45 47 48 50 49 50 49 55 61 67 71 73 76 78 80 83 83 82 81 79 77 76 73 67 61 55 54 
+50 49 53 56 59 59 59 58 58 59 59 54 49 43 43 45 47 49 50 52 54 56 60 63 57 52 47 48 52 55 55 53 51 50 49 48 48 51 54 56 55 54 53 50 48 46 45 45 45 46 46 48 49 50 53 54 53 51 49 52 55 57 56 55 53 52 52 50 49 47 44 43 44 45 46 52 56 61 63 64 65 68 71 76 78 77 78 78 81 83 85 80 74 68 72 76 82 80 76 72 70 70 70 68 66 64 61 59 58 55 56 57 58 58 58 58 54 48 42 41 49 56 62 66 68 71 64 58 52 53 54 57 60 65 70 73 74 76 77 79 81 82 81 81 80 80 80 79 80 81 82 84 88 90 93 93 94 96 97 99 101 102 103 104 103 103 102 101 101 99 97 94 90 88 87 86 84 84 83 82 84 83 84 85 85 86 87 92 97 99 101 102 102 100 97 96 95 94 93 94 95 97 98 101 102 101 96 91 88 87 87 86 83 81 79 81 84 87 89 89 89 91 94 94 97 97 97 97 100 101 104 101 101 98 94 89 84 83 86 88 90 90 91 92 97 102 106 103 99 97 96 96 97 95 94 93 90 87 82 82 86 91 95 95 95 95 95 97 98 100 102 102 101 97 92 91 90 90 89 88 87 85 89 92 95 99 102 104 101 96 90 87 88 87 87 88 88 88 88 88 88 88 87 86 87 88 91 92 95 97 97 92 86 81 80 78 75 76 77 78 76 73 71 71 72 73 73 68 64 62 64 67 69 68 66 66 70 74 78 78 76 74 72 70 69 69 74 77 81 78 76 74 73 71 69 69 70 70 69 64 60 60 65 69 71 67 64 60 61 62 63 63 63 64 65 67 70 71 69 69 67 62 56 50 50 50 50 50 50 49 47 46 44 44 46 47 47 44 40 37 39 40 41 38 36 33 32 30 30 32 35 38 41 41 42 44 45 45 45 44 44 43 40 38 36 37 40 43 44 44 44 44 44 44 44 44 44 44 53 62 73 77 78 81 83 85 87 88 88 87 86 82 77 73 68 63 58 58 
+56 56 61 65 68 65 63 61 60 59 58 56 52 50 49 51 52 52 50 49 50 55 61 65 60 56 51 50 51 52 50 47 44 43 44 45 48 53 59 63 61 59 56 54 50 47 47 47 48 48 49 50 50 52 52 53 55 56 57 57 57 57 55 53 51 50 50 51 50 48 45 44 44 43 44 51 58 64 65 66 67 71 75 79 79 77 75 75 79 84 87 86 84 82 82 83 85 78 68 59 55 57 58 59 60 62 62 62 61 61 61 60 60 60 59 59 54 46 38 37 42 49 54 55 57 57 55 52 49 51 55 57 61 64 67 70 75 78 81 81 82 81 80 79 78 79 80 80 81 81 82 83 86 88 90 91 92 93 92 93 93 92 92 91 88 86 84 84 85 86 85 84 81 80 79 78 78 78 80 81 79 78 76 80 84 88 89 90 89 92 97 102 106 101 99 95 95 93 92 95 97 99 102 103 105 105 102 99 97 92 88 84 85 84 84 86 87 88 86 83 79 79 84 89 91 91 91 91 97 103 109 103 98 93 90 87 83 82 78 75 78 86 92 98 101 104 106 99 93 85 89 94 99 99 99 98 94 86 78 74 79 85 89 90 92 93 97 101 107 108 107 107 102 95 88 85 86 87 87 86 86 85 88 90 93 94 95 95 94 94 92 91 88 85 83 83 84 85 87 87 89 88 88 88 89 89 89 91 94 96 96 92 88 85 86 85 85 84 82 80 80 78 78 76 75 71 69 66 62 61 65 68 72 68 64 60 66 71 77 77 75 75 73 72 72 74 77 82 84 82 80 78 73 69 63 64 66 69 67 63 57 57 60 63 64 59 55 51 57 64 70 72 73 73 75 77 79 80 78 76 72 64 56 51 51 51 51 49 48 46 45 46 46 47 49 51 51 48 44 42 41 40 38 37 36 34 33 33 32 34 37 39 41 41 40 40 37 34 31 32 33 33 36 39 43 45 46 47 46 45 43 42 41 40 39 41 43 45 54 61 70 72 74 75 78 82 88 90 88 88 87 86 86 86 83 79 76 74 
+64 65 68 70 73 70 66 64 61 59 57 56 56 55 56 58 60 58 53 48 47 55 63 69 65 62 58 56 54 53 53 54 55 54 52 51 51 53 54 56 54 53 51 51 50 49 49 49 50 49 50 50 50 50 51 52 56 60 64 61 59 56 53 51 49 49 49 50 51 51 52 51 48 45 44 53 62 70 68 65 62 65 69 73 75 75 75 77 81 88 91 89 87 85 86 85 85 78 69 60 56 57 57 57 58 59 59 60 59 58 58 58 57 57 58 59 53 44 35 33 38 44 47 46 45 44 45 46 47 50 54 58 60 61 63 67 74 81 84 83 81 79 76 73 70 72 75 78 74 71 67 66 65 66 68 70 75 78 83 88 92 91 91 91 88 84 82 82 85 88 89 90 91 91 91 90 88 86 84 82 80 78 75 78 83 87 89 88 88 89 94 98 101 94 89 84 83 85 85 89 94 99 101 102 103 103 105 104 104 99 93 88 88 88 88 89 91 92 89 86 83 84 88 92 94 93 93 93 95 98 102 98 95 92 90 86 83 82 82 81 83 87 90 94 95 95 96 92 88 83 87 92 96 96 97 95 91 84 76 73 78 83 87 88 87 88 92 95 99 102 106 110 105 96 87 82 83 85 87 88 89 89 87 85 82 83 84 83 86 90 94 94 90 86 84 83 84 84 87 89 93 91 90 87 86 84 84 84 85 87 89 91 93 96 97 97 98 94 90 86 86 87 88 85 78 70 65 63 61 61 66 71 75 68 62 55 61 69 76 77 75 75 75 74 74 76 80 85 88 85 82 79 73 66 58 60 63 66 65 61 56 55 59 63 65 59 53 46 53 60 67 69 67 68 70 74 78 79 76 73 70 67 64 62 60 57 54 53 53 52 52 52 52 53 54 56 56 53 49 47 43 40 36 36 35 35 35 35 35 36 37 39 40 40 41 41 39 38 36 36 36 36 37 40 42 43 42 42 40 39 38 37 37 37 38 42 46 51 55 59 63 65 67 69 73 79 86 91 89 86 84 85 86 87 83 80 76 73 
+72 73 73 74 74 71 68 64 61 57 54 54 54 55 57 59 62 61 57 53 53 62 70 76 71 67 63 59 56 53 56 60 65 64 60 55 52 50 47 46 45 43 43 45 48 50 50 50 49 48 47 47 46 46 47 47 50 53 56 54 52 50 49 48 47 46 46 45 47 49 51 52 51 49 48 57 65 74 69 64 57 60 64 69 71 73 73 78 84 91 96 93 89 87 87 86 86 80 74 67 65 63 61 60 58 56 53 51 47 45 45 44 43 46 48 51 48 43 37 38 44 51 55 55 55 55 54 54 54 57 60 63 64 65 66 69 73 78 80 79 76 74 70 66 61 66 70 74 72 69 66 63 60 58 58 62 65 70 76 82 88 89 90 91 88 83 81 83 86 90 93 96 99 99 98 98 97 92 87 83 80 77 74 77 82 86 88 87 87 86 91 95 97 88 79 71 72 74 77 83 90 99 100 100 100 101 105 111 112 106 99 95 93 92 92 93 95 97 95 93 91 91 94 96 98 97 98 97 94 94 92 93 92 94 91 85 82 83 87 91 92 91 89 89 86 85 84 83 83 83 86 90 93 94 91 91 88 81 75 74 77 81 85 84 84 83 86 89 91 97 105 112 109 97 85 78 82 83 86 89 91 94 87 81 75 74 73 73 80 87 95 98 93 90 86 85 85 85 88 93 96 93 89 86 84 83 81 81 82 83 85 89 92 96 97 98 100 92 83 74 76 81 86 83 77 70 66 65 63 63 66 69 72 69 67 65 69 75 80 80 78 77 76 73 71 71 78 86 90 86 81 77 70 64 56 57 59 62 61 58 55 54 59 65 68 60 52 43 49 56 63 64 63 64 66 73 77 79 75 71 69 70 70 70 66 63 59 57 56 53 52 51 50 49 50 50 49 46 44 42 41 41 41 40 38 36 35 35 35 36 36 36 37 40 43 46 46 47 48 45 43 40 40 41 41 40 39 38 37 35 34 33 35 36 37 42 47 52 54 56 58 59 58 57 59 62 66 68 67 66 65 63 62 60 59 57 56 57 
+81 80 80 80 78 74 69 65 61 56 52 53 54 54 56 60 63 63 62 61 65 74 82 85 79 70 63 59 55 51 55 59 64 63 60 57 54 53 51 49 47 45 43 46 49 51 51 50 49 48 46 45 44 44 44 44 46 48 48 47 45 44 44 44 45 43 42 40 41 45 48 51 54 56 58 63 69 75 67 62 55 59 66 73 75 73 72 75 83 92 97 93 89 86 85 86 85 81 76 73 69 67 63 61 58 56 52 49 47 43 42 41 40 42 44 48 47 44 41 43 50 56 61 63 65 65 64 62 61 64 66 68 69 71 70 71 72 73 73 71 69 66 62 57 53 59 64 69 72 74 76 73 70 66 65 66 66 68 72 77 82 84 86 89 88 88 87 89 94 98 98 98 97 96 94 93 91 91 90 88 86 83 80 79 80 81 81 81 81 82 85 88 90 84 79 73 76 78 81 85 90 95 95 94 92 94 99 103 106 100 96 91 88 87 86 87 88 90 91 90 90 91 93 96 97 97 99 98 96 94 91 92 93 93 90 84 79 83 89 96 98 95 94 91 92 92 93 91 88 87 89 89 92 91 91 90 87 87 85 84 85 86 87 83 81 78 83 87 93 99 106 115 111 99 88 82 86 89 93 95 97 97 92 87 81 79 77 75 80 88 96 100 100 99 97 94 90 87 91 95 100 95 89 83 81 82 83 83 83 82 83 85 86 87 90 94 96 82 68 53 57 66 77 78 74 71 67 67 66 65 67 68 69 70 72 73 77 80 83 82 81 79 78 74 70 70 75 83 88 83 78 73 70 66 63 63 63 63 62 61 60 61 65 69 72 66 59 54 57 62 66 69 70 72 75 79 83 84 79 75 72 73 71 72 70 67 65 61 56 51 48 47 46 45 43 42 41 38 37 36 39 43 45 44 40 38 37 37 37 37 37 37 38 41 44 45 47 48 48 45 43 40 38 38 36 36 38 39 40 39 37 36 35 35 35 39 44 48 52 53 55 53 49 45 43 44 43 44 46 48 49 46 44 43 44 46 47 50 
+89 88 87 85 82 77 71 66 62 58 54 54 54 54 57 61 64 64 62 60 63 70 78 82 75 68 61 57 53 49 52 56 61 62 60 58 57 56 56 54 51 50 48 49 50 51 51 51 51 50 49 48 46 46 44 45 47 49 51 51 52 52 50 47 45 42 40 38 40 45 50 54 55 58 60 64 68 72 66 60 54 60 68 76 77 74 71 72 82 92 98 93 88 84 84 84 83 82 80 78 73 69 65 62 60 58 57 57 56 56 55 54 54 53 54 54 53 53 52 53 55 56 57 59 61 63 64 64 64 64 66 68 68 67 67 66 66 66 66 66 65 64 61 58 56 59 61 64 68 73 78 77 73 70 68 67 66 67 71 75 79 80 83 86 88 89 91 93 97 102 102 99 95 93 91 88 88 89 91 92 89 87 84 81 79 78 76 76 76 77 79 81 82 80 78 76 80 83 86 88 89 91 90 87 84 86 90 94 98 93 88 85 83 81 78 79 80 81 84 87 89 92 93 94 96 98 100 101 98 95 92 93 93 93 89 82 76 81 91 102 105 102 98 96 99 103 106 101 95 90 89 91 92 90 89 87 88 92 95 97 93 90 87 82 78 72 79 86 93 100 109 115 112 102 91 87 90 94 97 98 99 100 96 92 88 84 82 80 83 90 97 101 101 103 103 98 93 89 93 96 102 95 88 81 80 82 84 84 83 82 82 83 83 85 87 91 93 82 69 58 61 70 78 80 78 76 75 71 68 66 68 69 72 74 75 76 77 78 79 81 83 83 82 78 73 71 72 73 75 72 70 69 71 74 78 77 73 69 67 68 70 72 73 75 75 72 69 66 67 69 70 73 75 78 81 82 83 82 78 74 71 71 71 72 70 69 68 63 59 54 50 48 45 42 40 38 38 40 42 45 46 46 47 46 45 44 43 42 41 41 42 43 44 43 43 43 43 44 44 43 41 39 37 34 32 32 36 40 42 40 39 38 37 36 35 38 41 44 46 47 48 46 43 40 38 39 40 41 42 43 44 44 44 45 47 49 49 49 
+90 89 87 87 82 76 70 65 61 59 56 55 54 53 57 61 65 64 60 56 57 61 65 66 63 60 55 52 48 44 47 49 52 52 51 51 50 50 51 50 49 49 48 49 50 50 50 50 50 50 51 51 50 47 46 46 48 50 53 55 58 60 55 50 45 42 40 38 41 48 54 57 57 55 56 59 63 66 63 62 59 65 72 80 81 79 78 77 78 80 82 80 79 78 78 79 79 77 75 74 71 69 66 64 63 62 62 63 65 65 64 63 62 62 61 60 60 62 63 62 59 56 56 58 61 62 63 65 66 66 66 67 65 63 62 60 59 58 58 60 62 64 63 64 63 62 61 61 64 69 74 73 70 67 65 67 67 69 72 75 79 80 81 83 85 88 91 92 94 94 93 92 89 88 88 87 86 87 86 86 87 87 88 87 86 84 83 82 80 79 79 78 79 81 83 85 90 93 97 95 92 89 85 81 78 80 88 96 99 95 91 87 87 86 84 85 84 84 86 91 94 94 91 88 89 94 98 102 99 97 95 94 93 94 91 88 84 87 94 102 105 103 99 98 98 100 99 96 92 88 90 93 96 97 94 91 90 91 92 93 90 89 88 85 84 81 88 95 102 106 108 109 107 99 91 87 91 94 97 97 97 96 95 93 91 92 93 94 95 95 94 94 96 96 96 94 93 92 93 96 99 94 88 83 81 83 82 83 82 81 81 82 84 86 88 90 91 87 80 74 75 78 81 83 83 84 82 76 71 66 69 72 74 76 77 78 78 77 77 79 81 85 86 82 77 73 71 69 67 69 69 71 75 79 82 79 74 69 68 70 71 74 74 74 74 73 70 68 68 67 68 67 69 71 71 68 66 64 63 62 62 64 65 68 67 67 67 64 62 58 54 50 45 42 39 37 36 41 47 53 52 51 50 49 49 49 47 45 43 43 44 45 45 43 42 40 41 42 42 42 42 42 40 36 32 31 34 37 39 40 40 40 39 37 36 37 38 38 38 39 39 39 37 36 35 36 37 38 38 39 39 41 44 47 49 50 52 52 
+89 87 83 82 77 71 64 58 56 54 53 52 51 51 54 56 59 59 56 55 55 59 62 63 61 59 57 54 50 46 46 46 46 45 44 44 43 44 45 45 46 47 47 48 49 49 48 47 46 50 55 59 57 52 47 46 50 53 55 56 58 59 56 51 47 46 45 44 46 51 56 58 58 57 57 60 63 66 66 66 67 71 76 81 83 83 83 80 75 69 66 68 69 72 72 72 73 71 69 67 67 67 68 67 67 66 66 68 71 72 69 68 65 66 68 69 70 70 71 69 67 65 66 72 79 84 86 88 90 90 90 88 86 82 81 76 72 69 67 68 69 69 69 68 67 65 63 61 65 69 72 74 72 69 69 69 69 71 76 80 84 84 85 84 88 89 93 92 90 90 88 86 84 84 84 85 86 84 82 81 84 87 91 91 91 91 89 87 85 82 79 76 75 82 88 95 100 104 109 101 94 85 80 76 71 75 85 97 104 99 95 91 92 92 93 91 89 87 90 94 99 97 89 82 81 90 96 103 101 99 97 96 95 94 93 94 93 95 98 101 102 100 100 99 96 93 90 88 87 85 90 96 103 102 98 95 92 90 87 85 87 87 89 89 90 90 96 104 111 110 108 105 101 95 90 89 92 95 97 95 94 92 92 94 95 97 100 104 101 97 94 92 91 91 92 90 91 89 91 94 96 93 90 85 84 84 83 81 81 80 78 81 83 86 85 85 85 82 80 76 77 78 80 81 80 80 79 74 71 69 72 74 76 77 79 80 80 79 78 80 82 85 86 84 82 80 78 74 72 76 78 82 80 78 75 72 70 67 67 69 72 73 73 72 71 70 70 69 67 66 64 63 63 64 62 58 53 50 52 54 56 57 58 59 60 62 65 64 63 62 60 60 59 57 52 47 43 46 48 50 51 53 54 53 50 46 45 45 45 45 44 43 42 41 40 38 39 40 40 42 44 45 43 37 32 30 32 35 37 38 40 40 40 39 38 38 37 37 37 37 37 37 36 36 36 36 37 37 37 37 37 39 43 46 49 51 52 53 
+84 82 78 76 70 66 60 56 54 52 51 50 50 49 50 51 53 54 54 54 56 61 66 67 67 67 66 64 62 59 57 55 53 51 51 49 48 49 49 49 49 49 49 49 48 48 47 46 45 49 54 60 59 54 49 47 51 55 58 58 57 57 55 53 50 50 51 52 54 55 57 58 59 60 62 66 70 73 75 77 79 77 75 75 76 78 80 79 76 73 71 70 69 69 72 74 76 74 72 70 70 69 69 68 66 64 65 66 68 69 67 65 62 66 71 74 75 77 78 76 75 73 76 86 95 103 107 111 115 113 113 111 108 105 101 96 89 83 79 78 78 76 75 73 71 68 66 65 68 71 74 76 79 79 79 76 74 75 83 91 98 98 98 98 96 97 96 94 91 88 86 84 83 81 81 80 80 80 80 81 82 83 84 86 89 92 93 92 91 89 87 83 81 86 90 94 95 97 98 95 90 85 82 78 74 77 85 92 96 93 90 87 90 92 93 93 91 90 93 95 98 96 91 87 85 91 95 99 100 100 100 98 96 94 93 92 91 93 97 101 101 97 95 90 90 89 88 87 86 83 89 94 100 100 98 95 92 91 91 90 91 92 92 94 95 97 100 103 107 106 104 101 98 96 93 92 94 95 97 95 93 91 91 92 92 92 93 93 93 93 95 95 93 92 89 86 82 80 85 90 94 94 92 91 89 86 84 81 80 78 77 80 83 85 82 78 76 75 74 73 74 76 77 78 75 74 72 72 71 71 74 75 77 79 80 82 81 81 79 80 82 83 84 83 83 83 80 76 72 77 80 85 82 76 72 69 68 69 68 70 71 71 69 68 66 65 64 62 62 61 60 61 62 63 61 56 50 47 50 53 56 52 48 44 48 54 60 62 63 64 67 71 76 77 68 60 52 51 49 46 50 55 59 56 51 44 42 43 43 43 41 41 40 39 40 40 39 38 36 37 40 42 42 40 38 37 37 36 36 36 37 37 38 39 40 40 39 39 38 38 37 37 37 38 39 38 37 37 36 36 36 39 42 44 46 47 47 48 
+81 76 70 65 64 63 63 60 57 54 51 53 54 54 52 50 49 52 56 59 62 64 66 67 67 67 68 66 66 65 62 59 57 56 55 54 53 54 53 53 53 52 51 49 48 46 46 46 45 48 50 53 54 52 52 52 53 54 56 56 55 56 54 53 52 52 53 53 54 54 55 57 60 62 65 68 71 75 77 79 81 77 73 68 70 74 78 79 78 78 75 72 67 65 71 75 80 79 77 76 73 71 69 67 62 60 57 58 58 58 56 54 52 58 64 70 75 79 82 85 88 89 91 93 96 99 106 113 120 118 118 116 115 112 109 104 98 90 87 87 88 86 82 78 75 76 76 76 78 81 82 85 85 86 85 82 78 80 90 99 107 107 107 107 104 103 101 96 91 86 84 83 82 80 78 77 75 76 78 79 78 78 78 82 87 94 95 97 98 96 92 89 87 89 91 92 91 89 88 86 85 84 82 80 77 78 82 86 88 87 84 83 87 90 93 93 93 93 94 95 95 95 94 93 92 93 95 96 98 100 102 100 98 95 93 90 87 90 95 101 101 94 87 81 83 85 87 85 84 82 87 93 98 98 96 93 93 94 93 94 95 96 97 98 100 102 103 103 103 102 99 97 96 95 94 96 96 96 96 94 91 89 90 90 91 90 87 85 86 90 94 95 94 93 91 86 81 77 82 85 89 91 91 92 90 89 87 84 82 81 79 82 85 87 84 82 79 77 76 74 75 76 77 77 75 72 70 70 70 70 71 72 73 74 75 76 79 82 86 85 82 76 74 76 78 79 74 71 66 70 76 80 78 74 69 69 69 71 71 71 70 68 65 62 59 58 57 55 55 56 56 59 61 63 62 56 50 47 49 52 53 49 43 39 43 48 54 56 59 60 64 67 71 71 64 57 51 51 51 51 53 56 58 54 47 40 37 36 36 36 36 36 36 39 41 44 40 35 30 31 34 37 39 41 43 44 41 38 36 36 37 37 40 41 44 43 42 41 40 38 36 35 36 37 38 37 37 37 37 38 38 39 40 40 40 39 38 37 
+84 75 69 61 59 61 62 62 57 54 52 55 58 60 54 49 45 52 60 68 68 67 65 64 62 60 59 59 58 58 54 50 46 48 50 51 52 51 51 51 50 50 49 48 46 44 45 45 45 47 49 51 52 53 54 54 54 54 54 54 54 53 54 54 54 53 53 52 53 53 53 56 60 64 67 68 69 70 70 69 70 68 65 63 67 72 77 79 81 82 82 79 78 76 74 73 73 71 70 70 69 67 67 65 63 60 58 57 56 56 55 55 56 61 66 70 76 81 86 91 94 99 100 98 93 95 104 114 122 122 122 123 121 118 116 110 104 98 96 98 98 96 90 85 81 84 87 90 92 93 95 94 92 90 89 86 84 86 96 105 111 110 109 108 107 106 105 100 94 87 84 83 83 81 79 76 74 72 71 70 74 78 82 86 87 91 94 96 100 98 91 84 81 83 86 90 90 90 91 89 89 88 85 84 81 82 86 89 90 89 87 88 88 88 89 91 94 96 97 97 98 97 96 94 94 96 98 98 100 100 101 98 96 93 90 87 83 85 90 95 98 95 93 91 90 90 89 89 90 90 89 90 90 91 90 88 88 90 91 93 95 95 97 97 96 97 97 98 101 100 99 97 98 99 101 101 96 95 91 89 86 83 88 93 99 95 89 83 83 88 92 96 97 98 99 93 88 82 81 81 79 83 86 89 91 91 91 89 87 85 83 85 88 89 88 88 87 84 79 76 76 78 79 79 75 71 69 69 70 70 69 69 69 70 71 72 76 84 89 88 80 73 68 71 74 75 73 71 68 71 73 77 74 70 67 65 66 66 67 67 69 70 66 62 59 60 61 62 63 62 64 63 63 62 61 59 58 56 54 51 49 47 45 44 45 46 48 50 52 54 56 58 60 60 56 53 49 51 53 54 55 55 55 51 44 38 35 35 34 34 35 36 37 39 40 41 37 33 29 29 31 33 35 39 43 45 43 40 38 41 43 46 47 48 49 48 45 44 41 38 35 33 34 36 37 37 37 38 38 38 38 38 37 38 38 39 40 43 
+87 78 70 61 59 57 56 55 55 54 54 57 59 61 56 53 48 51 55 60 61 59 58 56 53 50 50 53 55 56 51 45 39 43 46 50 50 49 48 48 47 47 46 45 43 42 42 43 43 47 50 53 54 55 55 54 53 52 51 51 51 51 50 49 49 51 54 56 54 52 50 53 58 63 67 65 64 63 64 65 64 65 64 62 67 73 78 81 83 86 87 87 88 86 78 70 63 63 62 61 61 63 64 64 65 65 63 62 59 60 65 70 74 75 76 78 81 85 90 90 91 92 90 87 82 83 92 100 108 112 114 116 113 111 111 104 96 89 87 89 91 91 82 76 70 73 76 79 82 85 88 87 85 84 83 83 82 85 93 102 108 108 106 104 105 104 105 99 93 85 83 83 82 81 79 76 73 70 67 64 71 77 84 87 87 88 91 96 100 98 89 80 75 80 83 86 88 91 94 93 92 91 90 88 86 86 88 89 91 91 92 91 89 87 86 89 94 98 100 100 102 100 98 96 96 98 101 102 102 100 99 96 94 90 87 83 80 81 85 89 94 97 101 103 99 95 92 93 95 97 94 88 83 80 82 82 85 87 90 92 94 96 98 95 92 89 92 96 98 98 98 98 99 101 103 103 98 93 87 84 81 78 86 94 102 98 90 81 80 85 88 91 96 99 102 96 92 87 83 80 74 78 83 88 91 93 95 95 90 86 83 86 88 90 88 86 83 82 78 76 75 77 78 78 78 78 79 78 79 80 78 76 73 74 74 74 77 81 84 85 81 77 75 74 73 73 74 74 76 76 75 73 69 66 63 61 60 59 59 63 67 71 68 64 59 62 65 69 69 69 70 69 66 63 62 63 64 63 58 53 46 47 47 47 46 46 47 46 48 49 51 52 53 54 53 51 49 49 49 48 47 46 45 43 41 39 39 39 39 39 40 40 41 39 38 36 33 31 28 28 28 29 31 37 42 46 43 42 40 44 47 50 51 51 51 49 46 43 41 40 40 39 39 40 39 39 37 37 35 34 32 32 34 36 40 47 54 60 
+78 73 67 61 58 58 57 57 57 57 57 59 62 63 59 55 50 49 49 48 48 48 47 46 42 39 41 50 58 62 56 50 44 48 51 54 52 49 45 45 46 47 47 45 44 42 42 43 42 46 49 54 54 54 54 53 51 49 48 49 50 49 47 44 43 49 55 61 58 52 46 49 55 62 64 61 57 56 61 66 72 71 71 71 73 78 82 84 86 88 89 89 89 88 86 83 82 76 73 69 72 75 78 78 77 77 76 73 71 71 76 80 85 82 80 79 81 83 85 85 83 81 78 75 71 72 80 88 96 101 105 111 108 105 102 95 87 77 76 78 81 79 70 62 54 55 55 55 60 63 68 68 68 67 69 71 73 78 85 92 98 96 95 93 94 95 95 91 87 82 79 79 78 78 77 77 76 75 73 72 73 74 75 79 83 86 89 90 92 90 84 76 73 79 85 91 89 89 89 90 92 96 92 86 80 80 85 90 93 92 93 91 87 84 80 87 94 103 102 101 99 97 94 90 89 95 97 101 98 95 92 91 90 89 86 84 80 82 88 92 94 93 91 91 90 89 89 91 92 95 94 92 90 89 87 86 86 88 90 91 92 95 96 92 87 84 87 92 97 98 99 99 98 98 100 98 94 89 84 83 83 82 85 89 92 89 85 81 79 78 78 80 86 93 98 97 95 93 87 81 75 77 83 87 91 95 98 98 92 86 81 84 89 91 87 82 76 75 75 75 76 76 76 77 81 85 87 89 90 91 86 82 78 77 76 76 77 78 80 80 81 81 81 78 75 72 74 77 79 78 75 73 70 65 62 60 60 61 62 66 70 73 70 66 65 63 63 63 66 72 78 79 76 72 69 68 67 65 60 55 51 49 49 49 48 48 47 47 45 45 45 47 48 50 49 49 49 46 45 43 41 39 37 37 39 41 42 42 42 42 42 43 43 40 37 34 32 31 31 32 33 34 36 39 40 42 41 41 41 42 44 45 46 47 49 47 45 42 40 43 45 47 46 44 42 40 38 36 34 31 30 32 36 41 46 54 60 67 
+64 63 60 58 60 62 64 65 67 69 70 70 70 68 62 55 50 51 52 53 52 51 49 47 44 41 43 51 60 66 59 53 48 51 54 57 54 48 43 42 45 47 48 46 44 43 43 43 43 45 46 48 49 49 51 50 48 46 47 50 53 54 52 51 49 51 54 57 54 50 46 47 52 57 58 56 55 54 61 68 74 74 75 75 78 80 83 85 88 89 91 90 90 91 95 99 101 94 87 80 86 92 98 98 96 94 91 90 88 86 86 84 83 79 75 71 69 68 68 68 67 66 66 65 64 66 75 84 91 96 100 104 100 95 91 84 77 69 66 68 69 69 65 61 57 56 55 55 59 62 66 67 70 72 74 76 79 83 88 92 96 95 93 91 91 90 89 86 83 79 78 78 76 76 76 78 78 79 78 78 75 72 68 73 80 85 88 87 87 84 79 72 72 79 88 95 91 87 83 88 94 100 93 85 74 74 82 89 94 93 92 91 86 80 75 86 97 107 107 102 98 94 90 85 83 89 94 98 92 89 84 85 85 86 85 84 81 84 90 95 95 88 82 77 80 84 86 88 91 92 94 97 99 97 93 90 88 89 88 90 92 93 94 89 84 78 83 88 95 97 98 99 99 98 98 94 92 86 82 85 86 86 86 85 84 84 82 82 79 76 71 71 80 87 94 94 94 94 89 83 78 79 82 85 88 91 95 95 88 81 77 82 86 89 85 80 76 76 78 78 79 80 81 82 84 84 85 86 88 88 83 78 72 71 72 72 73 74 76 78 82 87 89 84 79 74 74 75 74 74 75 74 72 68 63 62 65 67 70 71 72 73 72 70 69 66 61 57 65 76 89 91 88 83 78 76 74 71 66 62 57 57 58 58 58 56 55 54 52 50 49 48 48 48 50 52 54 50 46 42 40 40 39 40 42 44 45 43 41 39 41 43 44 41 37 33 32 33 34 36 38 40 41 40 40 39 40 41 41 41 42 42 45 47 50 50 47 43 41 43 44 46 46 46 47 44 41 37 37 37 38 42 47 52 57 60 62 63 
+68 66 64 62 63 64 66 67 70 72 74 73 73 71 64 56 48 53 57 60 59 58 57 55 53 51 52 57 62 63 56 49 44 47 50 53 51 48 45 45 46 48 48 48 47 46 46 45 45 43 42 41 43 46 48 48 47 46 47 51 55 58 57 56 55 53 52 50 50 48 47 47 48 48 50 53 55 57 62 67 72 72 73 73 73 73 74 77 82 86 88 90 93 95 97 101 102 97 93 88 91 96 100 100 97 96 93 90 88 84 81 76 73 70 67 64 63 61 59 58 57 57 57 57 58 61 71 79 86 91 94 98 92 85 79 72 67 60 58 58 59 61 62 64 66 66 65 65 68 70 74 79 85 90 92 94 94 97 99 102 105 104 105 106 99 94 91 88 86 84 82 80 78 78 78 78 79 80 81 81 78 74 70 76 84 91 92 92 91 89 83 79 78 82 87 91 88 86 82 86 89 91 89 85 81 82 86 91 92 89 86 83 84 85 85 90 94 100 99 97 96 92 88 84 83 89 94 97 94 91 88 90 91 93 91 89 85 87 92 95 95 87 81 76 80 85 89 90 91 91 93 93 94 93 92 91 89 89 87 87 90 92 93 89 84 80 82 84 87 90 95 100 102 103 103 102 98 94 91 91 92 91 90 87 85 85 86 87 84 79 74 73 80 86 93 91 90 91 88 85 84 81 80 78 78 82 85 85 80 75 73 77 81 86 83 81 78 78 81 84 86 86 87 87 86 82 81 83 85 87 80 74 66 66 67 68 69 72 73 77 82 87 90 85 81 77 74 71 68 68 69 69 69 67 66 67 70 74 77 78 80 82 85 89 93 94 94 95 102 111 122 124 114 103 94 90 88 86 81 76 71 71 72 74 72 70 67 64 62 59 56 53 49 46 51 55 60 54 48 41 39 40 41 43 44 45 45 43 41 39 42 44 46 43 39 35 35 39 41 44 45 46 46 45 44 44 43 42 40 40 40 41 45 50 55 55 51 46 43 43 42 42 45 48 51 47 44 40 42 45 49 54 59 63 67 68 69 71 
+77 75 72 69 67 65 64 62 59 56 56 58 60 61 60 58 56 57 58 60 59 59 58 58 58 58 59 63 66 65 57 49 43 45 47 49 48 48 47 47 48 48 49 50 50 50 49 48 46 41 37 32 37 42 47 49 48 49 49 52 53 54 54 54 54 53 52 50 51 51 52 51 51 50 52 54 57 60 62 65 66 70 71 73 71 69 68 71 77 82 87 91 94 98 99 100 101 99 96 94 94 95 97 94 93 91 87 82 76 70 63 57 52 55 58 61 64 67 69 66 63 59 57 57 57 61 69 78 85 85 85 86 83 78 74 70 66 62 62 65 67 69 72 74 75 75 73 73 74 76 78 82 88 92 94 94 94 95 99 101 103 103 106 107 102 97 92 90 91 89 87 85 81 79 79 78 79 80 82 84 80 78 74 81 87 94 96 95 94 92 88 85 83 85 86 87 86 85 82 82 84 84 86 87 88 89 91 92 91 85 79 76 83 88 95 95 93 91 92 93 94 91 88 84 83 88 93 96 95 94 92 95 98 101 98 93 89 90 94 97 96 88 80 75 80 87 91 91 92 91 90 89 89 89 91 93 92 90 88 86 88 90 93 90 85 81 81 81 81 86 94 101 106 106 107 106 102 100 97 97 96 96 92 89 86 86 87 88 87 83 77 77 83 88 93 91 89 87 86 84 85 83 80 76 77 80 84 85 82 79 77 80 83 86 83 83 81 82 84 83 85 88 88 88 83 78 75 78 81 84 78 73 67 67 68 69 71 74 76 79 78 77 77 78 79 80 73 66 59 59 58 59 61 66 70 74 77 79 83 86 89 92 101 110 119 123 127 130 136 145 153 151 135 120 108 103 99 94 88 83 75 75 73 72 71 69 68 67 67 68 68 65 63 60 61 60 59 54 48 42 41 42 43 44 43 43 42 42 42 43 45 47 48 46 41 38 40 45 49 52 52 51 50 49 48 47 45 42 39 39 39 40 43 49 55 56 52 49 46 47 47 48 50 52 53 53 54 55 57 62 65 69 73 75 78 80 83 85 
+78 76 73 71 68 65 63 58 53 48 46 47 49 51 55 60 63 61 59 58 58 58 58 59 60 61 64 68 73 72 63 54 47 48 49 50 48 47 46 46 47 47 48 49 50 50 49 47 45 42 39 35 40 45 50 52 52 52 52 51 51 51 51 52 52 52 52 51 54 56 58 58 58 57 58 60 61 62 60 58 60 65 71 76 76 75 75 77 80 82 87 92 98 102 105 109 111 108 106 103 104 104 104 101 97 94 90 84 77 71 63 55 50 55 60 66 68 71 75 71 65 60 57 56 54 58 67 74 81 79 77 75 74 72 69 68 67 65 68 74 79 83 83 84 84 83 81 80 80 80 80 81 81 82 83 82 81 82 85 88 91 94 96 98 97 95 93 94 96 97 95 92 88 85 81 77 74 76 78 80 81 82 84 85 86 88 88 87 87 86 86 86 87 87 87 88 89 91 92 90 89 87 88 90 92 95 97 99 99 93 85 81 86 91 97 95 93 91 92 92 91 91 88 85 85 88 93 95 92 90 86 91 95 100 100 96 95 95 95 96 94 90 86 82 81 79 79 79 81 83 83 86 86 88 91 94 93 92 90 90 92 93 95 93 89 86 84 84 83 86 92 100 103 100 98 96 94 93 93 91 91 91 88 86 82 84 85 87 87 86 85 86 90 92 94 91 89 86 84 83 81 80 80 79 81 84 88 89 88 88 86 86 86 86 85 86 84 85 84 84 84 86 89 88 81 73 68 72 77 81 77 72 68 67 70 71 72 76 79 79 76 73 70 73 77 80 72 64 56 55 56 57 60 68 75 80 85 90 95 101 107 112 123 131 141 144 147 149 152 154 157 153 145 135 126 114 102 90 83 76 70 64 60 56 56 58 61 65 71 76 81 80 79 78 72 66 59 54 48 43 42 44 45 45 45 44 44 45 46 46 48 50 52 49 44 40 40 44 47 48 47 45 43 44 45 46 43 40 37 37 37 37 41 45 50 53 51 51 51 52 54 56 56 56 55 59 61 65 68 70 72 74 75 76 77 77 76 74 
+78 76 72 71 67 65 62 59 55 52 49 48 47 48 52 55 58 57 56 55 55 55 55 57 60 63 66 69 74 73 65 58 51 51 49 49 48 47 45 45 46 46 46 48 49 50 47 44 43 46 48 50 53 54 57 56 56 55 54 53 53 52 53 54 54 54 54 54 58 61 64 61 57 54 54 57 60 60 59 57 56 63 70 76 78 80 81 82 83 84 89 95 101 108 112 117 121 117 116 113 113 114 115 112 107 101 98 93 89 83 76 70 66 71 75 80 77 74 72 67 62 57 53 50 46 48 54 60 65 64 64 64 66 67 69 68 68 66 69 74 79 81 80 80 79 78 77 75 75 74 73 71 72 71 72 72 72 74 79 84 88 91 93 95 96 97 98 99 100 99 97 96 92 89 82 76 72 74 75 77 82 86 91 89 87 84 82 82 81 82 85 87 89 89 88 89 93 97 101 97 93 88 90 93 96 100 104 107 106 99 91 86 89 93 97 96 94 93 92 91 90 88 87 86 87 89 92 93 88 84 80 86 92 99 100 100 101 99 97 94 93 93 92 90 81 73 65 68 71 75 78 81 84 88 91 94 95 94 93 92 95 97 98 96 93 91 89 87 85 88 93 99 100 97 91 88 89 88 88 87 87 87 84 81 79 80 84 88 89 90 89 89 92 93 94 91 89 86 84 82 78 79 81 83 85 87 89 90 89 88 88 88 88 87 88 90 91 89 85 81 80 81 80 79 76 71 69 70 73 74 74 73 72 73 76 78 78 78 78 77 75 74 74 75 77 78 71 64 56 56 58 60 65 73 80 87 95 103 110 117 125 134 143 152 163 166 166 167 164 161 158 154 149 143 136 120 104 88 82 76 70 66 62 58 57 57 57 58 61 62 64 65 67 68 66 65 63 59 53 48 46 46 47 48 50 52 55 53 51 49 52 55 57 53 47 41 39 41 43 43 41 38 37 40 42 45 42 39 37 37 38 40 42 44 46 47 47 47 47 49 51 54 53 53 52 54 56 59 60 59 58 59 62 65 67 62 57 51 
+74 71 67 64 63 60 56 55 53 51 51 49 46 46 49 51 53 53 53 53 52 51 51 55 60 64 65 66 67 66 62 57 54 50 47 45 43 43 42 42 42 42 44 46 49 50 49 48 48 50 52 56 57 58 60 59 58 57 55 55 54 54 54 55 56 56 57 57 62 66 70 63 54 46 46 51 55 57 58 58 60 63 68 74 78 81 86 88 88 90 96 106 115 122 125 131 133 132 130 128 129 128 128 125 121 117 112 107 103 99 90 84 79 80 80 80 77 73 68 64 59 54 49 45 41 41 45 47 51 52 54 55 59 63 66 67 68 67 70 73 76 76 74 72 70 69 68 67 65 62 59 60 61 60 62 63 66 70 78 85 93 95 98 99 102 103 103 101 99 96 95 94 92 89 84 79 76 78 80 82 84 87 90 87 87 86 85 83 81 82 84 86 87 86 85 85 88 92 97 95 92 90 90 89 89 92 95 98 100 97 94 92 95 98 100 97 94 90 90 91 91 93 91 90 89 90 91 92 91 90 89 92 96 100 99 97 94 92 88 86 83 85 87 87 83 78 74 79 84 89 90 90 90 89 92 93 93 92 93 92 94 97 99 95 93 90 90 92 93 95 97 100 100 97 95 92 88 84 81 83 84 86 83 78 73 77 84 92 95 92 89 86 88 88 89 90 90 89 86 81 76 77 81 86 90 89 90 90 89 87 85 87 88 88 92 95 98 94 85 77 74 73 71 70 70 68 68 70 70 71 74 75 76 78 81 83 81 78 74 73 73 73 73 73 73 73 68 64 59 61 66 72 77 84 90 97 103 108 113 120 128 134 141 147 153 156 153 154 152 147 141 137 135 133 129 115 103 91 86 82 80 77 75 72 68 63 56 50 47 43 40 45 50 55 60 63 67 63 57 51 49 48 48 49 54 57 60 57 54 52 52 54 54 51 47 43 42 42 42 41 40 39 38 40 42 44 43 42 42 42 44 47 47 45 43 41 41 41 41 44 47 51 50 49 49 51 53 56 56 55 54 53 57 62 64 60 57 52 
+70 66 60 57 54 52 50 48 47 45 47 50 52 53 52 52 52 51 50 50 49 50 50 53 57 62 62 61 60 59 58 56 53 50 44 40 41 40 39 39 39 39 41 44 48 51 53 55 56 54 52 51 53 55 58 58 56 55 54 53 51 52 54 57 58 58 58 58 60 62 66 60 55 48 50 53 58 60 61 62 64 66 68 71 76 81 87 89 91 94 102 114 126 134 139 142 146 145 145 144 145 144 144 143 139 136 132 127 122 114 107 98 89 80 72 65 65 65 63 61 57 54 50 46 42 42 45 47 49 49 47 47 51 54 57 59 61 63 64 66 67 67 65 64 62 60 60 59 57 55 53 56 60 64 67 70 73 78 86 93 100 101 103 105 104 105 105 102 101 97 95 96 94 91 85 81 77 79 81 83 84 84 85 86 88 89 87 85 81 80 82 84 85 83 82 81 85 89 93 92 92 92 90 88 84 85 87 90 92 94 96 98 100 102 105 99 93 87 87 92 93 94 94 92 91 91 91 91 93 95 97 99 100 101 97 93 88 83 80 74 73 78 81 84 84 85 84 90 97 103 101 98 94 92 92 92 91 92 90 91 94 96 100 96 92 88 91 95 99 100 100 99 99 98 96 93 87 82 77 80 83 86 81 75 69 74 83 92 96 92 87 85 85 83 84 86 88 91 87 82 78 79 83 87 89 88 88 87 84 81 79 81 84 87 89 91 94 92 86 82 77 74 69 66 66 67 67 73 79 84 83 82 79 77 77 75 72 70 68 66 65 64 63 64 64 65 63 62 61 68 79 88 97 101 106 109 112 115 116 122 128 133 137 140 143 143 143 141 137 130 123 118 118 118 118 106 95 84 82 81 80 77 74 71 67 61 57 52 47 42 39 42 46 49 51 52 53 51 48 45 44 45 45 47 51 55 59 57 55 53 52 50 48 46 46 46 45 43 41 40 39 39 39 41 43 44 44 44 44 46 48 51 50 47 45 43 43 44 44 48 51 55 56 57 58 61 63 66 67 66 66 66 67 69 70 68 67 66 
+70 68 65 62 57 52 48 46 45 44 47 52 56 57 55 53 50 49 46 46 48 48 49 52 55 57 56 54 52 52 52 52 50 45 40 37 40 43 46 45 43 42 43 45 47 49 51 54 55 52 49 47 50 53 56 56 55 54 53 52 50 51 55 58 60 59 58 57 57 59 59 58 57 55 58 61 65 67 68 69 70 69 69 70 74 78 83 86 89 92 99 107 116 123 126 131 134 140 143 145 144 143 143 141 137 134 132 129 126 120 113 105 96 84 73 62 63 63 64 62 59 56 53 52 49 49 49 50 49 46 43 40 43 46 48 51 55 58 59 57 57 56 56 55 54 53 51 50 50 49 49 57 67 76 82 84 88 93 99 105 109 110 110 110 107 105 104 103 102 102 101 100 98 94 87 79 75 74 74 75 75 75 75 81 87 95 91 85 80 78 77 78 79 81 83 85 86 87 87 89 93 95 91 85 79 80 85 90 94 97 97 99 98 96 95 94 92 89 89 89 90 90 92 92 94 94 94 95 95 95 96 97 97 99 97 96 95 90 84 76 75 78 82 85 85 85 83 88 93 97 96 96 94 91 88 85 83 83 83 84 88 90 93 92 90 88 89 92 95 96 97 98 97 94 92 90 86 83 81 83 84 86 81 75 70 71 78 83 86 86 85 84 83 81 80 82 85 89 88 85 82 82 83 84 84 84 85 83 79 74 71 75 79 83 84 87 86 87 87 85 83 75 68 62 63 64 66 76 84 93 90 85 80 76 72 69 66 65 64 63 62 60 59 59 59 59 60 61 63 69 79 88 94 99 103 108 112 118 121 126 131 136 138 139 137 137 133 131 123 111 98 90 94 99 102 90 77 65 65 67 70 67 63 59 57 57 58 57 52 47 44 44 43 43 42 41 41 41 41 41 41 43 43 45 48 51 54 53 53 53 50 47 44 44 45 48 48 46 43 41 41 40 39 40 42 43 43 43 43 45 47 50 51 50 48 48 49 50 51 54 57 59 62 65 65 67 69 70 70 69 68 67 66 65 64 64 65 67 
+71 74 75 74 67 58 52 51 50 49 50 52 54 54 54 53 52 49 46 43 46 48 50 51 52 53 52 49 46 46 48 49 47 42 37 35 40 46 52 50 48 45 44 45 46 47 48 49 49 47 45 42 46 50 53 53 54 54 53 52 52 51 52 51 53 53 55 56 59 62 64 62 59 56 59 64 69 72 72 73 72 71 69 68 72 76 79 83 86 89 94 100 106 111 116 120 125 133 138 142 141 139 137 134 130 126 125 125 124 121 113 107 99 90 80 72 72 71 71 68 66 64 66 68 72 70 66 61 57 54 51 49 50 50 51 52 53 54 55 54 55 54 54 54 54 58 59 60 59 56 54 63 74 84 88 90 93 97 102 107 110 109 109 108 105 101 98 98 99 100 100 99 97 92 85 78 72 72 73 73 71 70 68 77 87 95 93 85 79 76 75 73 74 79 84 88 86 84 82 87 91 98 92 83 76 76 83 91 97 97 100 101 98 93 89 90 91 93 91 88 85 86 89 93 96 96 98 97 96 95 94 94 94 94 97 99 101 97 87 79 76 80 84 87 86 85 85 87 90 92 93 93 95 91 84 79 76 76 78 80 82 85 88 88 89 89 90 91 92 93 94 94 94 91 89 87 87 84 83 84 84 85 80 73 67 68 73 79 83 83 84 83 82 81 80 84 87 90 88 86 83 83 84 86 86 85 83 81 78 74 71 76 81 85 85 84 81 82 83 84 81 73 66 61 62 63 65 71 78 84 80 76 72 69 68 66 66 67 69 70 67 64 62 60 58 55 58 60 63 67 72 78 83 89 95 102 110 119 127 131 134 138 137 137 134 130 125 120 110 93 77 67 74 82 88 76 64 52 54 57 60 60 58 56 56 58 61 61 56 52 47 46 45 43 42 41 41 41 42 43 45 44 45 44 45 44 43 46 49 52 50 45 41 42 46 50 51 48 45 44 42 41 40 41 41 42 42 41 41 42 45 48 49 47 45 44 46 46 47 48 48 46 47 47 48 48 49 51 51 51 50 50 51 51 51 54 58 62 
+67 66 66 64 59 53 48 49 50 51 51 51 51 52 54 55 54 49 44 41 45 48 50 50 49 49 47 44 42 43 45 48 47 43 39 37 39 41 44 47 49 52 52 52 52 51 50 49 48 48 46 45 46 47 48 51 53 54 54 53 52 51 48 45 45 48 52 56 61 66 71 65 60 54 58 66 72 74 74 74 73 69 68 65 69 73 76 79 80 81 85 89 95 98 100 102 105 112 118 123 123 123 123 119 115 111 108 108 106 104 103 100 97 92 86 82 80 79 77 75 72 70 73 79 84 83 76 69 63 61 58 56 55 54 53 52 52 51 51 52 54 54 54 54 57 65 72 76 72 67 63 72 81 91 92 91 89 92 97 102 104 102 100 98 95 93 90 92 93 94 92 89 87 83 79 75 73 76 80 82 80 79 77 79 83 86 86 84 82 81 80 78 77 78 80 80 83 84 85 89 92 93 91 87 82 83 88 92 98 99 101 101 98 95 91 94 98 101 97 90 84 83 87 91 94 94 95 95 92 88 85 88 90 92 95 97 99 97 93 89 87 86 86 86 86 86 87 87 88 87 90 91 94 90 86 81 80 84 88 90 91 91 91 92 92 92 93 94 95 95 93 89 87 88 89 88 88 88 88 85 81 78 73 66 61 64 73 82 86 85 84 83 85 87 89 90 91 92 89 85 81 82 86 89 90 87 84 81 79 77 75 80 85 90 87 82 76 76 78 81 80 72 65 60 62 63 64 68 71 75 73 68 64 63 64 65 67 70 72 74 70 67 64 63 62 62 63 65 67 68 70 71 73 77 81 86 93 101 108 112 116 120 117 114 110 106 104 100 94 82 70 63 67 71 73 66 56 48 49 50 53 54 56 58 61 63 64 65 60 55 51 48 45 43 42 41 41 41 43 44 45 44 44 44 42 41 39 43 47 52 50 46 41 41 44 47 48 47 45 44 42 41 39 40 41 43 41 39 36 37 40 43 44 40 38 36 37 39 42 39 36 33 32 32 32 33 34 36 37 38 39 40 41 42 43 45 48 49 
+61 55 51 46 43 40 37 42 46 50 50 50 50 52 53 54 55 53 52 50 50 50 50 50 50 50 48 47 45 45 46 46 46 44 42 40 38 37 37 44 52 59 60 59 59 56 52 49 49 50 52 52 49 45 42 48 52 57 55 53 50 49 48 48 47 47 48 50 53 58 62 60 57 54 59 65 72 73 72 71 69 66 64 63 67 72 75 76 76 77 79 82 85 86 85 86 87 91 96 102 103 105 106 102 98 94 90 85 80 81 85 90 91 91 89 88 87 85 85 80 77 73 73 74 77 75 72 68 64 61 57 53 50 46 43 47 49 52 52 51 49 50 50 51 54 62 70 75 72 69 65 72 80 86 88 86 87 91 95 101 104 101 99 97 96 93 90 93 95 97 92 88 82 79 77 75 76 79 85 87 86 84 82 81 81 80 80 81 82 83 82 81 79 79 77 78 81 86 89 89 89 91 89 89 87 89 92 95 97 99 102 102 99 96 93 98 103 108 101 91 82 80 84 89 92 92 93 92 87 82 76 81 86 91 93 94 95 96 97 98 97 92 88 85 86 88 89 87 86 84 88 90 92 91 88 85 84 89 93 99 96 95 95 96 95 96 96 99 99 97 92 86 82 84 86 88 89 90 91 86 80 75 71 66 63 68 77 87 91 89 85 84 86 88 90 91 92 91 89 87 86 87 89 92 91 87 84 81 80 78 77 80 83 85 85 81 78 78 80 83 80 74 68 63 65 69 71 72 73 74 72 69 65 66 69 72 75 74 74 74 71 68 66 68 73 76 76 75 73 71 69 67 65 66 65 66 73 78 85 90 95 100 96 91 86 84 83 83 79 72 66 61 63 65 67 62 57 51 51 51 51 54 57 60 63 65 66 67 66 65 64 60 56 52 51 49 49 46 42 39 36 38 39 41 41 41 42 45 49 52 50 46 42 41 42 44 45 44 45 44 42 40 38 39 41 43 41 37 34 33 35 36 36 36 35 35 37 38 39 37 34 32 32 33 34 35 37 38 38 38 38 38 38 38 38 37 36 34 
+62 58 55 51 47 44 41 44 48 51 51 51 51 52 54 55 57 58 60 59 55 51 48 51 51 53 53 54 54 51 48 45 43 44 45 45 45 45 45 48 52 56 54 52 49 49 49 50 50 52 54 54 49 45 41 46 51 57 55 52 49 48 49 49 48 46 45 43 45 47 50 51 54 55 60 65 70 71 68 65 63 61 59 59 65 73 80 80 81 81 81 81 81 83 84 85 87 89 90 94 95 96 98 94 91 88 84 79 75 75 78 82 84 85 85 86 84 83 81 77 73 70 68 68 67 67 65 65 62 58 54 49 44 40 35 41 48 54 52 49 45 45 45 47 50 58 64 71 69 67 65 69 73 78 81 82 84 89 95 102 107 106 106 106 103 101 97 102 107 111 103 93 82 79 80 80 81 83 84 85 83 81 79 81 82 84 81 77 73 73 76 78 81 83 86 88 87 87 86 88 90 92 90 87 84 85 89 92 95 96 97 97 93 89 85 91 97 102 98 91 84 83 88 92 94 94 93 91 85 79 73 79 85 92 92 91 90 90 92 95 95 93 91 89 90 91 91 90 89 88 89 90 92 92 91 90 89 89 88 88 92 96 100 98 97 95 98 101 105 101 92 84 79 81 83 85 87 88 90 86 81 76 77 79 81 85 90 94 95 92 88 85 85 85 85 87 88 89 90 91 93 93 92 92 90 86 83 80 79 79 78 79 79 80 79 81 81 82 82 84 81 76 70 67 70 73 77 75 72 70 69 67 66 69 72 77 77 76 74 72 70 68 67 72 77 83 81 78 75 71 68 65 63 63 64 65 68 72 76 80 86 91 88 84 79 76 74 72 69 66 62 60 66 72 78 73 68 64 61 58 56 56 59 62 64 66 67 69 71 74 78 72 67 61 59 57 55 50 43 35 31 33 36 38 39 40 41 44 46 48 47 43 41 40 42 45 46 45 45 44 41 39 37 38 40 42 41 38 35 33 31 28 27 31 34 38 38 38 38 36 34 31 32 35 37 39 40 40 40 41 41 41 40 38 36 35 35 36 
+63 64 65 64 60 57 54 55 56 56 55 54 53 55 59 62 64 65 66 65 62 61 58 57 56 56 55 55 55 52 48 45 43 44 45 46 47 49 51 51 52 52 47 43 37 40 46 50 52 52 54 53 48 44 41 46 51 55 54 52 50 48 48 47 46 48 49 50 50 51 52 52 52 53 58 64 69 69 67 64 62 61 59 60 66 73 81 81 82 83 82 81 78 81 83 85 87 86 85 85 86 89 90 89 87 85 82 80 77 76 76 76 75 76 76 75 71 68 64 63 61 59 58 58 56 55 54 52 51 48 45 43 42 40 39 42 46 49 49 48 46 47 49 51 55 60 65 69 69 68 68 70 72 74 77 81 84 90 97 102 108 109 109 109 107 105 102 109 113 120 110 98 86 81 80 80 79 79 80 82 81 80 79 81 85 86 82 76 69 69 73 78 83 87 92 94 91 88 85 87 91 95 92 86 82 82 86 91 93 93 93 91 87 83 79 85 91 96 95 91 87 87 91 95 96 95 93 90 83 77 70 78 85 93 92 88 85 86 89 92 94 94 94 92 93 94 94 92 90 89 89 90 91 92 93 94 93 88 84 81 87 94 102 100 97 95 98 103 107 103 93 84 79 81 83 85 87 87 87 84 82 79 82 86 91 95 97 98 97 92 86 82 82 85 86 85 85 84 86 90 94 92 90 88 84 82 79 77 77 76 76 76 76 76 78 81 84 83 83 81 79 74 69 65 70 74 78 72 67 61 62 67 71 71 72 71 71 71 70 69 68 67 66 71 76 81 81 77 74 71 67 64 62 65 66 69 69 69 68 73 76 82 79 77 74 71 69 66 63 62 60 60 66 72 78 74 70 67 64 61 57 55 56 55 55 57 59 61 64 68 70 66 61 56 54 53 51 48 42 36 32 34 34 35 36 36 36 38 40 43 42 39 38 39 42 45 48 47 45 43 41 39 36 37 39 40 39 38 36 34 31 30 29 33 36 38 38 37 37 38 38 38 40 42 44 46 46 45 45 47 50 52 48 42 37 37 39 42 
+70 72 74 74 71 69 66 65 65 64 61 60 59 61 65 68 70 71 71 71 71 71 69 65 62 59 55 52 49 48 48 48 45 43 40 40 41 43 44 46 48 48 45 41 37 39 42 46 48 51 53 53 49 46 44 47 50 53 52 51 50 49 47 46 46 50 54 56 56 56 55 53 51 49 56 63 70 70 68 66 65 65 65 65 69 71 75 75 77 77 77 78 77 78 77 78 78 79 77 77 79 80 80 78 75 73 72 73 72 70 67 64 64 66 67 67 62 58 53 52 51 49 49 49 48 47 45 43 41 40 39 38 39 40 41 42 44 45 46 47 47 50 53 57 60 64 67 70 70 70 71 71 72 73 77 81 85 90 97 103 106 107 109 108 107 106 104 109 116 120 113 102 92 83 75 68 65 68 72 75 78 81 84 84 84 85 83 82 80 81 83 87 87 87 88 88 91 91 92 94 96 98 93 89 83 83 89 94 96 95 93 92 88 84 80 84 86 88 89 90 90 91 92 93 93 91 89 87 83 80 76 82 87 93 94 94 95 94 93 92 91 91 90 89 92 95 96 90 84 79 80 83 86 88 90 91 92 89 85 83 87 91 94 96 97 96 98 98 99 98 92 87 85 88 91 94 89 84 80 81 83 84 86 88 90 92 93 95 93 86 79 74 80 85 90 87 82 77 80 83 87 87 83 79 76 76 76 74 73 72 72 72 72 73 76 81 85 86 83 80 76 72 67 65 69 74 78 70 62 54 59 65 71 73 71 67 65 65 66 65 65 64 62 67 72 78 77 74 72 69 66 63 61 64 65 67 70 73 76 81 87 91 93 93 92 88 83 79 74 70 66 61 62 61 60 59 59 58 58 57 55 53 49 45 42 45 48 51 54 57 59 57 54 51 50 49 48 46 42 38 35 35 35 34 35 36 38 39 40 41 41 40 39 40 43 45 47 45 43 40 40 40 39 39 39 38 38 37 36 36 37 39 41 40 38 37 37 37 37 39 42 45 47 49 50 50 49 47 47 50 52 56 53 49 47 49 52 54 
+78 80 83 83 81 79 77 76 75 73 75 74 75 75 75 75 74 71 70 68 66 64 63 62 60 59 56 53 49 49 49 50 47 43 40 38 38 38 40 42 44 45 42 40 38 38 39 41 44 48 52 53 52 50 48 49 50 51 49 48 46 47 48 50 52 55 58 60 59 59 58 54 51 47 54 62 70 69 68 66 65 65 65 65 68 70 72 72 73 73 74 74 75 75 73 71 71 70 70 70 70 70 69 66 61 57 59 62 64 61 55 50 50 55 60 62 58 53 49 47 43 40 42 45 47 45 42 38 37 38 39 40 38 37 36 39 42 45 45 45 45 47 49 51 54 57 61 64 65 66 66 67 66 65 68 70 74 79 86 93 98 100 103 105 104 103 103 105 109 113 107 99 90 83 73 64 62 65 70 74 78 82 86 84 81 79 81 84 86 88 90 91 91 88 86 85 89 93 97 98 99 102 97 91 84 85 91 97 98 96 93 92 88 86 83 83 82 81 85 88 93 94 94 91 91 88 86 84 83 82 82 85 89 92 96 100 103 101 98 92 89 87 86 86 90 94 97 88 79 71 72 77 81 85 87 89 89 88 87 86 87 88 91 93 95 97 97 96 95 93 91 88 88 92 95 97 90 83 75 79 83 86 88 89 91 91 91 91 87 82 77 73 79 84 91 86 80 75 76 80 85 84 81 77 75 73 72 71 71 72 72 72 70 70 70 72 74 75 77 79 78 76 74 72 73 73 73 69 65 61 61 64 67 67 66 64 64 63 62 60 58 57 54 59 67 73 73 70 68 65 63 61 59 61 62 64 70 78 84 91 96 102 104 106 108 104 97 91 84 78 72 66 62 57 53 53 54 54 54 54 54 51 46 40 38 41 44 48 51 54 58 57 56 54 52 51 49 47 44 43 41 39 37 36 39 41 45 45 44 42 42 42 41 42 44 45 46 43 40 38 39 40 42 40 39 37 36 36 36 37 39 41 43 40 37 34 35 37 39 39 39 38 38 39 41 41 41 42 42 45 48 50 54 59 63 66 67 68 
+88 92 97 95 92 89 86 83 81 80 80 81 83 81 78 77 74 71 68 63 59 55 53 55 58 60 57 55 52 52 51 51 50 49 48 46 43 41 40 44 47 50 47 44 41 41 42 43 45 49 53 55 52 52 50 48 48 47 47 46 45 47 50 53 56 59 62 63 62 61 60 55 50 45 53 61 69 70 67 65 63 62 61 62 65 67 70 71 72 72 71 71 70 68 65 63 63 66 69 70 64 60 57 57 58 58 59 60 60 59 55 51 52 55 59 60 55 51 47 44 41 38 39 42 45 43 40 36 35 37 40 40 37 34 32 36 40 44 44 44 44 43 45 45 47 51 53 57 58 60 61 59 58 56 55 56 56 61 68 76 84 88 92 97 98 99 100 98 97 96 93 86 82 77 73 69 69 75 80 84 85 85 86 79 72 66 70 77 84 88 88 91 90 88 85 85 87 89 91 95 99 103 99 93 86 87 91 96 97 95 92 91 92 93 93 89 86 82 83 87 92 92 92 92 91 88 84 82 82 82 83 85 87 90 92 95 96 95 92 90 87 82 77 75 82 88 95 89 81 73 73 78 81 84 84 85 85 85 85 85 89 92 96 95 95 94 93 94 94 93 89 87 85 86 88 88 84 81 78 79 82 83 86 90 94 93 88 83 80 79 80 80 82 86 89 84 77 71 73 77 83 83 79 77 74 71 69 67 69 72 75 72 69 66 64 64 63 64 71 76 80 80 80 79 76 71 68 67 67 68 67 66 65 65 64 64 63 62 60 61 59 57 55 59 65 70 71 69 67 66 67 68 68 69 71 72 74 76 79 84 90 97 98 99 99 98 96 95 92 88 82 77 72 66 60 58 58 56 55 53 52 49 44 40 36 40 43 46 49 53 57 57 56 56 55 54 51 50 49 48 47 45 43 41 44 46 48 47 45 43 42 41 40 39 39 39 39 38 37 36 37 37 38 37 36 35 35 36 36 37 38 38 38 36 33 30 33 36 40 39 35 31 30 31 33 34 36 38 39 40 42 43 48 54 60 63 64 65 
+99 105 110 109 103 98 93 88 85 81 79 76 75 69 64 59 60 61 62 61 58 56 55 58 62 63 60 56 52 52 52 53 53 52 52 51 47 43 42 47 52 55 51 47 44 45 46 47 49 52 54 55 53 51 48 46 43 42 45 48 50 50 49 49 52 56 60 60 58 56 54 52 49 47 53 59 66 65 63 61 59 60 59 61 65 68 71 71 72 72 71 67 66 63 60 57 58 63 70 69 59 50 44 50 57 62 61 59 59 59 60 61 62 62 63 62 56 51 46 46 45 44 43 43 42 41 39 38 37 38 40 39 36 33 31 37 43 49 47 44 42 42 44 46 49 51 54 56 58 60 61 61 62 62 59 57 54 60 69 78 85 90 95 99 100 102 102 99 97 93 88 81 75 73 74 74 75 80 83 87 87 86 86 76 67 58 64 73 81 85 87 87 87 85 84 84 84 85 84 90 95 102 98 94 89 90 92 95 95 93 91 90 95 97 101 95 89 83 83 87 89 91 91 93 91 87 83 80 81 82 83 84 86 88 88 89 90 90 88 87 83 78 71 69 77 85 93 87 82 75 76 79 81 82 81 81 81 82 82 85 89 94 100 97 93 91 90 92 94 93 91 87 85 84 83 81 80 79 77 77 78 78 81 88 94 94 88 81 78 79 81 81 83 84 85 82 79 76 76 76 77 77 75 74 73 71 70 68 71 73 74 71 68 64 65 67 71 73 75 77 80 79 79 78 71 65 58 64 71 78 79 77 75 72 68 63 60 63 64 67 67 66 66 68 69 71 70 69 68 70 73 77 81 80 82 82 80 76 73 77 83 90 94 94 95 98 100 103 105 101 101 98 91 83 75 72 71 70 67 64 58 54 50 46 42 45 47 50 54 58 61 62 62 61 62 62 62 62 59 56 53 53 52 52 50 49 47 45 44 42 41 40 38 36 34 32 30 31 33 35 35 35 36 36 36 36 37 38 39 38 37 36 34 33 33 33 34 34 35 35 35 36 37 37 37 37 37 36 36 35 35 33 37 41 46 50 54 59 
+97 103 108 107 101 98 92 87 82 77 73 68 64 58 52 46 48 53 57 59 58 57 58 62 67 69 62 57 50 51 53 54 53 51 50 49 47 46 47 50 53 56 53 49 47 47 49 50 51 52 53 52 50 48 47 44 42 41 45 50 54 52 49 45 48 53 58 59 55 50 48 48 48 48 52 56 60 59 57 56 57 59 61 64 69 73 77 76 75 74 71 68 64 65 65 65 67 70 73 72 66 59 54 58 62 67 65 63 62 61 60 59 59 60 60 58 54 49 45 45 45 45 44 45 44 42 41 39 39 39 39 39 36 33 32 39 46 53 49 44 39 40 44 48 50 53 55 57 59 60 61 66 69 73 69 63 58 64 76 87 95 99 103 107 109 110 111 107 103 99 89 80 72 71 74 77 78 79 80 82 84 86 88 78 69 61 65 72 78 81 81 81 81 81 83 84 83 82 82 83 85 85 87 89 91 92 93 94 94 92 91 90 91 92 93 91 89 86 88 91 95 96 96 96 94 88 83 79 80 80 80 82 84 84 86 89 91 91 89 87 86 84 82 81 83 84 85 84 84 83 83 82 81 80 78 75 75 77 80 83 90 95 101 97 94 90 90 93 96 98 96 95 92 88 83 79 77 75 75 73 71 69 74 82 89 92 88 85 82 80 78 77 78 80 81 82 84 85 81 76 70 67 69 70 72 72 72 72 72 74 73 70 67 63 66 73 79 82 81 79 77 77 76 76 67 59 50 60 72 86 87 84 81 77 71 65 62 65 67 69 70 69 70 70 70 71 72 73 73 76 79 81 84 89 93 97 95 93 90 94 100 106 112 118 126 131 132 133 133 136 140 142 129 115 102 97 97 97 92 83 73 65 59 55 51 52 54 54 58 62 66 67 67 67 67 69 70 69 65 61 57 57 57 57 53 49 46 44 44 43 43 41 40 38 36 34 32 34 37 39 39 38 37 39 41 44 45 44 42 40 37 33 30 33 35 39 37 33 29 30 35 40 43 42 40 39 38 37 35 34 33 33 35 37 40 44 49 55 
+96 99 104 101 97 94 88 82 76 69 62 55 49 48 47 44 47 50 53 53 51 49 51 55 59 61 58 53 49 50 51 52 51 50 49 49 49 50 51 53 55 57 55 52 50 51 52 53 52 51 49 49 47 45 45 45 45 45 49 53 58 53 48 43 45 49 54 56 57 59 57 54 51 49 50 51 53 53 52 52 55 58 61 65 69 73 76 75 74 73 70 67 63 66 69 73 75 75 78 76 73 69 66 67 69 70 69 67 67 62 56 52 51 52 54 53 49 45 41 40 39 38 43 48 52 49 44 40 38 39 39 39 39 39 40 42 46 48 47 44 42 43 44 45 47 50 52 54 55 56 57 60 64 67 68 67 67 73 82 90 96 103 108 112 112 112 110 106 101 97 89 80 72 72 76 79 81 80 78 78 81 83 85 77 69 61 64 70 75 76 75 74 75 78 80 82 81 81 80 78 76 75 80 87 94 95 94 92 93 92 92 90 89 88 87 87 88 90 92 96 98 99 98 98 95 89 84 79 79 79 79 80 81 83 85 88 91 91 89 87 86 90 91 92 87 83 78 82 86 90 89 85 83 79 76 73 73 75 79 82 87 93 99 96 92 88 88 91 92 94 95 98 97 90 82 77 76 75 74 72 70 68 73 82 90 92 90 87 84 82 80 78 78 78 78 82 85 88 84 79 71 70 71 73 73 75 76 76 78 79 80 77 73 69 71 78 83 84 83 81 80 78 76 75 69 63 56 63 73 83 84 83 80 77 74 72 70 69 68 66 66 66 65 67 70 73 75 78 81 83 83 85 87 94 104 112 111 110 109 112 117 120 131 140 154 159 158 158 158 162 167 170 155 140 125 119 116 112 104 93 83 72 67 63 58 56 55 54 56 59 61 63 63 63 64 61 59 57 57 55 55 54 53 53 49 46 43 43 44 45 45 44 42 41 39 37 35 37 40 43 42 40 38 39 42 46 47 45 43 40 37 33 30 33 36 40 38 36 33 34 38 41 43 43 42 42 41 39 38 38 39 40 40 39 38 40 46 52 
+80 85 89 86 83 79 75 71 66 62 56 51 44 44 44 44 46 47 49 48 45 42 42 45 48 50 51 50 49 48 47 46 48 50 52 54 55 57 57 58 57 57 53 50 46 49 51 53 53 51 50 48 46 45 44 45 46 47 50 54 57 53 47 41 43 47 50 54 60 66 67 61 55 49 48 46 45 47 48 50 53 56 59 63 65 67 69 67 65 63 64 64 64 67 71 74 76 79 81 82 80 79 78 81 83 85 83 82 81 74 67 58 56 57 58 57 51 46 42 41 39 37 43 50 56 53 47 41 39 39 40 41 42 44 45 44 44 44 44 45 45 45 44 42 43 47 50 53 52 51 50 52 55 57 65 71 78 83 85 89 95 102 110 115 109 106 103 99 94 90 86 82 78 77 79 80 81 79 78 77 76 77 77 71 64 58 61 66 71 72 71 70 71 75 77 80 81 82 83 82 81 79 84 90 96 97 94 94 92 92 91 91 89 88 87 87 87 88 90 96 99 99 96 93 90 88 85 83 84 85 87 87 87 87 88 89 90 91 91 91 89 89 86 85 84 83 82 85 89 93 92 92 89 87 82 79 77 79 81 83 86 89 92 90 89 88 84 81 77 78 86 92 95 89 82 77 76 77 77 76 75 75 81 87 94 96 92 88 85 84 84 83 81 79 76 79 83 88 86 82 78 75 75 76 76 77 81 82 84 86 88 85 81 78 79 83 86 88 86 84 81 79 76 73 69 64 62 66 73 81 82 80 79 78 78 78 78 75 73 70 71 72 72 73 75 77 78 81 83 85 89 92 96 102 108 115 117 119 122 127 133 140 149 157 165 173 172 172 172 170 169 164 157 151 144 136 126 117 106 97 87 80 74 69 65 60 56 51 52 54 56 58 59 60 59 55 51 48 50 52 53 51 49 47 46 45 45 45 45 44 43 43 43 43 40 37 33 36 40 43 41 39 35 35 36 38 39 38 39 39 37 34 32 34 37 39 40 39 38 39 40 42 43 44 44 45 43 42 40 41 42 43 42 42 41 43 47 50 
+65 68 71 69 66 61 60 57 56 55 56 56 56 53 50 48 47 46 45 44 44 43 43 42 43 44 45 47 48 47 47 46 49 52 55 57 59 60 60 60 58 56 52 48 43 47 51 54 54 53 52 50 48 45 45 45 45 46 48 50 51 49 46 43 44 47 49 53 57 60 62 60 58 56 56 55 55 54 53 51 53 56 58 60 60 62 62 62 60 61 62 65 66 69 72 76 79 82 85 87 87 88 91 94 99 102 100 98 95 89 80 71 68 68 67 65 58 52 47 45 43 42 46 51 55 52 48 44 42 43 44 43 43 43 43 43 44 45 47 50 53 50 47 44 45 50 54 57 58 58 59 61 64 66 71 75 79 83 85 88 93 98 104 107 104 99 96 92 88 85 83 82 80 80 80 80 79 79 77 77 76 75 74 68 64 60 62 66 70 71 71 72 73 75 77 80 83 86 87 85 83 83 87 93 99 99 96 93 90 89 89 89 87 88 87 86 86 85 89 95 100 99 94 88 86 86 87 86 89 91 94 93 92 91 91 90 89 90 91 93 92 88 83 80 81 82 83 87 90 95 95 94 93 91 88 84 81 82 82 83 84 85 87 89 88 88 83 76 69 71 79 87 92 86 81 77 77 78 79 81 82 84 87 91 94 95 92 89 86 85 85 84 82 80 78 79 81 82 81 78 76 75 75 76 77 80 84 87 85 82 80 78 77 75 75 77 79 80 79 78 78 75 73 71 69 67 65 69 74 79 82 81 79 80 82 84 86 84 82 81 83 85 87 86 84 82 81 82 83 85 92 100 105 109 113 115 121 128 134 140 147 156 162 168 174 178 177 176 173 169 160 156 151 151 150 141 129 118 108 102 95 88 85 80 76 71 66 61 59 58 57 57 57 57 55 52 50 48 49 50 51 47 44 39 42 46 51 50 46 42 39 42 44 45 41 36 32 35 40 43 42 38 35 34 34 34 34 36 37 38 36 36 35 37 39 41 41 40 40 40 43 45 48 47 46 45 44 42 41 41 42 42 43 45 48 49 49 49 
+63 66 69 66 63 59 57 57 56 56 57 58 59 55 53 49 47 44 42 42 43 45 44 40 38 38 40 44 47 48 50 51 53 56 58 56 55 54 53 55 56 56 51 47 43 46 49 52 53 54 54 53 51 49 49 49 50 49 49 49 49 47 45 43 44 46 48 50 52 55 57 60 62 63 66 67 70 65 60 55 55 56 58 58 57 55 57 61 64 67 69 71 74 74 75 76 81 87 93 95 95 95 96 99 101 104 103 103 102 96 89 83 79 77 74 70 65 59 55 52 51 49 51 54 56 53 49 46 44 45 45 45 44 43 42 43 44 46 49 53 58 55 50 46 47 52 58 62 65 66 69 73 76 79 78 78 77 81 84 87 90 91 93 94 93 92 90 86 83 81 81 81 80 79 77 76 75 77 77 77 77 77 77 74 71 67 69 72 75 77 79 83 83 83 83 84 89 93 98 91 85 81 86 95 103 102 95 88 85 83 81 81 82 85 86 82 79 76 82 89 97 96 90 83 82 84 86 88 91 93 95 95 95 94 93 91 89 88 89 90 89 86 84 81 78 76 73 82 89 98 96 92 87 84 84 84 84 84 83 83 84 87 89 90 92 93 89 81 74 74 78 84 87 83 79 76 78 80 81 85 88 92 93 92 90 89 88 87 85 85 84 82 81 81 81 79 77 74 73 71 70 71 74 76 78 83 86 91 84 76 68 68 70 71 72 71 72 72 72 73 73 71 70 69 68 68 68 71 74 78 79 80 79 82 85 89 92 92 92 92 95 97 101 98 95 91 89 87 84 84 88 92 96 97 97 98 106 115 124 130 136 140 145 147 149 149 150 148 148 141 138 133 134 137 140 134 126 118 112 108 104 100 97 92 88 82 77 72 68 63 59 57 55 54 53 52 51 51 52 53 54 51 47 43 45 48 51 50 48 45 45 46 47 47 45 44 43 43 43 43 42 41 40 40 39 38 37 37 35 34 36 38 40 41 41 42 42 41 40 41 45 49 51 48 46 44 43 42 42 42 42 43 45 49 52 55 57 60 
+61 65 68 66 65 61 62 63 64 63 58 55 52 50 47 45 45 45 45 45 45 45 44 45 44 44 47 50 51 51 50 50 54 57 60 58 55 52 52 55 58 57 52 46 42 44 47 50 52 54 56 56 56 55 55 56 57 57 56 55 53 48 43 39 40 43 45 48 51 53 55 57 57 59 62 64 66 64 62 59 58 58 58 58 56 54 55 59 64 69 71 74 77 77 77 77 84 91 99 102 102 102 101 103 104 105 105 106 107 103 100 95 90 85 80 75 72 67 63 61 59 57 58 60 62 57 51 45 43 43 43 43 44 45 46 47 47 48 49 50 51 49 47 45 48 53 59 62 63 63 64 69 73 77 75 73 70 73 77 81 82 84 84 84 83 83 82 80 78 76 77 80 80 79 76 74 75 77 79 81 80 80 79 77 74 72 74 75 77 81 84 88 90 87 85 85 90 95 100 93 87 80 87 95 103 101 91 84 78 77 75 75 78 81 84 80 74 71 77 84 92 91 86 79 78 82 86 90 92 94 95 96 97 96 94 91 88 85 86 85 85 85 85 84 77 73 66 77 87 97 95 89 83 81 81 84 85 85 86 86 87 89 90 91 93 94 90 85 79 77 80 82 84 82 80 78 80 82 83 86 89 92 91 88 85 83 82 82 82 83 82 83 83 83 83 81 80 79 78 76 73 74 77 80 83 83 82 82 76 71 65 66 69 72 72 70 68 68 71 75 77 72 67 62 64 67 69 72 72 74 76 77 79 81 87 92 96 99 100 101 104 107 109 109 106 102 98 93 87 83 83 83 83 81 80 78 89 103 114 121 123 126 127 127 127 126 126 125 126 126 124 124 127 127 130 125 117 110 103 99 93 90 86 81 77 75 74 73 71 71 71 70 67 64 62 62 61 61 63 66 68 66 62 59 56 52 48 46 49 52 53 52 50 49 50 52 53 50 46 42 41 43 45 45 43 41 39 37 36 33 36 38 40 39 39 37 37 37 36 37 39 42 43 41 39 37 38 40 41 42 44 45 48 52 56 60 66 72 
+74 78 80 80 77 77 75 74 73 69 64 58 53 51 47 45 46 47 49 48 46 45 46 49 51 53 56 59 60 54 49 44 51 56 61 63 63 63 65 67 70 68 62 53 48 48 49 50 51 52 53 54 55 55 56 57 57 58 56 55 53 48 43 37 39 41 43 46 49 52 53 54 54 54 56 58 59 60 61 62 62 61 60 60 59 58 58 58 60 62 65 69 73 73 74 74 79 84 89 92 93 94 95 99 102 104 102 101 100 100 99 99 95 89 84 79 77 73 71 67 63 59 61 62 63 58 51 44 42 41 41 41 43 45 47 47 48 48 47 45 43 44 45 45 49 54 59 62 60 58 58 62 66 71 68 64 61 64 68 72 74 73 73 73 73 73 73 72 72 71 74 78 81 79 76 74 76 81 86 88 86 82 79 76 73 71 72 75 76 79 82 85 85 84 81 81 83 86 90 90 88 87 89 88 91 87 82 78 75 75 76 76 78 79 81 80 79 78 78 81 82 81 78 74 74 81 87 91 92 94 94 94 92 91 90 88 86 83 80 75 75 82 89 94 85 77 68 74 81 88 90 90 91 88 82 77 77 82 90 95 94 94 92 90 89 87 85 83 81 81 82 83 83 83 82 83 82 83 84 83 84 83 82 80 79 77 76 75 75 79 81 85 84 83 83 84 87 89 87 83 80 79 82 87 89 83 77 69 67 64 61 64 69 73 72 68 65 65 71 76 80 73 65 57 62 67 71 73 74 74 76 78 81 84 90 97 102 103 105 107 110 113 116 113 109 103 98 93 88 83 80 76 72 74 77 80 88 97 106 110 111 113 113 114 115 116 118 119 122 127 132 139 134 127 121 113 104 96 88 81 74 67 65 63 60 64 68 72 76 79 82 81 76 73 70 69 69 70 71 73 74 72 69 67 61 54 47 45 49 54 57 54 50 48 47 47 47 44 40 35 36 41 46 48 46 43 40 38 37 35 36 37 38 37 34 32 31 31 32 33 34 36 37 36 35 34 37 41 44 46 47 47 49 52 54 56 59 61 
+88 92 95 95 95 96 91 87 82 78 74 70 65 60 56 52 54 57 59 57 55 53 53 56 58 60 62 64 64 58 53 49 54 59 64 67 69 71 74 78 80 78 70 61 54 53 51 50 51 50 50 51 51 52 52 52 53 52 50 48 47 46 44 43 44 45 46 47 48 48 49 49 50 51 52 54 56 57 59 60 61 61 61 61 60 59 58 58 58 57 61 64 67 69 69 71 74 77 80 82 84 86 89 95 99 102 98 95 91 94 97 100 97 92 87 83 82 81 78 70 63 57 57 58 59 54 48 42 40 40 40 40 39 40 39 40 41 41 41 42 41 43 45 47 51 53 57 58 56 54 53 55 56 58 59 59 59 63 68 72 75 78 80 81 83 83 84 83 80 79 79 79 80 78 75 72 74 80 86 89 86 82 78 77 76 73 74 76 77 79 80 82 82 79 77 76 78 79 81 83 87 90 88 85 81 79 76 73 72 74 76 78 78 79 79 80 83 85 82 79 76 74 74 74 75 81 86 90 91 92 94 92 90 88 87 87 87 83 76 69 69 81 93 102 91 80 71 74 78 82 86 90 94 91 83 75 72 83 94 103 99 95 92 89 86 82 82 81 81 81 82 83 84 85 85 85 85 84 82 81 79 77 77 77 76 76 75 75 76 78 80 81 81 81 81 82 85 87 87 86 84 84 84 84 83 79 76 73 69 67 64 66 70 74 75 74 74 73 77 79 80 77 72 67 71 74 77 80 82 85 86 88 89 93 97 101 105 107 108 109 114 117 121 117 107 98 92 90 88 84 76 69 61 68 75 82 88 93 97 99 100 100 102 104 107 110 113 118 122 132 140 149 145 133 123 115 109 104 96 88 78 69 68 67 66 68 69 70 71 72 74 72 72 71 70 72 73 73 72 70 68 67 67 68 63 55 46 44 49 55 59 55 51 46 44 43 42 38 34 30 33 40 46 49 46 43 40 39 38 37 37 38 39 38 36 34 33 35 35 36 38 39 41 40 40 39 43 46 50 51 50 49 49 50 50 51 49 47 
+90 92 96 98 100 102 98 94 91 87 82 80 75 71 65 62 64 65 68 66 62 60 61 63 64 66 66 67 67 65 62 60 63 66 69 70 71 73 77 81 86 83 73 63 55 53 50 47 46 45 44 46 48 50 52 52 52 51 49 47 45 46 48 49 49 50 49 49 47 45 45 45 46 47 49 51 53 54 55 56 58 60 62 61 59 57 56 56 57 57 58 60 61 62 65 67 69 72 74 76 76 78 81 85 89 92 89 85 81 84 88 90 90 87 83 82 81 80 77 70 63 57 56 55 55 50 46 42 40 39 38 37 37 36 36 36 36 36 38 39 40 43 46 49 52 53 54 53 53 51 49 47 46 44 49 55 60 65 70 75 80 86 91 96 100 104 106 102 98 93 88 83 78 75 73 70 72 77 83 85 83 81 78 78 78 78 78 80 80 80 81 81 79 76 73 71 73 73 75 77 79 80 81 84 84 82 80 77 77 77 77 78 81 83 85 87 89 91 88 84 81 80 81 84 84 83 84 83 86 90 94 92 91 90 91 90 91 88 80 73 73 83 94 101 94 84 77 78 80 82 84 87 89 88 84 80 79 88 95 102 98 92 87 85 85 84 82 80 77 78 81 84 86 86 85 85 83 83 81 80 78 76 77 78 79 81 81 82 83 80 77 74 76 76 77 78 79 79 82 86 89 90 84 79 75 75 76 77 74 72 69 70 73 75 77 79 82 82 82 82 81 78 77 74 77 79 82 85 88 90 92 95 98 101 103 104 107 109 111 114 116 118 119 116 107 98 92 90 87 83 76 67 59 67 75 82 85 86 87 89 91 94 98 107 115 124 126 129 132 141 148 159 154 143 133 127 126 124 120 107 93 81 79 78 76 74 70 68 66 66 65 66 68 70 72 74 74 75 72 68 64 63 63 63 58 50 43 40 45 50 52 48 44 41 42 43 43 42 40 38 39 42 45 46 44 42 41 40 40 40 40 41 42 41 39 38 38 38 39 40 41 42 43 43 43 43 46 49 52 52 49 47 46 46 47 48 50 53 
+91 93 96 99 102 104 103 101 97 93 90 86 83 80 77 74 72 70 70 65 61 58 61 65 69 69 67 64 65 67 69 70 71 71 72 73 75 75 79 85 90 87 77 66 57 52 48 43 41 39 37 41 45 49 53 55 56 57 53 50 49 51 54 56 55 54 53 50 48 45 46 47 49 50 49 50 50 51 53 54 57 60 62 62 60 58 57 58 59 59 57 57 56 58 60 62 65 67 69 71 70 71 72 76 79 82 77 74 71 74 77 81 80 79 77 77 75 75 74 68 64 59 56 52 50 48 45 43 40 37 34 35 38 41 43 42 41 41 42 44 46 46 45 45 47 50 53 54 52 50 49 50 52 54 58 63 68 71 75 80 83 87 91 95 98 102 104 101 98 96 91 85 81 78 76 73 74 77 81 82 77 75 73 75 78 81 82 83 83 84 83 82 79 76 71 69 70 71 71 73 74 75 79 82 85 83 81 78 78 78 79 81 85 88 92 94 95 95 93 89 84 84 88 90 91 86 81 80 84 89 94 93 93 92 92 94 96 92 85 77 76 85 95 101 94 87 81 81 83 84 84 84 84 83 84 83 86 91 97 99 94 89 83 83 84 84 83 80 77 77 81 85 87 87 86 86 85 84 84 81 78 77 76 77 79 79 80 80 80 76 74 71 72 75 77 79 80 81 84 87 90 90 81 75 70 71 74 76 73 70 66 68 71 74 76 77 78 80 80 81 81 79 77 75 77 78 80 83 86 89 93 99 104 108 107 105 103 108 114 120 120 118 119 113 105 100 94 91 88 84 75 66 58 66 74 83 82 80 77 80 84 90 96 110 124 136 137 140 142 150 155 163 158 151 142 137 137 136 131 119 108 96 91 86 81 76 70 66 65 67 69 70 72 74 75 75 75 74 70 66 62 58 56 53 49 43 38 35 38 41 43 40 38 36 39 42 45 45 44 43 42 42 43 43 42 40 39 40 41 41 42 42 43 41 40 38 37 37 37 37 38 39 41 41 41 41 43 45 48 47 45 42 41 43 44 46 53 60 
+95 96 97 97 99 101 99 96 95 93 92 91 90 88 85 84 79 74 70 66 61 56 60 67 73 72 66 60 61 67 74 78 76 76 75 76 78 80 82 86 90 87 79 70 62 56 52 47 47 46 45 46 48 50 51 53 55 54 51 48 47 50 54 57 57 56 54 52 49 46 47 49 53 53 51 48 46 49 51 53 56 58 62 63 62 63 63 63 64 63 61 57 55 56 58 60 62 65 68 67 65 61 62 64 68 70 71 71 71 72 71 72 71 71 70 70 68 68 66 63 59 57 55 53 51 48 45 42 40 37 33 35 39 44 47 46 45 44 46 48 50 48 45 43 45 49 53 54 51 48 48 54 60 66 70 74 76 80 81 84 85 87 88 87 89 90 91 91 91 91 90 87 86 85 83 81 81 82 82 78 72 64 59 67 74 80 84 87 90 89 86 83 81 77 73 70 71 72 73 74 76 77 78 79 80 79 76 73 74 79 84 89 93 98 102 100 98 96 93 90 85 85 86 88 88 86 85 85 89 92 96 94 92 90 93 97 102 99 90 81 78 86 92 97 91 86 80 82 85 89 87 83 80 78 81 84 86 89 90 92 89 86 83 84 84 85 84 82 81 80 84 86 88 89 90 90 90 89 88 84 82 78 77 77 76 75 73 71 70 69 69 68 72 75 78 81 84 85 88 89 89 87 79 72 64 69 72 75 72 67 63 65 69 73 76 75 75 76 77 79 82 80 78 76 77 79 81 84 86 90 93 101 108 112 109 105 101 108 113 119 116 113 110 106 100 97 92 87 81 76 73 71 69 72 76 79 81 81 84 86 92 97 103 117 131 144 147 151 154 157 161 163 161 155 153 149 144 141 136 128 121 114 105 94 84 77 70 63 63 67 71 74 74 75 76 75 73 72 68 63 60 56 54 51 48 42 37 34 36 38 39 37 36 34 37 39 42 41 39 36 36 37 39 41 39 38 37 39 40 42 43 43 43 42 40 37 35 35 34 34 36 37 38 38 38 38 40 42 44 44 44 43 43 44 44 44 47 49 
+96 96 97 97 94 95 92 90 87 90 92 95 96 93 93 90 85 80 74 70 66 62 64 66 70 68 64 59 60 67 74 78 79 79 79 79 81 82 83 86 89 86 80 74 68 61 56 52 54 56 57 55 53 51 50 48 47 46 43 41 40 42 45 47 49 51 52 52 50 49 49 50 51 51 47 44 42 44 47 49 53 57 61 62 62 64 64 63 63 62 60 57 55 57 58 59 62 64 66 63 59 55 53 54 56 60 64 69 73 70 66 63 63 63 63 62 60 58 56 55 53 52 54 55 56 51 46 40 39 40 39 40 41 42 43 44 44 44 46 48 50 52 54 56 57 59 61 62 61 61 61 65 68 73 76 79 83 81 79 77 76 77 78 79 80 81 82 84 85 85 85 84 83 82 83 83 83 83 82 79 72 65 59 65 71 78 82 87 90 89 86 82 80 76 74 72 71 71 72 74 77 80 80 79 78 75 72 69 72 81 88 94 98 102 105 101 97 93 91 89 85 86 85 85 86 85 85 87 90 92 96 92 90 87 90 97 104 101 94 87 82 87 90 92 88 84 80 85 88 92 89 84 78 76 80 85 88 88 89 88 86 84 82 83 84 85 85 83 83 83 85 87 88 91 92 94 92 90 88 87 85 83 81 77 74 71 70 69 69 70 70 69 73 77 79 82 84 86 87 84 81 79 76 73 72 76 80 84 79 76 71 71 74 76 76 74 70 70 74 78 82 80 78 75 79 84 87 90 92 95 97 104 109 114 110 105 100 104 109 112 109 105 98 96 94 93 89 81 71 65 70 75 81 80 77 76 78 83 89 94 98 101 109 122 137 147 151 156 160 159 159 157 156 156 155 152 143 136 129 124 120 115 101 86 71 65 60 57 56 58 60 61 64 67 68 68 68 67 65 62 60 58 56 56 52 46 40 35 36 36 36 35 34 33 34 36 39 37 34 32 31 35 37 40 39 38 38 39 39 39 40 41 42 41 40 38 38 38 39 40 38 36 34 35 35 35 37 38 41 43 45 48 49 47 45 42 39 38 
+82 81 79 79 79 79 80 80 80 85 90 95 95 94 92 90 85 79 75 72 70 67 66 65 64 63 61 58 60 64 70 74 79 82 85 84 84 84 84 86 87 86 83 81 76 67 58 52 54 56 59 57 54 51 49 46 43 42 40 39 38 40 41 42 45 49 51 52 51 52 51 50 50 48 44 41 38 40 42 43 50 56 62 63 62 61 60 58 56 55 55 55 56 60 64 68 65 63 61 59 58 56 57 58 59 62 66 69 71 68 64 62 61 61 61 60 59 57 55 54 52 52 56 60 64 57 50 43 42 43 45 43 41 40 39 42 44 46 48 50 51 56 61 67 68 68 68 68 71 73 75 75 76 78 81 85 89 81 74 67 65 66 66 68 71 73 75 77 79 79 79 76 74 76 79 82 83 83 84 82 78 73 71 71 71 71 75 80 84 83 80 78 77 76 76 73 70 66 64 70 77 84 83 80 78 76 74 71 74 82 88 94 93 94 94 89 85 81 81 82 83 83 83 83 83 82 80 81 83 86 89 86 83 81 84 90 95 96 93 90 89 87 84 83 84 85 86 89 90 92 90 88 84 83 85 85 86 88 91 92 88 83 79 80 82 83 85 84 83 84 84 86 87 90 92 94 91 88 86 85 87 89 86 79 73 69 70 73 74 73 74 72 76 77 79 82 83 85 83 77 71 69 73 76 81 85 89 93 89 84 80 78 78 78 76 71 66 65 71 78 84 81 78 75 80 87 92 96 98 101 105 108 112 115 111 106 102 104 109 112 111 110 107 107 107 106 103 95 86 79 81 85 87 84 79 74 75 81 86 91 98 104 113 123 132 142 146 149 153 151 149 146 146 149 151 149 139 129 119 116 114 110 94 75 56 51 49 50 50 50 50 52 55 59 62 62 61 60 58 57 55 55 54 53 51 46 41 37 36 36 34 34 33 33 34 35 36 35 34 33 33 37 40 43 43 43 43 40 38 34 34 36 39 39 40 39 40 42 44 45 40 36 32 32 33 34 36 39 42 44 47 49 50 48 47 45 43 42 
+68 64 60 61 62 62 66 70 75 80 85 90 89 85 81 77 73 68 64 64 63 61 61 60 60 59 57 55 59 64 70 74 77 81 85 86 85 85 85 83 84 84 85 87 82 72 60 52 54 56 58 56 54 52 49 46 43 43 43 43 44 46 47 49 51 52 54 53 51 49 49 50 49 49 49 48 47 46 45 46 50 54 59 57 55 53 52 53 53 53 54 55 57 61 65 71 66 61 56 56 57 59 60 61 63 64 65 68 69 66 64 59 60 61 61 60 60 60 59 57 54 55 62 68 74 67 59 52 49 47 46 43 40 37 37 43 48 53 53 55 56 61 65 70 71 69 69 70 73 76 77 76 75 75 77 79 81 77 73 68 67 67 65 67 68 70 72 74 76 77 76 75 74 76 80 82 82 82 80 81 79 78 77 74 72 69 73 76 79 79 79 77 76 76 76 74 70 65 62 69 77 84 83 81 78 75 74 73 74 80 85 89 87 86 84 82 77 75 77 80 84 85 82 80 80 79 79 78 81 84 87 84 80 77 81 84 88 90 91 93 91 87 83 80 82 85 87 88 89 89 90 90 89 89 87 84 84 88 92 95 89 82 76 77 78 80 80 81 81 82 84 84 85 87 90 91 89 86 83 85 88 91 87 82 75 72 74 75 76 73 71 68 70 70 71 72 74 76 75 74 73 71 72 72 71 75 76 79 78 76 74 74 73 72 72 70 70 71 77 83 89 86 80 77 81 86 92 99 104 111 116 116 115 116 112 108 105 108 114 118 120 124 127 127 126 125 123 115 105 96 97 95 93 87 79 72 74 78 83 90 98 107 116 121 126 132 134 139 142 140 136 133 134 140 142 140 128 113 101 99 96 95 85 76 68 66 64 63 61 59 55 53 55 56 57 53 51 47 46 46 46 46 46 47 46 43 41 39 37 35 33 33 33 34 34 34 34 34 34 34 35 38 41 43 43 43 43 41 38 37 38 40 42 42 42 41 41 41 41 41 39 37 35 36 36 36 38 42 46 49 50 50 51 50 49 49 48 47 
+57 54 52 52 53 55 62 69 76 79 82 84 82 77 71 67 64 61 58 58 57 56 56 55 56 55 53 52 56 64 72 76 77 77 79 80 83 85 81 78 76 75 75 74 72 65 58 53 52 52 51 52 52 52 50 48 47 46 46 46 47 48 50 51 52 53 54 52 50 48 48 48 49 51 55 57 58 55 51 49 50 52 53 50 46 42 44 49 52 56 56 58 59 59 59 60 57 53 50 53 59 63 66 66 67 67 66 65 64 63 62 61 63 64 66 65 63 63 61 59 58 58 63 68 73 66 60 52 50 47 45 42 39 36 37 45 52 58 59 60 60 64 67 72 72 71 70 72 75 78 79 77 74 71 71 71 71 72 73 74 72 70 67 67 67 67 69 71 74 76 77 79 80 80 81 82 81 79 77 75 77 78 78 77 76 74 74 75 77 77 79 80 80 78 76 74 73 73 71 73 74 75 76 76 77 76 74 73 73 75 75 78 79 80 81 81 80 81 84 87 91 90 83 78 76 77 80 82 87 91 96 90 84 78 80 83 88 88 86 85 84 87 89 91 87 83 80 80 81 82 84 89 95 94 88 83 80 85 90 94 88 82 76 75 74 72 73 75 77 78 80 81 83 84 85 87 85 83 82 84 87 88 88 84 81 78 78 77 77 72 66 61 60 59 59 59 61 64 66 71 76 78 72 66 60 61 62 63 66 68 70 70 69 68 69 71 74 77 82 87 92 87 84 79 82 87 93 100 109 117 122 119 117 113 113 113 112 115 119 124 130 138 146 151 147 148 144 134 125 113 112 110 107 102 97 91 89 90 90 91 97 103 108 110 111 113 116 122 126 125 121 120 119 127 132 130 113 96 80 79 77 75 77 80 84 83 80 76 72 66 60 55 54 53 52 47 43 38 38 39 40 41 42 43 43 41 38 36 35 34 34 35 37 39 39 37 36 35 36 37 38 38 39 40 39 38 38 39 41 44 46 46 47 46 45 44 42 40 38 36 36 37 37 38 37 37 39 42 45 47 47 47 47 46 45 45 43 41 
+47 45 45 46 46 49 59 71 80 79 78 79 74 70 65 62 63 63 62 60 58 57 58 60 62 57 53 49 52 60 66 70 71 71 72 74 76 78 77 75 72 70 67 66 63 60 56 53 50 47 45 47 49 53 52 52 52 50 48 47 46 47 47 47 47 46 45 47 49 50 52 53 54 55 55 55 55 54 53 50 52 52 53 50 46 42 44 48 53 56 58 60 61 60 57 55 53 50 48 53 61 68 70 70 70 68 64 61 58 60 62 63 67 69 72 70 67 64 62 62 61 61 61 62 62 57 51 45 43 42 40 40 39 39 41 48 54 59 61 63 64 65 66 66 68 69 69 69 67 65 64 63 63 61 61 60 60 62 66 68 67 65 62 62 63 64 66 71 76 80 82 84 85 85 82 80 79 78 77 76 76 77 78 79 81 81 80 79 78 79 82 83 81 78 75 72 73 74 76 75 73 72 73 73 74 74 74 75 73 72 71 71 73 76 78 80 84 86 89 91 93 89 83 77 74 77 79 82 89 94 101 93 87 78 80 84 87 87 84 80 81 88 95 99 91 82 74 74 75 75 81 88 96 96 88 80 76 82 88 92 88 84 80 77 75 72 73 73 75 76 77 78 79 82 84 86 86 85 84 84 84 84 84 83 80 80 81 82 81 76 70 64 63 63 63 62 61 60 61 65 69 72 71 68 68 68 68 68 70 70 70 71 74 76 78 80 81 82 85 86 88 86 82 78 84 91 98 105 111 118 120 117 114 112 115 119 122 124 126 128 138 151 164 171 170 168 166 153 144 131 128 125 122 118 113 109 105 100 95 93 96 99 100 99 98 95 100 105 109 111 110 109 112 117 122 122 104 88 72 71 70 68 73 77 82 81 79 77 73 66 60 54 52 49 47 45 41 38 38 38 38 38 39 41 41 37 34 31 32 34 35 38 42 44 43 41 38 37 38 39 39 39 38 38 37 37 36 38 40 42 42 41 39 38 36 35 35 33 31 29 31 32 34 35 35 36 37 38 38 39 40 40 41 41 40 39 38 36 
+44 42 42 46 49 53 62 70 80 79 78 76 71 66 61 59 61 63 63 60 58 56 60 64 67 61 54 47 49 53 58 62 63 63 64 62 62 63 69 75 80 77 73 69 66 64 62 58 55 52 49 49 51 52 52 53 53 51 49 47 45 45 45 44 43 42 41 45 49 53 55 57 59 58 55 52 51 52 52 52 54 55 56 54 51 49 49 51 54 57 61 65 66 65 63 61 61 61 60 62 64 67 65 62 59 57 58 58 58 59 60 61 62 65 68 64 60 55 53 54 56 55 54 52 50 47 43 40 39 38 37 38 39 41 44 49 54 58 60 63 64 63 61 60 61 65 68 65 59 54 49 50 50 51 50 49 49 54 57 62 60 58 56 56 57 59 62 71 79 85 88 90 92 88 84 78 78 78 77 78 78 77 77 82 86 89 88 88 85 85 84 83 80 76 72 69 71 72 73 74 75 77 75 74 71 72 73 75 75 76 76 76 74 74 74 80 87 93 90 87 84 82 81 79 77 76 74 76 83 91 100 93 87 82 82 86 88 88 86 83 84 91 97 103 92 81 70 71 74 77 82 86 91 91 85 80 76 80 83 87 86 87 87 86 83 80 79 77 76 75 75 74 74 80 85 89 90 89 88 86 82 77 75 77 78 79 83 86 89 83 77 70 71 71 72 69 64 59 57 59 62 65 69 74 78 76 76 75 73 72 70 74 79 84 88 89 88 88 88 88 86 86 83 82 88 96 104 109 112 116 118 116 115 115 119 127 131 135 136 139 149 158 169 175 175 172 170 159 151 143 138 133 128 122 114 106 102 99 97 95 94 93 91 88 85 82 87 93 98 102 104 106 109 112 115 113 99 84 71 69 67 65 68 73 77 78 78 76 73 66 58 52 50 47 45 42 40 38 38 37 37 38 38 39 38 36 32 30 32 33 34 37 40 43 43 42 41 40 40 40 40 40 39 39 38 37 36 36 36 35 33 31 29 26 26 26 27 26 25 24 27 30 33 35 36 37 37 36 36 36 37 37 38 38 39 39 38 37 
+45 40 40 46 53 59 65 71 77 78 78 78 73 65 60 56 56 56 55 54 52 52 57 61 65 59 51 45 44 48 52 54 56 58 58 58 58 57 66 75 85 82 77 71 69 68 67 64 61 58 54 53 52 51 51 51 51 50 48 46 44 44 43 43 44 46 47 49 51 53 56 58 60 60 58 57 55 55 54 54 55 56 57 54 52 50 49 51 51 54 59 64 68 68 67 67 67 67 68 67 66 65 61 55 48 47 51 55 58 58 58 58 59 59 60 55 48 43 41 42 44 45 42 40 39 38 39 39 37 37 35 37 39 40 43 47 50 52 49 47 45 46 46 47 48 50 52 51 49 47 47 48 50 51 51 51 50 54 57 59 61 61 61 62 62 63 65 71 77 82 82 82 82 81 80 78 77 78 78 79 79 80 82 85 89 93 89 86 85 83 82 81 79 76 72 70 71 71 71 73 75 76 74 71 67 68 71 74 76 77 79 79 76 73 70 79 87 95 92 85 79 78 80 83 80 76 72 70 79 87 96 91 86 81 83 86 89 91 88 85 86 92 98 101 91 80 70 73 78 82 85 86 88 87 83 78 76 79 82 84 86 88 90 90 88 86 84 82 79 77 76 74 75 80 86 92 91 89 87 83 79 75 74 75 75 77 79 82 83 78 72 68 68 69 70 66 60 53 52 58 64 68 71 73 74 74 73 73 75 77 81 83 84 86 88 91 93 96 94 92 89 90 90 92 97 104 110 112 112 112 111 115 118 123 128 133 140 144 149 154 158 163 169 172 169 170 168 163 160 155 148 141 133 123 114 105 99 99 97 95 91 88 85 82 79 77 83 90 97 101 104 109 111 112 110 108 97 86 76 71 67 62 62 64 64 65 64 63 61 56 52 47 46 45 44 42 41 40 39 39 38 38 37 36 35 34 32 31 32 32 32 35 38 41 43 43 43 43 42 40 39 39 39 39 39 38 37 37 37 36 35 34 33 32 31 30 29 30 30 31 33 37 41 42 41 41 40 38 37 36 36 36 36 37 38 39 39 39 
+62 60 60 61 64 68 73 78 82 82 80 80 75 70 63 60 58 55 53 51 49 49 53 58 63 57 48 41 41 43 45 48 51 55 57 59 61 63 70 78 84 83 79 75 73 72 71 69 66 63 59 56 52 49 49 49 49 49 50 50 50 49 48 47 48 49 51 51 53 53 56 58 61 62 61 60 60 58 56 55 56 56 56 54 51 49 47 45 45 47 52 58 62 67 71 73 69 66 62 64 65 68 63 55 48 48 54 60 64 61 57 55 55 56 57 52 45 39 36 37 37 37 37 36 35 35 36 37 36 36 36 36 38 39 42 44 46 46 41 36 30 32 34 36 36 37 38 39 40 42 44 47 50 53 53 52 52 54 57 59 62 65 69 70 69 69 69 70 71 72 69 68 65 69 74 79 79 78 76 77 81 85 87 89 90 91 86 80 75 75 76 77 77 78 78 77 75 72 70 70 69 69 66 64 62 64 68 73 76 78 80 80 76 71 67 77 85 95 91 86 80 81 85 87 87 80 73 69 75 81 88 84 80 77 80 86 92 92 90 86 85 88 91 93 88 83 77 82 87 92 92 90 89 86 82 78 76 79 82 85 85 87 88 89 90 91 90 88 86 84 82 80 80 84 89 93 89 85 80 78 78 76 75 75 74 74 73 73 72 68 64 61 62 64 66 62 55 47 48 57 66 74 72 71 70 70 70 71 75 83 90 91 89 87 87 91 95 98 95 92 89 92 93 96 101 108 114 116 114 112 113 118 123 128 133 137 142 147 153 156 160 163 166 168 166 167 165 162 159 159 151 144 136 127 119 109 102 97 92 87 85 84 82 84 86 89 94 100 105 111 113 118 118 113 111 105 97 91 84 76 68 59 56 53 51 49 51 51 51 49 47 44 44 43 43 42 40 38 38 39 41 41 39 37 35 34 34 33 35 36 37 39 40 42 43 44 44 44 43 41 39 39 38 37 38 39 39 40 40 40 40 41 41 41 38 35 32 33 34 36 38 41 44 45 44 42 41 39 36 33 34 35 36 38 39 41 41 41 
+78 79 78 77 75 76 81 86 89 86 84 82 80 78 75 72 68 65 61 58 55 53 55 58 60 57 54 50 49 48 48 49 53 57 60 64 66 70 74 81 85 84 81 80 78 77 76 73 70 68 64 58 53 48 47 46 46 51 55 59 61 61 62 60 56 52 49 51 54 57 56 57 57 57 57 58 58 58 58 57 56 55 54 52 51 49 49 48 48 49 52 54 59 64 69 73 69 63 59 62 66 69 64 57 48 49 58 66 70 64 57 51 52 54 55 50 44 37 34 33 33 33 35 37 38 37 36 35 36 37 37 37 37 37 38 41 43 44 40 35 31 33 36 38 39 40 42 41 41 41 42 46 50 52 51 51 50 53 55 58 62 66 71 72 72 72 70 69 67 66 66 66 66 69 72 76 78 78 77 79 82 84 87 87 87 87 81 76 71 70 70 70 72 75 77 78 76 72 70 69 69 68 65 63 59 63 68 73 76 79 81 81 76 71 69 76 82 89 88 85 83 85 88 93 92 85 77 72 76 80 85 81 77 74 78 85 92 93 89 87 85 86 88 88 85 83 80 83 89 95 94 90 85 83 81 79 77 80 82 83 85 86 87 89 91 92 92 90 88 86 83 79 77 81 86 92 87 82 77 75 77 77 77 78 78 77 74 71 69 67 65 64 66 69 72 69 63 57 57 64 72 77 74 71 68 72 74 78 81 83 86 87 84 80 80 80 81 82 83 85 85 87 88 89 95 104 112 117 118 120 122 126 129 133 136 138 140 145 150 156 160 159 160 161 163 162 162 161 159 159 153 147 138 130 122 114 105 97 89 83 85 84 85 90 97 101 106 110 115 115 117 118 116 110 106 100 93 84 76 70 65 61 59 60 59 58 57 54 53 51 50 49 47 45 43 40 37 33 35 39 44 46 43 40 37 36 36 36 38 40 43 43 43 42 43 44 45 45 43 41 39 38 36 35 36 38 39 40 40 41 42 41 40 38 36 33 32 32 33 33 35 36 37 37 38 39 39 36 33 30 32 34 37 39 41 43 43 43 
+89 89 90 91 92 91 90 89 89 86 83 80 81 80 79 79 77 75 71 67 63 60 59 58 58 59 60 61 59 56 53 55 59 62 66 69 73 77 80 84 88 88 86 86 85 84 84 80 75 71 65 58 51 44 44 44 43 48 55 60 64 65 67 65 59 54 50 53 57 61 58 56 53 53 54 54 56 58 59 59 56 53 51 52 52 53 54 56 58 57 56 55 55 58 60 62 62 62 61 62 65 66 63 58 53 53 58 63 66 61 57 53 54 56 57 51 46 40 37 36 34 35 37 40 42 40 38 36 37 38 39 38 37 35 36 39 42 42 38 35 32 34 37 39 41 43 45 44 43 40 42 45 49 52 51 49 48 51 53 57 62 67 72 74 73 73 71 67 63 60 65 69 73 73 72 73 74 76 79 80 82 84 84 82 81 81 77 74 70 67 66 63 65 67 70 71 72 71 71 72 73 73 70 66 62 65 71 78 81 80 82 80 78 77 75 76 77 79 81 84 89 91 94 96 96 91 86 82 85 88 92 85 80 73 77 83 89 91 89 88 88 88 90 91 84 78 72 77 82 88 88 84 82 81 81 82 82 81 80 79 82 84 86 88 90 90 90 89 89 85 79 72 68 75 80 87 83 79 77 77 77 78 80 82 83 84 78 73 69 69 70 70 73 76 80 78 73 69 68 73 77 79 75 71 67 73 79 84 85 85 84 81 80 76 75 75 73 73 77 81 85 86 88 90 97 105 113 119 122 125 129 130 133 137 137 138 140 142 145 150 151 151 151 151 151 150 151 150 147 144 135 124 114 108 105 103 101 100 100 100 101 100 101 107 111 117 118 120 120 117 114 110 106 103 101 97 86 75 63 62 62 63 64 67 68 67 63 58 55 54 54 52 49 46 43 39 35 31 34 39 45 47 46 44 42 41 39 38 41 44 47 46 44 41 40 39 40 40 39 39 39 37 35 32 33 35 37 38 40 41 41 39 37 34 33 32 32 32 32 32 32 32 31 32 33 35 35 33 33 33 35 37 39 41 42 42 42 42 
+96 96 99 104 109 107 99 91 85 82 80 76 75 75 75 79 83 87 86 82 78 75 71 68 66 68 69 72 70 67 65 65 67 68 71 73 75 76 79 81 82 85 88 89 91 90 90 87 80 74 66 57 48 40 40 39 39 44 51 57 60 62 63 62 60 56 54 59 64 69 63 57 52 53 55 58 58 56 55 54 55 55 55 52 50 49 52 56 59 59 58 56 56 57 57 58 59 61 62 62 63 63 61 59 56 57 59 61 61 60 57 56 56 57 58 54 49 44 42 41 40 40 43 45 46 44 41 39 39 40 40 39 38 36 37 38 40 40 37 34 32 34 36 38 40 42 43 44 43 43 44 46 47 49 50 51 52 52 53 54 56 59 63 63 63 63 63 64 64 65 67 70 73 74 75 75 76 76 76 77 78 79 81 80 79 80 77 75 72 70 68 66 66 66 65 67 69 71 73 73 74 75 72 70 66 69 74 79 81 81 81 80 79 79 79 76 73 71 76 81 87 90 93 94 94 91 88 86 89 91 94 88 83 77 79 84 89 89 88 84 84 87 89 91 82 75 67 72 77 84 85 84 82 82 83 85 85 83 79 77 81 85 89 90 91 92 90 89 87 83 77 71 67 74 79 85 83 81 79 77 77 77 78 78 79 78 75 71 68 70 73 76 76 75 74 73 72 70 73 78 83 88 82 75 70 73 78 83 81 77 72 72 76 82 85 86 86 87 88 89 89 94 100 106 111 115 120 124 127 128 131 134 135 139 138 138 138 139 141 143 144 142 140 138 141 140 140 134 131 127 114 103 90 88 90 92 95 101 106 111 110 110 109 116 119 124 123 123 121 116 109 103 98 95 93 88 81 74 67 67 67 67 69 72 75 76 71 67 63 59 56 52 48 45 41 39 36 34 35 40 44 47 48 48 49 46 43 40 43 47 51 49 44 39 36 36 37 36 37 37 37 36 34 32 33 35 36 37 39 40 40 37 35 33 33 33 33 34 34 34 33 32 31 30 29 27 26 30 34 39 40 42 42 43 43 43 42 41 
+90 84 86 89 93 91 84 77 71 70 68 68 67 66 65 72 81 89 91 89 87 85 80 77 73 76 79 82 80 79 78 76 76 76 75 74 71 70 68 65 65 71 76 82 85 87 89 86 79 72 66 59 52 46 45 43 42 46 50 55 57 59 60 60 58 57 57 61 67 72 65 58 51 53 56 61 59 55 51 50 54 57 60 53 48 42 46 50 55 57 57 58 58 61 62 63 63 62 61 61 61 61 59 58 56 56 58 60 62 61 62 62 58 56 53 52 50 48 46 44 42 42 45 49 50 46 43 39 40 41 41 40 39 37 38 39 39 39 37 35 33 35 36 38 39 41 42 43 45 46 47 46 46 46 50 53 56 55 53 50 51 51 51 50 51 52 54 60 66 70 70 69 69 73 77 81 79 75 71 70 73 73 76 77 79 80 78 76 75 75 74 75 72 69 66 66 68 72 74 74 72 71 72 73 74 75 75 77 79 79 79 79 81 81 81 77 74 69 71 74 77 80 82 85 85 84 82 82 84 87 90 89 88 87 88 90 92 90 83 76 73 78 83 86 82 74 69 74 80 85 88 88 89 89 88 88 87 83 80 75 82 88 94 95 96 98 94 88 81 77 74 73 71 76 80 84 83 82 82 78 77 75 73 72 70 69 68 66 66 70 76 81 77 71 65 65 68 70 76 83 91 96 90 81 72 75 79 81 77 70 63 65 74 83 91 94 98 101 99 96 95 101 109 117 121 124 125 126 130 132 132 135 137 138 139 140 140 142 142 143 143 142 141 140 138 136 133 128 121 118 109 99 92 88 87 86 89 93 98 102 104 105 105 109 112 115 115 116 114 112 104 98 92 86 83 77 76 75 75 74 74 72 75 78 82 83 79 76 70 64 58 52 48 45 41 40 39 38 39 41 44 45 46 46 47 46 45 45 47 49 50 48 44 40 38 38 39 40 37 35 33 33 35 36 37 37 37 37 37 38 38 36 34 33 33 34 35 35 36 36 35 34 33 31 28 26 24 29 34 39 40 42 43 44 42 40 40 41 
+80 72 72 74 76 72 66 59 55 55 55 55 53 51 50 57 66 73 75 75 73 73 72 72 71 73 75 77 77 75 75 75 73 73 72 69 67 64 60 56 54 60 66 73 78 80 85 83 77 72 66 63 58 54 52 50 48 50 51 53 55 57 59 59 57 55 55 56 58 60 58 56 53 53 53 53 53 54 53 54 56 58 58 53 48 43 46 50 54 56 57 58 60 62 64 65 64 62 60 60 59 59 57 56 55 56 57 59 61 64 66 67 60 54 48 49 51 53 50 46 43 43 47 51 52 47 43 38 39 41 42 41 40 38 38 38 38 38 38 37 36 38 40 41 42 42 42 44 47 49 49 48 47 46 47 50 51 51 50 49 51 55 58 57 55 53 54 60 65 69 68 66 64 70 76 82 79 74 70 69 71 73 75 77 79 79 79 78 78 76 77 76 74 72 68 68 71 75 77 74 71 69 72 77 81 81 79 77 77 78 80 80 80 80 79 78 75 73 72 72 72 74 76 79 80 80 79 79 80 82 83 86 88 91 92 93 93 89 82 75 71 76 80 84 80 77 73 77 81 86 88 89 88 88 86 83 80 78 75 74 80 87 93 95 97 98 94 87 79 73 71 68 68 72 77 82 84 84 85 81 77 72 69 67 67 67 68 70 72 75 79 82 79 74 69 68 70 72 75 80 83 85 82 77 72 75 76 79 77 73 69 69 73 76 80 89 98 107 106 105 104 108 114 121 123 124 125 126 130 133 137 137 138 139 140 142 143 145 145 146 147 146 146 145 138 133 127 122 113 108 102 98 93 89 86 85 85 89 94 98 100 103 106 110 113 116 117 117 116 113 108 104 100 94 85 79 83 86 91 91 89 86 87 91 95 95 90 84 77 69 61 53 49 46 43 42 43 43 44 44 43 42 42 42 42 45 48 51 51 51 50 47 43 40 38 39 41 41 37 35 32 33 35 37 37 38 38 38 37 37 37 36 36 35 37 38 40 39 39 38 37 37 36 35 33 31 30 32 33 34 37 41 44 44 41 37 37 42 
+57 53 55 58 61 62 62 61 60 59 59 57 54 50 46 53 58 65 67 65 65 65 67 68 69 70 71 72 70 69 69 68 66 65 63 62 61 60 58 56 55 56 57 59 61 63 65 66 66 65 64 62 60 58 58 57 57 55 53 52 52 54 56 56 55 54 53 53 53 54 54 55 56 53 50 46 47 52 56 59 58 57 56 53 50 46 49 51 53 56 58 61 62 63 63 64 61 59 56 56 57 57 54 51 48 49 51 53 55 55 55 55 52 49 45 47 49 52 50 46 42 42 46 50 51 46 40 36 37 39 41 41 39 38 38 38 38 38 39 40 40 41 42 43 44 44 43 46 49 52 52 50 47 46 46 46 47 47 47 47 53 60 66 66 61 57 56 61 64 67 64 61 58 65 73 79 78 74 70 69 72 74 77 77 77 79 79 80 80 77 75 71 71 72 74 75 77 79 79 75 72 67 74 81 88 87 84 80 79 80 83 82 78 74 70 75 80 84 81 76 72 72 76 79 80 80 79 78 77 74 73 76 82 84 87 89 91 90 87 82 81 81 81 80 80 79 78 81 83 86 86 83 83 80 75 70 66 68 69 71 77 82 86 90 93 96 93 85 77 70 66 61 58 65 72 80 82 86 89 84 76 68 65 65 65 67 71 74 78 80 82 83 80 78 75 73 74 76 75 74 74 73 73 73 73 75 77 78 78 77 77 75 76 74 76 89 101 111 111 110 110 114 119 123 128 127 129 129 134 139 140 142 143 144 145 148 148 147 146 144 141 138 136 132 125 118 112 109 105 103 101 100 98 96 95 94 94 97 100 104 107 109 112 120 127 134 133 130 127 124 122 120 117 106 95 84 93 101 109 109 105 102 101 105 107 106 100 92 84 75 67 59 55 52 48 48 50 51 51 47 44 41 42 43 45 46 48 49 49 48 47 45 42 38 36 37 37 37 37 37 37 37 36 35 36 37 38 39 38 37 36 37 38 39 41 42 44 43 42 40 39 38 38 37 35 34 33 34 37 39 41 42 43 42 41 40 41 43 
+42 41 43 44 46 52 60 66 70 69 69 66 63 59 55 59 63 68 70 71 72 71 70 71 72 74 77 78 74 70 65 65 65 65 63 61 59 58 57 58 57 55 52 50 49 49 49 51 55 59 61 61 61 62 63 65 66 60 55 50 49 49 49 50 51 52 53 55 56 57 58 60 60 58 54 51 51 54 57 57 55 53 52 51 51 49 49 49 50 53 56 60 62 61 62 61 58 56 54 54 54 55 51 47 44 44 46 48 48 46 44 42 42 43 43 45 47 49 47 44 41 41 45 48 48 43 37 32 35 37 39 38 37 36 36 37 37 39 41 43 45 44 44 43 45 46 47 49 52 55 54 52 49 48 49 51 53 54 55 56 64 72 79 82 80 78 78 81 86 87 82 79 74 76 79 82 80 76 73 73 74 75 76 78 78 78 81 83 85 83 79 76 76 78 80 81 81 81 79 76 71 67 73 81 87 86 84 81 80 82 84 84 79 73 70 77 83 92 86 80 74 74 76 78 80 80 80 79 77 73 70 74 77 80 83 86 89 88 86 83 82 81 79 79 78 79 79 80 81 82 81 79 77 75 72 69 67 71 73 76 79 81 82 86 90 94 92 84 76 70 66 61 58 65 72 79 80 80 78 75 72 69 66 65 63 64 70 76 82 82 79 80 78 75 73 72 73 73 74 78 80 82 83 83 84 84 83 83 85 88 91 93 93 93 97 101 106 111 111 111 111 116 124 132 136 135 136 138 141 144 150 150 152 152 154 155 155 151 146 140 134 127 122 116 108 102 95 96 96 97 99 102 105 106 105 105 105 106 108 110 112 115 120 127 135 145 144 137 134 129 129 130 127 115 103 92 97 100 104 102 101 100 100 99 98 99 96 95 93 88 82 77 72 67 61 60 61 62 59 53 45 40 43 46 50 49 47 47 46 46 45 43 40 37 35 35 35 36 37 38 39 38 35 34 34 36 38 40 39 38 38 39 38 39 39 40 41 40 38 36 36 36 36 36 35 34 34 38 42 46 46 44 41 40 41 43 44 45 
+57 58 57 56 54 59 64 70 73 72 71 70 67 64 62 65 69 73 75 76 78 78 76 74 75 78 82 85 78 71 63 65 67 69 67 64 61 60 60 61 62 59 58 56 54 52 51 50 50 51 53 58 63 66 67 69 69 62 56 48 48 49 50 50 52 54 55 56 57 59 61 63 64 61 59 55 55 56 57 55 52 49 47 49 51 53 50 47 44 48 53 58 59 60 59 58 55 53 51 52 54 55 53 51 48 48 48 49 49 50 50 49 47 45 44 44 45 46 45 44 42 42 44 46 46 43 39 35 36 37 38 37 36 35 36 37 38 41 43 46 48 47 45 43 46 48 50 53 56 58 58 55 52 51 53 56 59 62 65 67 75 85 94 98 99 101 103 106 109 110 105 99 95 92 89 86 83 80 78 77 76 76 76 77 78 80 84 89 94 92 89 87 86 86 86 86 83 81 78 74 71 67 70 73 77 79 80 80 81 83 85 86 83 81 79 83 88 91 88 83 80 77 78 78 80 80 82 82 80 77 75 75 76 75 78 80 84 82 78 74 73 74 75 76 76 74 73 74 74 75 75 73 73 74 77 79 81 83 85 88 85 82 79 82 87 92 90 83 77 72 69 67 65 71 76 82 76 69 61 62 65 70 70 66 62 61 69 77 85 81 78 74 72 71 70 70 70 72 74 80 87 93 94 95 94 92 89 87 90 96 101 106 107 109 111 111 111 110 111 112 113 118 125 131 134 137 138 140 144 147 151 151 153 155 154 153 150 147 141 136 131 126 119 113 111 108 107 108 109 110 115 121 126 130 126 126 124 122 118 114 118 119 122 131 139 148 146 142 133 130 131 133 131 121 112 102 99 95 91 92 94 96 97 94 90 87 92 95 99 95 91 87 81 75 70 67 64 63 59 52 46 40 42 44 45 45 45 45 45 45 45 44 42 40 39 39 39 39 39 38 37 36 34 32 33 36 38 40 41 41 41 40 39 37 37 37 38 37 35 34 33 34 34 34 34 34 34 37 41 44 44 43 43 42 42 42 42 42 
+68 72 69 66 63 66 70 73 75 73 72 71 70 68 67 72 77 83 84 84 84 86 84 84 83 84 86 85 80 73 68 69 70 71 70 67 64 62 61 61 60 60 59 58 56 53 51 48 45 42 46 56 65 71 71 72 71 63 54 46 49 52 56 58 60 61 61 59 56 56 57 59 60 59 57 55 55 56 56 55 53 50 49 52 54 55 51 46 42 46 51 55 58 58 59 58 56 53 51 51 52 53 53 52 51 51 49 49 50 53 55 56 52 49 45 45 44 42 43 43 43 43 44 44 45 44 43 42 41 40 39 37 36 36 37 39 41 43 45 47 48 46 45 44 47 49 52 55 60 64 65 63 61 60 61 62 62 67 70 74 80 86 93 97 101 105 107 111 113 116 113 110 106 104 99 96 92 90 87 84 80 77 76 74 75 74 77 82 86 88 90 92 91 89 86 84 84 83 80 75 70 64 67 69 71 75 77 81 83 85 88 88 86 83 82 84 87 90 87 85 82 80 81 80 80 82 84 85 82 79 75 75 75 74 76 77 79 79 77 73 72 74 75 77 75 73 71 72 73 75 76 75 74 76 80 85 88 88 88 88 86 83 79 82 84 87 86 81 76 72 69 66 63 69 74 79 75 69 63 63 67 71 72 69 66 66 72 78 82 81 78 76 74 73 71 72 72 72 73 75 77 79 83 86 89 88 84 80 82 87 92 96 100 103 107 108 108 108 110 113 115 116 117 117 120 125 132 138 141 145 150 151 150 149 147 144 141 137 134 133 129 124 119 113 117 120 122 124 123 124 130 138 146 149 145 143 139 132 127 119 122 123 125 131 140 146 147 142 137 134 135 135 134 125 119 111 106 101 94 91 89 86 83 78 72 69 73 79 83 80 77 75 73 72 71 67 62 55 51 48 45 43 41 39 37 38 40 43 44 44 45 44 43 42 41 41 41 41 39 37 35 35 34 33 34 37 40 42 41 39 38 37 38 38 38 37 37 36 34 33 32 33 34 34 34 33 33 34 36 37 39 41 44 45 43 42 40 40 
+68 70 68 65 63 64 66 68 69 70 70 69 68 66 66 71 77 83 84 84 85 86 88 90 91 88 86 85 81 77 73 73 73 73 72 72 70 66 59 54 51 52 53 54 51 48 45 45 45 45 50 58 66 71 72 73 73 63 53 44 47 52 56 59 60 61 61 58 56 54 56 57 59 59 56 55 56 56 56 55 54 52 52 54 57 58 53 48 43 45 49 52 55 57 59 60 59 57 56 52 50 48 49 50 50 49 49 49 49 51 52 53 51 49 46 47 47 48 45 44 41 41 41 41 42 43 43 43 41 39 37 36 36 35 36 38 40 42 44 46 47 47 46 46 48 50 53 58 63 68 70 70 70 70 69 67 67 71 76 80 84 88 92 96 102 108 112 114 116 119 119 118 118 114 110 108 104 99 95 90 85 80 76 73 69 66 68 69 70 77 86 93 93 86 81 81 83 86 85 77 69 60 63 67 70 73 77 81 84 87 89 89 85 81 78 81 83 86 85 84 84 83 83 83 84 86 87 87 82 76 71 72 74 75 76 77 77 79 80 82 83 81 80 79 77 74 72 74 78 82 82 81 79 80 84 87 89 86 84 80 82 82 84 84 83 82 79 76 74 71 66 61 58 63 70 75 75 74 73 72 72 71 72 72 73 74 76 78 80 80 79 79 77 76 74 74 73 74 74 70 67 65 72 79 86 83 79 75 76 79 83 87 93 97 101 102 104 105 109 112 116 116 115 113 115 124 131 137 140 144 148 147 144 144 142 139 134 131 128 125 123 122 120 122 127 133 138 140 138 138 141 145 148 149 146 143 139 135 129 126 125 125 127 129 135 140 141 140 140 140 139 137 135 130 126 120 113 106 99 92 85 76 69 63 57 52 59 65 70 69 67 65 65 65 66 63 57 51 46 45 45 44 42 39 37 38 39 40 40 39 39 39 38 38 38 39 40 40 38 37 35 35 35 36 38 41 43 44 41 37 33 34 35 37 37 36 36 35 34 33 32 33 34 36 36 36 36 36 37 37 38 40 42 43 46 48 50 51 
+67 69 67 65 63 62 61 60 62 65 68 67 63 60 59 62 67 72 70 69 68 70 73 76 76 72 70 69 70 71 71 70 68 68 69 69 70 67 62 56 51 51 50 51 47 43 39 42 45 48 54 59 66 71 73 76 75 64 52 41 44 48 52 53 52 51 53 54 55 56 59 61 63 61 59 57 58 58 59 59 59 58 59 58 59 58 54 50 45 45 46 48 51 55 59 61 60 59 58 54 50 45 46 46 48 48 48 48 49 49 49 49 49 48 48 50 53 54 49 44 39 37 37 37 37 39 41 41 40 37 35 35 34 33 33 33 34 36 40 43 46 47 48 50 53 56 59 62 64 67 68 68 67 68 71 73 76 77 79 80 82 83 86 89 93 98 102 106 109 113 110 110 109 104 97 92 89 88 86 83 79 75 71 70 68 67 65 64 63 71 80 90 89 82 76 76 81 86 88 78 69 60 63 65 68 72 78 81 84 87 88 87 83 79 76 79 82 85 84 82 82 83 84 85 86 87 89 88 82 75 67 70 72 74 74 73 73 76 81 86 89 85 82 79 78 75 73 77 81 85 86 85 84 83 86 88 88 84 80 75 77 80 84 82 79 76 74 72 72 69 66 63 61 64 67 71 71 71 71 71 70 68 68 71 74 76 76 75 75 77 78 81 79 75 71 70 71 72 74 73 74 74 76 77 79 78 77 76 76 77 78 80 84 89 93 96 100 104 107 111 115 117 120 121 125 128 134 138 140 143 144 143 142 138 135 132 127 123 120 117 116 119 124 131 139 146 154 154 153 152 151 151 150 147 144 141 138 132 129 125 125 125 124 126 127 129 131 135 138 141 140 138 138 133 125 119 115 110 108 100 92 84 76 71 66 62 64 65 66 65 62 60 58 57 55 51 49 47 44 45 45 45 43 42 40 39 38 36 35 34 34 34 34 35 36 37 37 37 36 35 33 34 35 36 38 39 40 40 38 37 36 37 37 37 37 37 37 37 35 34 33 36 38 41 41 41 42 41 40 39 39 40 40 42 48 53 58 60 
+64 65 64 65 64 62 59 56 56 57 59 59 58 55 55 57 60 63 61 60 58 58 61 65 64 59 56 53 58 62 66 64 63 61 63 65 67 69 69 68 66 60 55 50 47 45 42 44 47 50 55 63 70 75 74 74 71 61 51 40 42 44 46 46 46 46 48 52 56 59 61 64 65 63 61 58 59 60 62 63 64 67 66 63 60 57 54 51 48 46 44 41 46 52 58 61 60 58 57 54 51 48 47 45 44 45 45 47 47 46 45 45 45 45 45 46 47 48 45 42 39 38 38 39 39 41 42 43 40 38 36 35 34 33 33 33 33 36 39 44 47 49 51 53 56 61 64 65 66 68 67 66 66 67 72 78 82 81 81 80 79 79 78 80 85 87 92 96 101 103 101 99 97 88 78 69 69 71 73 72 69 66 65 67 68 69 66 62 58 66 73 82 81 75 70 70 78 84 86 78 71 63 64 66 67 72 76 81 84 84 84 83 79 78 75 79 82 86 83 80 77 79 82 86 88 88 89 88 81 72 65 67 70 71 71 69 67 71 79 88 91 86 81 77 76 76 75 79 82 86 87 88 87 88 87 88 86 82 75 70 74 76 79 77 74 69 68 67 67 67 67 68 68 67 66 64 64 66 67 67 65 63 64 68 73 76 74 72 70 73 78 82 80 74 69 66 69 70 73 76 79 82 78 75 73 74 75 75 76 76 75 77 80 83 87 92 95 100 103 107 110 115 118 123 125 128 131 133 133 133 134 132 128 126 121 116 109 108 108 108 109 116 125 133 138 146 152 152 152 152 150 147 145 141 137 134 131 124 119 113 114 116 117 117 116 115 118 124 132 136 140 142 143 134 125 117 115 117 116 112 100 91 83 79 76 72 70 67 64 64 62 60 58 54 51 48 47 44 43 44 45 46 46 45 45 45 44 44 42 41 39 39 38 37 37 35 33 31 31 31 32 32 33 34 35 34 34 34 36 38 40 39 39 37 38 38 39 38 36 34 34 37 38 41 40 40 40 39 38 37 37 38 38 40 42 45 46 50 
+63 62 63 64 67 62 56 52 50 49 48 49 51 52 53 55 57 58 60 61 62 63 64 65 63 61 58 57 57 59 61 62 62 63 65 66 69 70 71 73 71 64 56 50 49 48 46 48 49 52 58 66 75 77 74 71 66 57 49 41 41 41 40 41 43 44 48 53 60 64 66 68 69 66 63 60 60 61 61 61 62 63 61 58 55 53 53 53 52 50 47 44 47 53 57 59 59 57 56 56 54 53 50 46 44 43 44 45 45 44 42 41 41 41 41 41 41 40 40 39 39 39 41 42 43 44 45 44 43 40 39 37 35 34 35 38 41 43 46 48 50 51 53 55 59 63 67 69 71 72 72 71 70 70 69 69 68 68 68 68 67 68 68 71 72 75 77 79 79 81 82 82 82 75 68 60 61 64 67 68 67 66 66 68 69 71 70 68 67 70 75 79 77 73 70 70 76 80 84 79 76 71 70 68 66 70 74 78 80 80 80 79 79 78 77 79 82 83 80 78 73 77 81 87 89 88 88 86 80 73 66 69 71 74 72 70 67 71 77 86 89 85 80 76 77 76 76 79 80 82 83 83 83 84 84 84 83 79 75 71 72 72 74 71 69 66 65 64 64 64 66 66 68 69 71 73 72 72 71 72 74 76 77 76 74 74 73 72 72 74 76 78 78 78 78 76 74 72 69 68 66 66 69 72 76 77 76 76 78 82 87 89 89 88 88 89 90 92 94 97 100 104 110 113 117 118 120 121 119 118 117 113 112 108 103 96 89 88 92 97 103 114 125 136 140 146 149 150 150 150 149 145 140 136 133 129 125 118 113 106 107 111 112 113 115 115 119 125 129 133 137 141 144 136 129 121 121 123 124 121 112 103 97 94 92 90 85 81 76 74 72 71 68 63 59 55 51 46 43 45 46 47 48 49 50 51 51 51 50 47 44 43 41 39 38 34 31 28 29 30 31 32 33 35 35 34 32 31 34 36 39 38 37 37 37 37 37 37 35 34 32 33 34 35 34 33 33 32 32 32 33 35 37 38 37 37 37 42 
+67 67 67 67 67 64 60 57 55 54 53 54 55 57 58 59 59 60 61 63 65 64 64 64 63 63 62 60 58 56 55 60 64 68 70 70 72 71 70 69 67 62 57 53 54 54 54 54 53 53 57 64 70 71 69 67 62 56 49 42 41 40 38 39 42 43 48 54 59 64 66 68 69 67 65 62 61 60 60 59 58 57 55 53 50 48 51 54 56 55 53 53 53 55 56 58 58 58 59 60 60 61 59 56 53 50 46 42 41 41 40 40 41 43 43 43 42 42 41 40 39 41 43 45 46 45 44 43 42 40 39 38 37 36 39 43 47 49 50 51 53 53 53 55 59 65 70 71 73 75 75 73 72 70 66 61 58 57 57 55 57 58 59 60 61 61 61 59 58 57 61 65 68 63 59 53 56 60 63 65 67 70 71 71 71 72 75 78 81 78 77 76 75 73 72 72 76 78 81 82 83 83 78 72 67 68 71 73 75 75 76 77 79 82 82 81 80 77 76 74 73 75 80 85 87 87 84 83 80 75 72 75 79 82 79 75 70 71 76 82 85 80 78 76 77 77 77 77 75 74 73 73 73 73 76 78 79 78 77 75 73 71 68 66 66 64 63 62 61 61 62 62 64 72 80 88 87 83 80 81 86 92 93 85 78 71 73 74 76 75 74 72 76 81 86 86 79 72 66 61 56 51 60 69 79 79 78 76 79 85 93 97 93 90 87 88 87 88 89 92 94 97 103 108 111 111 113 114 112 110 107 105 102 99 94 87 80 79 84 89 94 102 109 115 119 123 125 129 130 134 136 138 138 137 135 133 129 122 117 110 111 114 115 119 125 131 132 132 130 131 133 138 142 138 132 128 128 130 133 129 122 115 110 107 105 103 97 90 84 83 81 80 76 72 67 63 59 55 51 53 53 54 54 54 53 52 50 48 47 45 44 43 40 38 35 35 35 36 35 34 33 33 35 37 37 34 31 28 31 34 37 37 36 36 36 37 37 37 35 34 33 33 32 32 32 33 34 34 34 34 34 35 36 36 38 39 41 47 
+71 72 71 70 68 65 63 62 62 62 63 63 65 65 66 67 68 68 66 64 62 62 61 59 61 64 67 68 66 65 64 68 72 76 77 78 79 78 76 73 69 62 56 52 54 57 59 57 56 54 57 60 64 65 64 62 60 54 48 43 42 40 39 40 41 43 46 50 55 57 59 60 61 62 62 62 60 59 57 56 55 54 52 49 45 44 47 50 54 55 55 56 57 58 58 58 56 56 56 59 62 65 63 61 60 54 48 41 39 39 39 40 42 44 46 45 45 44 43 41 40 41 44 46 47 44 42 41 39 39 38 39 40 41 45 49 53 55 54 54 53 52 51 52 58 63 68 68 68 68 64 62 58 57 58 59 59 60 61 62 60 59 58 59 60 61 61 59 57 57 59 62 64 62 59 56 60 63 66 68 70 71 71 70 70 69 73 76 81 80 77 75 76 76 75 76 78 79 81 83 85 86 80 74 68 69 70 71 72 73 73 74 78 81 84 80 77 75 74 75 75 77 79 81 82 82 81 80 78 75 73 75 78 81 78 75 71 71 73 75 76 75 73 73 74 75 77 75 73 70 69 70 69 70 72 74 75 77 78 80 76 72 68 67 68 68 67 66 65 63 65 67 68 74 80 86 86 85 84 84 86 87 86 82 77 71 71 70 69 68 67 67 70 74 81 82 79 76 72 68 63 59 63 66 70 71 72 73 75 78 80 84 83 83 84 87 91 94 93 92 91 94 99 105 109 109 111 111 110 106 102 100 97 95 89 82 74 72 76 81 85 88 91 93 96 98 101 108 113 120 124 130 133 136 136 134 135 128 122 116 115 114 115 120 127 135 138 137 134 132 136 142 146 141 136 131 129 126 122 117 113 109 104 99 93 86 86 86 86 86 87 85 83 78 75 71 69 67 66 66 64 63 61 58 55 52 48 45 43 43 43 42 40 37 34 36 37 39 37 34 32 31 34 36 37 34 31 28 30 32 33 34 35 37 37 37 36 36 36 37 37 35 34 32 34 37 41 41 39 37 36 35 34 34 37 41 45 51 
+78 80 79 77 76 72 69 66 64 64 65 64 65 66 67 70 72 74 71 67 63 60 58 54 59 66 72 75 75 74 74 77 81 84 86 87 88 89 89 89 80 65 52 44 46 49 51 52 53 54 57 62 66 68 69 69 67 60 54 49 46 44 42 43 45 46 49 51 53 55 55 55 56 58 59 61 59 56 53 52 51 50 49 45 42 40 43 46 49 53 56 58 60 62 63 61 56 50 49 53 56 60 58 58 57 54 52 49 47 46 46 46 47 48 49 49 47 46 45 44 42 42 43 44 45 45 44 43 41 38 37 38 41 42 45 49 52 53 53 53 52 50 48 47 53 60 65 64 62 61 57 53 49 48 52 56 61 62 65 67 64 60 57 58 60 62 62 60 58 58 59 61 63 62 61 61 64 68 72 73 72 70 69 67 66 66 70 73 76 76 76 75 76 78 80 80 81 82 82 82 83 83 79 74 69 69 70 71 72 71 70 71 75 78 81 79 75 73 75 78 81 80 78 74 72 75 77 77 75 72 69 71 72 73 73 72 69 69 68 66 65 65 66 68 69 71 73 72 71 70 70 71 71 71 71 70 72 75 80 83 79 74 69 70 72 74 75 72 69 69 71 73 75 76 78 78 80 82 86 86 82 79 76 75 73 72 68 65 62 60 60 59 63 68 74 78 78 80 78 75 71 67 65 63 62 64 67 71 73 72 71 72 74 76 78 83 89 94 94 91 89 92 96 102 106 110 112 116 115 113 112 109 108 106 102 96 91 88 86 83 83 87 90 93 97 101 105 110 116 120 123 123 125 127 130 132 135 131 127 126 122 119 116 119 127 133 136 138 138 141 144 147 149 146 142 137 129 119 109 102 102 102 99 90 81 72 76 80 84 84 85 86 83 80 77 72 71 69 67 64 61 58 56 53 52 49 46 43 42 42 41 42 40 38 37 36 35 35 33 31 29 29 31 34 35 34 31 29 30 30 30 32 34 37 37 36 35 34 37 38 39 37 33 30 33 37 41 42 40 38 38 39 40 42 45 47 49 55 
+80 83 83 82 81 77 74 70 68 66 64 63 63 63 65 70 75 77 74 70 67 61 54 50 55 64 72 77 78 80 80 82 83 85 87 88 90 90 91 92 83 67 51 41 43 44 46 48 51 53 58 63 67 72 75 78 76 70 62 57 53 51 47 49 52 54 55 57 59 59 57 54 54 55 57 58 57 56 55 53 49 46 44 43 42 41 42 42 43 48 52 56 58 60 61 58 54 49 46 49 52 54 54 54 54 53 54 54 53 52 50 51 51 53 53 52 50 49 47 46 44 42 42 41 42 45 48 48 44 39 35 37 38 40 41 42 44 44 46 47 47 45 42 41 48 54 61 59 57 54 54 54 54 54 55 56 57 61 66 69 65 64 60 60 59 59 57 53 49 48 54 59 63 63 64 63 66 68 71 71 69 67 66 65 64 64 66 69 72 73 76 79 81 82 83 85 84 84 83 83 83 83 79 74 71 69 69 69 69 69 69 69 72 75 77 75 74 72 77 82 86 83 77 70 68 71 75 78 77 76 76 74 74 74 73 71 70 68 67 66 65 66 67 67 68 68 69 68 68 67 68 69 69 70 69 67 68 73 78 84 80 77 73 73 74 75 75 75 74 73 72 71 70 72 73 75 77 81 83 82 79 75 73 72 72 70 70 69 69 69 69 68 69 70 71 72 74 77 79 74 69 65 63 61 59 63 69 74 74 71 67 64 65 66 68 74 82 88 89 89 87 89 93 96 102 110 116 124 126 128 129 128 127 125 122 118 115 108 98 88 81 86 90 95 99 104 109 113 115 119 120 120 119 120 125 129 135 134 133 133 130 127 123 128 136 142 147 148 148 146 148 148 148 143 137 132 121 109 96 91 93 98 99 91 83 76 74 71 68 68 73 77 77 74 71 68 66 63 60 57 52 47 46 47 48 47 45 42 40 40 40 40 40 39 39 37 35 33 31 29 27 27 29 32 34 32 29 27 29 32 35 36 37 37 36 35 33 33 34 36 37 33 30 26 29 33 38 40 39 38 39 43 46 50 51 52 53 57 
+70 70 72 73 74 71 68 65 64 63 63 62 62 63 66 70 75 77 75 73 70 63 56 49 54 64 73 79 82 85 86 86 86 85 86 86 87 87 87 86 79 68 55 47 46 47 47 48 50 51 57 63 69 72 73 75 74 72 69 66 64 62 59 58 59 60 60 61 61 60 57 54 52 53 54 55 56 56 57 53 47 41 40 42 44 43 40 37 36 42 47 54 54 53 54 53 51 49 48 49 48 49 50 51 52 51 50 49 48 47 46 48 52 55 57 53 50 46 44 41 39 40 42 44 45 45 46 44 40 36 33 35 37 38 40 41 42 43 44 46 46 43 40 39 45 51 58 56 53 51 53 56 59 59 58 56 56 61 65 70 67 65 62 60 59 57 52 45 38 37 47 57 65 65 65 65 66 67 68 67 65 63 63 62 62 62 64 65 67 72 78 83 86 88 89 89 87 84 83 83 85 85 80 75 70 69 67 67 66 68 69 70 70 71 72 73 74 75 80 85 91 87 78 70 68 72 76 80 83 87 90 87 83 80 78 75 72 70 72 74 74 73 73 73 70 67 64 64 64 64 65 66 67 67 65 64 63 70 76 82 81 78 77 76 75 75 75 77 77 77 72 66 61 65 69 73 75 77 79 78 75 73 70 70 69 68 71 75 78 79 78 78 75 71 67 67 72 75 78 73 69 64 62 61 59 63 70 77 77 71 64 60 61 61 62 68 74 81 82 82 82 84 88 91 98 106 116 123 127 130 133 132 130 129 125 118 113 106 98 90 85 90 95 100 103 105 108 110 113 114 115 115 116 117 123 128 134 135 137 139 138 140 138 145 154 165 170 163 156 152 148 148 146 138 131 123 112 97 82 77 84 92 96 90 85 78 72 64 57 58 63 67 68 65 62 60 58 55 54 50 46 43 42 43 43 43 40 37 36 37 38 39 39 39 39 38 37 36 33 30 27 26 28 30 32 29 27 24 29 34 40 41 39 37 36 34 32 32 33 34 35 33 31 29 31 34 37 38 38 39 41 41 42 43 44 46 48 51 
+63 62 64 66 67 65 63 61 61 60 61 62 63 64 67 69 73 76 73 72 70 69 68 65 66 67 70 72 77 80 82 80 79 77 77 77 76 78 79 81 76 66 56 50 49 47 46 48 49 50 56 63 70 72 70 69 71 74 77 78 76 75 73 70 68 65 64 61 60 57 55 52 50 51 51 52 54 55 57 53 49 45 45 47 49 50 47 45 43 46 49 54 53 51 51 50 49 49 49 50 51 51 51 52 52 51 48 45 44 43 43 46 51 57 60 54 49 43 40 36 33 37 43 48 48 45 41 37 35 32 30 32 34 37 40 43 46 47 48 49 49 47 45 44 48 52 56 56 55 54 56 58 61 62 62 61 61 63 65 66 62 57 51 51 52 52 52 53 53 54 61 67 72 71 70 70 72 74 76 74 71 67 65 68 69 70 70 69 69 73 78 83 82 82 82 81 80 78 78 78 78 78 76 75 72 70 67 64 66 70 74 75 74 73 73 74 75 76 81 85 91 86 79 72 68 71 74 76 81 87 92 87 82 77 76 74 73 73 73 74 75 76 77 78 72 67 62 61 63 64 66 66 67 67 68 68 68 73 77 81 79 78 77 76 75 74 75 76 77 78 71 65 59 62 65 69 72 75 78 79 77 74 72 70 69 67 69 72 74 74 75 73 73 70 68 68 72 75 78 76 74 72 70 68 66 69 74 79 79 73 68 64 65 65 65 67 70 71 73 73 74 77 81 86 93 101 109 118 120 126 130 129 128 126 121 114 104 97 95 91 90 95 99 104 105 106 107 109 111 113 114 115 118 122 127 133 135 139 142 144 146 147 148 154 160 167 170 162 157 152 144 138 132 125 117 112 100 85 71 63 68 74 78 77 75 73 69 63 58 56 57 58 56 54 51 48 48 47 46 44 43 41 41 40 40 38 35 33 32 34 36 38 39 40 40 39 38 36 34 31 28 26 29 32 33 32 30 28 31 34 38 38 37 35 35 35 35 35 35 34 33 34 35 37 37 36 36 36 38 41 43 40 38 35 38 41 44 47 
+62 63 63 63 63 64 65 65 64 62 61 61 60 60 62 64 66 68 70 70 71 72 73 75 73 70 68 68 71 75 75 73 71 69 66 64 63 66 72 75 72 64 57 51 47 43 41 46 51 55 55 56 57 59 61 63 66 70 75 78 77 75 75 74 73 73 69 66 62 59 56 53 50 50 50 50 52 54 56 55 52 49 50 52 55 56 56 55 55 54 53 53 54 53 53 51 49 47 50 55 60 64 61 59 56 51 47 43 42 43 43 45 50 54 55 51 48 45 42 39 36 40 45 50 49 44 40 36 35 33 32 34 36 38 42 45 49 50 50 50 49 49 48 48 50 52 54 55 55 56 59 61 64 66 65 65 65 64 63 62 56 49 42 43 45 47 53 60 67 72 75 77 79 78 76 75 79 81 85 83 77 72 71 75 77 79 78 76 74 76 78 81 78 73 69 67 69 70 70 68 67 66 69 72 76 74 68 64 67 74 81 84 82 79 78 77 77 76 80 83 87 85 80 75 72 70 69 69 74 80 84 79 73 67 68 71 75 75 72 70 69 74 80 83 75 67 59 61 64 67 69 69 69 70 73 76 78 78 79 80 78 75 73 73 73 73 74 76 78 77 71 65 59 61 62 62 68 74 80 81 79 78 75 72 70 67 67 68 69 69 70 70 70 69 69 69 72 74 76 77 79 79 77 74 71 73 77 80 79 76 72 68 66 66 64 65 65 65 67 68 68 73 81 88 95 99 105 109 114 117 123 122 120 118 113 105 99 93 93 92 91 92 92 93 97 103 110 114 117 121 126 133 141 149 149 147 148 148 148 147 148 150 151 153 155 157 158 156 153 148 136 124 113 107 103 97 87 72 59 50 55 58 61 63 66 68 65 61 58 56 55 53 52 50 48 46 45 44 43 42 42 41 41 41 42 43 43 45 45 44 43 42 42 41 40 39 37 36 34 31 29 28 32 34 37 36 34 33 34 35 35 35 35 34 34 35 37 38 36 35 33 34 37 39 38 36 35 35 37 40 42 41 41 40 41 42 43 46 
+69 69 66 64 62 64 66 68 66 64 62 59 56 54 54 54 55 58 62 66 68 67 67 66 67 69 69 68 67 65 65 66 66 66 65 64 62 65 69 71 69 65 60 54 48 42 39 46 52 58 54 50 45 47 50 55 61 66 72 75 73 71 69 74 77 80 77 73 70 66 63 60 57 54 52 50 52 54 56 53 51 48 49 52 55 57 58 59 60 59 57 56 56 56 56 54 52 49 51 57 63 66 63 60 56 52 48 43 42 43 43 45 48 50 52 49 47 45 44 42 40 43 47 51 49 44 39 37 37 37 37 38 39 40 44 48 52 51 50 48 48 49 52 53 52 52 51 53 53 54 59 64 68 70 67 65 63 59 56 52 50 47 44 46 47 50 53 59 64 70 77 84 89 91 92 93 96 99 102 100 100 97 94 93 91 89 84 80 75 77 78 80 79 78 75 74 72 70 68 67 66 65 69 74 78 74 69 64 66 73 80 84 81 79 77 77 76 76 78 79 81 80 78 77 76 75 73 73 76 79 82 77 72 66 69 73 77 76 72 69 68 72 77 81 74 68 62 64 67 70 72 74 75 76 77 76 77 77 77 77 75 72 70 69 71 71 71 72 71 70 66 64 60 61 62 63 66 71 75 77 79 79 79 73 68 62 64 66 67 66 65 63 64 68 72 74 71 69 68 72 76 79 77 75 73 73 75 78 78 75 73 70 66 63 59 62 64 67 68 68 68 74 85 95 104 102 101 99 104 109 115 113 110 107 102 98 93 90 90 92 91 88 84 80 90 101 115 120 125 130 137 151 162 172 170 166 162 161 157 154 154 155 156 156 156 153 150 147 143 140 128 117 106 100 96 93 85 75 66 58 57 55 54 55 55 56 57 57 59 59 57 55 54 53 51 50 47 45 41 42 42 42 43 44 45 47 51 55 57 54 49 46 44 42 40 39 37 36 35 34 32 31 34 36 39 38 37 35 35 36 36 35 35 33 34 36 38 41 38 36 33 34 35 36 35 34 33 33 36 38 41 42 43 44 44 44 43 45 
+90 87 80 75 69 63 58 54 54 54 53 52 51 49 50 51 52 53 57 61 64 63 62 60 63 66 71 68 63 57 56 59 61 64 66 66 67 68 68 69 68 66 65 59 52 46 42 45 48 52 55 56 58 62 67 71 75 79 82 84 81 78 76 76 77 78 76 73 70 68 67 65 63 60 56 54 54 55 56 53 50 47 48 52 55 57 60 62 64 62 61 60 60 60 61 59 56 53 52 53 54 54 54 52 51 50 49 48 47 45 44 46 49 53 54 50 48 45 43 40 39 42 46 51 49 45 41 39 38 39 38 39 40 41 44 47 51 51 50 48 49 51 53 54 54 53 52 52 52 53 58 64 69 70 67 65 61 55 50 45 45 46 47 49 51 52 55 59 62 69 79 90 100 105 109 113 116 118 120 122 123 123 120 114 106 98 90 84 78 78 79 81 83 85 87 85 79 73 69 68 69 69 72 75 79 75 70 64 66 70 74 77 75 74 72 74 75 76 75 74 74 74 76 78 79 81 83 85 85 85 85 82 78 74 74 76 77 77 73 70 69 70 72 74 71 69 66 68 70 73 75 80 84 84 80 74 70 71 72 73 71 68 66 65 66 66 66 65 62 61 61 61 63 63 64 65 66 68 69 71 77 82 83 75 66 59 61 64 66 63 60 56 59 66 74 76 71 65 60 66 72 78 78 76 74 74 74 74 73 74 73 71 66 63 58 62 65 67 69 71 72 78 88 98 105 105 104 105 109 112 116 116 113 112 109 103 98 95 95 95 95 93 91 90 102 115 129 139 143 149 155 166 178 185 184 181 179 173 169 162 162 162 163 162 156 151 146 140 134 128 120 109 101 95 93 90 85 79 72 66 61 55 50 51 50 51 53 57 59 59 57 55 53 53 51 49 48 47 47 47 47 47 48 50 52 52 53 52 52 50 48 47 44 41 38 38 38 38 38 36 35 34 36 38 39 38 38 37 37 37 37 36 35 34 33 36 38 41 38 35 33 33 34 35 35 34 33 33 35 36 37 38 38 38 39 40 42 44 
+97 95 88 83 74 63 51 42 42 43 44 45 45 45 47 51 54 55 56 56 58 59 61 63 64 65 66 64 60 56 56 59 62 63 65 66 67 68 68 68 69 69 69 65 60 54 49 49 49 49 56 63 70 77 83 90 93 94 95 95 92 89 86 79 73 67 66 65 64 64 65 66 66 67 67 66 64 61 58 54 49 45 48 54 60 62 60 59 58 57 57 57 59 61 62 60 56 53 52 52 52 52 51 49 49 49 50 51 49 48 46 47 50 54 54 51 48 44 41 38 36 40 45 50 49 47 44 41 40 39 38 39 40 41 43 44 46 48 50 51 52 52 51 51 54 56 58 56 55 54 56 58 59 60 60 60 59 56 53 50 52 54 55 58 61 64 70 78 86 94 103 112 121 126 130 136 137 140 140 141 139 137 134 126 118 108 101 92 85 84 81 80 81 85 88 86 81 76 73 73 72 72 75 76 78 75 70 66 67 70 74 75 76 76 75 74 74 73 71 71 70 72 76 79 84 87 90 91 90 89 88 84 80 75 75 74 74 72 71 69 69 69 69 69 68 66 64 66 69 70 74 76 79 79 75 71 69 71 74 75 74 72 70 68 67 65 64 64 63 64 63 64 63 65 67 68 69 67 65 66 72 77 78 72 64 58 59 62 64 63 63 62 65 69 74 74 67 59 53 61 68 75 76 76 76 74 70 66 64 67 69 70 69 67 65 66 66 66 70 75 79 83 89 95 101 107 113 120 119 120 120 121 121 121 119 113 106 101 100 99 98 98 99 101 114 128 143 154 158 164 170 177 183 190 190 189 191 184 180 174 171 171 169 166 160 155 148 141 134 125 120 114 111 105 98 94 89 86 84 81 75 70 64 65 65 65 64 61 58 56 54 51 50 48 46 45 47 50 54 54 53 53 54 56 59 59 55 51 47 47 47 47 45 42 38 38 38 38 38 37 35 34 35 37 38 37 36 34 34 34 33 33 33 33 33 34 34 34 33 32 31 32 34 36 36 36 35 34 34 34 34 33 32 32 35 38 41 45 
+87 85 83 81 74 65 56 48 46 44 43 42 41 41 45 50 55 58 59 59 60 63 66 68 66 64 62 61 59 57 57 59 62 63 62 63 63 65 67 68 70 71 73 73 71 68 66 63 61 59 60 60 62 67 74 80 84 86 90 90 89 87 84 80 74 69 69 70 71 70 71 72 73 74 76 76 71 66 61 56 49 42 49 58 67 67 61 55 51 51 51 51 56 59 62 59 54 50 50 54 57 59 57 55 53 51 50 48 49 50 50 51 49 49 49 49 47 47 45 44 43 44 44 45 44 41 39 38 37 37 37 37 37 37 41 44 47 49 49 50 50 50 50 50 54 58 61 60 59 57 57 56 55 57 57 58 59 57 57 56 58 60 61 65 71 75 84 96 108 118 126 132 141 147 153 158 160 160 159 157 155 152 146 137 128 120 111 102 92 89 84 80 81 82 84 83 80 79 78 77 77 76 76 76 77 74 72 69 69 73 76 78 80 81 81 77 72 68 68 68 67 70 76 81 85 89 93 96 93 93 91 86 79 74 70 68 65 65 66 67 68 68 67 66 64 61 59 61 65 68 69 69 67 68 68 68 70 73 77 81 80 78 77 73 68 64 63 66 68 70 68 66 64 67 71 74 71 66 62 62 66 70 72 67 63 57 59 60 61 63 65 68 70 72 74 73 64 55 48 57 65 73 75 76 78 74 67 61 57 62 66 69 69 68 68 68 66 65 70 75 80 84 86 90 94 102 111 119 121 122 123 121 120 119 114 109 105 102 99 96 93 98 104 110 120 133 143 152 156 164 168 172 176 178 184 187 193 190 187 184 182 178 175 172 166 161 156 148 138 126 125 123 122 116 108 98 94 94 96 94 88 84 78 77 76 76 71 65 59 55 52 49 47 45 44 44 47 50 53 52 50 47 48 49 51 51 47 44 40 42 44 47 45 42 40 39 39 38 37 35 32 31 32 34 35 34 32 31 31 30 29 30 32 33 33 32 32 31 31 30 30 31 34 36 38 38 38 38 36 34 33 34 37 39 42 42 43 46 
+79 77 76 76 72 65 59 53 49 45 41 39 38 37 42 49 56 61 65 69 72 75 77 79 74 70 66 67 68 69 70 72 74 75 76 77 77 81 83 86 85 83 83 81 78 76 74 71 67 64 61 57 52 58 64 70 75 79 82 83 83 80 80 80 80 79 82 86 89 87 85 83 83 82 83 81 77 73 68 62 56 51 52 55 59 59 55 52 50 50 50 50 53 56 59 56 53 48 49 53 56 58 57 56 55 52 49 47 49 51 53 52 49 45 44 46 47 48 49 50 50 47 44 40 38 35 32 32 34 36 37 35 32 31 38 45 53 51 48 44 43 45 46 48 52 55 59 62 64 67 67 66 66 66 66 65 65 63 62 61 62 64 65 71 76 82 89 97 106 114 122 131 136 140 144 146 147 146 144 141 137 135 130 124 119 111 103 93 84 81 78 75 76 79 81 82 82 83 81 79 76 73 73 75 75 73 71 69 71 75 79 81 80 80 80 76 71 68 68 69 70 74 79 85 88 89 89 90 90 89 88 84 80 75 73 72 70 71 70 70 70 69 69 69 64 61 57 59 63 67 69 69 69 69 70 72 73 74 73 74 75 75 75 74 71 68 67 68 69 70 72 74 76 76 76 75 73 69 65 64 65 67 68 67 67 65 64 62 60 62 63 66 68 69 71 72 67 64 60 65 69 74 76 78 81 76 69 63 59 63 67 69 68 66 64 63 63 63 66 71 75 79 81 82 85 94 105 114 118 122 125 121 116 110 107 105 104 101 98 92 88 98 108 117 127 136 143 150 155 159 161 162 162 162 169 178 186 187 187 189 185 182 176 170 167 161 156 147 139 130 128 126 125 118 110 101 96 95 94 93 89 86 83 82 79 76 72 67 62 57 52 47 43 44 45 46 47 48 49 47 44 40 39 41 42 42 39 37 34 38 43 46 45 43 40 39 37 37 36 35 35 35 37 39 41 40 38 35 35 35 35 36 35 35 34 33 33 34 32 31 29 30 33 36 38 40 41 42 39 35 32 36 41 46 46 45 46 47 
+78 71 66 61 57 53 49 46 42 40 38 41 44 46 50 54 59 62 64 67 72 78 83 87 81 76 70 73 77 81 84 85 87 90 93 97 100 105 109 113 107 103 97 90 82 74 68 64 58 54 51 48 45 49 55 61 62 64 66 68 68 69 70 73 76 78 82 87 91 90 88 86 85 85 85 84 81 76 72 67 63 58 55 52 49 49 49 49 50 50 50 50 51 52 53 53 51 50 48 47 46 47 49 52 53 51 50 48 49 51 53 52 48 46 45 47 48 49 48 46 45 45 45 44 42 38 35 35 37 39 39 37 34 32 37 43 48 48 46 44 44 46 49 51 56 59 63 67 71 75 74 73 73 71 69 67 66 66 66 65 67 68 69 76 83 89 95 101 105 112 120 128 134 134 135 135 130 130 125 122 120 116 111 110 106 101 92 82 73 71 70 69 71 73 78 81 84 87 86 79 74 69 70 72 74 72 70 68 71 76 81 84 82 79 76 73 70 67 70 73 76 79 85 90 91 87 84 82 82 83 83 82 80 79 80 81 84 83 80 76 74 73 73 71 67 62 58 60 65 68 70 72 74 75 77 77 78 73 68 63 66 69 73 75 73 72 71 69 69 70 76 82 89 86 82 78 75 73 70 68 66 63 62 67 70 75 70 65 60 60 63 65 67 69 70 70 70 70 69 71 73 76 77 78 79 76 70 63 61 62 63 64 63 62 61 61 62 61 65 69 74 78 79 81 83 90 96 103 107 109 113 113 110 108 109 110 112 112 107 103 97 102 107 111 120 130 138 143 142 143 141 140 137 137 147 158 168 174 176 182 183 177 174 169 162 158 151 145 140 136 132 129 126 119 112 104 98 96 94 91 89 87 86 82 79 74 69 66 62 57 52 47 42 43 43 43 43 44 45 44 43 43 43 44 46 46 42 38 34 39 43 48 46 42 37 34 34 34 34 38 40 43 46 49 51 49 44 40 39 40 41 40 38 36 34 34 35 36 34 33 31 32 35 37 38 38 38 37 35 33 30 33 36 39 41 42 43 46 
+74 66 58 50 46 43 41 39 37 34 34 43 51 59 60 61 63 61 57 55 58 69 80 88 84 82 79 80 82 84 87 89 92 95 98 103 106 109 113 116 110 106 102 93 84 74 66 59 52 47 44 42 39 43 46 51 50 50 49 50 53 56 59 63 67 72 73 76 79 79 80 79 79 78 78 77 74 70 67 63 59 55 52 50 47 47 50 52 53 52 50 49 52 53 55 55 54 53 51 48 45 44 48 50 53 51 50 49 51 51 53 51 48 46 45 47 49 49 46 42 40 43 46 49 47 44 40 40 42 43 43 41 38 35 36 37 38 41 44 47 50 53 55 60 65 70 75 78 80 82 79 75 71 67 62 57 56 59 62 65 70 75 80 86 91 97 101 106 108 113 116 122 125 125 124 125 122 119 116 116 116 117 114 110 106 101 90 81 72 72 73 73 74 75 76 78 78 80 81 77 74 71 71 71 71 70 70 69 72 79 85 86 81 76 72 70 69 67 70 74 77 80 82 84 83 80 77 75 77 79 81 79 76 74 76 81 85 84 80 75 73 74 75 76 71 65 60 61 62 63 66 69 72 75 78 79 81 74 67 61 64 68 73 73 71 70 69 70 71 73 76 78 80 79 76 75 73 72 70 68 64 61 59 61 63 65 63 62 61 63 67 72 73 73 70 70 68 68 67 71 74 77 76 73 70 68 65 63 60 58 55 52 55 58 60 61 62 63 66 69 73 76 79 82 85 87 88 89 92 95 98 101 104 108 111 116 120 124 118 112 108 106 107 106 114 123 132 135 132 128 124 120 118 114 127 140 154 161 168 174 176 172 166 161 156 149 143 138 137 132 123 114 103 99 99 100 99 92 84 77 77 77 77 72 67 62 59 58 57 56 52 48 45 43 40 37 37 38 39 41 44 46 48 50 51 50 45 39 34 38 43 48 46 40 34 32 33 35 37 39 40 41 42 43 43 41 38 36 35 35 35 34 34 34 34 35 36 37 37 36 37 38 38 39 39 36 33 30 29 29 29 30 32 34 36 38 41 44 
+65 60 53 47 45 44 42 41 38 36 36 42 49 56 59 61 63 59 54 49 52 64 75 85 86 86 86 86 86 86 90 93 96 100 104 106 107 106 104 103 102 100 97 92 85 78 71 64 56 52 51 52 52 55 58 61 60 58 56 56 58 60 62 65 68 72 74 77 80 80 80 80 79 77 77 75 70 66 62 59 55 52 49 47 44 47 51 55 56 53 51 49 53 57 60 60 60 60 58 56 53 52 52 53 53 52 52 51 51 51 51 50 47 45 44 43 43 42 42 41 41 42 43 44 42 40 37 38 41 45 45 41 37 34 36 38 39 42 45 47 50 52 55 58 65 71 77 76 76 76 73 69 66 62 57 52 52 56 61 67 74 82 90 95 99 104 107 109 112 113 115 116 116 115 117 117 113 110 108 110 115 119 119 113 108 102 92 82 73 75 78 80 79 77 74 73 74 73 73 74 75 74 72 70 68 68 68 69 74 81 88 89 82 73 67 67 67 67 70 74 77 77 75 73 71 71 70 70 73 77 81 75 69 65 69 75 81 82 77 71 69 73 77 80 74 69 63 60 59 57 59 63 67 71 75 79 82 76 69 62 65 69 73 72 69 65 64 69 74 78 75 72 68 70 70 72 71 71 71 68 63 58 55 55 56 57 59 59 61 66 72 76 78 74 71 69 68 67 66 71 74 79 76 71 66 63 64 63 61 57 52 49 52 55 59 61 63 65 69 72 76 79 83 86 89 90 91 92 95 99 103 109 114 122 128 132 137 139 130 123 113 112 112 112 116 121 127 127 119 115 108 104 102 98 112 126 139 150 157 167 171 165 161 156 148 141 132 131 128 127 113 95 76 74 84 95 98 87 75 65 66 67 67 63 57 52 50 51 52 52 51 50 48 44 40 36 36 36 37 38 41 42 45 48 51 53 46 40 33 37 41 45 43 37 32 31 35 39 43 40 37 32 31 31 30 30 31 31 31 30 29 28 30 32 34 35 36 37 37 37 36 36 36 35 35 32 30 27 30 34 38 38 38 37 37 38 40 40 
+60 56 52 48 46 45 44 43 40 37 37 41 45 50 53 57 60 58 54 50 53 62 71 79 83 86 89 92 93 95 96 96 97 98 101 102 104 103 102 99 98 96 94 88 82 76 72 65 60 57 58 59 62 65 68 71 69 68 65 66 68 70 71 72 74 75 81 86 92 91 90 90 88 87 86 82 72 65 58 55 52 51 47 44 41 43 48 53 55 53 52 50 52 54 55 57 57 58 58 57 56 55 54 52 52 52 52 52 51 50 49 47 46 44 43 41 38 37 38 40 41 40 38 37 36 34 33 35 40 44 45 40 35 31 37 42 48 48 47 46 46 47 47 50 56 61 66 61 57 52 52 53 52 55 56 58 62 66 72 77 85 92 98 101 102 106 106 107 107 109 113 115 118 120 121 124 124 123 122 124 125 127 124 118 111 105 97 91 84 86 87 89 84 79 73 70 71 72 74 75 76 77 74 71 69 70 70 70 74 80 85 86 81 75 72 71 70 70 71 70 70 69 69 67 68 68 68 69 73 77 82 75 68 62 65 72 78 78 75 72 71 74 78 81 76 72 67 64 62 59 60 65 69 72 74 76 76 72 70 67 69 71 74 73 69 65 65 69 73 76 75 74 73 73 72 71 70 70 70 68 63 58 54 57 60 63 64 65 66 67 69 70 69 67 65 64 66 68 70 75 78 81 80 76 73 70 68 65 62 61 60 59 59 59 59 62 66 70 73 77 80 85 88 90 93 96 99 102 104 109 112 119 130 139 147 150 154 155 142 129 118 118 119 120 120 123 123 119 112 104 97 96 94 93 105 117 128 137 147 154 156 152 149 142 132 124 113 113 113 113 101 85 68 66 73 80 84 76 68 62 60 59 58 54 50 47 45 45 45 46 47 49 51 46 41 36 36 36 36 36 38 38 41 46 51 54 47 39 32 34 38 40 39 35 31 31 35 40 43 39 36 32 32 32 32 32 34 35 35 33 31 29 31 32 33 35 36 38 36 34 31 29 29 28 27 27 26 26 32 40 47 47 43 40 39 39 39 38 
+57 56 55 53 51 49 47 48 48 49 50 54 58 62 61 62 62 63 63 63 63 67 70 74 79 83 88 93 98 101 101 99 96 96 97 99 100 101 101 101 98 92 90 83 77 71 68 65 63 61 60 60 61 64 66 71 72 74 74 76 76 77 78 79 81 82 88 93 100 99 97 97 95 94 92 86 78 67 58 55 52 51 47 42 37 40 46 51 54 53 52 51 50 49 47 48 49 50 52 53 54 54 52 49 48 50 51 53 50 48 46 43 42 41 39 37 35 35 37 39 42 42 41 41 41 40 39 41 43 45 45 41 36 32 37 43 48 48 46 45 45 45 45 47 50 52 54 49 43 38 41 43 45 50 56 60 66 72 78 84 91 97 104 104 105 106 104 103 103 105 109 114 118 123 126 130 132 136 137 137 135 135 130 122 115 107 105 100 97 97 97 98 90 79 70 68 71 73 76 77 78 79 76 74 71 72 72 72 74 77 79 81 81 81 79 79 76 76 70 65 60 60 62 66 68 68 68 69 74 79 84 76 69 61 64 69 74 76 75 75 75 77 78 80 77 75 72 70 67 64 65 69 74 75 72 70 67 68 70 73 73 74 76 73 70 66 65 68 71 73 75 77 79 77 74 71 70 70 70 67 62 57 54 59 63 68 69 70 70 69 66 64 63 61 60 61 65 68 73 76 78 81 81 79 78 74 70 64 59 61 62 62 61 60 59 62 67 70 74 79 84 87 88 89 89 94 100 106 110 115 120 126 134 142 148 152 156 158 151 145 139 138 137 136 133 128 123 117 110 103 100 101 103 106 110 115 120 124 131 136 137 133 130 124 112 100 88 92 94 96 88 76 64 60 63 65 67 66 64 62 59 57 54 51 49 46 45 43 42 42 46 51 56 50 44 39 37 36 35 35 36 37 38 42 45 48 42 38 33 31 31 31 31 32 33 34 36 37 38 37 37 36 36 37 36 37 38 40 39 36 33 31 32 32 33 35 36 37 36 33 30 28 27 26 25 25 26 26 31 35 40 41 40 41 40 40 40 39 
+52 53 54 56 55 54 52 53 58 61 65 70 74 77 73 69 66 71 76 82 81 76 73 71 71 72 74 81 88 94 93 91 89 88 89 90 91 93 94 95 92 88 86 79 71 63 62 63 65 64 62 61 60 62 64 68 74 79 83 84 84 84 86 87 88 89 94 99 102 102 102 101 99 96 93 89 85 80 75 69 64 58 54 50 46 48 51 54 55 53 52 51 49 49 47 48 47 48 49 52 54 54 51 49 48 48 49 51 48 46 44 43 41 39 37 35 33 33 36 39 42 44 45 46 47 47 48 47 47 47 45 41 37 35 37 40 44 44 44 43 45 46 47 47 45 44 43 41 39 36 40 44 47 50 52 55 59 65 71 77 83 90 97 98 99 100 101 100 101 102 105 107 110 116 122 127 131 134 139 141 143 145 145 138 134 129 127 126 124 122 118 114 106 95 86 83 82 82 81 80 78 76 75 74 71 73 74 75 75 76 77 76 77 77 78 77 77 76 72 66 60 61 64 67 69 71 72 73 75 76 77 69 62 55 57 63 68 72 74 77 78 79 79 78 76 73 72 69 67 64 66 69 72 74 71 68 66 69 72 74 75 77 77 75 71 68 66 66 68 69 73 77 79 77 75 73 72 72 72 70 67 65 63 63 64 65 66 67 68 68 68 68 67 64 62 61 63 66 69 71 73 76 76 77 77 73 65 58 53 55 56 57 58 59 61 62 64 67 71 77 84 87 85 83 81 89 98 108 114 120 126 133 137 143 148 154 157 160 160 161 160 156 156 152 145 136 125 119 115 111 107 110 116 122 120 117 117 118 118 118 117 116 115 113 101 90 78 81 83 87 82 74 67 64 65 66 67 71 78 83 79 74 70 66 62 58 54 48 42 39 47 54 62 56 49 42 39 36 34 33 34 35 36 38 40 41 38 35 33 31 28 27 28 31 34 36 36 37 37 36 37 36 37 38 39 40 40 39 38 37 35 33 34 35 36 36 36 37 35 34 33 31 29 27 25 25 26 26 29 31 33 35 38 39 41 41 40 40 
+46 48 49 50 56 61 66 71 76 81 83 86 88 89 86 82 79 81 85 88 85 78 72 68 66 64 64 70 78 86 85 84 82 81 81 79 80 83 85 87 85 84 83 74 64 55 55 59 62 63 63 63 62 58 53 50 59 68 77 80 79 78 79 81 83 86 87 90 92 94 96 98 94 91 87 85 85 84 82 77 72 66 63 59 55 56 56 58 57 54 51 50 50 51 51 50 49 47 50 52 55 55 54 52 51 49 46 45 46 47 47 45 44 43 41 40 38 38 40 41 44 44 43 44 46 49 51 51 50 49 47 45 42 39 40 42 44 45 45 46 46 46 47 46 44 43 40 40 40 39 42 45 47 49 51 53 56 62 66 71 77 84 89 91 93 95 96 96 98 100 100 101 104 112 118 125 130 134 139 144 151 156 158 155 152 150 152 153 153 146 140 133 124 114 105 99 95 92 87 83 78 73 73 73 72 74 75 77 77 74 73 72 71 71 71 72 74 76 72 69 65 65 67 68 71 75 79 81 76 71 67 60 53 46 49 55 60 66 73 79 82 81 79 77 74 70 68 66 64 64 64 66 69 70 69 69 68 71 73 75 77 79 78 77 72 69 67 66 66 65 70 74 78 77 76 74 74 74 74 73 73 71 71 68 65 62 63 66 67 68 70 72 71 68 65 63 64 65 67 69 70 71 72 74 74 71 64 57 52 55 57 58 61 62 64 66 67 68 70 74 79 83 82 81 81 87 92 96 105 111 118 124 131 137 143 149 154 160 161 162 164 162 161 161 155 149 143 138 133 130 128 133 137 141 135 129 120 113 107 100 98 101 103 103 94 84 73 75 76 78 76 74 71 69 67 66 67 78 90 100 96 89 83 77 72 66 60 53 47 44 51 57 62 57 52 47 44 42 41 40 39 38 37 38 39 40 39 38 37 36 34 33 33 34 35 36 36 38 39 38 36 35 37 39 42 42 41 39 37 37 36 36 36 36 36 36 35 35 35 35 35 35 33 30 27 29 31 33 35 36 37 38 38 37 37 37 38 38 
+57 55 52 51 59 67 76 84 91 98 102 101 100 99 99 98 98 93 88 84 79 74 69 65 65 65 65 66 69 71 71 70 70 70 70 70 70 72 74 76 78 79 80 72 63 52 53 56 59 61 63 64 63 54 45 35 46 58 71 73 72 70 71 72 73 75 74 74 74 78 82 87 81 76 70 67 65 64 64 66 67 68 68 68 67 69 71 72 71 68 64 62 60 59 58 55 53 52 52 53 55 55 55 54 52 48 44 41 43 46 48 47 46 45 44 42 41 41 42 44 45 44 43 41 44 49 53 54 53 51 50 49 47 45 46 46 46 47 48 50 49 47 46 46 46 46 46 47 47 47 47 47 47 49 53 57 61 64 69 71 74 76 79 83 85 90 93 95 98 100 103 106 111 118 124 131 137 142 145 148 151 155 158 158 160 159 158 159 156 150 144 136 129 120 113 107 100 95 90 83 78 74 73 71 69 71 73 75 76 77 77 75 70 65 63 65 68 71 70 70 69 69 69 69 71 75 81 84 77 70 64 61 57 54 56 59 63 69 74 80 83 81 78 76 74 71 70 68 66 65 64 65 65 65 66 67 68 70 71 73 72 73 74 73 71 70 68 67 67 65 67 67 68 69 69 70 71 71 73 72 69 68 66 67 68 67 69 71 73 75 77 79 80 77 74 71 71 72 73 71 70 67 68 70 72 71 67 65 64 64 65 66 68 69 70 71 72 72 72 71 71 72 77 82 87 86 85 83 89 97 106 112 121 129 137 144 150 158 162 164 166 169 166 166 164 160 157 154 151 149 147 151 154 157 149 140 132 122 115 106 101 104 106 107 97 89 81 78 76 74 74 76 78 79 79 80 82 87 92 97 94 91 88 81 73 65 60 59 58 59 59 59 59 56 53 51 50 50 50 48 45 41 38 38 38 39 39 39 39 39 38 37 37 36 36 35 36 37 37 37 37 38 38 38 37 37 36 34 34 34 35 35 35 35 34 34 33 32 33 35 38 39 37 34 32 34 38 41 42 42 42 40 38 36 34 35 36 37 
+84 76 70 64 65 68 71 76 83 90 93 92 91 91 92 93 95 89 84 78 73 69 64 62 62 63 62 61 59 58 58 58 58 58 59 59 59 60 62 64 70 76 79 72 64 57 55 54 54 56 60 64 65 61 57 52 55 58 61 62 64 64 64 64 64 64 65 66 66 69 73 76 72 67 63 60 58 56 56 62 67 71 73 77 79 82 85 87 86 84 80 77 73 68 65 62 59 57 55 55 54 54 55 55 53 48 43 39 40 41 43 43 43 44 42 40 37 37 39 40 41 44 45 47 50 52 54 54 53 52 51 50 49 48 48 48 48 49 49 49 49 48 46 47 49 51 54 54 54 54 53 54 53 55 59 63 66 70 73 74 74 74 73 77 82 87 90 94 97 102 106 111 116 123 130 135 140 145 149 151 152 153 156 159 164 166 164 162 159 151 145 136 131 125 120 112 105 98 91 85 79 73 70 68 65 67 69 71 75 78 82 81 71 61 55 58 61 65 67 70 72 71 70 68 70 76 81 83 77 70 64 65 66 67 68 69 69 71 76 79 82 80 77 75 75 75 75 72 69 67 64 63 61 60 63 65 68 67 67 67 67 68 67 68 69 70 71 68 67 65 63 60 58 60 62 65 67 68 70 70 67 64 62 65 69 71 74 76 77 80 82 85 85 82 79 77 77 77 78 74 71 67 68 69 69 70 70 71 72 72 70 70 70 71 72 72 74 75 75 75 74 72 75 78 79 79 80 79 84 92 100 108 116 126 134 139 146 151 155 160 163 165 164 164 162 162 159 160 159 160 159 162 164 167 162 158 154 148 137 127 121 119 116 114 106 98 90 84 78 72 72 78 83 88 92 93 95 95 93 92 92 91 91 85 76 68 63 62 62 62 59 55 52 51 50 50 51 52 52 52 49 45 44 42 41 39 39 39 39 39 38 36 36 35 35 34 34 33 33 36 38 41 40 36 32 30 30 30 30 32 33 35 35 34 34 34 33 32 33 37 40 41 38 36 33 35 37 39 39 39 38 38 37 38 38 37 36 35 
+92 85 79 73 70 68 66 69 75 81 83 81 80 81 82 83 83 79 75 70 66 62 58 56 54 53 51 50 49 48 51 53 56 59 63 66 66 63 61 60 64 67 70 65 61 57 55 55 54 55 57 61 64 65 66 66 61 55 50 53 56 59 59 56 54 54 58 62 66 65 65 65 67 68 69 70 70 71 72 76 80 83 82 82 81 79 79 77 76 74 73 70 66 62 58 58 57 55 54 52 51 51 52 52 51 46 42 38 39 40 41 41 41 42 40 38 36 35 36 37 39 43 48 53 54 55 55 55 53 52 51 50 50 50 50 51 52 50 48 46 46 46 47 49 54 58 60 60 59 58 62 66 68 71 73 75 77 80 82 84 84 84 83 84 86 89 91 93 96 100 106 113 119 121 126 128 128 129 130 130 132 132 136 142 147 151 149 149 148 143 138 132 128 124 118 112 104 97 91 85 78 74 71 69 67 69 70 71 75 80 85 82 74 64 57 60 63 67 67 68 68 69 70 70 73 76 79 80 73 66 59 60 62 64 64 64 64 64 68 70 73 73 73 74 72 70 68 69 70 70 69 65 61 59 61 63 64 65 65 66 66 66 66 67 69 72 72 71 69 67 67 66 66 64 61 59 61 65 69 71 67 63 60 63 67 70 72 72 74 74 74 74 74 72 71 71 74 78 83 81 78 75 73 72 71 71 73 75 76 74 71 68 68 69 68 71 74 76 79 79 80 81 76 72 68 71 74 77 83 88 94 102 112 122 131 136 138 143 149 155 161 162 160 161 159 161 160 164 165 166 167 168 169 171 168 166 164 157 151 143 138 132 129 125 116 107 99 90 83 74 74 78 83 86 90 93 96 94 90 86 87 86 87 84 79 74 69 64 59 54 50 46 43 44 46 48 50 52 53 54 52 51 49 46 44 40 40 40 39 38 37 35 34 34 33 32 32 32 32 36 39 42 41 38 35 33 33 33 33 33 34 35 36 37 38 39 38 37 37 39 40 41 39 37 34 35 36 36 36 35 35 36 37 38 39 38 37 36 
+85 83 79 76 72 68 64 64 65 67 66 63 61 61 63 66 69 67 65 63 62 60 58 56 55 54 50 47 45 42 46 50 54 61 68 74 73 68 62 59 57 56 56 55 54 52 56 59 62 60 56 53 52 54 56 57 54 51 48 50 53 56 56 55 53 55 60 65 69 68 67 67 70 74 78 80 82 83 86 87 89 91 88 84 81 76 71 66 64 62 61 59 55 51 49 50 51 52 50 48 46 46 47 47 46 44 41 39 41 43 46 43 40 38 38 40 41 41 41 40 41 43 46 49 49 49 50 50 50 51 50 50 50 50 50 51 51 51 49 49 48 48 48 51 56 61 65 64 63 62 66 72 78 78 77 77 78 82 86 89 88 89 88 89 90 90 91 92 93 97 105 113 118 118 119 118 117 112 110 110 112 113 118 125 132 136 136 135 134 134 131 129 124 120 115 109 104 96 90 85 80 75 74 72 70 71 73 73 77 81 87 85 77 68 63 65 68 71 69 65 63 65 70 74 77 77 77 75 68 60 53 53 55 56 56 55 55 55 57 59 62 65 69 72 68 63 61 64 70 76 76 68 63 59 59 59 59 62 64 66 66 65 65 66 70 72 74 72 71 70 71 72 73 68 61 54 55 62 69 70 66 61 58 61 66 68 69 69 70 69 67 65 65 66 67 69 75 80 85 85 81 80 77 73 70 71 73 76 78 74 69 66 67 67 67 70 73 77 79 79 79 79 73 69 63 66 69 72 78 84 91 100 109 118 126 130 134 137 145 150 157 156 153 150 150 152 155 158 161 165 166 166 167 167 166 164 161 158 157 155 152 147 142 137 127 118 109 97 87 76 73 77 80 84 89 93 96 91 86 82 82 83 85 83 79 75 70 64 58 53 48 43 38 39 42 45 47 50 52 53 53 53 52 50 48 45 43 41 38 37 36 35 34 33 31 30 31 32 34 37 39 43 42 41 39 38 37 36 35 35 36 36 38 39 41 41 40 38 38 38 39 39 38 37 35 35 35 36 35 35 34 35 35 36 36 38 40 42 
+73 72 72 72 69 67 63 60 57 54 50 46 42 41 45 48 51 53 54 55 58 61 63 67 69 72 71 66 61 56 55 55 55 58 61 64 63 60 56 56 58 62 63 64 64 64 67 71 74 70 60 51 47 47 48 49 48 47 47 48 51 53 55 55 56 59 65 71 76 77 78 79 82 86 90 90 90 90 89 87 86 85 82 79 77 71 66 61 58 57 56 54 52 51 49 49 50 50 47 44 41 41 43 45 44 42 41 40 43 46 49 45 41 36 38 41 45 46 45 44 43 44 44 44 45 44 44 45 47 49 50 50 50 49 49 49 48 51 53 55 53 51 48 50 56 62 66 65 64 63 68 73 78 75 70 66 67 72 78 81 82 82 82 84 86 88 89 91 92 96 100 104 106 105 103 101 103 103 106 112 118 125 130 134 139 143 142 143 142 142 142 142 136 131 124 117 110 103 96 90 83 77 76 74 73 73 73 73 76 78 81 80 75 68 65 68 70 73 70 68 64 65 68 70 72 74 76 76 69 63 55 58 59 61 59 57 55 55 55 54 55 59 63 66 65 64 63 66 71 76 74 69 63 59 61 63 64 63 63 63 66 68 70 70 66 63 62 65 67 69 70 70 71 66 60 54 56 63 71 75 70 66 63 64 68 70 69 68 65 66 68 70 71 74 77 79 80 81 80 80 79 77 76 72 70 70 72 75 76 71 67 62 63 65 67 70 72 75 76 76 76 75 71 65 60 63 65 67 73 81 89 98 105 114 121 125 129 131 137 145 153 150 146 140 140 144 148 151 156 160 165 166 167 169 167 164 161 159 154 153 150 145 139 135 126 116 108 98 89 80 78 81 85 89 89 89 90 86 82 79 80 82 84 82 75 68 63 61 59 57 51 44 37 38 40 41 44 47 50 53 54 55 55 53 52 50 46 42 38 36 36 36 35 35 34 33 36 38 40 42 42 43 42 39 35 33 33 34 35 36 37 39 39 40 40 39 37 36 35 35 36 36 35 35 35 36 36 36 36 35 34 33 34 34 35 38 41 43 
+57 57 57 57 60 62 63 61 58 56 56 56 56 55 55 55 57 61 63 66 67 69 71 75 79 84 85 78 72 66 62 59 55 54 52 51 51 50 48 52 64 75 83 85 87 89 89 88 89 84 77 69 63 57 52 48 46 45 43 46 48 51 55 58 61 65 73 80 85 85 85 86 88 91 93 94 93 91 89 86 83 80 78 75 72 66 62 56 53 52 51 51 51 51 52 50 49 48 44 40 37 37 40 42 44 43 41 42 45 48 51 47 43 40 40 43 45 47 47 47 47 46 45 44 44 43 43 43 44 44 45 45 45 46 47 47 49 50 52 54 53 51 50 50 52 55 57 58 58 59 63 66 71 67 61 55 57 64 70 75 74 74 75 77 80 84 87 90 91 93 95 96 96 93 89 87 92 97 102 113 122 134 140 142 145 147 149 149 149 152 152 155 147 140 135 127 118 111 102 94 86 79 78 77 75 74 74 74 74 75 75 74 71 69 68 70 71 74 72 70 68 66 64 64 65 69 74 77 71 66 61 63 66 68 66 62 59 56 53 51 50 53 56 59 62 65 69 71 72 75 74 69 63 60 64 67 71 67 63 60 64 70 76 73 63 54 49 55 62 69 68 69 68 64 59 53 56 65 74 78 73 70 66 68 70 72 69 66 63 63 68 72 76 80 82 85 81 78 76 75 76 76 75 74 72 71 72 73 72 68 65 62 62 63 63 66 69 73 75 74 73 73 71 70 70 70 71 73 78 85 93 98 104 109 113 114 116 117 122 129 136 135 133 129 129 135 139 146 150 155 162 166 171 177 171 167 161 153 149 143 139 134 131 127 119 112 105 97 90 84 82 87 89 92 90 85 82 80 77 75 76 78 80 77 70 62 56 56 54 53 47 42 37 37 38 38 40 44 47 49 50 51 51 52 51 52 48 44 39 37 37 36 36 38 40 42 45 47 50 49 47 45 41 36 30 26 29 32 35 36 38 39 39 37 37 35 35 36 36 35 34 33 34 35 36 35 35 34 33 33 32 32 34 36 39 39 40 40 
+66 64 61 60 62 65 68 65 62 60 62 67 72 73 70 68 69 75 82 87 84 82 80 81 83 85 84 79 75 69 62 55 49 48 48 48 47 47 47 54 68 83 95 99 103 106 104 102 101 96 90 85 78 68 58 50 46 43 40 43 46 49 55 61 67 73 82 90 96 93 91 88 89 90 89 87 87 85 85 85 83 83 78 75 70 66 62 58 56 53 51 51 51 52 53 52 52 52 48 45 42 43 45 48 48 47 45 45 46 48 50 47 44 40 41 43 45 47 49 50 51 49 46 44 43 43 43 42 41 41 40 40 41 41 44 47 49 49 49 50 51 51 52 50 47 44 43 45 47 49 50 53 53 53 51 49 52 58 63 67 65 64 63 68 72 76 81 86 90 92 92 91 90 91 90 90 96 103 110 116 123 130 136 140 142 146 147 148 148 147 148 146 143 138 133 129 122 117 111 103 97 90 86 82 78 78 77 77 77 77 77 76 74 71 69 70 70 71 72 72 72 71 68 65 64 67 69 72 69 67 65 66 67 68 65 60 56 54 55 55 56 61 65 69 70 73 74 75 75 75 72 67 62 59 61 65 67 65 64 61 65 69 74 72 65 58 54 60 66 70 71 70 70 68 65 62 64 70 77 78 74 69 66 66 66 67 65 64 62 64 68 71 74 75 75 75 73 70 68 70 72 75 76 77 77 77 73 70 66 66 64 64 63 61 59 62 66 70 74 73 72 71 75 78 81 82 81 81 86 92 99 103 102 103 104 103 104 104 109 115 118 119 119 119 119 126 131 137 145 154 162 170 175 182 178 172 162 155 145 136 129 124 121 117 111 105 101 95 90 85 85 90 95 97 91 85 78 76 72 69 67 69 70 67 61 55 50 48 44 40 39 38 38 37 36 36 37 40 43 46 46 47 47 50 51 53 51 46 41 39 38 37 38 40 42 45 46 46 46 44 42 40 38 35 33 33 34 35 36 36 35 35 33 31 29 30 33 37 40 37 34 30 33 35 37 36 34 32 31 30 30 31 35 38 42 41 40 40 
+93 91 88 86 85 85 84 80 75 72 71 72 73 72 70 66 66 75 83 91 89 87 84 85 86 86 84 79 74 68 60 51 43 44 44 45 45 46 47 56 72 89 102 106 110 114 113 112 112 106 99 93 85 78 69 62 55 49 43 44 45 46 54 63 72 79 86 92 96 95 94 92 91 89 87 85 83 80 80 81 82 82 77 72 68 66 63 60 57 55 52 52 53 53 54 55 57 57 56 54 53 55 57 58 58 55 52 50 47 45 43 41 39 37 39 42 44 47 49 51 53 53 52 52 49 47 44 44 43 43 43 41 40 40 42 45 47 47 47 46 48 50 50 48 45 41 39 42 45 47 46 46 45 46 47 48 50 53 56 58 57 56 56 62 67 73 79 86 93 93 92 89 89 90 91 93 100 107 114 118 121 125 129 134 140 142 145 147 147 146 142 140 137 133 131 128 126 123 120 113 108 101 95 87 80 80 80 82 83 82 82 80 77 74 71 69 69 68 71 75 79 77 72 68 66 65 65 66 67 67 69 68 68 68 63 57 52 51 55 60 65 71 77 83 82 80 80 79 77 75 71 66 60 57 58 60 62 62 63 63 65 68 71 69 66 62 62 65 70 73 73 73 72 71 70 69 72 75 78 78 74 69 64 64 64 63 63 62 62 64 68 71 74 71 69 68 66 65 64 66 69 73 74 74 75 74 69 65 62 63 63 64 63 60 57 59 63 67 69 70 69 68 72 74 76 75 73 72 74 79 85 88 88 90 90 90 89 88 92 98 102 104 105 106 110 117 123 131 142 154 165 171 180 189 186 178 172 160 147 133 120 115 112 106 104 99 96 94 91 87 88 93 98 101 93 85 77 71 68 62 61 60 60 57 53 49 45 42 40 37 37 37 37 37 37 37 37 39 41 41 42 42 43 46 50 54 51 47 41 39 39 40 41 41 42 43 41 38 36 34 34 34 34 35 38 39 39 38 38 36 33 31 29 28 26 28 32 36 38 36 35 35 35 36 36 35 34 33 33 35 36 38 40 42 43 43 44 44 
+103 102 100 101 98 95 94 89 84 79 78 76 74 71 66 61 61 69 78 86 86 87 87 88 87 87 81 73 64 57 49 42 36 39 41 43 45 47 50 59 74 89 101 107 113 118 118 118 119 115 108 102 94 88 82 73 63 55 46 45 43 43 52 64 76 83 86 89 93 96 97 97 94 91 89 85 81 77 77 77 77 77 73 71 68 68 69 69 67 65 62 61 61 61 61 61 61 61 62 61 61 62 63 64 63 61 59 55 52 48 44 41 39 38 39 42 44 46 49 51 52 55 56 58 54 50 46 46 47 47 46 44 41 40 41 43 44 44 44 44 45 46 47 47 45 44 44 48 50 53 50 47 45 47 50 53 52 51 49 49 50 53 55 65 74 84 91 97 103 104 102 98 96 93 90 89 94 99 104 104 102 101 103 106 109 111 114 115 118 118 117 118 120 121 123 123 123 122 120 116 111 106 100 94 88 85 82 81 81 82 84 82 78 74 71 69 67 65 69 72 76 75 71 68 64 63 60 58 61 63 65 66 65 65 61 57 51 51 56 61 65 68 71 73 73 72 71 70 70 70 68 64 62 60 60 61 63 64 66 67 68 69 70 69 68 67 67 69 71 73 72 72 71 69 68 66 66 66 66 66 66 66 66 66 66 67 65 63 61 63 68 72 74 71 69 66 66 66 66 67 67 69 68 65 62 61 59 58 58 60 61 62 61 61 59 60 62 63 64 65 66 65 65 66 65 64 62 61 61 66 69 72 74 76 77 76 76 75 79 84 88 94 99 103 110 120 128 139 148 158 170 177 183 187 187 179 173 163 149 136 124 119 115 110 107 105 102 100 99 98 98 100 102 100 94 87 82 74 65 58 54 52 51 49 45 43 40 40 40 40 40 39 37 37 37 38 38 38 38 38 38 38 38 43 48 53 52 47 42 40 40 41 40 40 39 38 37 35 34 33 33 33 33 34 35 36 38 39 41 38 34 31 30 30 31 32 31 31 30 34 37 41 40 37 35 34 35 35 37 39 42 44 44 44 45 45 46 46 
+100 99 100 97 94 91 88 82 76 71 71 72 72 70 66 63 63 70 77 84 85 86 88 88 87 86 80 69 59 50 43 36 30 34 38 42 45 48 52 61 75 88 99 107 114 119 120 120 121 119 117 113 107 100 93 85 73 59 49 50 50 50 57 65 73 79 82 85 88 91 95 97 95 93 89 84 79 74 73 73 74 73 71 69 67 71 75 78 76 74 71 70 70 70 70 68 67 66 67 67 68 68 67 66 66 65 64 62 60 57 54 50 46 43 43 44 44 46 47 49 49 48 48 47 47 47 46 47 48 49 48 46 45 44 43 42 41 42 42 42 43 44 44 46 47 49 51 54 58 60 56 52 49 52 56 61 58 53 47 45 48 51 56 68 79 92 98 104 111 111 108 106 101 96 90 87 88 92 95 90 85 81 80 79 81 83 84 87 89 92 95 97 103 109 115 118 118 121 119 117 115 111 106 101 95 90 85 79 79 82 85 84 79 74 69 68 65 63 65 69 72 72 70 67 63 59 54 50 54 57 60 61 61 62 60 56 52 52 57 61 63 63 61 62 61 60 59 61 62 63 64 64 64 64 64 63 63 66 69 72 71 70 69 69 69 71 72 72 73 73 72 71 69 68 66 65 62 59 57 55 58 62 65 67 67 70 68 65 63 65 68 73 73 70 66 63 63 65 66 66 67 67 65 61 57 54 56 57 59 60 61 62 61 60 60 61 62 64 65 65 64 64 63 63 62 62 61 60 61 64 68 70 71 71 71 75 76 79 86 93 101 111 121 132 140 149 158 165 170 174 179 180 181 182 180 176 172 165 155 144 133 129 125 121 117 113 109 108 108 109 109 107 103 100 96 91 86 76 66 55 50 48 46 44 42 40 39 40 40 41 40 39 38 39 40 41 41 40 39 38 38 38 38 41 47 51 50 48 45 43 41 38 35 34 33 32 33 35 36 36 35 33 32 32 32 32 36 39 43 40 35 31 30 32 34 34 32 31 31 34 38 41 39 37 35 35 37 39 41 44 47 50 49 48 48 46 45 43 
+91 92 94 93 89 86 81 75 70 62 64 67 70 70 67 65 66 73 78 84 84 85 86 86 85 83 78 71 65 57 48 40 34 38 42 47 48 49 50 58 71 84 95 103 111 118 120 120 121 121 120 119 115 110 104 94 80 66 54 54 56 57 61 66 70 73 76 79 83 88 91 94 93 91 89 83 78 71 71 73 75 74 71 69 66 70 73 76 75 74 72 72 73 74 74 73 71 70 69 68 68 68 67 66 67 65 64 64 62 60 57 53 49 45 45 44 44 44 45 46 46 44 40 38 41 44 47 48 49 50 50 50 49 47 43 41 38 39 40 41 41 42 42 45 50 54 59 62 67 69 64 60 55 60 65 71 67 60 52 49 53 56 61 72 82 94 98 103 108 107 106 103 102 98 94 92 91 90 91 89 87 85 82 79 77 76 79 83 85 86 86 88 92 97 100 103 105 107 108 106 105 104 100 96 93 88 84 81 78 79 78 78 78 76 74 71 66 63 64 66 67 67 67 68 65 59 53 50 55 59 63 63 63 62 59 55 52 50 51 53 55 57 58 60 60 61 60 62 65 67 67 67 65 65 63 62 62 65 68 71 69 64 61 61 66 70 73 72 71 70 66 63 60 61 63 66 67 64 63 61 60 59 58 61 65 69 71 71 72 71 70 68 66 63 59 56 59 61 64 66 66 67 66 62 58 56 58 60 62 62 63 63 62 61 59 61 64 67 69 67 66 64 64 63 62 61 60 60 61 65 68 69 68 67 67 73 78 84 94 105 116 126 139 151 163 169 176 180 178 179 178 176 172 167 163 163 163 157 150 144 137 132 128 124 119 115 110 108 106 105 103 100 95 91 90 88 87 78 67 56 51 49 47 46 45 44 43 42 41 39 39 40 40 41 43 45 45 43 41 38 38 38 38 41 44 47 47 46 46 44 40 36 33 32 32 31 33 35 37 38 38 38 37 34 31 29 32 36 39 37 33 30 30 31 33 34 35 36 38 38 38 38 37 36 35 36 39 42 45 48 50 53 52 51 50 49 46 44 
+79 83 86 85 83 79 75 69 65 60 59 59 60 62 64 67 71 78 83 88 86 85 84 85 85 86 82 77 72 65 56 46 39 42 46 51 50 48 46 54 66 80 89 99 108 115 116 118 119 118 119 119 115 111 105 97 85 74 63 59 54 51 54 58 61 65 70 73 77 82 86 90 89 88 86 81 75 69 68 72 75 75 71 69 66 69 72 75 74 74 73 74 75 77 77 76 75 73 70 67 63 65 66 66 66 64 62 59 57 54 51 48 45 42 41 40 38 40 42 45 45 44 43 42 41 41 40 41 41 42 45 47 48 48 45 41 39 40 41 42 43 44 45 47 50 54 58 63 67 69 66 63 59 62 66 70 66 60 53 51 54 57 61 71 80 90 93 98 102 102 100 99 98 96 96 93 91 89 86 87 87 88 83 77 70 69 74 79 82 81 80 79 82 83 87 89 90 93 95 95 95 95 94 92 90 87 84 81 78 75 72 72 75 78 79 73 68 63 62 62 62 64 66 68 66 60 54 51 56 62 67 66 64 64 60 55 50 47 45 44 45 50 56 61 62 62 62 65 69 72 73 70 67 64 63 62 61 64 68 71 66 59 52 53 61 70 74 71 68 65 61 56 52 56 62 68 70 68 67 65 61 57 53 58 64 69 72 74 77 75 70 66 62 59 56 55 57 60 62 63 65 66 64 61 58 57 60 63 65 65 64 63 62 62 61 62 64 67 67 65 63 61 62 62 63 63 62 61 62 64 65 66 67 69 71 80 88 97 108 116 128 138 144 152 157 163 169 172 172 167 166 159 151 143 140 143 146 145 143 140 136 133 129 125 121 114 108 105 103 101 98 93 87 84 85 87 88 79 67 56 49 48 46 46 46 46 46 43 41 39 38 39 39 40 42 42 43 42 41 41 41 41 41 41 40 39 39 40 41 40 38 36 35 34 33 33 34 36 38 40 41 43 42 37 31 26 29 32 36 35 33 31 31 32 33 36 38 41 44 42 40 38 37 36 35 35 35 36 37 42 46 51 51 52 53 52 50 48 
+70 71 73 73 72 71 68 64 61 57 55 53 50 54 63 71 77 84 90 94 90 86 82 87 92 95 93 88 84 77 69 60 52 50 49 48 49 50 51 55 61 67 76 85 96 103 107 107 110 113 115 118 115 110 105 98 89 80 72 63 54 45 47 50 52 56 61 66 71 75 81 84 84 84 82 77 72 67 68 71 74 74 70 66 65 70 76 82 83 84 86 86 85 85 84 81 78 76 74 71 68 66 65 65 61 58 55 53 51 49 46 44 43 40 39 37 36 37 40 43 44 45 46 45 42 38 34 34 35 35 39 43 48 49 45 42 40 42 44 46 47 48 49 49 49 49 52 56 62 65 64 63 62 61 59 58 55 53 49 48 50 52 56 63 70 78 81 85 87 88 88 88 87 85 84 81 81 79 78 78 77 77 71 64 57 56 66 75 83 86 90 92 90 88 86 85 85 86 86 88 89 90 87 85 82 81 81 79 76 72 69 67 70 73 75 72 67 64 64 65 65 65 65 65 64 60 56 54 59 64 68 65 61 57 56 56 55 54 54 53 54 57 59 62 62 62 61 64 67 71 73 70 69 67 67 65 63 65 66 67 65 62 59 60 63 67 69 68 66 64 63 61 59 62 65 68 68 64 59 57 58 61 62 63 65 65 68 70 72 71 68 65 63 63 63 64 63 62 61 61 60 60 60 59 58 59 62 66 69 67 65 63 63 63 63 64 64 64 62 61 59 57 59 62 65 65 64 64 63 63 63 64 67 71 75 85 96 106 117 125 134 141 143 145 148 151 154 156 155 153 151 143 133 121 117 120 122 124 125 126 129 125 121 116 112 108 104 102 102 103 103 99 97 95 92 88 86 76 64 52 46 45 45 45 45 46 47 44 41 38 38 38 38 38 38 38 39 41 42 44 44 44 44 41 38 35 34 36 38 38 38 37 36 35 36 35 37 38 39 40 41 42 42 38 34 31 33 34 36 36 35 35 35 35 36 37 42 46 51 48 44 41 39 37 34 33 31 29 30 36 42 47 50 52 55 55 54 52 
+61 59 57 57 59 61 62 59 57 55 58 59 61 67 74 81 85 88 90 92 89 85 83 89 96 102 101 96 92 86 78 71 64 57 51 44 49 53 57 56 54 54 59 69 80 88 91 94 96 102 110 115 113 107 102 95 87 79 72 66 60 54 54 54 54 57 60 64 69 74 79 83 81 81 79 76 73 69 69 69 72 70 67 65 63 70 77 84 89 94 97 98 97 95 90 86 82 78 78 77 77 71 65 60 55 51 47 45 44 43 43 43 43 43 41 40 39 39 40 42 44 46 48 48 44 40 36 37 38 38 41 45 49 50 47 44 42 43 44 45 46 47 48 47 46 45 46 51 54 58 59 58 59 57 55 53 50 48 46 45 46 48 49 55 60 65 67 69 71 73 75 77 76 74 72 71 70 70 70 71 70 70 63 56 47 49 61 73 84 91 98 106 99 91 84 82 79 78 79 81 83 83 81 78 75 76 77 78 75 69 64 63 65 68 70 68 66 65 67 69 71 69 66 62 61 60 58 58 62 66 69 64 56 50 52 57 61 63 64 65 65 65 64 62 61 61 60 62 66 70 71 70 71 70 69 68 67 66 64 62 64 65 67 67 65 64 63 63 64 65 64 64 64 65 67 68 66 60 54 52 57 63 67 66 65 65 65 66 68 68 66 65 64 66 68 69 65 62 58 58 58 58 58 58 57 58 61 64 66 64 63 61 61 63 64 64 63 61 60 57 54 52 56 59 62 62 61 60 59 60 60 61 64 66 68 78 87 96 104 110 117 121 121 121 123 124 126 130 130 131 131 123 113 102 97 96 94 96 103 111 118 114 110 104 102 101 99 101 103 105 105 106 104 103 97 91 83 74 62 52 47 46 45 45 45 46 47 45 43 42 41 39 38 37 38 39 40 43 46 50 49 49 49 45 41 37 35 37 38 39 38 37 36 37 38 39 40 40 41 41 40 40 39 38 37 36 36 36 36 36 36 37 37 37 37 38 43 48 53 50 48 45 42 40 37 35 34 33 32 35 39 42 47 51 57 58 57 58 
+71 66 62 59 61 60 61 58 56 54 59 65 71 78 85 91 92 91 88 87 86 84 83 90 98 104 102 98 93 86 78 71 64 60 55 50 52 53 55 57 61 62 64 68 71 74 75 76 77 89 99 110 108 103 98 92 85 78 73 69 66 64 61 59 58 59 62 64 68 74 80 83 80 79 77 77 77 76 74 70 68 64 62 59 58 62 65 69 74 79 83 84 84 84 83 81 79 77 77 77 77 72 66 60 55 51 48 45 42 40 39 40 43 45 42 41 39 39 40 40 42 45 48 50 47 42 39 39 41 41 44 47 50 51 49 46 44 44 44 43 44 44 44 44 42 42 42 44 46 49 49 50 51 52 54 54 52 48 43 41 41 41 43 45 48 49 49 49 49 54 61 67 69 65 62 60 61 61 62 69 75 80 79 75 70 72 79 88 94 99 103 107 101 95 88 85 84 82 81 83 83 82 78 75 71 72 73 73 71 68 66 64 64 63 64 64 65 65 64 64 64 64 64 64 63 61 59 58 60 63 66 63 59 56 57 59 61 62 62 61 60 62 64 65 65 63 63 63 65 66 67 67 67 67 69 71 73 68 64 59 61 65 67 68 65 62 59 59 60 60 61 62 63 64 63 64 63 60 56 54 57 59 61 63 66 69 68 67 67 66 66 67 67 67 66 65 62 58 54 54 57 59 60 59 57 56 57 58 59 58 57 57 59 61 64 64 61 60 57 54 51 48 51 55 59 59 57 56 55 56 57 59 60 61 63 70 78 84 91 96 101 104 103 102 102 104 106 108 111 112 115 110 102 97 92 90 89 89 95 100 103 103 100 100 99 99 97 98 101 104 105 105 104 103 96 89 82 74 68 62 57 54 50 47 47 46 45 46 46 47 45 41 38 36 38 39 41 46 51 55 55 53 53 48 44 40 38 38 39 39 38 37 36 36 37 38 38 38 37 37 37 36 36 34 32 30 32 34 36 37 36 35 35 35 35 35 41 46 51 51 50 48 46 43 40 38 36 35 33 35 36 38 44 50 55 57 57 56 
+89 87 85 80 75 71 68 64 60 57 56 57 58 64 71 78 79 77 74 74 76 78 81 88 97 103 100 96 91 86 79 72 66 62 59 56 54 53 52 60 70 78 78 72 65 61 57 54 53 68 84 98 98 96 94 92 86 81 77 74 72 70 67 63 60 59 58 58 60 64 68 70 72 72 72 73 74 75 71 68 63 60 58 57 55 55 55 56 60 65 69 71 72 73 74 74 75 76 75 76 76 72 68 63 60 57 54 49 43 38 35 38 42 44 41 38 35 35 36 38 39 41 44 45 44 43 41 43 44 45 45 46 46 46 46 45 45 45 46 46 45 45 44 44 44 44 44 44 44 45 45 45 45 48 51 54 51 46 42 39 40 41 41 41 41 41 39 37 36 42 50 58 60 57 54 52 55 58 61 71 81 92 93 92 91 93 97 100 104 105 107 107 103 98 92 90 88 86 84 83 83 81 77 72 68 67 68 68 68 68 67 65 63 60 58 60 62 64 60 58 56 59 62 66 66 62 58 55 58 60 63 62 62 61 61 61 61 60 57 55 53 58 63 68 68 67 66 65 64 63 62 63 63 65 69 73 77 70 63 56 58 63 68 69 64 59 55 55 56 55 58 60 62 62 61 60 59 58 56 56 56 56 56 61 66 70 70 67 64 63 63 65 65 64 64 63 59 55 52 53 57 60 61 57 55 53 54 55 55 55 56 55 57 59 62 62 60 57 55 54 52 51 53 54 56 56 57 57 57 56 55 55 57 59 61 64 65 66 74 83 93 98 95 92 91 92 93 94 97 98 101 102 101 100 100 98 96 94 94 91 89 91 93 97 97 96 95 97 100 104 106 104 103 100 93 86 79 75 71 66 62 57 51 47 46 45 44 46 47 48 46 42 38 36 38 39 41 46 51 57 54 51 48 46 45 45 44 42 41 39 38 36 34 34 34 35 34 33 32 32 32 33 33 30 27 25 28 33 37 38 37 37 36 36 36 36 40 43 46 46 44 43 41 39 37 35 33 31 30 33 35 39 43 46 50 51 50 49 
+79 81 80 79 75 71 68 65 61 58 54 50 46 51 57 63 63 60 58 59 65 71 76 85 91 99 96 91 86 83 79 76 71 65 60 55 52 49 47 55 63 72 72 67 60 55 52 47 44 57 71 85 87 88 88 87 86 82 81 79 77 76 72 67 63 59 54 51 49 50 50 52 57 63 66 64 63 61 61 61 61 60 59 58 57 58 59 60 59 60 61 61 60 61 63 66 68 69 71 71 71 67 63 60 58 57 56 52 46 40 36 38 42 45 41 37 33 34 35 37 38 39 41 42 42 42 43 45 46 48 46 43 41 41 42 44 45 47 48 50 48 46 44 45 47 49 49 47 46 44 43 42 41 44 47 50 48 45 42 41 44 47 47 45 43 41 40 39 39 41 44 47 49 50 50 53 62 70 79 87 94 102 103 101 100 100 101 102 102 102 102 102 102 101 99 98 95 93 93 94 95 95 91 86 81 81 79 78 77 75 75 73 72 69 68 64 61 58 58 58 58 60 63 66 65 61 57 54 55 57 58 59 59 60 61 63 64 64 62 59 59 62 64 67 67 67 68 65 63 60 59 61 63 65 69 73 76 69 63 55 56 59 62 62 59 56 54 55 56 57 58 58 59 59 59 58 57 56 55 55 55 55 55 59 64 68 66 62 57 55 53 52 52 55 58 61 58 55 53 55 57 60 59 55 51 47 50 52 55 55 55 55 57 58 60 60 58 56 54 54 56 56 55 54 52 54 57 60 60 56 53 51 54 57 60 57 55 53 61 71 83 88 85 83 81 82 84 84 89 93 98 103 108 114 116 114 113 112 107 103 100 103 106 108 109 109 107 107 104 105 102 97 91 86 83 78 75 71 66 62 57 52 48 44 44 44 44 45 47 48 46 43 38 37 38 39 40 46 52 58 53 49 45 44 46 48 49 46 43 40 38 36 34 35 35 35 35 34 33 33 34 35 35 34 33 32 34 36 39 40 41 43 44 43 42 40 40 40 39 38 36 35 34 33 33 32 30 29 27 32 36 40 42 43 44 44 44 44 
+55 57 59 59 58 56 55 56 55 55 53 52 50 54 58 63 59 54 48 49 56 63 70 78 87 95 91 89 84 83 80 78 74 68 60 54 50 45 41 47 54 61 61 59 56 54 52 50 49 56 64 71 74 76 77 79 82 82 82 79 76 73 66 59 52 51 51 51 48 47 44 45 51 57 62 61 59 58 58 59 60 60 60 60 59 60 62 62 59 56 53 52 50 49 51 56 60 64 65 65 66 61 57 52 53 54 55 53 49 45 42 43 44 45 42 40 37 38 40 42 42 43 43 43 41 39 37 40 41 44 44 43 41 41 42 42 44 44 45 46 45 45 44 46 50 53 53 48 45 42 43 44 44 44 45 44 44 43 42 43 47 50 52 48 46 42 42 41 40 41 41 41 43 47 50 56 68 80 93 99 104 109 109 108 107 107 104 102 101 100 99 97 100 103 106 105 102 100 101 104 107 108 104 99 94 92 90 87 85 83 81 81 80 80 78 69 60 51 54 58 61 63 64 66 64 60 56 53 53 54 54 56 57 58 61 64 66 68 67 65 65 65 65 65 67 69 70 66 61 56 55 58 62 65 69 72 75 69 62 56 55 55 57 56 54 53 52 54 56 57 57 57 57 56 56 56 55 54 53 54 55 57 57 60 62 64 61 57 53 50 50 49 48 52 55 57 56 54 53 54 57 59 59 56 53 50 52 53 55 57 58 59 60 60 60 59 56 54 52 53 54 56 55 54 54 55 58 61 61 59 58 56 58 59 60 60 58 57 59 63 65 69 70 72 74 76 78 79 87 95 105 114 124 133 138 137 135 132 129 123 117 118 121 122 122 121 118 116 111 106 99 91 82 74 72 70 69 67 63 59 56 53 49 47 47 47 46 46 45 45 44 42 40 39 40 40 41 44 48 51 51 50 49 49 51 52 51 48 45 42 41 40 38 38 38 38 38 37 36 35 36 36 36 37 38 38 39 40 39 41 44 46 47 45 43 42 40 39 37 35 34 32 31 31 32 32 33 34 35 38 42 45 44 41 37 36 39 41 
+48 47 47 47 47 47 48 48 49 50 51 52 53 56 60 63 56 48 40 40 47 54 62 72 81 91 90 90 89 86 82 79 72 62 53 45 44 43 41 46 52 57 56 53 50 49 50 51 52 57 62 66 69 71 73 76 78 82 83 79 75 70 61 50 41 44 49 53 51 47 43 43 49 55 60 61 63 64 62 62 61 61 61 61 61 62 63 63 61 59 57 57 58 58 59 60 62 62 62 61 61 57 53 50 49 49 50 50 48 46 45 47 47 48 45 43 41 42 43 44 45 45 45 43 40 36 33 35 38 40 41 42 42 42 42 42 41 41 40 40 41 43 44 48 52 57 55 49 43 40 45 49 52 48 42 38 39 41 43 46 49 53 55 52 49 48 45 43 40 41 43 45 48 54 59 65 73 81 89 94 98 104 105 107 107 105 106 103 102 100 97 96 97 99 100 101 100 99 99 101 103 105 104 103 104 102 98 97 92 86 79 77 79 81 80 73 66 59 59 58 57 60 65 70 68 62 56 52 53 54 54 53 52 52 54 58 62 64 63 62 62 65 69 71 69 66 63 61 61 59 61 64 67 70 70 71 71 69 67 65 62 59 56 54 51 49 48 50 53 56 56 56 57 56 54 51 51 52 52 53 57 62 66 63 60 57 56 56 54 55 58 60 61 59 56 53 52 51 50 52 55 59 60 60 59 59 58 58 56 59 62 63 64 62 60 58 55 52 50 52 53 55 55 55 55 57 59 61 62 62 62 62 62 61 61 60 60 59 58 56 55 56 61 67 72 74 76 79 89 101 112 121 132 140 145 142 141 140 135 130 125 125 125 126 125 122 120 116 111 106 101 90 80 70 67 65 63 62 60 58 57 56 56 56 54 52 50 47 45 42 41 41 41 42 42 42 42 43 44 45 47 49 51 52 52 53 52 50 47 44 42 40 38 37 37 37 37 36 35 35 35 34 34 36 37 39 40 41 41 41 41 41 40 40 41 41 39 39 37 35 33 30 29 30 31 32 36 38 41 43 45 48 44 39 34 32 36 39 
+46 44 42 43 44 45 44 44 43 42 44 44 45 48 51 53 50 45 39 40 45 49 55 61 67 74 77 80 82 81 77 74 67 57 46 38 39 40 41 46 51 55 53 48 43 43 46 49 53 61 68 75 78 80 84 84 83 83 81 79 75 72 65 57 51 50 51 51 50 46 42 42 47 52 56 59 61 64 64 64 63 63 63 63 62 62 62 63 62 61 60 62 65 68 67 65 64 62 60 57 55 53 51 49 47 45 43 42 43 44 45 48 51 53 50 47 45 44 43 43 42 42 42 41 39 36 35 37 39 41 41 42 43 42 42 41 42 43 44 45 47 49 51 52 53 54 53 50 45 44 45 46 48 44 41 37 39 42 45 47 50 52 53 52 50 49 46 44 41 42 44 46 51 58 65 72 76 80 84 89 93 99 102 104 106 106 105 103 101 99 96 93 94 95 95 97 97 99 99 100 99 100 105 108 112 109 108 106 98 87 78 74 78 81 82 77 72 67 63 58 53 58 65 73 73 64 57 52 53 54 55 52 48 45 47 52 57 59 59 58 58 65 71 77 70 63 55 56 61 63 67 70 73 74 72 69 68 69 71 72 68 63 57 53 49 46 44 48 51 54 56 56 57 56 53 50 49 50 52 54 58 64 69 64 58 52 51 54 55 58 63 68 69 63 57 52 51 52 53 55 56 58 59 60 61 62 60 58 56 59 64 68 67 66 63 62 61 60 60 60 60 60 59 57 56 56 56 56 57 60 63 65 61 58 54 55 56 57 57 56 56 58 65 72 77 80 82 86 96 106 117 125 132 137 142 142 142 143 136 133 129 128 129 127 127 122 120 117 112 107 102 92 81 71 66 63 59 58 58 58 58 59 59 60 58 56 54 51 46 41 39 40 41 40 41 40 40 41 42 43 43 44 44 45 48 50 52 50 49 47 43 39 35 34 34 34 35 34 34 34 33 32 31 34 37 40 41 41 41 40 39 37 36 37 39 40 39 38 37 35 35 34 34 34 34 34 36 38 39 40 42 43 42 38 35 35 36 38 
+43 42 41 42 43 45 44 41 38 37 38 38 38 40 42 44 44 42 41 41 44 46 47 46 45 46 51 55 61 60 59 58 54 48 42 39 41 44 46 48 50 52 51 49 46 47 51 55 59 66 72 78 81 83 85 85 84 82 80 78 75 72 68 65 61 57 53 50 47 45 42 42 46 49 53 55 56 57 61 65 69 69 67 66 64 61 56 54 56 58 59 61 63 65 65 63 62 59 55 51 48 47 46 45 44 43 42 42 44 45 47 50 54 56 53 51 48 46 43 41 40 40 40 39 39 37 36 38 39 41 41 42 42 42 42 42 43 46 48 51 53 56 58 56 53 50 50 50 51 50 44 40 36 37 39 40 42 45 48 48 49 48 48 48 46 45 44 43 42 43 43 44 48 57 64 71 74 78 82 87 93 99 101 101 103 103 102 102 101 97 94 89 91 92 95 97 97 99 98 95 93 92 95 98 100 97 95 92 89 86 83 83 84 85 85 83 82 80 75 69 64 65 68 71 70 64 58 54 57 59 61 59 57 55 55 56 57 58 58 58 60 61 64 66 62 58 55 58 64 71 74 72 72 72 70 70 69 67 64 63 61 59 58 57 54 53 52 53 55 57 59 61 63 61 58 55 54 55 56 58 59 60 61 58 55 52 52 54 54 57 62 68 70 64 58 52 55 59 62 62 61 59 59 59 59 59 58 56 55 60 66 72 72 70 68 67 68 71 71 69 67 64 62 60 57 55 53 51 52 58 63 67 62 55 50 51 54 55 56 56 57 60 68 77 84 87 90 93 101 109 117 122 126 128 132 133 135 136 135 134 134 133 131 129 126 122 118 114 110 106 102 98 92 87 80 72 63 58 58 59 59 58 58 57 59 60 61 56 50 43 39 40 39 39 39 38 39 39 40 41 41 40 39 40 44 47 50 49 49 49 45 41 36 36 36 37 36 35 33 31 31 30 30 33 37 40 40 39 38 36 35 34 34 35 38 40 39 38 37 37 38 39 40 38 37 37 36 36 37 38 39 40 39 37 35 33 36 38 
+40 41 43 44 45 46 43 40 37 36 37 39 39 41 43 44 42 40 38 40 45 49 51 46 42 39 42 45 48 48 47 46 44 42 40 40 44 47 50 50 49 49 51 52 53 56 61 67 70 73 74 76 73 71 69 72 74 78 78 76 75 72 68 64 61 62 62 63 59 55 51 50 50 52 53 54 55 56 59 63 67 68 69 69 66 59 53 48 52 56 59 60 62 62 62 61 60 57 51 45 41 41 40 41 42 44 45 46 48 49 51 54 56 58 55 52 49 48 47 45 44 42 42 41 41 41 41 40 39 37 38 39 40 41 44 46 47 48 48 50 50 49 49 48 46 44 44 46 47 47 44 41 38 43 47 52 51 50 49 49 49 49 47 46 45 43 42 41 40 41 42 43 49 57 67 73 75 77 79 84 90 97 97 98 97 98 98 98 98 94 90 87 89 91 93 95 97 99 97 93 88 87 87 88 88 86 84 80 83 86 89 89 90 90 89 91 91 93 86 80 74 72 70 70 67 63 58 56 59 62 66 65 64 65 62 60 58 57 57 59 59 58 56 55 54 54 54 60 69 76 80 76 72 68 69 68 68 63 59 55 54 57 59 60 59 59 59 59 59 59 62 65 68 65 62 59 57 59 60 61 58 56 53 53 52 52 53 53 55 56 61 67 69 64 59 54 58 63 67 67 63 58 55 58 60 61 59 57 55 59 63 67 67 65 63 62 63 64 65 66 68 68 66 65 61 60 59 57 57 60 62 64 61 58 56 55 56 56 57 58 60 64 74 82 91 94 97 101 105 109 113 116 117 116 117 121 123 128 130 135 140 137 134 131 126 121 115 111 109 106 104 103 102 100 91 79 69 64 64 64 64 63 63 62 63 63 63 59 52 46 43 42 41 41 40 40 40 41 44 45 45 44 43 43 43 44 44 46 47 49 47 44 41 41 41 42 41 36 32 28 28 28 28 32 36 40 40 37 35 33 34 34 34 36 37 39 39 40 41 41 41 41 40 38 36 34 35 36 37 38 39 39 37 33 29 28 34 41 
+37 38 39 41 44 46 43 39 35 34 36 38 40 41 43 44 40 37 34 39 47 55 58 56 53 50 50 49 48 48 46 44 42 40 38 38 43 48 52 54 55 57 59 61 63 65 69 73 75 74 73 70 67 63 58 62 67 72 74 74 73 71 68 64 60 66 72 77 73 68 64 60 57 55 55 57 59 60 59 58 56 61 65 70 69 63 57 53 55 57 59 61 63 64 61 58 54 52 51 49 48 50 50 51 53 55 57 59 59 60 61 62 62 62 58 55 52 50 49 48 47 45 43 43 43 44 44 41 37 34 35 36 37 41 46 50 52 50 49 47 43 41 38 37 38 38 39 39 40 41 44 46 49 56 62 68 64 58 52 50 51 52 51 48 46 43 40 36 32 36 41 47 54 65 74 80 80 81 81 85 87 90 89 87 85 85 86 85 88 89 91 92 92 90 89 90 92 94 94 95 95 97 99 100 101 99 97 96 97 98 99 98 94 90 87 88 88 88 84 80 77 75 74 72 69 65 59 57 59 61 64 64 65 65 64 64 63 63 62 61 60 58 58 57 55 53 51 56 63 71 73 69 65 61 61 60 59 59 58 57 56 57 57 58 58 58 59 60 62 62 64 66 69 66 64 60 58 60 61 61 57 54 50 50 50 51 52 54 54 57 60 64 66 63 61 57 61 65 69 67 60 55 53 57 62 65 63 60 57 57 58 59 58 57 56 55 55 55 56 61 66 72 71 69 66 65 64 63 61 60 61 60 60 60 60 58 57 56 56 58 61 66 74 82 91 93 95 98 101 104 107 107 105 105 105 109 112 117 122 128 131 132 129 127 124 120 115 112 113 111 111 107 103 99 93 87 82 78 77 75 73 73 73 72 70 66 63 59 54 50 47 45 44 42 42 42 42 45 47 49 50 48 47 45 44 43 42 44 47 49 47 44 41 40 40 40 39 36 33 31 31 31 31 34 37 40 39 37 35 33 35 37 38 38 38 38 40 43 46 46 45 43 41 37 34 31 33 36 38 38 39 39 36 33 30 29 36 41 
+35 33 33 37 41 45 42 38 33 32 33 34 36 39 42 45 41 39 36 41 47 54 58 57 56 55 53 51 49 47 46 45 43 40 37 38 44 49 54 58 63 66 68 70 72 73 75 77 75 72 68 64 61 59 55 57 60 62 64 66 67 69 72 74 75 74 75 76 75 73 72 69 68 66 64 66 65 67 63 60 57 60 65 70 71 67 62 58 58 58 58 60 62 64 61 54 48 48 51 56 59 61 64 66 70 72 74 75 76 76 75 72 70 67 64 61 58 56 54 52 49 47 45 43 42 40 39 39 38 37 39 40 42 43 45 46 46 45 43 42 42 41 40 40 40 40 40 39 39 41 45 49 54 58 62 66 63 59 55 54 54 54 53 50 47 44 40 35 30 36 42 49 57 65 75 81 81 81 80 82 84 85 83 81 78 77 78 78 80 87 92 97 94 90 88 88 89 89 94 99 104 108 109 110 114 112 111 109 110 110 110 106 98 91 86 86 85 85 83 81 80 78 75 74 71 66 61 58 60 61 63 64 65 66 67 67 69 68 65 63 60 60 60 60 55 52 48 52 58 65 67 63 58 54 54 53 52 53 56 58 58 57 57 56 58 59 61 62 64 66 67 68 67 66 64 61 59 59 60 59 56 52 49 50 51 53 54 55 57 59 61 63 64 62 59 56 59 62 65 65 61 58 57 60 62 63 61 59 57 55 55 54 54 53 53 53 54 54 55 59 63 67 67 67 67 65 63 60 59 58 58 58 58 59 59 57 55 51 52 55 59 64 69 75 81 82 83 85 89 93 98 99 96 93 93 97 102 105 111 117 123 124 122 125 122 119 116 112 113 114 115 108 101 94 91 90 88 85 81 77 74 73 73 73 68 65 61 57 53 49 48 48 48 49 51 52 54 56 58 60 57 54 49 46 46 45 44 46 48 49 47 42 38 36 35 34 34 34 35 35 35 34 34 35 37 39 39 37 34 33 36 39 42 40 38 36 37 39 42 41 40 39 38 37 36 36 37 38 39 39 39 38 38 38 38 39 40 42 
+33 32 32 36 40 44 41 38 33 31 31 31 33 37 41 45 44 42 40 43 47 51 54 54 54 54 52 50 49 48 47 47 46 45 44 46 51 56 60 62 65 67 68 68 69 70 70 71 71 68 65 63 60 58 56 56 56 57 58 60 62 66 75 82 89 84 78 73 75 77 79 80 80 79 78 77 75 74 72 69 68 68 69 70 71 70 69 68 64 61 58 58 58 58 55 52 48 47 49 52 55 59 64 67 71 75 80 81 83 84 81 77 73 68 65 62 59 56 54 52 49 46 43 41 40 38 36 37 38 39 41 44 46 45 44 42 41 39 38 37 41 44 46 45 44 43 42 41 40 41 46 52 56 54 53 52 55 58 61 60 58 55 53 51 48 46 43 41 39 41 44 47 52 57 64 68 70 71 73 79 83 88 87 85 83 83 84 86 88 91 95 97 97 98 97 98 101 103 107 110 116 119 120 123 124 123 121 119 116 111 108 105 103 100 98 97 96 95 88 82 74 70 69 67 66 66 66 66 66 65 64 65 65 65 65 65 64 63 62 59 59 60 60 62 58 54 50 52 56 61 62 59 57 56 55 55 54 54 53 53 55 56 59 60 62 63 65 69 71 75 72 67 63 61 59 59 58 57 55 54 53 53 53 54 56 58 59 60 62 64 65 66 66 62 56 51 52 54 57 59 62 66 67 64 61 58 57 56 56 54 52 50 50 51 52 52 54 56 57 59 60 61 62 64 67 65 62 58 55 55 55 55 56 57 58 56 53 50 50 54 57 61 66 69 73 74 74 74 78 84 89 92 90 88 89 90 92 95 101 105 110 112 113 112 111 106 101 97 98 100 102 96 88 81 78 80 82 80 73 67 62 62 64 65 63 60 56 54 51 48 48 50 53 56 60 63 66 67 67 67 63 58 52 48 48 47 47 47 47 48 44 40 37 35 36 36 37 37 36 35 34 33 33 34 36 37 37 35 34 33 37 41 45 41 38 34 33 34 34 34 34 35 35 37 39 40 40 39 39 39 39 39 39 41 41 42 41 41 
+31 33 36 38 41 43 41 38 35 34 34 34 35 38 42 44 46 48 49 51 54 56 58 58 58 57 55 51 49 49 49 49 49 49 49 52 57 62 66 67 68 67 64 63 61 61 61 61 62 64 64 64 63 61 61 61 62 62 61 59 57 57 62 65 69 66 62 60 68 76 84 87 87 87 86 83 81 79 77 77 74 73 72 70 70 73 74 74 68 64 58 56 54 51 50 49 48 47 47 46 49 54 59 64 71 76 81 84 86 87 84 78 71 65 61 57 52 49 47 44 42 39 38 36 37 37 37 37 38 38 40 42 43 43 43 42 41 40 39 38 39 41 43 42 42 42 42 42 42 43 47 50 52 49 47 44 48 53 57 58 56 55 53 51 50 48 48 48 48 48 48 47 50 52 55 59 62 65 69 74 82 87 88 87 86 86 88 89 91 93 95 96 99 102 105 108 111 115 119 121 124 125 128 131 133 130 128 124 120 113 106 104 106 107 108 107 105 104 91 81 69 64 63 62 63 67 70 73 70 67 65 65 64 65 63 62 61 60 58 57 57 60 61 64 60 56 52 52 54 57 57 57 57 56 56 56 56 54 51 48 51 56 61 64 64 66 68 72 76 80 74 66 59 56 56 56 55 54 53 52 53 53 54 55 56 58 60 62 65 66 66 66 65 61 56 51 53 54 56 61 65 70 71 67 61 56 57 58 59 58 55 52 51 53 53 55 56 57 58 58 57 56 58 61 64 63 59 54 52 51 51 50 51 51 53 53 54 55 55 56 57 58 61 65 68 68 66 65 69 76 82 85 87 88 87 87 86 84 89 94 99 100 101 102 100 93 86 81 85 87 89 84 75 67 67 72 75 75 68 59 53 56 58 61 58 55 51 50 48 48 48 50 52 54 56 59 61 60 59 57 55 54 52 51 50 50 49 47 46 45 41 38 35 34 38 41 43 40 37 35 34 33 33 33 34 35 34 33 32 32 37 41 46 43 39 35 34 33 32 32 33 35 37 37 37 37 38 39 40 41 40 40 39 39 39 39 39 39 
+34 36 38 41 43 46 43 40 38 38 38 39 40 42 43 45 50 55 59 61 63 64 65 65 64 62 58 53 49 50 51 52 51 49 48 49 52 55 58 61 64 67 67 66 66 65 65 64 64 64 64 64 63 62 61 64 65 68 65 60 55 52 52 51 51 48 47 46 60 75 89 93 92 91 89 87 85 82 80 78 76 72 69 66 66 68 70 70 67 64 61 57 52 48 48 48 49 48 48 48 50 56 60 65 71 75 79 82 83 87 83 75 68 61 57 52 47 45 42 40 38 37 35 35 36 37 38 38 38 38 39 40 41 41 42 42 42 40 39 38 38 37 37 38 40 41 42 43 44 45 46 47 47 45 43 40 44 47 49 52 53 54 54 52 50 50 53 57 61 58 54 51 50 50 51 54 59 64 69 72 77 80 83 85 88 87 83 81 80 84 88 91 97 102 107 110 113 115 116 118 119 119 119 119 119 116 113 110 107 105 103 102 98 96 93 91 88 86 80 75 70 70 70 72 72 73 73 71 68 64 61 62 63 64 64 63 62 60 59 58 57 59 60 63 60 58 55 56 57 59 59 57 55 54 54 54 55 53 51 50 52 55 58 60 59 59 59 63 67 70 66 61 56 54 53 53 54 56 58 59 57 53 50 50 50 49 52 56 61 64 63 63 63 61 58 56 58 60 63 66 69 72 72 68 64 59 61 64 66 64 60 56 55 56 57 58 58 59 59 57 54 52 54 58 61 61 56 51 48 47 47 47 48 48 49 52 54 57 59 59 59 60 62 64 66 66 65 64 67 72 77 82 85 89 92 89 86 82 84 87 88 90 91 92 91 84 78 73 74 77 77 71 64 57 57 62 68 69 61 52 47 50 54 58 55 50 46 44 46 48 49 49 50 51 52 54 56 53 51 49 48 50 52 53 52 52 51 48 45 43 41 38 36 36 38 39 39 36 34 31 32 34 36 36 34 33 31 31 30 30 35 40 45 43 41 39 37 35 32 32 34 37 39 38 36 34 36 39 43 43 43 44 43 43 43 43 45 45 
+39 38 39 44 49 52 49 45 42 43 45 47 49 51 52 54 57 60 64 67 69 71 70 67 65 62 58 54 51 53 54 55 54 51 49 49 49 50 51 57 62 67 69 72 74 74 73 73 71 68 65 62 60 57 54 58 63 68 68 66 66 64 63 61 60 59 59 58 67 76 86 88 89 90 89 87 83 81 78 76 74 71 68 65 64 64 65 64 64 63 62 57 52 46 47 48 49 50 50 51 53 58 63 67 70 73 76 79 81 83 80 71 63 56 53 49 45 43 41 38 39 39 40 39 40 39 40 40 41 41 40 39 38 40 42 44 45 44 44 43 44 44 45 45 46 48 49 50 51 51 51 51 51 50 49 48 48 48 47 49 51 53 54 51 49 49 54 61 66 62 58 53 51 49 48 50 57 64 71 72 74 76 80 84 87 86 80 76 73 79 84 89 95 101 108 111 112 114 114 114 113 112 110 109 107 103 99 97 98 100 102 98 92 87 80 76 73 68 70 71 72 75 79 82 81 77 73 69 65 62 57 60 61 63 63 63 62 62 60 58 56 58 59 60 60 58 58 59 59 60 61 58 54 52 52 53 54 53 52 51 52 55 57 58 55 54 53 56 59 62 60 56 52 52 51 52 53 58 61 63 59 54 49 48 47 47 49 54 59 61 61 62 62 60 57 56 58 61 65 67 69 71 70 69 67 66 66 66 67 65 62 59 57 57 56 57 58 60 63 58 52 47 49 53 58 57 51 45 41 45 50 55 55 54 54 54 55 55 57 60 63 65 67 68 68 69 69 70 71 73 75 79 86 93 99 93 87 80 80 80 80 81 81 82 80 76 71 66 66 66 65 60 53 47 48 53 59 59 53 46 41 44 47 50 48 44 41 40 43 46 48 46 44 41 44 45 47 47 47 46 47 48 50 51 50 50 50 48 47 44 42 41 40 38 37 36 34 32 29 27 30 35 39 38 35 32 31 30 30 30 35 39 44 43 41 40 37 35 33 32 33 35 36 35 35 35 38 42 46 49 50 52 54 54 55 55 56 56 
+42 41 42 46 51 56 54 52 50 51 53 56 57 58 60 62 64 65 67 71 75 79 75 68 62 58 57 55 54 57 59 61 60 60 59 60 62 64 67 70 74 77 77 78 79 80 80 78 75 70 65 60 57 54 51 56 61 66 68 70 73 73 70 68 67 70 72 73 75 76 79 82 84 86 86 83 79 76 73 70 67 68 68 67 64 60 56 54 54 54 54 52 49 47 47 48 49 51 54 57 60 63 67 70 75 77 81 80 80 79 73 64 55 49 47 45 44 42 40 38 40 41 43 43 42 41 41 41 43 43 41 38 36 38 41 46 47 47 48 48 50 52 54 54 54 55 55 58 59 59 59 58 57 59 60 62 57 52 48 49 51 53 54 50 47 45 52 58 64 61 59 55 53 50 49 50 58 66 73 75 77 79 80 81 83 82 81 80 80 85 90 96 98 101 104 104 103 102 102 101 102 101 102 102 103 103 103 102 104 106 108 103 96 88 81 77 73 69 71 72 74 76 77 79 78 73 69 65 62 58 55 57 59 61 62 62 63 62 60 60 58 57 56 56 56 57 57 58 60 60 61 58 56 54 56 57 59 57 56 54 55 57 59 60 58 57 55 57 58 60 56 52 47 48 51 55 58 59 61 62 59 55 53 52 53 53 55 56 58 59 61 61 62 58 53 49 52 57 62 64 65 65 66 68 72 75 72 69 66 64 63 62 60 58 54 53 58 62 67 59 50 41 43 49 54 54 46 39 35 43 52 60 59 58 58 57 56 56 59 61 64 67 66 66 66 68 71 74 77 77 77 80 86 92 97 92 88 82 80 75 71 70 72 74 73 70 66 62 59 56 52 49 46 42 42 44 45 45 42 39 36 37 37 37 37 36 36 37 41 46 47 42 37 32 34 37 40 42 43 45 46 46 47 48 48 47 46 46 45 45 44 43 42 40 39 38 36 34 31 29 30 32 34 35 35 36 37 37 36 36 39 41 43 42 40 37 36 34 33 32 32 32 32 33 35 37 41 45 50 54 56 60 63 63 62 62 63 64 
+45 43 44 48 52 57 60 62 65 64 63 64 63 63 63 63 63 64 65 66 68 70 68 65 62 57 55 52 51 55 59 62 63 65 66 69 72 76 80 83 85 87 86 85 85 84 84 83 78 70 63 58 55 54 51 55 57 60 62 62 63 62 60 58 57 60 62 64 68 71 73 74 73 74 73 71 69 67 68 68 67 67 68 68 64 58 54 50 49 48 48 49 49 49 50 49 49 53 57 62 66 68 71 73 79 84 88 84 79 74 64 55 45 39 41 43 44 42 41 40 41 43 45 44 41 40 39 41 42 44 42 40 38 38 40 41 42 43 44 45 46 47 49 50 52 53 53 55 56 57 58 58 59 60 61 61 59 56 53 53 54 57 55 52 47 45 48 51 55 54 53 52 51 51 50 52 57 63 68 72 75 79 78 78 78 79 81 83 85 90 95 100 100 101 103 101 99 97 96 96 95 96 98 99 103 105 108 110 110 111 113 109 99 91 83 79 75 71 71 73 74 75 76 77 75 71 66 62 59 57 54 56 57 59 61 62 63 63 62 61 59 57 53 51 53 55 57 59 60 61 61 58 57 57 59 60 62 60 58 56 56 58 60 61 60 59 59 59 58 59 55 51 47 48 51 55 57 58 58 60 58 57 55 56 56 57 57 58 58 59 60 62 63 57 53 48 51 56 60 63 61 61 62 64 67 70 68 65 63 62 61 61 59 57 54 54 60 64 69 60 52 43 44 49 53 54 47 41 38 44 50 56 56 57 58 59 61 64 66 63 62 60 59 59 59 65 71 78 81 82 82 84 88 90 93 90 88 86 79 70 61 58 61 65 66 64 62 58 53 48 43 41 40 40 40 39 40 40 38 36 33 33 33 33 34 35 36 37 39 42 42 40 38 35 38 41 44 45 44 44 43 43 42 41 40 39 38 40 42 45 45 44 43 43 42 41 41 37 34 31 30 30 31 32 36 40 42 42 41 41 42 41 41 39 37 35 35 34 34 34 34 34 35 37 39 42 46 50 54 58 62 67 71 69 67 65 67 69 
+51 50 51 55 58 61 64 69 72 71 68 66 65 65 64 63 62 62 61 60 59 58 58 60 61 58 51 45 42 46 50 54 59 63 67 68 68 69 70 72 74 75 78 80 82 82 83 83 78 71 65 59 58 55 53 54 53 54 54 55 56 54 51 49 48 51 53 56 60 64 67 64 61 57 56 57 57 59 64 68 72 70 68 66 65 63 62 59 56 53 52 55 59 63 60 57 54 54 57 60 62 64 68 70 72 76 80 75 70 65 58 49 41 37 38 39 40 41 42 42 42 42 43 42 41 40 39 41 42 44 43 41 40 39 38 37 38 39 40 41 41 42 42 44 47 49 50 50 50 52 55 57 59 58 58 57 59 59 61 60 60 60 58 54 49 46 44 41 39 40 41 41 45 51 56 58 55 54 53 59 65 71 72 74 75 77 81 84 87 90 93 97 101 107 112 113 113 113 113 113 113 113 115 116 119 120 121 123 121 119 115 109 100 94 86 85 82 82 79 77 75 76 76 77 75 73 70 68 67 65 63 61 59 56 57 59 61 62 63 63 62 57 52 48 50 54 57 59 58 59 60 59 58 58 59 59 60 58 56 53 54 55 56 58 60 62 64 63 62 61 60 59 58 56 54 51 50 51 52 53 55 56 58 58 57 57 57 58 59 60 62 63 65 60 56 52 53 56 60 61 60 58 58 58 59 59 60 60 59 60 59 58 58 57 56 56 61 66 70 62 53 44 45 49 53 53 48 43 41 45 49 54 54 56 57 59 63 67 68 64 60 57 57 57 57 63 71 78 81 81 82 82 81 81 81 80 79 80 75 68 62 60 59 58 57 55 54 51 49 47 45 44 43 42 42 43 45 45 41 37 32 32 33 33 34 36 38 39 38 38 37 37 38 39 41 45 47 47 44 42 40 39 38 37 36 35 34 36 39 42 42 41 40 40 39 39 38 36 34 32 34 36 38 41 43 45 46 46 45 44 42 40 37 35 35 34 33 34 35 36 36 37 37 40 43 46 48 52 55 58 63 67 70 67 62 59 60 61 
+57 58 60 63 65 67 69 70 72 68 62 59 59 62 63 63 59 57 54 55 57 58 57 57 58 54 48 41 38 43 49 53 58 64 69 69 67 64 63 62 61 63 68 73 78 78 79 79 77 72 67 64 61 59 57 53 50 47 48 50 51 52 53 54 54 55 57 58 57 58 57 54 50 46 47 50 53 56 62 68 74 73 71 69 70 70 70 69 63 59 57 62 69 75 70 64 58 57 56 56 58 60 63 65 65 66 66 63 59 55 52 48 43 40 37 35 34 38 42 46 43 40 37 38 40 42 44 45 47 48 46 45 43 41 39 37 37 38 40 41 41 41 41 41 42 42 45 48 51 53 54 54 55 56 58 58 60 61 62 62 62 61 60 56 53 49 45 39 35 36 37 38 43 48 53 54 51 46 44 50 56 62 65 69 71 75 80 85 88 91 94 99 105 113 121 122 125 127 128 128 131 130 132 135 134 135 135 135 130 123 116 109 102 95 90 91 92 91 86 82 77 77 76 76 75 75 74 74 72 73 72 66 59 55 54 57 59 61 63 65 64 58 52 46 50 54 58 59 59 58 58 58 59 59 58 58 57 57 55 54 54 53 54 55 60 63 68 66 65 64 64 66 68 64 57 49 45 47 47 48 51 54 57 58 58 57 58 59 61 62 63 63 64 61 59 56 57 60 63 63 60 58 56 58 60 61 61 60 59 58 57 56 55 53 51 51 55 59 63 57 51 45 45 48 51 50 47 44 42 48 53 60 58 55 52 53 57 61 63 62 59 59 59 60 60 64 70 75 77 78 78 77 73 70 66 68 70 72 70 67 65 62 57 52 48 47 46 45 45 45 46 45 44 44 44 46 47 47 43 38 34 34 35 35 37 38 40 39 37 35 33 36 38 41 41 40 40 39 38 37 36 36 36 36 36 36 36 36 36 36 36 35 35 34 34 34 34 34 34 33 36 41 44 46 47 48 48 47 46 45 42 39 36 36 36 37 37 37 37 36 35 34 33 35 36 39 41 45 48 52 54 57 59 55 51 47 46 45 
+58 57 58 59 62 64 65 67 68 63 58 53 54 58 63 61 56 51 47 52 57 62 58 55 52 48 44 39 39 46 54 60 63 66 70 74 76 80 79 78 75 75 74 75 76 74 73 72 70 69 67 65 62 60 57 52 47 43 45 48 50 52 55 59 61 61 61 61 56 51 46 43 40 38 41 46 52 57 63 67 73 75 77 80 79 80 80 77 74 69 66 67 68 70 70 68 67 65 64 63 62 62 62 62 61 60 59 57 54 51 48 45 42 40 37 35 33 37 40 44 41 38 35 36 40 43 46 48 49 51 49 47 46 43 41 37 37 38 40 40 41 41 41 39 36 34 40 46 53 55 52 49 49 54 58 62 62 62 62 61 62 62 61 59 56 54 50 45 41 42 42 43 42 41 41 40 41 42 42 45 48 51 54 60 64 70 77 85 92 95 100 106 113 121 128 131 133 135 137 141 145 146 148 148 148 147 144 144 134 122 111 103 99 95 92 94 98 99 92 85 79 75 73 71 70 71 73 75 77 79 81 75 69 63 60 58 56 56 58 60 62 58 56 53 56 59 62 61 58 55 54 55 56 56 54 54 53 56 59 61 61 58 56 56 60 65 68 66 64 62 66 71 77 73 62 53 46 45 44 44 46 49 51 54 56 57 60 61 64 65 64 63 62 61 61 60 62 65 69 68 63 59 57 60 64 68 64 61 58 56 55 54 52 49 46 44 47 52 55 52 49 45 46 46 48 47 47 45 44 50 57 63 59 55 50 51 55 58 60 58 57 56 57 58 59 62 66 69 70 70 70 69 64 60 55 56 56 56 56 55 55 53 51 48 47 45 44 43 42 42 42 42 43 44 45 45 46 46 42 39 36 37 38 38 39 40 41 40 36 32 28 33 38 43 41 37 34 33 33 33 34 35 35 36 37 38 39 39 38 37 36 35 34 34 36 39 42 41 41 41 42 44 45 46 44 43 42 42 41 42 40 38 37 38 40 42 43 41 39 37 34 31 28 30 31 33 37 40 42 44 46 48 51 48 45 43 42 42 
+58 52 51 52 53 54 57 58 60 58 56 53 55 58 61 60 55 50 47 52 56 60 56 53 49 47 46 45 46 52 58 63 67 69 73 78 83 90 92 90 88 86 81 76 72 68 64 61 61 63 64 62 59 56 54 51 49 46 51 55 60 62 63 64 65 66 66 65 58 51 43 42 42 41 45 51 57 62 67 71 76 77 79 81 82 83 83 81 77 74 70 69 67 64 68 72 75 74 72 70 67 66 63 61 58 56 54 51 50 48 45 42 39 37 37 37 37 37 37 37 37 37 36 36 38 40 43 45 48 49 49 49 49 46 45 42 42 44 45 46 45 44 43 43 42 41 43 47 50 51 51 50 50 52 54 57 58 58 60 60 61 61 60 57 53 50 48 47 45 45 45 45 43 39 35 34 37 40 42 42 43 44 49 54 59 67 75 83 91 96 102 110 117 126 134 136 138 141 145 150 154 158 157 157 157 152 150 146 134 121 109 100 99 95 95 100 103 106 97 90 81 75 72 67 66 70 73 77 81 85 89 83 77 71 65 60 54 53 56 57 60 60 58 58 59 62 63 61 58 54 53 52 52 53 52 51 51 55 60 66 65 61 57 56 60 65 69 67 63 61 66 72 80 76 65 54 46 45 44 43 45 46 49 52 54 58 61 63 65 66 63 61 59 59 59 58 61 65 69 68 64 60 58 60 63 65 62 59 57 55 54 52 50 48 46 45 49 54 58 56 54 51 50 48 47 47 48 49 50 53 57 59 58 57 56 55 57 58 58 55 51 48 49 52 54 56 58 60 61 61 61 60 55 49 44 43 42 41 41 43 44 45 45 45 45 44 43 42 41 40 38 40 41 44 45 45 45 45 42 40 37 38 40 41 42 43 44 43 39 36 33 37 40 44 43 41 40 39 39 38 38 38 37 37 39 41 44 44 42 41 39 38 35 35 39 45 51 50 49 48 47 46 46 45 43 41 40 40 42 43 42 41 40 39 41 42 42 40 38 36 35 34 33 35 37 40 41 41 40 39 41 42 43 43 43 43 44 45 
+52 50 49 50 51 51 52 54 55 54 53 52 54 57 60 59 54 50 47 50 53 57 54 51 47 49 52 55 57 57 59 61 66 72 76 76 75 74 75 73 72 71 70 68 66 65 64 61 58 56 54 54 53 52 51 50 49 48 54 59 65 68 68 70 70 71 70 68 60 51 41 44 46 48 53 59 65 70 74 78 79 78 77 76 76 75 76 74 70 67 64 61 59 56 60 65 68 69 68 68 65 62 59 55 53 51 49 47 47 46 43 39 36 35 36 36 37 36 36 35 36 37 38 39 39 39 40 43 46 48 48 49 49 48 46 45 46 48 50 51 48 47 46 47 48 49 48 47 46 48 50 52 53 51 50 47 51 54 57 58 59 60 57 51 44 40 43 45 47 47 46 46 43 40 37 37 39 41 43 43 44 45 49 53 58 64 71 79 85 93 100 106 114 124 132 136 140 143 146 150 154 154 152 149 146 140 134 125 121 116 109 107 106 105 105 107 109 111 102 92 82 80 79 78 79 80 82 84 87 89 91 85 80 73 71 69 67 65 64 63 61 58 56 53 53 54 54 54 55 55 55 55 54 53 53 53 53 55 58 60 60 58 55 55 60 64 68 66 64 62 66 69 71 69 60 52 46 45 45 45 47 49 51 54 57 60 62 63 64 65 62 59 57 56 55 54 56 61 65 66 64 62 60 60 60 59 59 56 55 53 53 51 49 48 47 47 52 56 61 60 58 56 53 50 47 46 49 52 55 57 58 59 59 58 57 57 57 57 56 52 48 44 46 47 49 49 49 49 50 52 55 56 53 48 45 43 41 39 38 38 37 38 40 41 43 45 46 48 45 42 38 39 40 42 43 44 46 46 43 39 36 38 41 44 45 46 47 46 44 41 39 42 43 45 45 45 45 44 43 42 41 40 40 38 41 44 46 45 44 42 41 41 41 42 45 47 49 48 47 46 46 46 47 47 45 44 42 46 49 53 50 46 42 40 40 40 39 37 36 35 35 37 38 41 44 48 49 46 43 42 44 46 47 49 48 49 50 50 
+46 48 49 50 51 52 52 53 54 52 49 48 52 56 60 58 54 49 46 48 49 51 49 47 44 46 50 53 55 55 54 55 61 67 74 70 65 60 58 58 58 58 58 59 60 62 63 65 57 50 41 41 44 48 49 48 47 47 51 55 59 64 67 71 72 72 70 67 60 52 45 44 44 43 49 57 64 70 74 77 79 76 74 71 71 70 68 66 63 60 56 55 52 50 53 57 62 63 65 67 63 59 54 49 48 46 44 44 44 43 40 36 33 32 33 34 35 36 37 37 39 41 44 43 42 40 39 40 40 40 40 39 39 39 39 39 40 43 45 46 44 43 42 45 48 51 52 53 53 54 56 57 58 58 56 56 56 56 56 55 54 53 49 44 39 37 40 44 48 47 46 45 44 42 40 40 41 42 43 44 44 45 48 51 53 60 67 74 81 86 92 99 108 117 127 129 133 137 142 144 146 148 143 137 133 124 118 110 109 109 110 110 113 114 114 116 116 116 106 97 87 86 87 89 90 89 90 89 90 89 89 84 80 75 75 75 77 75 70 66 62 58 53 49 48 48 47 49 52 55 56 55 54 53 54 54 55 55 56 56 55 55 54 55 58 62 66 65 65 64 65 65 65 62 57 51 47 48 49 50 51 52 53 55 58 60 62 61 60 59 58 58 58 56 54 52 53 56 58 60 60 59 59 58 56 55 55 55 54 52 50 47 46 47 48 50 53 56 59 57 55 52 51 49 47 47 51 55 59 60 62 63 61 58 55 54 55 55 56 52 49 46 45 44 43 42 39 37 38 43 50 54 52 49 47 44 41 39 36 34 32 32 35 38 41 44 47 51 47 43 38 38 39 40 41 42 42 42 41 40 40 41 41 41 41 41 41 40 41 41 42 43 45 46 46 45 44 43 42 43 42 42 42 42 42 43 44 44 43 42 42 46 49 52 50 48 45 44 44 44 45 47 49 49 48 46 44 48 52 54 51 47 43 40 39 39 38 38 38 39 40 41 42 46 53 59 63 62 60 59 60 63 64 63 61 59 58 57 
+48 52 52 52 51 52 52 53 54 52 49 47 51 54 60 57 52 47 44 45 45 45 44 42 41 41 43 45 45 44 42 43 48 53 58 57 56 54 55 55 56 58 60 62 63 62 61 60 55 50 45 44 47 51 52 52 51 50 52 54 57 61 66 72 73 71 69 66 60 54 48 45 41 37 43 51 60 66 69 74 77 74 72 67 66 63 61 58 55 52 51 50 49 50 53 55 58 61 63 65 63 60 55 52 51 49 48 47 46 46 43 40 37 37 39 41 42 42 41 41 45 48 50 49 46 43 41 40 38 37 36 34 33 34 35 35 37 39 40 42 41 40 39 43 48 52 55 59 62 62 62 62 63 65 67 68 64 60 56 52 48 44 41 39 37 37 39 42 45 45 44 44 44 44 44 43 43 42 42 42 42 43 44 46 47 53 60 69 72 75 77 80 89 98 109 110 112 115 117 120 125 125 124 121 119 112 107 101 103 105 108 111 115 119 122 121 122 121 115 108 103 102 99 98 96 93 89 85 79 73 67 68 70 72 72 71 70 68 66 64 61 57 54 51 50 49 49 50 52 53 54 53 52 51 54 56 60 57 54 50 50 51 53 55 56 58 60 60 62 63 63 62 61 60 56 54 52 54 56 57 57 56 55 56 58 60 59 55 51 48 53 57 62 59 55 52 51 51 51 53 54 56 57 55 53 50 51 52 52 51 47 44 43 47 49 53 54 55 57 55 52 50 47 48 47 48 53 57 60 62 64 65 62 57 52 51 52 54 54 53 50 48 46 43 41 40 40 40 42 46 49 52 49 47 46 44 42 40 39 40 40 41 41 42 42 43 45 45 42 40 37 36 38 39 39 37 34 31 37 42 48 46 41 36 33 33 32 33 36 40 44 46 47 47 47 46 45 45 45 45 45 45 45 45 45 44 43 43 43 43 44 46 48 49 45 42 38 38 39 39 43 48 54 57 55 51 48 48 48 48 46 43 41 40 39 38 39 40 42 44 45 45 45 51 59 68 75 73 74 74 74 77 79 77 76 75 73 72 
+51 56 56 54 52 51 52 54 55 54 53 52 53 55 58 55 51 47 43 43 42 41 43 44 45 44 44 43 42 41 40 40 42 44 47 48 49 50 51 53 54 57 61 65 67 62 57 52 53 56 56 57 58 59 60 61 61 61 61 61 61 62 64 65 65 64 63 62 63 63 61 58 56 52 57 63 69 72 73 75 75 73 71 69 67 64 62 57 53 49 47 48 49 50 52 54 55 58 61 64 63 61 58 56 55 54 53 51 50 49 48 46 45 47 51 55 57 54 50 47 51 55 59 57 54 51 48 46 44 42 42 40 39 39 39 41 42 44 46 47 45 44 44 51 57 64 66 69 71 72 73 73 73 75 75 77 71 68 62 59 56 54 51 47 44 42 42 41 41 42 43 43 44 44 43 43 43 43 43 45 46 48 50 51 52 56 62 67 70 68 66 66 73 82 91 93 95 96 99 102 104 104 106 107 106 102 97 94 95 100 104 109 115 121 124 124 124 123 120 118 115 112 109 105 101 94 87 80 70 60 50 56 63 69 69 68 66 65 64 63 61 59 56 55 54 52 51 51 52 52 52 52 50 51 54 56 59 56 51 46 46 49 51 52 54 55 56 57 58 60 59 59 57 56 57 56 57 58 59 60 58 57 55 56 57 58 57 53 49 47 51 54 58 56 55 53 52 51 50 51 52 55 56 54 51 50 49 49 48 47 44 41 40 43 46 49 53 57 61 60 56 54 51 49 47 47 49 53 55 58 61 62 59 55 50 48 49 51 52 52 52 52 48 45 41 43 47 52 54 53 51 49 47 45 43 42 42 42 43 45 48 49 47 45 44 43 41 40 38 37 36 36 37 39 39 37 34 32 37 43 47 46 43 40 39 39 38 38 42 44 47 49 50 51 52 53 54 54 54 53 52 51 50 49 47 46 43 43 44 46 46 45 43 42 38 35 31 31 33 35 40 49 57 62 57 53 48 47 45 44 44 44 44 44 44 44 44 44 44 44 44 44 44 50 60 70 78 79 81 82 85 87 90 90 90 91 91 89 
+57 56 54 51 49 48 49 51 51 51 50 50 52 53 55 53 50 47 43 41 39 39 44 48 52 51 48 45 46 47 47 47 46 46 46 47 48 48 49 49 49 50 51 52 53 52 51 50 51 52 53 55 57 60 62 63 64 66 65 65 65 63 61 59 59 59 58 61 67 71 76 75 74 72 75 79 83 83 79 77 74 74 74 74 73 74 74 68 60 53 50 50 50 51 53 54 55 56 58 60 60 58 56 55 53 50 49 50 50 50 50 50 50 52 56 59 61 58 55 53 55 58 61 59 56 54 51 50 49 47 45 44 43 44 45 46 47 49 52 52 51 48 49 58 67 76 77 80 81 83 84 84 84 85 84 84 79 75 71 71 71 73 69 62 55 50 45 40 36 39 41 44 43 42 40 41 43 45 49 53 58 63 66 70 73 73 75 75 73 67 62 58 63 68 73 79 86 92 94 92 90 90 93 96 98 95 91 88 90 94 98 103 109 113 116 115 114 113 113 114 114 110 106 101 95 89 81 74 67 59 51 57 62 67 69 70 71 71 69 68 67 66 66 65 61 57 53 52 53 53 54 55 56 57 54 51 49 49 49 49 49 49 49 49 52 54 57 55 54 52 53 53 55 56 58 59 60 59 58 57 56 56 55 55 55 55 55 54 53 53 51 51 49 51 53 56 55 54 53 52 53 54 55 53 51 49 47 46 44 42 40 38 38 40 43 46 52 59 65 63 60 57 54 50 47 45 47 49 51 54 56 59 57 52 48 47 49 51 53 53 53 53 50 45 41 43 48 52 53 50 47 44 45 46 46 45 44 42 43 45 49 50 49 48 47 43 40 36 35 35 34 35 38 40 42 42 41 42 43 43 42 43 45 47 48 47 47 47 49 50 51 52 54 55 56 59 61 62 61 60 59 57 55 54 52 50 49 48 48 48 48 46 45 43 42 42 44 43 43 43 44 46 48 49 47 44 41 42 43 45 46 49 51 51 51 51 50 48 47 45 44 44 43 50 61 72 81 83 86 89 91 94 95 97 98 100 100 98 
+63 55 52 48 44 43 44 44 44 42 40 38 41 44 47 49 50 50 50 49 48 46 47 48 49 49 47 47 47 48 49 50 48 47 45 45 45 46 45 45 44 42 40 38 38 42 46 49 47 45 43 46 51 55 58 59 60 61 62 63 64 62 59 57 56 56 56 59 66 73 79 79 79 79 81 84 86 85 81 78 76 77 77 78 79 80 80 75 68 60 56 56 55 55 55 55 55 56 55 55 55 55 55 53 50 46 44 46 48 50 52 54 55 56 57 57 58 59 58 58 57 55 54 53 50 48 48 48 49 48 47 45 43 45 48 50 52 54 55 55 53 51 50 57 61 67 70 72 75 75 77 78 78 78 78 79 78 77 76 76 77 78 74 67 61 55 50 46 42 44 47 49 48 45 43 43 47 51 55 61 67 73 76 78 82 82 80 78 74 66 59 54 56 58 60 69 79 88 89 85 82 81 86 91 96 91 89 86 89 91 94 98 102 106 108 107 106 105 108 110 113 108 102 96 90 84 77 72 68 62 57 61 66 69 71 73 75 75 74 73 73 73 73 72 67 61 55 54 54 55 56 57 60 61 55 49 44 45 49 52 54 52 51 51 53 55 56 54 51 49 50 53 56 58 60 62 63 61 59 57 56 55 53 52 52 52 52 53 55 55 53 50 48 49 50 53 53 53 53 53 53 54 54 52 51 50 48 47 46 44 43 41 41 42 43 45 48 53 56 56 54 52 50 48 46 44 46 48 50 51 53 53 52 50 48 48 51 55 56 55 54 53 50 47 44 43 45 47 47 44 41 39 43 47 51 49 46 42 42 46 48 50 50 50 50 45 39 35 34 34 34 35 38 41 43 44 43 43 41 40 39 40 44 48 50 50 51 52 51 51 51 50 50 50 52 54 58 59 60 60 61 59 58 57 57 57 58 57 54 51 49 48 47 46 49 53 57 56 53 50 48 45 42 39 38 38 38 41 45 49 51 53 55 56 56 55 55 55 55 55 55 54 53 58 67 75 83 86 89 92 94 95 97 98 101 103 104 105 
+67 62 56 51 45 43 42 41 40 39 37 36 38 41 44 48 51 55 57 56 56 54 50 46 43 44 45 46 47 47 48 48 48 48 47 44 42 41 40 40 40 40 41 41 41 41 42 42 41 39 38 43 50 56 59 59 59 59 62 64 65 62 59 56 54 54 53 58 66 75 82 83 84 85 85 86 87 85 82 79 77 78 79 80 80 79 80 78 76 73 72 71 69 68 65 64 61 60 58 56 55 54 53 52 50 47 46 48 51 53 52 51 50 51 51 52 53 55 56 57 55 51 49 47 46 46 46 47 48 48 47 45 43 46 50 53 54 57 58 57 55 53 52 54 56 58 61 64 66 68 67 68 69 69 70 71 74 77 80 79 78 77 73 68 63 58 57 55 53 55 57 59 57 54 51 52 55 60 64 69 74 78 78 78 78 76 75 74 69 64 58 54 56 59 61 66 72 78 81 82 82 84 91 97 102 100 97 96 95 98 100 101 103 105 106 107 107 108 108 109 111 105 98 90 85 83 81 79 79 79 78 80 81 83 82 80 78 77 78 78 77 76 75 74 69 64 59 58 59 59 60 59 58 58 54 52 49 51 54 57 58 60 61 61 59 57 56 55 54 54 55 58 60 62 64 65 66 64 62 60 57 54 50 49 49 49 50 53 55 57 55 53 52 50 48 46 47 49 52 53 53 54 54 52 51 50 50 48 48 47 45 45 43 43 44 44 45 47 49 49 48 47 46 46 44 44 46 47 48 48 48 48 48 49 49 51 53 56 59 56 54 51 49 48 47 47 49 50 50 50 49 48 49 49 50 48 45 42 42 44 46 48 49 50 51 47 42 38 37 37 36 37 40 43 44 41 40 37 36 35 35 37 42 46 50 52 54 57 55 53 50 49 47 46 47 51 54 57 58 60 62 61 61 60 61 61 61 61 59 59 58 55 53 50 52 54 57 56 54 51 48 44 40 37 38 39 41 45 50 56 59 59 59 59 59 59 60 61 63 66 65 64 63 65 72 80 85 90 94 98 100 101 101 103 104 105 104 102 
+72 68 62 55 49 45 43 40 40 42 44 46 47 50 52 54 57 59 59 56 55 53 51 49 48 48 49 49 49 48 47 47 46 46 46 43 39 36 36 37 38 39 42 44 44 40 37 34 34 34 34 42 52 61 65 64 62 63 64 66 68 66 63 61 57 54 51 53 64 75 81 78 77 74 77 79 82 81 79 77 77 79 81 82 81 80 79 81 81 81 81 81 81 80 75 72 67 64 60 57 55 53 51 50 49 49 49 52 54 57 52 46 41 41 43 46 48 50 52 52 50 47 45 45 45 46 46 45 45 45 45 45 44 45 47 49 51 53 55 54 51 49 48 51 54 56 56 57 58 58 57 57 57 56 56 57 62 66 71 71 71 70 67 62 58 56 57 57 58 59 61 62 59 56 53 54 59 64 67 69 71 74 73 72 70 70 69 68 65 61 56 53 55 58 60 64 68 71 74 77 79 83 91 97 105 102 100 99 99 100 100 100 102 102 103 102 103 104 105 107 108 101 94 87 84 85 86 88 91 93 96 96 96 95 91 87 83 81 81 81 82 80 78 76 72 68 65 64 64 64 63 60 57 55 54 54 55 55 57 59 61 63 66 66 63 59 55 56 56 57 57 59 60 62 65 67 68 67 64 62 59 54 51 50 49 49 49 51 54 56 54 52 51 50 50 50 50 49 50 50 53 55 57 54 51 48 47 46 46 46 48 49 51 50 49 48 47 46 44 44 45 46 46 45 44 44 44 45 45 45 45 45 46 48 51 53 56 59 62 57 53 48 49 50 52 53 55 56 57 59 60 61 57 53 49 46 44 42 42 43 44 45 47 49 50 47 44 41 39 38 38 39 41 44 45 42 39 37 36 35 34 36 40 45 49 51 54 55 53 49 47 47 49 50 52 53 54 55 57 59 60 61 62 64 63 62 60 60 64 68 70 65 60 54 55 55 56 55 54 52 50 45 40 36 38 41 44 49 54 58 61 62 62 63 63 63 64 66 70 74 73 70 67 68 76 82 89 95 100 106 108 109 110 110 109 107 105 97 
+66 64 59 54 49 46 44 42 41 43 45 47 50 52 55 57 59 61 60 57 54 52 53 54 54 54 54 54 51 49 46 44 43 41 40 39 38 36 38 39 41 41 42 43 42 41 39 37 39 41 43 49 56 64 67 66 65 65 68 70 72 70 67 65 61 56 50 53 64 75 81 75 68 62 66 70 75 76 75 74 76 79 81 83 82 80 79 79 79 80 82 85 88 88 85 80 77 72 69 65 63 62 61 60 58 56 55 55 55 55 51 46 40 39 40 41 42 45 47 49 46 45 42 43 44 45 45 44 43 42 43 43 43 44 44 44 45 48 50 50 48 46 45 48 51 54 53 51 50 48 47 45 44 42 41 41 46 53 59 61 61 61 59 55 52 51 55 58 61 60 60 59 57 55 52 54 58 63 66 63 60 57 59 61 62 62 61 59 58 54 53 51 53 56 59 62 67 70 71 71 71 73 81 87 93 93 93 92 92 92 92 92 93 93 94 93 93 93 94 97 98 97 96 95 95 97 99 100 101 103 104 104 102 103 101 97 94 91 89 86 84 84 84 84 80 76 73 71 71 72 69 63 57 52 54 55 56 56 56 55 56 59 61 62 61 59 58 57 57 56 55 53 53 55 61 68 71 69 65 61 60 57 55 54 52 51 50 51 52 52 51 49 48 51 54 58 56 51 46 46 51 58 62 57 51 46 45 44 43 45 50 55 58 57 55 54 49 45 42 42 44 46 46 45 44 43 43 43 42 43 43 44 46 49 52 54 56 58 59 56 52 49 51 55 59 61 61 61 62 62 63 63 58 53 48 46 44 42 43 45 48 50 48 46 44 43 42 41 40 39 38 39 41 43 45 44 43 42 39 37 34 35 39 44 47 49 51 53 50 47 44 46 50 53 55 54 53 53 53 55 56 58 60 62 61 60 59 60 64 67 70 63 57 51 49 48 47 47 48 49 48 45 43 41 44 47 50 52 54 56 59 63 65 69 68 68 67 71 76 81 80 76 71 71 78 85 94 99 104 109 109 108 107 105 101 97 93 83 
+59 60 56 52 48 46 45 44 42 39 38 37 39 43 46 48 50 51 51 48 45 44 46 48 49 49 48 47 47 47 46 44 42 40 39 39 39 39 41 43 45 44 42 41 41 41 42 42 47 51 55 58 62 65 67 68 68 70 73 76 79 75 70 66 66 67 68 69 71 76 78 75 71 67 67 66 66 65 64 63 65 71 77 80 79 77 76 76 77 77 80 84 89 91 89 86 83 80 76 71 71 70 70 69 67 64 61 58 56 53 50 47 43 41 38 36 37 40 43 45 44 43 42 42 43 43 43 43 41 41 41 41 40 40 39 38 38 39 39 40 40 40 41 44 48 51 53 54 55 52 50 46 43 41 39 39 42 46 49 53 55 59 57 53 48 47 50 54 57 54 52 50 52 53 54 55 58 60 61 57 54 50 51 52 52 53 53 54 52 50 48 46 49 51 54 58 62 67 67 68 67 70 75 81 85 86 84 85 86 87 88 88 90 90 90 89 87 87 88 91 91 94 98 100 103 104 107 107 108 108 108 108 109 107 108 105 104 101 96 90 87 90 90 92 87 83 79 78 77 76 73 65 58 51 53 55 57 56 55 53 53 55 56 58 59 60 61 58 56 54 52 50 49 52 59 67 72 69 66 62 61 58 57 55 54 52 52 53 55 56 53 51 49 51 53 56 55 53 50 50 53 57 60 58 55 53 50 49 47 48 51 52 54 54 54 53 52 49 48 47 46 45 44 44 43 43 42 41 41 43 45 49 50 52 53 53 53 53 52 51 51 51 55 61 67 69 68 68 66 65 63 62 57 53 48 46 45 42 43 47 50 52 47 43 38 39 39 40 40 39 38 39 42 44 47 46 45 44 42 38 35 36 39 42 45 45 45 45 43 41 39 41 45 50 51 50 49 48 47 47 46 49 51 55 56 58 58 59 62 64 65 59 53 47 44 41 39 39 42 46 48 48 48 49 51 52 53 54 55 56 59 64 70 74 74 74 74 74 73 72 70 69 68 70 80 90 99 101 102 104 103 99 95 91 86 82 77 68 
+46 45 45 44 43 42 42 41 39 37 35 34 36 38 41 41 41 42 41 39 36 36 39 41 42 40 38 36 39 42 46 46 44 43 43 45 47 49 51 54 55 53 51 48 47 46 45 46 52 57 61 64 67 68 70 70 70 73 76 80 82 77 72 67 69 75 79 80 77 75 73 74 75 76 69 63 57 53 51 48 51 60 68 76 74 71 70 71 72 73 75 77 79 79 79 77 77 76 74 72 68 65 62 61 59 58 57 54 51 48 47 46 45 43 42 40 40 43 47 49 48 46 45 45 45 45 44 42 41 40 40 40 40 38 37 35 33 33 32 32 33 34 37 41 46 50 53 57 61 58 52 47 43 41 39 38 38 39 40 46 52 58 56 50 43 41 45 48 50 45 41 37 43 50 57 59 57 54 53 52 51 50 47 43 41 43 46 49 49 45 43 40 41 42 43 48 54 60 64 68 72 75 77 79 81 81 79 78 82 88 93 96 97 97 98 97 96 96 97 97 98 99 101 103 104 103 101 100 100 100 101 103 105 107 108 109 109 107 103 99 97 97 98 98 93 89 85 81 79 75 71 66 61 56 56 56 55 54 52 51 51 52 54 56 59 63 66 60 55 49 48 48 48 52 58 63 67 66 66 65 62 59 57 55 55 54 55 57 60 62 58 54 51 50 50 49 50 52 54 56 56 56 56 57 58 59 57 55 52 50 51 51 51 52 53 53 54 54 53 51 48 45 44 43 42 42 42 41 41 44 48 53 53 52 52 51 50 49 48 49 51 52 56 61 66 69 69 69 70 67 64 61 57 52 48 45 44 43 42 43 42 42 39 36 33 34 36 38 39 39 38 39 43 46 50 48 48 47 43 40 36 36 38 41 42 41 39 37 35 34 34 38 42 48 49 49 48 48 48 48 48 52 56 60 62 64 66 66 67 65 64 59 54 48 47 46 45 46 49 51 54 58 60 65 62 58 54 54 55 57 60 67 74 81 81 81 82 77 70 61 60 63 67 72 84 96 108 108 108 107 104 100 95 92 88 83 79 74 
+33 31 33 35 37 37 36 35 36 37 38 39 41 43 45 42 38 35 35 34 34 35 37 40 42 40 38 36 40 43 47 48 48 48 49 51 52 55 57 60 62 60 58 55 52 51 49 49 54 60 66 68 71 73 73 73 71 72 76 79 82 76 71 66 66 67 68 67 66 65 63 67 69 72 69 64 60 58 57 55 56 61 65 69 68 67 65 65 67 68 69 70 70 71 71 71 72 73 73 73 68 61 55 53 52 52 51 48 45 42 44 44 46 46 46 47 48 51 54 56 55 53 51 51 52 51 48 45 40 39 42 45 46 43 41 38 38 38 38 37 36 34 35 40 45 50 52 56 58 56 52 48 47 49 50 50 47 45 42 45 48 52 52 50 47 47 51 53 54 50 45 40 44 50 55 55 52 50 47 48 49 49 45 43 39 40 43 46 46 43 41 39 39 40 40 45 52 58 64 70 76 79 81 82 81 80 79 77 84 93 99 102 105 104 104 103 103 102 101 101 100 103 103 104 102 99 96 94 94 95 96 99 103 106 108 109 110 111 107 105 101 102 102 102 98 93 89 85 81 75 71 68 63 59 58 56 54 53 51 48 49 50 52 55 59 63 68 60 53 46 45 47 49 52 57 60 64 65 65 67 64 60 57 56 56 56 57 60 61 62 59 55 52 51 50 49 50 53 56 57 57 56 56 57 57 58 56 53 51 49 50 51 52 52 52 52 51 50 48 47 46 45 43 42 40 39 40 41 43 48 51 56 56 52 48 45 46 46 46 49 51 53 56 59 61 65 68 72 74 69 65 61 56 51 46 44 43 43 41 39 37 35 33 31 29 31 35 38 39 39 40 40 43 46 49 47 46 45 44 43 42 42 43 43 42 41 41 40 41 44 46 49 51 53 55 56 58 61 63 66 70 72 74 77 78 79 78 77 73 68 64 59 54 51 50 50 51 53 55 57 59 65 71 78 72 66 58 57 60 64 67 72 76 79 78 77 76 74 73 73 75 79 82 87 100 111 122 122 119 119 116 111 106 100 95 90 85 83 
+35 32 36 40 44 42 40 37 37 39 40 42 43 45 46 40 36 30 29 31 31 34 37 41 43 43 42 41 43 46 48 50 52 53 54 53 52 53 52 51 51 51 51 50 49 48 47 48 52 56 61 63 66 67 70 70 71 72 74 76 78 74 71 67 65 61 59 58 56 55 56 60 64 68 68 67 66 68 69 70 69 66 65 63 62 61 61 61 60 60 62 64 67 68 69 70 72 73 74 76 74 72 71 68 65 61 57 51 46 41 43 45 48 50 51 53 53 54 55 56 58 59 59 58 57 56 52 46 40 38 42 47 50 47 45 42 42 43 44 42 40 36 36 41 46 51 52 54 56 54 51 49 50 56 61 64 58 51 46 45 43 43 46 50 54 57 60 63 65 59 55 50 50 50 49 48 46 44 44 45 47 49 47 46 45 44 43 43 43 44 44 45 46 46 47 52 57 62 68 74 80 84 86 88 91 90 90 90 95 101 109 111 109 108 107 105 103 101 101 101 100 100 100 101 99 95 92 91 92 95 97 100 101 104 105 105 106 105 103 101 100 101 101 101 98 93 89 86 83 81 77 70 64 59 58 56 56 52 49 46 46 49 51 54 57 61 64 57 51 45 45 48 51 53 56 58 60 63 66 68 64 61 57 56 57 59 60 60 59 58 57 56 55 53 51 50 50 53 56 57 56 57 56 55 56 56 53 51 48 47 49 51 52 52 52 51 49 47 45 44 45 45 45 42 40 38 40 41 44 47 51 55 54 50 45 43 44 45 46 50 53 56 58 59 60 63 66 67 68 64 61 57 53 48 44 42 42 42 41 39 38 37 36 36 36 38 40 42 43 42 41 41 42 43 43 43 43 42 45 47 50 50 48 45 42 42 43 43 48 53 57 58 58 58 59 62 66 70 73 76 78 80 81 81 82 81 81 79 76 71 69 66 64 63 62 62 61 61 61 60 61 70 79 89 82 74 65 64 69 74 78 78 77 75 73 71 67 71 77 84 89 92 96 103 112 120 130 129 126 124 119 115 111 106 101 95 90 86 
+36 35 42 48 54 50 47 43 42 42 42 41 41 41 40 38 36 33 33 34 35 35 37 40 41 42 43 43 45 46 48 49 50 52 53 51 49 48 46 43 41 43 44 46 46 46 46 46 49 51 54 55 56 57 61 65 69 71 71 70 71 72 72 71 70 70 68 68 68 68 69 72 76 78 76 76 75 74 73 73 73 73 71 69 67 66 64 65 64 63 64 66 68 69 69 69 70 72 74 76 79 81 84 81 76 71 64 55 47 40 43 47 50 53 55 58 57 55 53 53 59 65 70 67 63 60 54 47 40 38 42 46 49 47 46 45 46 47 49 49 48 48 49 53 58 62 62 62 63 63 64 65 68 72 77 80 77 73 69 68 67 65 67 66 68 70 71 72 73 69 66 62 61 61 59 57 55 53 51 49 48 46 45 45 44 44 43 42 43 45 47 50 53 56 59 61 64 67 71 77 82 87 88 91 93 95 96 98 101 106 111 111 110 109 107 105 104 101 100 101 99 99 99 99 96 94 91 89 92 95 98 100 102 104 104 104 102 102 100 98 96 97 95 96 93 89 86 83 82 81 78 72 65 59 59 58 58 54 50 47 46 49 52 55 56 58 60 56 52 47 48 50 52 54 54 55 56 59 62 65 61 57 53 53 55 58 59 59 59 58 58 57 55 53 50 47 46 48 51 52 53 53 54 54 55 55 53 51 49 48 47 47 47 48 49 50 50 49 49 50 50 51 51 47 44 40 40 40 40 42 45 48 48 46 44 43 45 47 49 52 56 60 62 62 63 63 62 62 61 58 55 53 50 45 41 40 40 40 40 40 39 39 39 39 40 41 42 44 44 43 42 42 44 46 47 46 44 42 45 50 54 55 51 48 45 44 44 44 47 50 52 54 56 57 60 65 69 74 74 74 74 73 74 75 75 76 77 78 77 75 74 74 75 75 75 72 71 70 67 65 63 75 87 99 93 84 74 72 77 82 86 83 81 77 74 70 65 70 78 86 94 98 103 108 114 120 125 124 122 122 121 117 115 111 105 100 94 89 
+38 38 43 47 52 50 46 43 42 42 41 40 40 40 39 38 38 37 37 37 38 38 37 38 39 41 43 45 46 46 47 46 45 45 44 43 41 40 38 36 35 36 38 39 40 39 39 41 45 49 53 51 51 49 56 63 70 72 70 67 66 70 72 75 75 76 76 77 78 78 81 84 86 89 86 85 83 80 77 75 76 79 81 82 80 77 75 77 79 80 79 77 76 74 71 69 66 65 66 65 67 69 71 68 64 60 56 52 47 44 49 53 57 58 58 58 58 58 56 57 61 66 69 67 64 61 55 48 42 40 42 45 47 47 48 47 49 51 53 54 55 57 59 63 68 72 71 69 68 72 77 82 86 90 94 97 97 97 97 96 96 95 91 87 83 81 82 82 81 79 77 75 75 76 77 76 72 70 65 57 49 43 41 40 39 39 41 42 44 47 50 54 61 68 74 75 74 74 76 78 80 83 85 87 90 93 96 97 99 100 100 101 102 103 104 103 102 101 100 99 98 99 100 101 98 95 91 91 94 97 101 102 104 105 105 104 104 103 99 93 89 86 82 78 77 76 75 75 74 74 73 70 65 62 63 63 63 59 55 50 49 52 56 57 56 56 54 55 56 57 56 55 53 53 53 53 54 55 56 57 54 50 47 47 50 53 56 57 59 61 59 57 57 52 47 41 40 42 44 47 48 50 52 53 53 54 53 51 50 48 46 44 42 45 47 50 50 51 52 53 54 55 55 51 47 43 42 41 39 40 43 45 46 46 46 47 48 49 50 54 56 60 60 61 61 60 60 60 59 57 55 52 49 47 44 42 40 38 37 37 37 37 37 36 36 37 38 39 40 40 42 43 49 53 59 54 49 43 45 51 56 58 54 51 47 46 46 45 45 47 48 50 54 58 61 66 70 75 72 69 65 66 67 68 70 72 75 76 74 72 70 69 70 70 71 72 74 74 73 71 71 84 98 112 107 97 86 84 86 89 92 89 86 82 77 71 65 69 79 89 98 102 108 113 115 117 119 119 117 115 114 113 111 108 106 104 100 95 
+40 41 43 46 49 46 43 40 39 40 39 40 42 43 44 44 44 44 44 44 43 43 42 41 42 45 48 50 49 49 48 47 46 45 44 44 43 41 38 35 33 33 34 35 34 33 32 35 41 48 52 50 45 42 52 63 73 75 72 68 66 70 75 79 78 77 75 75 74 75 75 77 79 81 80 80 79 81 81 81 84 88 91 93 91 89 87 88 89 91 89 86 84 80 74 68 64 62 60 57 58 58 60 57 54 50 48 48 48 48 53 59 64 62 60 57 58 61 64 65 64 63 62 61 60 59 55 51 47 44 44 43 44 47 49 51 52 54 55 54 53 52 54 62 70 76 71 65 60 65 69 75 79 82 85 88 91 94 98 98 99 100 96 92 87 85 83 80 79 81 81 82 82 82 85 82 79 76 71 62 52 43 44 43 43 43 44 45 47 50 53 57 63 69 75 74 73 72 73 74 75 77 79 82 84 87 89 92 91 90 89 90 93 95 97 98 98 98 97 97 96 98 100 102 102 98 94 93 96 98 101 102 104 106 105 105 105 101 95 88 82 77 72 67 67 67 66 67 69 70 71 68 66 64 64 66 66 62 58 53 52 55 57 59 56 54 52 53 56 58 58 59 59 58 56 54 53 52 53 53 51 49 46 46 48 50 52 54 56 58 57 57 56 53 49 45 44 46 48 50 50 50 51 51 52 52 52 50 48 48 48 49 49 50 51 52 52 51 50 51 52 53 53 52 50 48 46 44 42 43 46 48 50 51 53 54 53 52 51 53 55 57 57 57 57 57 58 59 59 57 54 52 50 48 46 44 41 37 35 35 36 37 36 35 34 35 36 38 40 43 46 50 55 60 65 60 54 48 48 50 52 52 47 43 39 40 42 43 45 46 47 50 54 58 62 65 67 69 66 61 57 58 60 62 65 68 71 74 70 66 61 61 62 63 66 72 78 82 82 80 79 93 108 123 119 108 97 92 93 94 93 86 79 71 66 62 57 63 74 85 94 99 102 106 108 109 111 109 108 105 102 104 102 103 103 105 107 104 
+40 41 43 44 46 44 41 39 38 37 37 38 40 43 45 46 48 49 49 49 49 48 46 45 46 49 54 56 55 54 52 52 53 53 54 56 58 58 54 50 47 45 43 42 39 36 34 35 41 47 51 46 42 37 45 54 64 66 64 62 62 68 75 80 78 75 72 71 70 70 70 71 72 73 74 74 75 79 85 90 94 96 101 102 102 102 101 98 96 93 93 92 91 87 79 71 67 69 69 69 68 67 67 64 61 58 57 58 58 59 59 60 60 58 57 54 54 56 58 59 57 57 55 55 54 53 51 49 47 45 44 42 42 46 49 53 54 55 56 54 52 48 51 60 70 77 69 61 53 56 62 68 71 72 74 77 83 89 95 97 98 100 97 94 89 85 81 76 74 79 82 86 86 86 85 83 79 77 72 63 54 48 50 52 54 53 51 49 50 53 56 58 59 60 61 61 59 59 60 63 65 67 70 72 73 73 73 73 74 75 76 79 81 84 85 86 87 88 89 91 92 95 101 105 105 101 98 95 95 95 95 97 100 102 102 101 101 97 90 81 75 72 69 66 64 62 60 63 67 72 73 70 66 64 64 64 65 63 60 56 55 57 57 58 56 55 52 52 52 52 57 61 67 68 63 58 54 53 53 52 50 49 48 48 47 48 48 50 51 53 54 56 57 55 53 51 51 53 55 55 53 51 49 49 49 50 49 48 47 48 51 53 56 55 55 55 53 52 50 49 51 52 54 53 53 53 51 48 45 46 49 51 52 53 55 56 54 54 53 53 53 54 53 52 51 51 53 54 55 54 52 51 49 47 45 42 40 37 37 39 41 44 42 41 38 39 41 43 46 52 58 64 65 66 67 64 59 54 52 49 46 42 38 33 30 34 38 42 44 46 47 50 54 58 61 62 62 62 59 54 51 50 51 52 54 56 59 61 64 68 72 75 79 82 87 95 103 108 104 101 97 108 119 129 125 116 105 99 97 96 94 81 68 54 51 49 49 56 68 82 93 97 100 102 105 106 109 107 105 103 100 98 97 94 95 96 98 95 
+40 42 42 42 42 42 41 40 37 35 33 34 36 39 41 42 45 46 47 48 49 50 49 50 50 50 51 52 52 52 51 52 54 56 58 62 65 67 63 58 55 52 50 47 43 40 36 36 40 45 48 43 39 33 37 41 45 48 49 50 53 61 68 75 71 68 65 63 63 61 60 60 59 60 63 66 69 75 80 86 90 94 98 102 102 102 102 101 99 97 95 94 93 89 82 74 70 72 75 77 76 73 72 70 68 67 66 68 69 69 64 59 53 53 53 51 50 48 46 46 47 48 49 47 46 45 44 43 42 41 42 41 42 45 48 51 52 54 54 53 51 48 48 52 57 61 58 56 53 54 56 57 57 56 55 56 62 67 73 78 81 86 87 88 89 89 88 87 86 88 88 90 91 89 90 86 81 77 72 65 58 52 56 59 63 62 60 57 56 59 60 61 59 57 55 54 53 51 53 54 57 59 62 65 67 66 65 65 67 68 70 72 76 79 80 81 81 82 85 89 92 96 101 105 106 101 97 96 94 92 91 94 97 101 99 99 100 96 88 81 74 72 70 68 65 63 59 62 66 70 71 70 67 65 65 65 65 63 61 57 57 56 56 56 54 52 51 50 50 50 54 61 67 70 66 61 57 54 52 49 50 50 51 51 51 50 51 51 52 52 53 55 56 56 56 56 56 57 57 57 54 52 49 49 49 49 50 52 53 55 56 56 57 58 58 59 57 54 52 53 56 59 61 61 60 59 55 51 47 48 50 51 52 52 52 51 52 54 55 53 52 51 49 47 46 45 47 48 49 50 50 50 48 46 43 41 39 38 37 40 44 48 46 43 41 42 44 46 50 57 64 70 69 66 64 61 57 55 51 48 45 42 40 40 39 43 46 49 50 53 54 55 58 59 60 58 55 52 51 49 48 46 43 40 38 41 43 44 58 70 86 93 97 102 109 117 125 132 125 117 112 117 124 129 123 115 105 99 95 89 85 75 65 55 57 61 66 75 86 99 106 106 106 106 110 113 118 118 113 110 105 98 91 85 85 84 82 83 
+46 45 43 42 41 40 40 39 36 34 31 32 33 35 37 40 42 44 46 48 49 51 52 54 53 50 47 46 47 47 48 49 50 53 55 58 61 61 56 50 46 45 45 43 43 42 41 42 45 48 49 44 39 34 36 37 39 40 41 43 46 54 62 67 64 61 57 55 54 53 51 49 47 47 53 59 64 68 72 77 82 87 92 95 95 96 95 98 99 100 97 93 90 86 80 74 71 71 73 73 72 71 69 69 69 70 69 69 68 66 61 55 51 50 49 48 47 45 43 43 45 47 48 45 43 40 40 41 41 41 41 42 42 45 48 50 52 52 53 52 51 48 47 47 46 47 49 52 54 53 51 48 44 40 34 34 40 45 51 57 63 68 76 82 88 95 97 102 103 100 98 95 95 95 96 91 84 78 72 67 62 58 62 66 69 69 68 67 67 66 66 64 63 60 58 55 53 51 50 50 50 52 57 61 65 66 68 69 70 71 72 75 80 84 86 85 83 83 88 94 99 99 101 101 100 97 95 91 90 91 90 94 96 100 102 103 103 100 94 88 84 81 79 77 73 70 67 65 65 64 65 66 67 68 67 65 65 63 61 58 56 55 53 51 50 48 46 47 48 49 53 57 62 64 63 62 60 56 52 47 50 52 55 56 56 56 56 55 54 53 55 55 56 58 58 60 60 60 59 57 55 52 50 49 48 48 50 55 59 61 61 60 59 60 61 62 60 57 55 55 60 64 66 66 65 63 60 55 50 51 52 54 54 54 53 52 53 54 55 54 53 52 51 50 48 47 47 47 47 48 49 50 48 46 43 41 38 36 35 37 38 39 39 39 40 42 46 49 53 59 65 70 66 62 57 54 52 50 48 46 44 43 45 48 51 53 55 56 57 58 59 60 60 60 60 56 52 47 49 51 54 55 53 51 51 53 56 58 74 91 107 113 116 118 123 128 133 136 133 127 124 120 117 114 108 102 97 92 84 78 72 67 64 60 66 74 84 94 104 115 121 119 118 114 118 125 132 131 127 122 115 107 97 89 83 76 68 68 
+51 48 45 42 40 38 38 37 35 33 31 31 32 33 34 37 40 43 46 48 50 49 47 45 44 44 43 44 46 49 51 51 51 52 53 55 57 56 50 44 39 40 41 41 43 46 48 49 50 51 51 45 40 35 36 37 39 39 39 39 41 48 54 59 55 50 45 46 46 46 47 47 48 48 50 52 53 56 60 63 67 72 76 79 81 83 84 88 91 95 93 90 87 83 78 73 70 70 70 69 69 67 67 68 69 71 71 69 66 62 57 53 48 47 46 45 45 44 43 44 46 49 51 47 43 39 41 44 46 46 45 43 44 47 51 54 54 53 51 51 51 51 50 51 50 51 53 56 59 57 56 54 52 50 47 47 50 52 54 55 56 57 63 70 78 83 88 93 94 94 92 91 91 91 89 87 82 78 73 70 66 63 66 68 70 69 68 68 69 70 71 70 68 65 63 59 55 52 50 48 47 49 54 58 62 64 65 67 68 70 71 74 78 81 82 80 77 75 83 90 96 96 95 95 93 92 92 90 90 89 89 93 97 100 102 101 100 99 95 92 89 87 85 83 80 76 72 68 65 62 61 64 67 70 68 65 63 62 61 60 57 54 50 47 47 48 48 49 51 51 54 57 59 61 61 62 62 59 56 54 53 54 55 55 55 55 54 53 51 49 50 51 52 53 53 54 54 54 55 55 55 56 56 55 54 52 54 58 61 63 65 65 66 65 65 65 62 58 54 56 60 64 67 67 68 67 64 60 56 55 57 58 59 58 57 56 56 55 54 54 54 55 55 53 53 51 49 47 45 47 48 50 48 46 43 41 38 36 34 34 34 34 36 38 39 42 46 51 54 58 62 65 60 55 51 49 46 44 42 41 41 40 43 44 46 50 52 55 58 60 63 64 64 64 64 60 56 52 56 63 70 74 75 78 80 80 81 82 98 114 130 136 136 137 137 138 139 138 135 132 127 118 108 96 91 90 87 86 83 80 77 80 83 86 92 100 105 113 123 134 142 139 138 134 139 145 152 151 146 139 132 120 109 98 83 69 55 51 
+47 45 45 44 42 40 37 35 36 36 36 36 35 35 36 37 40 42 45 48 50 47 41 36 35 38 40 43 48 53 58 56 54 53 53 53 53 52 48 45 43 45 46 48 51 53 56 56 55 54 52 48 45 41 40 38 37 37 37 37 39 44 48 52 48 43 38 39 41 41 43 46 48 48 47 44 42 44 46 48 51 54 57 61 63 64 68 73 79 83 83 83 83 80 75 71 68 69 69 69 69 68 67 64 60 57 55 54 53 52 52 51 51 50 50 50 49 48 46 46 48 49 49 47 43 40 41 43 45 45 44 43 43 48 53 57 55 54 53 52 53 54 54 54 54 55 57 59 62 61 60 60 60 60 61 61 61 59 58 54 49 44 50 56 64 70 73 77 81 83 83 86 84 82 80 79 77 76 75 72 70 68 67 67 67 65 64 62 65 70 75 77 74 71 69 64 59 55 52 50 49 50 53 56 58 58 57 57 59 62 65 66 67 67 65 62 59 56 65 71 80 82 84 85 86 88 90 91 90 89 89 93 97 100 99 96 92 91 91 90 91 88 89 87 83 78 73 70 66 63 61 65 69 73 68 63 58 59 60 62 60 53 47 44 47 52 55 56 56 57 58 59 59 59 61 63 64 63 63 63 60 56 53 51 51 52 51 49 46 43 44 46 47 46 46 46 45 47 50 51 55 58 61 60 59 57 58 61 64 66 68 70 72 70 70 68 65 61 57 58 63 67 71 72 71 72 69 66 62 61 61 60 59 58 57 56 53 51 48 49 50 51 51 50 48 47 45 43 41 45 48 52 52 50 49 46 43 39 36 38 39 41 42 42 42 44 48 51 54 54 54 54 51 48 45 41 39 37 35 36 36 38 39 40 42 45 50 53 57 61 65 67 68 68 67 65 64 63 69 77 84 89 92 94 97 96 96 96 107 119 130 134 135 135 135 133 130 127 123 119 116 104 91 79 75 77 80 82 84 88 91 99 108 117 122 125 127 132 143 154 161 158 155 152 156 160 164 161 152 144 135 123 111 99 85 71 57 53 
+43 43 45 46 46 41 37 34 38 41 45 45 44 43 42 42 41 41 43 44 46 43 39 36 36 38 41 44 47 51 54 55 56 56 56 55 54 53 51 49 48 50 51 54 57 61 64 63 59 56 53 52 50 48 43 39 34 35 36 37 39 41 43 45 43 41 39 41 43 45 46 47 50 49 47 46 44 44 44 45 49 54 59 59 58 57 57 62 66 70 73 75 78 76 73 69 68 69 70 70 69 68 66 60 51 43 40 39 40 41 45 51 54 55 55 56 54 53 52 50 49 48 46 45 43 42 41 40 39 39 39 40 41 47 52 57 57 58 58 57 56 55 55 54 55 56 56 58 58 58 57 57 56 56 54 55 56 58 60 57 53 50 53 59 64 67 69 70 72 74 76 77 76 76 75 75 74 74 72 71 68 66 68 68 69 68 65 64 65 70 75 77 76 75 74 70 68 63 61 59 57 57 58 59 60 60 60 59 63 67 71 70 67 64 61 59 56 54 59 67 73 76 79 83 86 89 92 93 93 92 92 93 96 98 96 92 88 86 87 89 90 90 88 88 84 78 74 70 67 64 63 67 71 74 70 66 62 62 64 66 64 58 53 50 52 54 57 58 59 61 60 59 57 57 60 64 66 66 66 65 63 59 54 53 55 56 56 55 54 53 52 50 48 49 50 51 53 53 54 54 56 57 57 59 61 63 65 68 70 73 73 74 75 75 74 74 72 68 67 68 74 79 84 81 78 76 74 74 73 70 64 59 54 54 52 51 48 44 42 43 44 45 46 44 42 41 39 39 37 43 48 54 55 54 54 52 47 43 39 41 43 45 45 44 44 45 49 52 55 52 51 48 46 43 39 38 36 35 35 35 35 35 36 37 38 41 43 46 50 56 63 67 68 70 71 74 78 81 86 92 98 101 103 106 106 107 106 106 114 120 128 130 132 134 133 127 120 113 108 105 101 92 83 74 72 76 79 82 90 97 104 114 123 132 137 139 140 146 155 163 172 169 168 165 164 165 165 158 150 141 130 118 109 97 86 74 62 55 
+39 40 41 43 43 39 35 33 37 40 44 45 45 46 46 43 42 42 42 42 43 40 38 36 37 40 42 44 44 45 47 52 57 60 61 61 61 59 58 56 56 57 57 59 59 61 61 58 55 50 49 51 52 53 47 41 36 37 39 41 41 41 41 41 41 40 40 43 45 47 50 50 52 51 50 48 46 45 44 43 49 57 65 64 59 53 50 54 56 59 62 66 69 70 70 70 71 72 74 74 69 64 60 56 52 48 46 47 48 49 49 49 51 52 53 54 53 51 50 49 48 48 48 47 46 46 43 41 39 39 38 39 41 45 50 55 55 56 57 57 57 56 55 56 57 57 57 56 56 56 55 55 53 51 49 49 53 58 61 60 58 56 59 62 66 66 66 65 65 66 67 69 69 71 72 72 71 71 69 66 64 62 67 71 76 73 72 69 70 70 71 73 76 77 78 78 79 78 77 74 72 69 67 66 65 70 74 77 81 85 89 87 83 77 74 73 74 72 75 76 78 82 86 91 94 95 97 99 99 100 101 98 96 94 90 88 86 85 85 87 87 87 86 85 82 77 73 70 69 67 66 69 72 74 74 73 72 72 72 71 71 68 67 64 62 57 54 57 60 63 61 58 55 54 60 64 69 68 66 65 63 61 58 58 60 62 64 66 67 69 63 57 51 52 56 60 62 60 59 58 57 55 53 57 63 69 73 75 77 79 79 80 80 79 78 77 76 76 75 78 84 89 91 87 82 78 77 78 77 74 66 60 55 53 52 50 48 46 44 43 43 44 43 42 41 40 40 42 42 46 51 55 56 55 55 53 49 45 42 42 42 43 43 43 43 45 49 54 56 54 50 47 44 40 36 35 35 35 35 34 33 33 34 35 35 37 38 39 45 53 61 67 69 71 72 77 81 85 87 90 93 95 98 100 103 105 107 110 114 117 121 122 122 120 116 108 97 88 85 83 82 80 82 83 86 86 85 87 97 107 117 126 135 143 149 152 157 160 166 173 180 178 177 177 171 165 163 153 144 135 125 117 109 100 91 85 80 77 
+36 37 38 39 39 36 34 31 33 34 36 39 42 44 44 43 42 42 45 47 49 46 42 38 39 42 44 46 47 49 51 54 56 59 60 60 61 61 61 60 60 60 60 61 60 59 57 54 49 44 44 49 54 57 51 45 39 41 44 47 47 45 44 42 41 40 38 43 46 51 53 56 58 58 55 53 52 51 50 49 54 62 68 69 66 63 60 62 62 63 65 66 69 69 70 71 73 75 78 78 70 64 57 55 55 54 54 55 56 56 52 50 47 48 49 50 49 47 46 46 48 49 50 51 50 51 48 46 43 42 42 42 42 44 47 47 47 46 46 48 52 55 58 59 61 62 61 59 59 58 57 55 54 53 52 51 51 51 51 51 52 53 59 66 72 73 70 66 63 63 62 61 64 67 71 72 72 73 73 72 71 71 73 76 78 79 78 79 79 76 75 74 75 77 77 79 80 82 80 78 76 74 71 69 68 75 82 88 92 97 100 98 96 93 90 90 91 91 90 88 86 89 94 97 100 100 102 103 104 105 106 102 97 92 90 88 88 87 87 86 85 85 85 84 81 76 71 70 69 67 69 71 72 74 76 76 76 76 74 71 71 71 72 72 66 61 55 57 59 61 60 57 54 54 60 68 74 73 71 70 69 69 68 68 69 70 71 76 82 88 80 72 64 64 66 68 69 69 70 70 69 69 69 71 75 78 81 84 87 90 92 93 94 88 83 77 77 80 83 85 89 92 94 88 82 76 77 76 76 73 68 62 58 56 53 51 50 50 49 48 46 43 42 41 40 40 43 45 47 50 52 55 55 55 56 54 52 48 46 45 44 43 44 45 46 48 52 55 57 52 48 44 40 36 31 31 33 35 36 37 37 38 38 39 40 41 42 44 48 55 61 66 67 68 69 70 70 69 71 71 73 75 81 87 93 98 103 111 113 113 115 114 110 107 102 92 82 73 73 72 71 76 84 93 97 93 91 89 98 108 116 122 127 134 140 147 155 161 169 175 180 179 177 174 168 162 155 148 140 131 123 115 107 100 98 97 98 99 
+35 36 38 40 40 39 37 36 36 36 35 38 40 43 44 43 43 44 48 51 55 50 45 40 41 44 46 49 53 56 58 56 54 53 53 54 55 55 55 54 54 54 52 52 51 51 51 49 47 45 45 49 53 55 50 45 40 43 47 50 50 48 46 45 44 41 40 43 46 49 54 58 62 64 62 60 57 57 56 55 60 64 69 74 76 79 80 80 79 79 78 79 79 77 74 71 73 78 84 87 81 73 67 67 68 69 69 70 70 69 64 60 56 55 55 54 53 51 50 50 54 57 59 57 55 54 51 49 46 46 45 45 45 45 45 46 44 42 40 44 50 55 58 61 63 64 63 63 61 60 58 57 57 57 58 55 49 44 41 42 46 48 58 69 80 80 74 68 64 61 56 54 60 66 72 73 75 76 77 81 84 86 84 81 79 83 87 91 90 86 81 78 76 74 72 73 74 75 75 74 73 72 70 68 68 76 83 90 93 97 100 104 106 109 110 108 108 107 105 102 101 101 99 101 101 102 103 105 106 107 108 104 100 95 93 93 92 92 88 87 86 85 85 85 80 73 67 65 66 67 67 70 71 73 75 76 76 74 71 67 66 69 71 72 68 64 60 58 57 56 55 55 54 57 64 72 79 79 78 78 78 79 79 79 78 76 78 87 97 106 97 89 80 77 76 76 77 79 80 82 83 83 85 85 86 87 91 93 97 100 101 104 106 97 86 76 77 82 87 90 92 93 94 88 81 75 73 72 71 69 65 63 60 57 53 50 49 49 49 47 46 44 44 44 45 45 46 47 48 50 51 53 53 55 56 56 56 56 56 54 54 52 53 53 54 55 57 57 57 51 44 39 35 30 26 27 31 35 38 40 42 44 44 44 44 45 47 49 52 57 61 64 65 65 66 65 65 64 65 70 75 81 88 94 100 106 111 115 119 120 122 122 116 109 105 102 100 99 93 88 82 84 93 102 106 99 94 90 96 103 110 114 116 118 126 139 154 165 170 176 182 179 175 171 167 157 152 144 135 126 117 112 109 105 105 107 108 109 
+35 37 38 40 41 42 43 43 41 40 39 40 42 43 45 47 48 49 51 53 54 52 49 46 46 48 49 51 52 54 55 51 48 44 46 46 48 48 48 48 48 47 45 44 44 44 45 45 46 45 46 48 50 51 47 44 40 43 47 50 51 50 49 48 49 48 47 44 40 37 42 48 54 58 58 58 58 57 56 55 58 62 64 69 75 80 83 83 82 81 81 80 81 79 77 75 77 82 89 92 86 80 74 78 80 83 85 84 83 81 76 71 65 64 62 60 58 57 55 57 62 67 69 64 58 54 52 51 49 48 49 49 49 49 50 50 49 48 46 49 51 53 57 59 62 64 64 63 63 64 67 68 70 73 75 74 68 62 57 56 55 55 60 65 71 72 70 65 62 61 59 57 62 67 72 75 78 80 84 90 95 97 97 94 91 88 86 84 81 80 79 77 74 71 69 69 70 70 70 71 71 72 71 70 72 78 84 90 92 95 97 103 110 116 121 117 117 116 111 109 106 104 102 100 101 103 106 107 109 110 112 109 106 102 102 100 99 97 94 91 88 89 89 91 85 78 74 71 72 72 72 74 75 76 77 76 77 74 71 69 68 72 75 77 74 70 66 64 62 61 61 60 60 63 69 74 81 85 89 91 94 96 97 97 95 92 92 99 107 114 107 100 90 87 89 89 91 92 96 99 99 100 101 100 99 97 96 95 95 95 98 99 101 94 87 79 79 81 83 84 88 90 92 86 79 72 68 64 61 60 61 62 61 57 52 46 46 46 46 46 46 47 47 49 50 51 51 50 48 50 50 51 52 54 56 58 60 62 63 62 61 61 61 59 59 58 57 56 54 48 44 40 36 33 29 29 33 35 37 40 41 43 42 41 40 42 47 51 55 58 61 63 63 64 64 65 67 67 74 83 94 102 107 112 116 118 120 122 124 127 130 128 122 115 110 114 118 122 114 105 97 99 107 117 121 116 113 108 117 121 129 133 135 139 145 154 162 171 172 176 178 175 171 166 161 157 152 143 132 120 108 109 110 110 113 114 119 117 
+42 43 45 47 48 51 54 54 50 47 44 45 46 47 49 51 52 53 54 54 54 53 52 50 52 52 53 52 51 50 47 44 40 36 38 40 41 41 41 41 40 40 39 39 38 37 36 39 42 44 45 44 44 44 46 46 47 48 50 52 52 52 51 50 51 52 51 45 38 31 36 41 48 52 55 57 59 57 55 53 54 56 58 63 69 75 77 78 77 78 75 74 72 76 81 84 86 86 88 88 82 76 71 78 83 90 87 84 81 78 76 73 71 69 68 67 66 65 64 64 65 66 65 61 56 52 51 50 49 49 50 51 52 52 53 53 53 53 53 53 54 54 57 60 64 66 65 65 65 69 73 78 82 87 92 91 85 78 73 69 65 62 61 62 62 63 63 63 63 62 62 62 65 69 71 77 80 85 90 97 102 108 109 109 110 95 80 64 61 66 69 72 71 70 68 66 65 65 66 68 69 72 74 76 77 80 82 85 87 89 92 99 105 113 117 117 117 115 111 108 104 101 101 98 100 103 107 110 112 115 117 116 116 115 113 110 107 104 102 99 97 99 99 100 98 93 89 87 86 86 84 83 82 80 79 78 77 77 76 76 77 80 84 86 81 78 75 74 73 71 70 70 69 71 74 78 82 89 99 107 111 115 118 118 113 111 107 112 115 120 113 107 101 99 102 103 105 108 111 114 115 116 117 113 110 106 102 98 94 92 93 94 95 90 86 82 81 81 82 83 86 87 89 82 76 70 65 60 56 56 58 60 61 56 51 46 46 46 46 46 46 47 47 47 47 48 47 47 46 47 48 49 51 54 58 62 61 62 62 63 65 67 65 61 57 55 53 50 48 47 46 46 43 39 35 34 35 35 36 38 40 42 40 38 36 40 46 52 55 57 59 60 62 65 67 72 76 80 90 101 111 120 123 127 132 133 133 134 138 143 148 147 142 137 132 137 141 141 134 127 117 120 130 140 147 145 142 140 145 150 154 158 162 164 169 169 173 172 173 173 173 170 166 161 157 153 148 141 129 117 106 103 100 97 98 103 106 108 
+47 49 51 53 56 61 66 66 60 54 50 52 53 54 55 56 57 57 57 57 57 54 51 49 49 51 52 50 48 46 43 41 37 35 37 39 40 41 40 40 39 38 38 36 34 32 30 33 38 42 43 39 37 38 44 51 57 56 55 55 53 52 50 50 51 52 52 50 47 44 47 50 54 55 55 55 56 56 56 56 59 62 65 67 70 73 74 72 72 71 71 70 70 74 79 85 87 85 84 82 79 74 71 78 85 93 90 84 79 76 76 76 75 75 74 74 74 73 73 70 65 60 56 53 51 48 48 47 47 48 50 52 53 53 53 55 56 58 60 61 60 61 62 67 72 74 73 71 71 75 78 82 85 88 91 92 88 87 83 82 81 79 75 73 69 66 65 62 63 66 69 72 75 79 83 86 89 91 95 98 103 106 106 107 106 94 80 67 65 70 75 77 74 71 68 70 72 74 78 81 84 87 87 89 90 90 89 89 91 92 94 98 103 109 112 111 110 110 106 102 97 96 95 94 95 100 104 108 111 114 118 119 120 122 120 117 115 112 110 107 104 105 106 106 105 103 101 99 98 97 96 94 92 90 89 88 87 87 87 87 89 91 94 95 89 83 78 77 77 76 76 75 73 74 77 81 85 96 105 115 120 122 126 125 123 120 118 119 119 122 117 113 106 106 110 113 117 119 119 120 120 119 117 115 111 109 105 101 98 94 92 89 85 84 84 84 85 86 87 89 86 85 83 78 73 68 63 60 56 56 57 58 58 54 50 46 46 47 48 48 47 46 45 44 43 42 42 43 43 45 46 47 51 55 59 62 61 60 59 62 66 68 65 60 54 50 47 46 45 45 46 46 44 40 37 36 38 39 40 41 42 42 39 36 32 34 39 44 47 48 50 52 60 70 80 88 95 104 112 121 129 136 140 144 146 147 148 149 152 157 165 166 163 157 155 157 158 159 154 143 136 138 145 154 160 161 158 156 159 161 164 166 168 168 170 169 168 169 167 166 166 161 159 157 153 149 145 138 127 118 107 98 89 79 80 87 94 96 
+47 47 46 46 48 51 53 55 54 53 52 52 54 57 57 57 57 58 58 58 57 54 50 47 48 49 50 48 45 42 40 39 37 37 39 42 45 47 49 51 50 47 44 41 40 37 35 35 35 35 37 39 41 42 45 49 52 51 50 49 49 50 50 51 51 52 53 54 55 56 57 59 61 61 58 55 54 55 57 58 65 70 75 75 73 71 71 68 65 64 66 69 70 72 74 75 77 77 77 77 78 76 77 78 81 83 82 80 78 77 79 81 82 82 82 82 80 78 76 74 72 68 64 58 52 48 49 49 50 51 55 58 59 58 56 56 59 62 65 64 63 61 65 69 74 77 76 74 74 77 81 84 86 88 89 91 92 94 95 95 96 96 89 83 76 71 67 63 63 70 76 82 87 92 97 98 98 99 98 100 99 99 97 95 92 89 85 80 81 84 88 88 80 73 69 77 85 93 99 104 110 112 111 109 107 106 104 102 103 102 103 103 102 102 101 101 101 98 96 93 89 88 87 86 88 93 98 103 105 110 114 116 118 122 123 122 121 120 117 115 112 111 110 108 109 108 108 107 107 108 108 105 106 104 104 105 104 104 104 102 102 103 105 104 95 86 78 77 78 79 78 76 74 75 79 84 88 99 109 120 124 129 129 132 129 127 127 125 124 122 118 116 111 113 119 124 128 127 126 125 124 121 119 117 114 112 110 107 103 100 95 88 82 84 86 88 89 90 90 89 86 83 80 76 71 67 63 59 55 53 54 54 55 50 45 40 41 43 44 44 42 40 40 41 42 44 42 41 40 43 47 51 52 51 49 48 49 51 53 56 60 62 59 53 47 43 43 42 42 43 43 43 41 39 38 37 40 43 45 45 44 43 39 34 30 31 37 41 44 47 49 53 68 81 95 104 113 122 129 138 143 151 153 157 160 161 161 162 165 171 176 178 175 169 165 166 166 162 159 154 149 150 156 162 167 165 164 164 163 167 170 169 170 170 170 168 166 163 160 157 150 148 146 145 142 137 131 125 118 113 110 101 91 82 81 86 91 93 
+46 44 42 40 39 38 37 39 44 48 51 52 53 54 54 54 53 53 52 53 52 51 49 47 49 50 51 49 46 44 41 40 39 39 43 46 50 53 56 60 59 55 51 48 45 42 40 36 32 28 32 40 46 49 46 43 42 41 40 38 42 46 51 53 52 52 53 56 60 64 67 72 75 73 70 66 64 66 67 69 68 68 67 65 63 60 61 60 60 61 65 69 72 71 69 68 68 69 71 73 75 78 80 78 79 77 77 78 78 80 83 86 88 89 90 90 86 82 79 78 79 80 77 68 58 50 51 52 53 58 63 68 68 63 60 57 60 62 65 62 59 56 58 60 64 65 65 64 63 66 70 71 74 76 79 82 88 91 96 100 101 105 101 96 91 85 75 67 64 72 79 86 91 95 100 101 101 102 103 105 106 106 103 101 98 97 96 95 95 99 100 97 90 83 78 86 92 100 107 114 121 122 121 119 117 115 112 109 109 109 107 106 102 100 96 93 91 88 86 83 81 81 78 78 80 84 89 93 97 101 105 109 113 118 119 118 118 117 114 114 112 112 112 112 114 115 118 119 118 119 116 116 115 113 113 113 112 110 107 104 103 103 103 101 96 93 88 88 88 88 88 87 84 84 87 90 93 103 113 122 126 126 127 128 128 129 130 129 129 128 127 128 126 128 130 134 133 132 131 129 126 126 122 122 125 124 124 121 117 114 111 105 100 99 97 96 94 90 87 84 83 81 80 75 73 69 64 57 51 48 49 50 49 43 38 32 33 36 39 38 36 33 33 37 41 45 43 40 37 41 48 54 54 48 41 36 40 43 47 51 54 57 56 50 45 43 43 43 43 43 41 40 40 39 40 40 42 43 44 46 47 49 48 47 47 51 58 65 72 76 79 85 94 103 114 121 127 134 140 149 158 166 168 170 174 172 175 174 178 184 188 187 184 180 177 174 173 169 165 163 159 161 166 171 178 175 172 169 171 174 178 179 177 176 176 172 169 164 150 135 119 118 119 124 123 116 108 101 104 108 112 106 97 88 86 88 88 88 
+43 43 44 45 45 45 45 46 49 51 53 52 52 52 52 52 52 52 51 50 49 48 47 47 49 50 53 51 48 45 44 42 42 42 47 52 56 58 60 62 63 62 61 58 53 47 41 41 41 41 44 50 55 57 52 47 43 43 42 42 44 47 51 52 51 50 51 57 65 70 75 80 86 85 80 76 75 76 78 78 70 63 56 53 50 47 48 53 57 61 65 69 73 70 66 63 63 64 66 69 73 77 82 82 83 83 81 81 81 83 88 93 96 97 98 100 94 89 84 83 85 85 82 73 62 54 55 55 56 59 63 68 67 63 58 55 57 58 59 58 54 51 52 54 57 58 57 57 57 59 60 62 63 66 67 73 82 90 98 103 108 113 111 109 107 97 84 71 66 74 81 88 93 96 100 102 105 107 108 111 114 115 114 113 111 111 111 111 110 111 110 109 103 98 93 95 97 100 107 113 122 125 124 125 124 120 117 115 113 113 109 106 103 98 94 88 83 79 76 74 71 71 71 70 71 74 77 80 84 88 92 97 103 108 109 107 105 103 102 101 100 105 111 117 121 125 130 130 130 127 126 126 123 122 119 118 116 112 105 100 96 93 92 91 96 100 104 104 104 104 101 100 98 98 97 97 97 106 115 123 125 123 122 124 128 129 132 132 134 133 136 139 142 143 142 141 140 137 134 132 130 129 126 127 131 135 134 132 127 125 121 117 111 107 103 99 94 87 81 76 76 76 75 71 67 63 58 53 48 45 45 46 45 42 40 37 38 40 42 42 42 41 41 40 40 40 39 38 37 40 44 48 49 44 39 36 39 41 44 47 51 55 55 53 52 51 49 48 47 44 41 38 39 40 42 43 43 42 42 46 50 54 57 60 63 70 78 88 96 100 104 110 118 123 132 137 142 147 153 160 170 178 178 180 180 180 183 181 183 185 187 188 186 182 181 180 180 180 175 170 165 164 176 185 195 191 185 177 178 180 185 185 184 182 181 174 169 164 142 121 103 101 108 115 117 113 110 107 110 113 114 109 102 95 91 88 86 84 
+42 44 47 49 52 54 56 56 56 56 56 54 51 48 52 55 57 57 56 56 53 49 45 41 42 43 44 43 41 39 40 43 45 48 51 53 56 58 59 61 63 65 66 65 57 50 43 47 50 53 57 61 65 64 58 53 48 49 51 52 51 51 51 50 48 46 48 58 67 76 79 83 87 85 80 73 71 72 72 71 67 63 59 55 52 48 49 53 57 61 64 66 69 66 63 60 59 59 59 63 71 77 83 85 86 87 86 84 83 86 92 99 104 105 107 108 102 97 92 89 89 89 85 76 65 57 57 57 56 57 59 60 59 56 52 50 49 49 48 48 48 48 50 54 57 59 60 61 61 60 58 57 56 56 55 61 73 85 93 97 101 105 105 104 103 98 89 81 76 76 76 77 81 85 89 93 97 100 105 109 114 115 115 113 112 113 114 113 112 110 109 108 105 103 101 103 103 104 111 118 125 128 128 128 127 126 122 120 117 116 113 111 108 103 99 93 86 81 76 71 67 66 65 64 64 66 66 69 73 78 82 88 93 99 98 98 96 95 95 95 96 103 111 120 123 128 132 134 135 135 133 131 127 126 122 119 114 107 99 91 86 86 86 87 97 107 116 117 117 117 114 111 108 104 102 99 94 102 112 120 121 118 116 115 118 121 124 125 127 128 132 136 141 141 138 137 135 135 135 135 133 130 127 128 128 127 126 121 116 111 107 104 101 97 93 88 82 77 70 66 65 66 65 60 54 48 46 46 46 45 44 42 41 43 46 48 48 48 48 48 50 52 52 46 40 34 35 35 36 39 41 44 44 41 38 35 37 39 41 45 50 53 54 54 53 52 51 49 49 46 43 40 41 42 44 44 42 40 39 44 48 54 59 66 72 80 92 102 111 115 120 125 132 141 148 154 159 163 167 174 179 186 187 188 189 190 187 186 186 189 189 189 188 187 185 187 187 190 187 181 174 174 183 198 205 198 193 185 184 188 192 187 184 177 171 162 156 148 139 132 125 125 128 130 131 132 135 135 131 125 118 112 106 101 96 90 85 81 
+47 49 50 52 52 50 49 50 52 53 52 52 50 49 51 53 57 56 55 55 53 47 43 37 37 36 36 35 33 32 36 43 51 55 54 52 50 53 54 56 58 60 61 61 57 51 47 50 54 58 59 61 62 61 58 56 54 57 59 62 61 58 57 53 49 46 48 59 72 83 84 86 88 84 78 72 69 67 65 64 64 63 62 60 57 54 55 57 59 61 61 61 62 61 59 57 56 54 52 55 65 75 82 83 84 85 83 81 79 81 87 92 97 101 105 108 105 100 96 90 88 85 79 72 64 58 56 55 54 53 53 53 52 51 49 47 47 45 45 45 46 47 50 54 58 61 61 62 63 59 56 53 49 47 44 51 63 77 88 90 93 97 97 98 99 97 94 90 85 77 70 64 68 70 74 81 87 93 101 106 112 114 114 113 111 110 110 110 107 104 101 99 103 105 108 108 110 113 118 125 132 133 131 132 131 128 126 124 122 119 117 115 115 114 112 105 98 92 83 74 64 62 60 59 59 59 59 60 65 70 75 80 85 89 91 90 90 90 91 93 95 103 110 118 121 128 132 133 134 135 135 133 130 127 121 115 109 100 88 78 75 78 82 88 100 113 128 128 129 127 125 120 114 109 103 96 90 100 108 116 117 113 110 107 109 111 112 115 120 122 126 131 136 137 133 131 129 132 135 138 134 130 128 125 122 121 115 110 104 99 96 94 91 87 83 79 74 69 63 59 59 59 59 53 48 43 43 45 47 48 46 45 45 47 50 52 51 49 47 48 50 51 51 47 42 37 38 39 41 42 43 43 42 39 36 33 35 38 41 45 50 54 55 51 48 45 46 47 48 47 45 44 44 45 46 45 41 38 35 41 48 53 61 71 80 90 102 114 125 130 135 140 149 154 165 168 172 175 179 184 190 195 195 195 195 195 192 189 190 194 195 197 198 196 193 197 201 202 199 193 187 184 194 204 208 204 199 193 194 195 197 193 182 173 162 154 147 140 142 144 149 150 146 145 145 145 147 146 139 131 122 118 112 105 100 99 97 94 
+50 51 53 53 51 46 42 43 44 46 48 49 50 51 50 49 47 45 43 42 42 43 43 43 41 39 37 36 35 34 38 46 54 60 60 59 59 58 58 58 58 58 59 58 55 52 50 54 58 61 61 59 57 57 58 58 60 64 68 72 70 68 67 61 55 49 51 65 79 91 91 90 89 82 77 70 66 63 61 57 57 58 57 55 54 53 54 58 61 63 60 59 58 58 58 58 56 52 50 53 62 72 80 80 79 79 79 77 75 78 81 87 92 98 104 109 106 103 98 92 84 78 71 67 61 56 54 52 49 48 47 46 46 47 48 48 49 49 49 50 50 50 53 57 60 62 60 60 59 54 50 46 43 41 39 44 54 65 73 76 78 80 84 86 87 85 83 80 77 74 72 69 71 73 75 79 82 86 90 92 93 96 96 98 98 100 103 105 105 104 102 103 106 109 112 114 117 119 124 129 134 135 136 136 136 133 132 128 125 121 117 115 113 112 109 103 101 96 87 79 70 68 67 66 65 64 63 64 68 73 78 79 80 82 81 80 79 80 84 88 92 98 103 110 116 122 130 134 135 137 137 134 131 126 120 112 104 96 88 80 79 85 91 98 111 123 136 138 137 136 132 125 118 112 108 104 101 105 108 113 111 110 108 105 105 104 104 108 111 115 121 126 133 133 128 122 119 125 129 132 128 123 117 113 108 104 100 98 96 95 89 83 78 76 75 75 72 69 65 62 60 59 57 54 51 47 48 48 50 51 51 51 51 53 53 54 52 49 46 46 47 49 49 46 43 41 42 44 45 45 44 43 41 39 36 33 36 40 42 47 51 56 56 51 48 45 46 47 47 46 45 45 45 45 45 45 41 38 35 41 47 53 63 73 83 96 110 124 139 145 151 156 163 170 176 180 183 185 190 193 197 201 203 202 202 199 198 192 192 196 203 203 205 203 203 204 204 205 203 198 197 196 197 199 201 198 196 195 195 196 196 194 191 188 183 178 174 169 170 173 174 173 165 159 153 154 150 148 141 135 128 122 116 111 106 107 108 106 
+48 46 44 42 43 42 42 43 43 43 45 46 48 49 46 43 40 38 36 33 34 39 43 47 45 42 40 39 38 37 42 50 57 64 69 74 77 73 70 66 63 61 59 57 55 52 51 53 56 58 59 60 60 60 60 60 62 68 73 80 78 76 74 69 62 56 57 71 85 97 94 91 89 83 76 69 64 59 55 52 52 52 52 51 50 48 52 58 63 65 61 57 54 57 58 60 58 57 55 57 64 70 75 72 68 66 67 67 70 75 83 92 98 100 102 104 101 97 94 87 78 69 63 59 55 51 49 46 45 44 44 43 44 47 50 51 52 52 52 51 51 49 52 55 60 60 58 55 53 49 45 41 39 38 36 40 47 54 60 62 64 65 69 73 76 75 72 68 68 71 74 76 77 77 77 78 78 78 78 74 71 71 76 80 85 90 95 100 103 105 108 110 113 114 116 120 123 127 130 133 137 138 139 142 142 139 137 134 128 121 117 109 103 97 94 95 95 95 89 84 79 80 80 81 80 79 78 78 81 84 87 83 79 76 72 67 63 64 70 77 83 87 91 96 106 118 128 134 136 137 140 134 131 127 117 107 98 94 92 91 94 101 108 115 125 134 143 144 145 143 139 129 121 115 116 116 116 113 110 107 106 106 106 104 101 99 96 100 105 107 116 121 128 128 121 114 111 116 122 126 121 115 108 102 96 91 88 89 89 88 80 73 65 66 68 70 70 67 66 63 61 57 54 53 52 51 51 50 50 51 51 52 53 54 56 58 56 53 50 48 49 49 49 47 47 45 45 45 45 44 43 42 42 42 43 44 44 46 47 50 54 58 59 56 52 51 48 47 44 44 45 45 45 45 44 43 40 38 36 41 48 53 64 76 88 101 118 134 150 156 163 170 175 180 186 191 191 193 195 199 203 207 203 203 203 200 199 195 195 199 202 204 204 204 204 198 194 188 188 192 195 199 196 189 181 188 191 196 198 198 196 196 200 203 206 202 197 194 190 190 188 183 175 168 161 158 154 154 148 141 137 132 126 120 115 114 114 114 
+46 42 37 33 36 39 43 43 42 42 42 43 44 44 41 39 36 36 35 34 35 37 39 40 40 39 39 40 42 43 45 49 53 58 63 69 73 71 68 65 63 60 58 55 53 51 49 51 53 55 58 60 63 63 61 60 62 70 79 86 84 83 81 77 71 65 67 77 88 96 94 91 90 85 80 75 69 62 56 51 50 49 48 47 46 46 48 54 58 61 60 58 56 57 57 59 59 60 60 63 66 71 73 68 65 59 62 64 67 75 85 96 102 101 100 99 95 91 87 80 70 61 55 52 47 44 43 42 40 42 42 44 46 49 53 55 55 54 54 50 46 42 44 48 52 52 49 47 44 44 43 43 42 41 41 44 49 54 58 60 62 63 64 65 66 66 66 66 67 69 71 73 76 79 82 83 84 86 83 79 75 74 77 80 83 89 94 99 103 105 107 111 113 117 118 122 125 130 132 134 136 138 140 140 141 137 134 131 125 120 113 109 105 102 100 103 106 108 101 96 91 90 89 91 91 91 91 92 94 96 98 90 83 75 71 67 64 64 67 72 77 83 88 95 106 117 128 136 137 139 140 137 133 129 119 108 98 95 96 96 98 101 105 109 119 132 143 145 142 140 133 124 114 107 107 108 107 104 101 98 96 96 96 96 95 94 94 97 101 104 108 111 115 114 111 108 107 113 117 122 117 110 102 99 96 94 90 86 81 76 68 61 53 55 60 65 67 66 65 64 60 57 54 53 53 52 52 50 49 48 49 50 51 55 58 62 60 58 54 52 50 49 47 49 49 50 48 46 44 43 42 42 42 45 48 51 50 49 47 50 53 57 58 56 53 52 49 47 45 45 45 46 46 46 45 45 45 44 44 55 66 77 87 95 103 114 128 144 158 162 170 176 182 186 191 195 197 199 202 204 206 208 207 202 201 199 198 199 197 201 203 204 202 201 199 192 185 177 179 185 193 197 189 182 174 181 186 193 195 194 191 195 197 198 202 197 193 188 187 181 176 173 168 165 162 160 159 161 156 152 147 143 135 128 124 122 121 120 
+44 42 40 38 39 41 42 42 42 42 42 41 41 41 39 38 36 36 35 36 36 36 36 36 37 37 38 41 45 49 49 47 47 48 50 53 56 55 54 54 54 54 54 52 48 43 42 45 48 52 53 54 55 55 57 58 61 69 76 83 82 83 82 80 77 74 74 80 85 90 90 89 88 85 82 78 72 64 57 51 48 46 44 43 43 42 45 48 52 55 58 59 61 59 56 54 58 61 65 69 72 75 78 76 75 73 76 79 81 85 89 94 95 90 85 80 78 75 71 66 61 57 53 49 46 43 43 43 42 42 43 43 46 50 53 55 54 53 52 48 43 39 41 44 48 48 44 40 37 39 41 43 43 44 44 46 50 54 57 59 60 61 60 59 58 60 62 64 66 67 68 70 76 80 87 89 91 94 92 88 85 83 83 84 85 90 95 99 102 106 107 110 113 117 120 122 127 132 133 133 135 137 138 139 138 133 128 122 119 115 111 110 113 116 119 124 128 130 122 113 105 102 98 95 96 99 103 105 107 109 110 100 90 79 76 76 75 75 73 73 72 82 92 101 111 120 129 135 136 139 141 139 137 133 123 114 104 100 99 98 96 94 92 93 108 123 139 140 137 134 126 116 104 95 95 94 93 92 90 88 86 85 84 85 87 90 93 94 98 100 101 101 101 102 102 102 104 108 112 116 110 103 98 94 93 92 89 82 74 67 60 54 48 51 57 63 65 65 65 64 61 57 54 53 54 54 53 51 49 48 48 48 49 52 54 58 57 53 50 48 47 46 45 44 43 42 41 39 38 38 38 39 41 44 47 50 47 44 41 43 48 52 54 52 51 49 48 48 47 47 48 47 48 47 47 48 49 51 53 68 83 99 107 111 117 125 138 150 162 167 173 177 182 188 191 195 197 200 201 204 203 207 205 204 202 200 199 197 199 196 195 193 186 181 174 172 175 178 180 184 188 189 182 177 171 176 181 188 190 188 189 189 191 192 193 188 186 181 174 168 160 156 156 160 164 164 164 167 164 160 156 150 143 134 126 122 116 111 
+42 42 42 42 42 42 43 43 42 42 42 41 39 39 39 39 39 39 38 38 38 38 38 37 38 38 38 40 42 43 43 43 42 43 45 47 48 48 48 47 48 50 52 51 47 42 40 43 46 50 49 48 46 48 52 56 60 66 72 78 78 79 79 79 80 80 79 78 76 76 76 76 77 75 74 72 68 65 61 56 50 45 41 42 44 45 48 53 57 60 61 63 64 62 60 58 61 65 69 71 75 78 81 81 82 83 86 89 92 93 92 91 88 80 70 63 58 56 53 52 53 54 52 50 46 44 46 47 48 46 44 43 45 48 52 53 50 48 45 44 43 42 44 47 50 48 44 39 35 37 38 39 40 40 40 43 49 53 57 62 66 69 69 67 66 67 68 69 68 67 66 66 73 79 85 86 86 87 81 75 68 66 73 80 87 90 94 97 99 101 104 103 103 102 103 109 115 122 125 130 135 137 140 142 139 136 132 128 126 124 120 120 122 123 124 127 130 132 126 121 117 113 112 110 111 113 114 115 115 115 116 106 96 86 84 84 84 82 78 74 74 85 97 108 117 124 132 136 138 139 140 139 137 136 127 118 109 105 102 97 94 90 87 87 102 118 133 134 131 127 122 113 104 97 94 90 87 88 88 90 91 91 91 94 97 101 104 102 100 98 96 93 91 89 89 88 87 91 95 97 93 89 84 81 80 77 75 72 68 65 63 62 61 62 65 66 68 67 66 65 62 59 57 56 55 55 53 52 51 49 48 47 47 48 50 51 50 48 45 43 43 42 42 40 36 34 33 33 33 34 35 37 39 42 45 49 45 42 39 41 46 50 52 50 47 46 46 47 48 49 49 50 51 52 53 55 57 59 61 72 85 97 107 112 118 127 136 144 154 158 164 170 175 180 184 189 191 192 196 199 202 206 204 205 203 202 201 200 197 195 191 186 177 168 160 164 171 179 182 183 184 184 176 165 150 155 163 171 171 168 165 164 166 164 165 159 153 147 143 137 131 131 142 153 165 166 169 174 171 169 165 159 150 140 131 122 113 105 
+38 37 37 37 40 43 46 46 46 46 45 44 44 43 43 43 43 42 41 40 39 39 38 38 38 39 39 38 37 37 37 38 38 39 42 44 46 46 45 45 48 51 53 55 56 56 57 56 56 56 54 52 50 52 53 55 58 61 63 67 70 71 74 76 78 80 79 76 71 69 69 69 69 68 68 66 65 65 64 60 53 45 38 42 45 48 54 61 68 70 68 66 65 67 69 70 70 69 68 71 74 78 81 81 82 82 84 85 88 88 89 88 86 82 77 72 69 66 61 61 59 58 56 52 48 46 46 46 47 44 42 40 41 44 47 48 46 44 43 43 43 42 44 45 48 46 42 38 35 35 35 36 37 38 38 41 46 51 56 62 70 75 75 74 73 73 73 73 71 68 64 63 70 76 84 81 79 76 69 58 48 47 61 76 89 90 92 93 94 96 97 95 89 82 79 89 98 108 117 126 134 138 141 143 146 144 143 141 141 141 140 136 130 125 120 120 119 120 122 125 127 130 130 132 131 129 124 123 121 118 116 109 103 95 91 92 90 88 84 81 78 91 103 116 123 129 135 140 140 141 142 140 139 137 130 123 117 108 103 95 91 89 86 84 97 113 127 127 123 121 115 111 106 101 95 88 82 86 90 94 97 99 101 104 109 112 116 109 102 95 89 87 82 79 77 75 73 75 78 79 78 74 72 70 67 65 65 65 64 65 67 69 71 71 70 69 69 67 66 65 63 60 58 55 54 51 50 51 53 52 50 47 45 47 49 51 50 49 48 47 46 45 43 41 37 34 34 34 34 34 35 34 35 38 42 46 46 46 46 48 49 52 52 49 46 43 44 45 46 49 51 53 56 58 61 64 65 67 68 77 87 97 106 114 120 127 136 141 148 154 160 164 169 175 180 185 186 189 192 193 199 201 200 202 203 203 202 202 200 198 196 196 191 184 181 179 181 181 181 185 186 186 165 145 124 127 138 148 152 147 142 136 136 138 139 134 129 126 124 125 127 134 146 158 168 168 169 170 168 162 157 153 144 135 127 124 120 117 
+34 34 34 34 39 44 50 50 49 49 50 51 51 52 51 50 49 46 44 41 39 38 37 37 38 40 41 40 39 39 39 40 40 40 40 41 41 42 42 42 45 49 52 56 61 65 67 64 62 59 57 57 55 55 55 55 55 55 55 55 59 64 67 70 70 72 73 74 75 73 74 74 74 73 72 70 68 65 62 61 60 59 57 57 58 58 64 70 78 80 76 73 71 71 70 71 70 69 67 68 71 73 75 76 77 77 79 81 83 83 84 84 84 83 82 81 79 76 73 70 67 64 60 56 51 48 46 44 42 40 38 37 37 38 39 41 42 43 44 43 42 41 41 41 40 40 39 38 37 37 36 36 36 36 36 39 42 46 51 58 64 70 71 72 72 71 71 69 66 62 58 57 64 72 80 77 73 68 66 64 61 64 78 92 106 108 110 112 112 112 112 109 102 94 88 92 94 98 105 114 122 128 133 139 143 147 148 151 149 148 147 144 139 134 132 130 128 127 129 129 131 133 136 137 135 131 128 124 124 124 124 119 114 109 107 105 102 100 95 89 85 97 109 119 125 130 134 136 138 139 140 138 136 134 128 123 115 110 103 98 94 95 94 96 103 112 120 119 118 114 111 107 103 100 95 90 85 90 97 104 107 108 110 110 113 115 115 109 103 98 93 89 84 81 77 73 69 71 72 72 71 69 67 65 64 63 63 66 69 72 74 74 76 74 72 69 67 67 67 67 64 61 57 53 49 44 45 49 54 57 52 48 44 46 49 52 52 52 52 51 49 47 45 41 38 34 34 35 36 36 34 33 33 36 40 43 45 47 49 50 50 51 50 49 48 47 48 49 50 52 54 56 58 61 65 68 71 73 76 88 103 117 124 127 130 133 141 147 153 158 161 163 169 171 174 177 179 186 188 192 193 196 200 202 202 203 203 202 203 203 200 200 199 196 194 189 185 178 174 175 175 173 159 146 132 135 141 147 150 150 151 150 148 148 148 146 145 145 150 159 168 176 178 179 176 175 169 164 159 154 149 144 136 130 125 125 123 122 
+32 36 40 43 45 47 49 49 49 49 50 51 52 53 53 53 52 49 46 43 41 38 37 37 38 40 42 42 41 41 41 42 43 42 39 36 35 36 37 38 41 45 48 52 55 58 59 55 52 49 51 52 53 52 52 51 50 50 49 49 53 56 60 63 64 67 69 72 75 78 78 79 78 77 75 73 70 66 61 63 68 73 78 74 71 67 73 81 89 90 86 81 77 72 67 63 64 65 65 65 63 62 62 64 66 68 71 73 77 77 79 79 78 75 74 71 73 75 76 76 77 77 74 69 64 59 56 51 48 45 43 41 40 39 38 39 41 44 46 45 44 42 41 40 38 37 37 36 36 37 37 37 36 36 36 38 42 44 48 54 60 65 68 69 71 70 67 65 61 56 51 49 58 67 76 71 67 62 65 71 78 88 99 113 124 127 131 134 134 132 132 128 121 115 108 102 96 90 94 100 107 113 122 131 138 144 151 158 153 151 149 148 150 151 152 149 147 144 141 135 131 132 134 134 133 128 123 120 126 132 138 133 129 125 124 123 122 117 109 99 93 102 112 121 125 128 131 132 135 136 137 134 131 130 123 117 112 108 104 101 101 105 108 113 113 113 113 112 110 108 106 102 99 96 94 91 89 97 105 114 117 117 118 118 116 114 113 109 103 99 95 91 87 82 76 71 66 66 67 67 65 64 62 61 62 61 63 67 72 76 77 78 79 76 71 68 65 64 63 62 59 56 53 49 46 42 43 47 52 54 50 47 43 45 48 50 51 51 50 50 48 47 45 43 41 38 40 41 43 42 40 36 35 37 40 43 44 45 46 46 46 46 46 49 52 55 55 56 56 56 58 58 60 63 67 70 76 80 85 99 117 133 138 138 136 137 143 147 151 155 156 158 161 164 167 172 175 181 185 188 193 193 197 199 201 202 203 201 202 198 196 191 192 187 185 179 172 165 157 155 150 148 150 154 160 159 155 153 152 157 160 166 162 159 156 156 160 163 169 179 192 199 191 187 180 173 166 160 153 150 147 142 135 128 122 113 105 95 
+33 38 44 49 49 48 48 48 49 49 50 50 50 51 53 54 54 51 46 43 42 41 41 40 40 40 41 42 44 45 43 41 39 40 42 43 43 42 40 40 42 45 48 50 51 53 53 48 44 41 44 48 51 50 48 46 44 45 45 45 48 51 52 56 59 62 67 72 77 79 80 80 80 79 78 75 73 71 69 70 75 79 83 81 80 78 80 84 89 90 88 87 84 80 73 69 68 68 68 67 63 60 59 62 63 66 68 69 72 73 74 74 73 70 66 63 69 73 79 82 87 90 88 84 79 74 68 62 55 54 52 51 48 44 41 41 43 46 48 47 45 44 44 44 43 41 36 32 30 34 38 40 41 41 41 43 48 52 55 58 62 64 64 65 65 66 67 68 67 66 64 62 62 63 64 61 58 55 60 69 78 89 98 109 120 124 131 136 137 137 138 135 131 126 122 119 114 109 108 105 105 109 116 122 128 134 139 144 143 143 141 143 149 151 151 148 146 145 142 139 136 137 139 141 138 133 126 125 130 134 139 137 135 133 130 129 128 124 117 110 104 109 114 119 121 123 126 129 132 132 133 130 126 124 119 115 110 106 105 102 102 105 110 113 112 111 109 106 106 104 102 99 96 93 96 98 102 105 108 112 112 112 111 111 110 109 111 107 104 101 97 91 85 79 72 65 60 62 65 67 67 64 62 63 64 65 68 71 73 75 77 77 77 74 70 67 62 58 53 48 47 47 46 44 43 42 43 45 48 50 47 45 42 45 46 48 48 48 47 46 46 45 45 44 44 43 44 46 48 48 44 41 38 40 43 45 46 47 47 48 48 50 51 54 57 60 59 59 58 60 62 65 68 73 78 83 86 88 90 97 106 113 119 122 124 128 131 131 132 136 139 142 150 155 162 168 173 178 182 188 190 193 196 198 199 203 201 201 200 197 191 186 185 182 180 174 169 163 158 153 148 144 150 160 166 165 164 163 162 163 165 164 166 167 171 171 172 172 173 176 179 181 178 179 176 169 163 153 150 147 146 142 135 126 118 104 92 80 
+35 37 39 41 45 49 51 53 54 56 57 56 57 56 56 56 56 51 46 42 42 43 43 42 41 39 39 43 48 51 45 39 34 38 47 55 58 54 50 47 48 48 50 51 52 53 52 48 44 42 43 43 44 47 49 50 51 51 50 51 52 53 55 58 61 64 67 70 74 75 77 77 78 77 76 75 74 74 74 76 81 84 88 89 89 90 88 87 86 87 90 92 92 89 87 84 80 77 73 74 74 73 73 74 76 77 76 75 74 74 72 72 74 76 79 81 82 83 85 86 87 87 85 82 78 74 68 61 56 55 54 53 50 48 44 44 46 49 50 49 47 46 46 45 44 42 37 31 29 33 37 42 43 44 44 48 54 59 61 61 62 63 62 62 61 64 68 71 73 74 76 73 67 58 51 50 50 49 56 67 77 88 95 104 113 118 127 134 137 137 139 139 138 138 136 136 136 138 129 119 110 109 111 113 118 118 120 122 126 129 133 136 139 141 141 140 139 138 139 142 144 148 149 152 150 143 139 133 134 133 133 133 136 136 136 131 128 125 123 121 118 117 116 116 117 119 121 123 127 129 131 126 122 117 114 112 110 106 105 104 103 104 106 108 106 106 105 104 102 101 99 95 92 91 99 106 115 113 110 108 105 105 103 103 105 105 106 105 104 101 97 90 83 76 68 61 55 59 64 67 67 65 64 66 69 71 73 75 76 78 77 77 75 74 70 67 62 56 49 42 43 43 44 44 43 42 43 44 44 44 43 42 41 42 44 45 45 44 43 43 45 47 49 48 47 46 46 47 48 48 47 46 45 48 50 52 53 53 54 56 59 62 64 64 63 63 62 60 59 62 67 73 79 85 91 97 97 96 95 96 99 100 106 113 120 126 127 129 130 135 141 145 154 161 169 175 182 185 190 193 196 201 201 202 201 203 202 202 197 197 195 193 190 187 188 184 181 179 176 169 164 158 160 163 163 167 169 172 174 170 168 163 173 178 183 181 179 174 172 169 165 161 160 159 159 150 143 134 130 129 129 127 124 123 119 117 113 110 
+38 37 36 38 43 49 55 58 61 63 64 65 65 64 62 59 57 50 44 39 40 41 43 43 40 39 38 40 43 46 44 41 38 41 46 51 54 52 50 47 48 49 49 50 51 52 50 48 46 43 42 40 39 44 50 56 58 59 59 59 60 61 61 64 67 70 69 67 66 65 66 67 68 66 66 65 65 65 65 68 74 80 85 84 86 86 83 81 78 78 82 87 88 88 86 87 84 81 78 79 82 84 85 84 84 84 81 79 76 74 73 71 75 82 91 97 93 91 88 86 85 82 80 77 74 71 64 59 54 53 53 51 51 50 48 49 51 53 54 51 49 47 45 43 41 40 40 39 38 37 37 36 40 44 47 52 57 62 65 64 64 63 66 68 71 73 76 78 80 81 82 81 75 68 62 63 64 65 70 77 84 91 97 106 112 119 126 133 135 134 135 135 136 135 137 137 138 137 132 125 119 119 121 125 125 127 128 129 133 138 141 143 143 143 144 142 141 138 141 138 141 142 144 148 146 144 138 137 134 134 132 133 133 136 133 133 130 129 125 122 120 114 111 105 108 112 116 118 121 125 127 123 117 112 109 105 101 100 97 95 95 96 97 98 99 99 99 98 97 95 95 93 92 92 98 104 110 109 105 103 101 100 98 98 101 103 106 105 104 102 96 88 80 74 71 68 66 65 66 64 68 70 74 77 80 83 85 85 85 85 83 80 77 75 72 69 65 57 50 43 44 45 47 46 45 44 43 41 40 39 39 39 39 40 40 41 41 40 39 40 44 48 51 50 49 49 48 47 47 48 48 49 50 52 53 56 56 56 56 58 61 64 65 62 59 57 56 57 58 62 67 72 79 86 92 100 102 103 107 113 122 132 138 138 141 143 148 154 162 165 168 172 177 181 188 193 195 198 200 204 207 207 208 207 206 203 202 201 197 197 198 196 194 192 189 190 189 188 187 183 178 171 171 170 169 168 171 176 177 175 173 170 175 178 181 181 174 172 166 155 147 136 134 132 131 123 116 108 105 106 108 110 113 117 120 124 127 130 
+41 42 43 44 47 50 53 57 61 64 67 68 69 67 61 56 50 45 39 34 37 41 44 44 41 39 38 39 40 41 42 44 46 44 43 42 42 43 44 44 44 44 44 45 46 47 47 48 48 47 44 41 37 41 45 49 52 53 55 56 58 59 62 65 70 74 71 68 64 62 62 61 61 61 59 59 58 58 58 62 68 76 81 82 82 82 77 72 67 67 72 76 78 80 81 81 81 81 81 84 88 92 92 89 87 84 81 80 77 77 77 77 81 87 93 96 94 92 89 92 92 93 88 82 75 70 65 60 54 53 51 50 49 50 50 50 50 50 52 52 52 53 50 46 42 43 44 46 46 42 38 34 39 44 48 53 58 63 65 64 61 61 67 72 78 80 82 85 86 87 88 87 83 78 74 76 79 81 85 88 91 96 101 106 111 118 124 130 130 129 127 128 131 133 136 134 131 129 130 130 129 133 136 139 142 142 145 147 150 152 155 155 153 155 153 150 147 145 139 134 130 130 131 132 132 133 134 137 136 134 133 133 133 133 131 131 131 130 125 120 115 107 101 94 98 104 111 116 117 120 120 116 112 108 103 97 93 89 87 85 83 85 86 87 89 91 94 92 91 89 89 90 91 91 95 100 103 101 100 98 96 95 94 93 98 101 105 104 103 101 95 86 77 73 74 75 75 72 69 65 68 75 79 84 87 90 93 91 88 86 82 78 75 72 69 68 64 57 50 44 44 45 45 45 45 45 44 42 39 38 38 39 39 40 40 40 39 39 38 38 40 43 44 44 45 45 45 44 44 43 45 46 47 50 52 55 55 54 53 54 55 56 56 52 49 45 48 52 56 61 65 69 75 83 92 101 106 111 117 129 143 158 164 162 158 157 163 174 179 183 184 185 187 189 191 195 197 197 202 200 199 197 195 194 194 192 192 191 193 192 188 185 185 187 188 192 190 189 187 188 188 187 183 179 173 175 176 178 181 179 178 177 178 178 176 173 167 164 155 145 133 121 119 119 116 113 108 105 103 104 105 105 104 103 101 101 101 101 
+42 45 47 49 50 51 52 57 62 66 68 70 73 67 57 47 39 35 31 27 33 39 45 48 48 49 49 49 50 50 52 53 54 51 47 42 41 43 45 45 44 43 42 44 46 48 48 49 50 49 46 41 36 38 40 42 44 46 49 50 54 56 59 65 70 75 75 72 70 67 65 64 64 63 63 62 62 62 62 63 65 67 69 70 71 72 68 63 58 61 65 70 73 76 79 82 81 81 80 84 90 94 94 89 83 79 77 77 75 76 79 81 83 88 93 96 95 93 92 96 100 104 97 87 77 69 65 61 57 54 50 47 47 49 50 50 48 45 46 53 59 65 60 55 49 48 50 52 52 47 43 39 41 44 46 50 54 57 58 55 51 50 57 62 69 72 75 79 81 86 90 91 86 82 77 77 76 76 76 75 75 77 79 83 86 91 97 102 103 105 106 109 112 116 118 120 123 126 129 132 135 137 138 140 142 143 146 150 152 154 156 157 156 159 159 156 154 152 147 142 137 136 136 138 137 136 135 132 130 128 125 124 122 120 121 122 123 122 117 113 109 100 92 83 89 99 109 115 116 120 122 119 116 113 107 100 94 92 90 89 89 90 92 94 92 90 90 89 88 87 88 90 93 96 97 96 97 99 101 105 103 99 96 93 95 96 96 97 96 95 89 81 72 69 72 75 78 77 78 78 78 79 78 81 86 91 93 87 81 75 71 68 64 63 62 62 59 55 50 45 44 43 41 42 44 46 46 43 40 38 38 40 41 41 40 39 39 38 37 37 37 37 37 39 40 42 42 41 40 41 43 44 46 50 52 56 56 55 53 52 52 52 51 48 44 41 48 55 63 70 75 81 86 94 103 111 116 121 125 135 147 161 166 165 164 163 171 174 182 182 182 183 187 186 188 186 189 194 197 193 189 181 181 178 178 178 182 186 189 185 180 175 176 182 187 190 186 184 182 182 183 184 180 172 164 161 163 163 164 163 160 157 156 155 155 152 148 145 140 131 124 117 116 114 113 112 111 109 109 107 105 102 98 90 84 81 80 77 
+41 43 45 46 48 49 50 51 51 53 55 58 60 56 49 41 35 33 32 29 35 40 46 50 54 56 59 59 59 59 60 63 64 59 52 46 44 47 50 51 48 46 44 48 52 57 56 53 51 49 48 46 45 45 45 45 47 49 51 53 54 56 58 62 65 70 70 68 67 66 65 64 63 62 63 62 64 64 64 63 61 59 58 59 60 62 58 54 51 53 59 64 69 75 81 85 82 79 76 79 84 89 86 79 70 65 64 63 63 66 70 74 78 81 86 89 93 96 97 102 107 112 108 103 97 93 89 85 80 76 73 70 69 69 68 67 65 63 63 70 75 81 73 67 60 60 61 62 61 54 49 44 46 47 48 51 55 58 59 54 51 48 54 58 64 68 72 75 80 85 91 94 90 85 81 78 75 71 66 62 58 57 56 57 58 61 64 68 74 79 83 86 90 92 97 105 114 124 128 133 137 137 136 137 136 139 142 143 148 152 153 156 158 161 160 159 162 160 157 153 152 152 151 151 147 141 135 131 124 119 113 111 108 107 106 108 109 110 108 107 104 93 84 74 82 93 104 114 118 123 126 125 122 119 114 107 100 98 96 96 98 100 102 105 98 92 86 85 85 85 88 92 96 99 96 93 90 96 102 110 109 103 97 93 93 91 90 90 90 90 85 77 69 66 71 75 79 81 85 86 85 80 77 76 81 84 86 78 72 64 60 57 55 54 55 56 55 52 49 46 45 43 41 42 45 47 48 44 41 38 39 40 41 40 39 38 37 37 38 38 38 37 36 38 39 39 40 41 42 43 45 47 49 52 57 62 60 58 55 53 52 51 49 46 44 42 51 63 74 83 88 94 100 107 115 122 126 130 133 142 151 160 166 168 171 171 175 176 179 178 179 177 175 174 172 170 172 174 175 174 173 174 175 177 179 180 184 186 190 185 180 176 177 179 181 180 175 172 169 171 172 176 168 158 148 143 145 147 149 145 140 136 136 136 136 133 131 127 123 117 112 106 107 107 109 109 108 106 105 104 103 103 95 88 80 77 75 72 
+41 41 42 44 45 47 47 44 41 38 40 43 44 43 40 36 35 38 40 42 44 46 49 52 55 58 60 63 65 66 66 66 66 63 59 54 54 56 58 59 59 57 56 60 64 68 67 61 56 53 53 55 55 52 51 48 50 52 55 56 56 57 58 58 58 59 59 58 58 58 58 57 56 55 53 51 55 59 63 64 63 62 62 62 61 60 62 63 64 66 68 71 73 73 74 75 76 75 75 76 76 77 74 69 63 58 59 60 60 64 67 71 74 77 80 84 90 97 102 109 114 119 120 121 121 119 116 112 109 106 105 103 100 97 94 94 94 95 96 96 96 97 90 85 79 77 78 78 75 66 57 50 54 58 62 67 72 77 79 78 78 77 77 78 79 81 84 86 89 90 91 92 87 81 77 77 77 79 76 73 70 67 66 65 64 70 75 81 86 92 99 102 105 107 110 115 120 126 132 136 139 140 139 140 139 142 144 147 149 149 151 153 154 156 156 158 157 157 156 153 154 152 151 150 147 143 139 134 129 124 119 114 109 105 103 101 100 98 96 93 92 87 83 80 87 97 106 114 119 123 126 124 122 120 115 110 106 106 106 107 109 114 117 120 110 103 94 92 93 93 96 100 105 110 109 108 108 109 111 112 111 107 103 99 95 93 90 92 95 97 92 84 76 71 73 75 77 79 79 81 79 76 72 70 70 70 69 63 57 52 50 48 46 47 49 50 52 50 49 48 46 44 43 44 46 49 48 45 42 38 39 40 42 40 38 36 36 37 39 40 39 37 36 37 37 38 40 42 44 46 48 51 53 58 62 66 65 61 58 55 55 53 52 50 49 46 53 61 69 77 85 94 104 114 124 133 140 146 151 154 157 158 163 167 172 177 175 175 170 167 166 162 160 155 152 148 149 148 145 150 157 166 172 176 183 186 187 186 186 183 178 175 174 175 177 173 169 166 162 165 167 168 165 155 145 140 144 149 153 147 142 136 134 133 131 127 121 116 110 103 97 91 94 99 105 105 102 100 99 101 101 103 94 86 78 74 72 71 
+43 42 40 41 41 42 43 42 40 39 40 42 43 42 40 38 40 45 50 54 56 57 57 58 60 61 64 67 71 74 71 69 68 67 66 65 66 67 68 70 73 76 79 80 82 84 82 79 75 74 77 79 80 74 68 62 61 61 62 60 58 55 54 56 58 58 59 58 58 60 61 63 62 59 55 51 56 61 67 68 67 67 67 64 61 60 67 74 79 80 81 82 78 70 62 58 65 72 78 72 67 61 60 60 60 62 68 75 81 81 81 81 82 82 82 85 92 98 105 111 117 124 129 132 135 136 133 132 130 127 123 119 115 112 106 107 109 112 113 119 123 128 119 112 102 98 96 94 90 78 68 59 64 69 75 81 87 92 96 97 99 99 97 95 92 93 95 96 95 93 92 89 85 78 73 78 81 86 85 84 81 79 76 74 74 81 90 97 104 111 118 122 125 128 130 129 130 130 134 137 140 142 143 141 144 145 149 152 150 151 152 150 149 149 150 150 152 151 151 150 150 148 146 144 144 145 146 143 141 137 132 126 118 109 104 98 92 87 83 79 77 82 87 91 98 103 109 114 119 124 128 124 119 117 115 113 112 112 116 117 121 126 132 136 125 115 105 102 102 102 105 110 115 120 122 124 127 123 119 115 111 110 106 104 99 96 91 95 100 104 99 90 82 76 77 77 77 78 77 78 75 72 68 65 62 59 55 53 52 50 49 48 48 48 49 51 52 51 49 49 47 46 45 47 48 49 49 47 44 41 42 43 43 42 40 39 39 39 40 40 40 40 40 42 44 46 46 47 48 49 54 60 65 66 68 69 67 65 62 60 59 59 59 57 55 53 54 57 58 66 79 92 105 120 132 146 151 159 166 166 163 162 162 169 176 183 181 180 175 174 171 170 166 162 162 158 160 160 158 164 169 173 175 176 175 177 177 178 176 174 171 168 168 171 171 172 170 167 168 168 167 168 162 155 148 143 149 154 158 151 143 137 132 129 127 121 114 106 99 96 92 89 94 99 106 107 107 105 105 106 107 109 102 96 88 84 82 81 
+42 40 38 38 38 39 39 39 40 41 42 44 46 45 45 44 47 54 62 68 72 74 77 77 76 74 74 75 77 77 73 72 70 71 71 71 73 74 77 79 84 88 94 95 97 98 96 95 94 93 97 101 102 93 85 77 73 71 69 64 59 53 50 56 61 66 66 66 66 71 76 82 85 83 79 78 81 86 89 88 85 82 82 83 84 85 89 93 97 97 97 96 91 83 75 70 78 85 94 89 82 75 73 74 76 79 87 96 103 100 97 96 94 93 92 93 99 105 109 117 122 127 134 142 148 152 151 151 149 143 137 132 126 120 115 115 117 118 125 142 158 171 157 144 130 123 117 111 104 92 81 72 77 82 88 92 97 102 103 103 101 102 99 99 96 96 96 95 95 92 90 88 85 83 82 83 84 84 82 80 78 77 78 78 79 86 91 97 102 107 111 113 116 118 119 120 120 121 124 127 131 132 132 132 134 136 140 141 140 139 137 137 137 137 138 138 140 143 143 147 149 145 144 140 140 142 144 144 139 137 133 124 112 103 98 95 92 90 89 85 85 90 94 100 103 106 110 112 115 117 118 114 111 106 106 106 106 107 112 116 121 127 133 138 131 125 117 116 115 114 116 119 120 122 123 124 124 120 116 111 109 106 103 101 101 100 98 99 100 102 98 91 86 80 82 82 83 82 80 80 75 70 66 61 57 52 49 54 58 63 62 61 59 58 58 57 56 53 51 48 49 49 49 49 50 50 49 47 46 45 45 45 45 44 44 43 42 42 40 39 41 43 45 47 49 51 51 51 51 52 59 65 72 72 72 72 71 68 67 66 65 63 61 59 58 57 60 65 69 77 86 95 102 114 124 134 144 154 164 170 173 176 180 184 186 191 192 195 197 197 195 196 194 192 191 190 190 189 189 188 185 183 181 176 173 170 168 166 166 165 162 158 159 162 163 166 164 162 160 160 163 164 161 152 145 140 146 151 156 149 142 138 134 129 123 118 112 104 97 100 102 104 107 109 111 113 113 113 114 114 114 115 109 101 96 91 89 87 
+34 35 35 38 40 43 44 44 43 44 46 48 50 54 57 60 63 67 71 76 81 88 92 90 88 86 85 83 82 80 77 73 71 73 74 75 78 80 83 86 92 98 103 105 107 109 109 109 110 109 109 111 110 106 100 93 90 88 85 83 77 74 71 74 79 83 82 81 81 84 91 99 102 102 100 99 102 105 107 105 101 96 96 101 106 110 112 114 116 114 112 110 106 102 97 95 101 109 116 117 117 117 116 116 115 116 120 123 129 126 125 124 126 130 133 136 138 140 143 153 162 172 175 177 177 176 176 177 175 172 170 166 161 154 149 148 155 159 164 178 192 204 189 173 159 151 147 143 135 124 109 100 105 111 114 114 116 116 113 112 109 108 106 104 102 102 100 99 96 93 91 88 90 91 92 90 86 84 81 77 75 74 78 82 87 89 93 96 98 101 103 104 104 105 104 106 107 110 112 116 120 120 119 118 119 123 126 128 126 123 120 121 122 123 125 128 130 134 138 143 146 144 139 137 137 139 141 141 136 134 128 117 103 92 90 93 96 98 98 99 99 103 105 108 108 110 110 110 109 109 107 103 99 94 95 95 95 99 106 113 120 126 132 140 136 133 131 131 130 129 128 126 124 123 123 123 124 119 112 106 103 101 100 99 102 105 106 105 103 101 98 93 88 85 86 87 87 84 81 78 72 67 61 57 52 47 44 53 61 68 68 68 66 64 62 60 58 54 50 47 47 49 50 51 51 50 51 52 54 55 53 51 49 48 47 47 46 45 43 41 43 46 49 49 48 47 48 51 53 56 61 66 71 71 73 74 75 76 77 76 70 65 59 59 60 60 68 77 86 93 96 98 101 108 115 122 136 149 163 172 180 187 192 194 197 198 203 208 210 212 210 209 209 206 204 202 200 196 195 192 187 187 181 176 170 164 164 163 161 157 149 143 143 147 151 154 151 147 144 148 153 158 156 147 138 132 139 145 151 145 142 137 132 126 122 116 109 103 97 102 105 109 110 111 111 110 107 105 101 99 98 95 91 87 83 82 81 82 
+35 35 34 38 42 46 48 48 48 47 50 52 54 63 72 80 83 81 79 80 87 92 98 95 94 91 91 91 91 92 95 96 98 98 98 100 100 101 100 101 102 105 106 107 110 110 112 112 112 114 113 114 115 114 112 109 108 106 103 102 101 100 100 102 103 104 103 101 99 101 105 109 111 111 111 110 110 111 111 109 105 101 103 106 109 113 113 116 118 118 118 116 115 114 113 112 118 123 128 131 134 138 139 137 138 137 140 141 145 145 146 146 153 160 168 172 175 174 176 189 202 215 213 209 203 203 201 204 202 202 204 205 200 196 191 194 203 211 216 222 228 233 216 200 186 183 185 187 184 171 162 154 160 165 167 161 149 139 134 132 131 128 125 120 114 115 115 113 112 109 106 104 104 107 106 107 108 106 107 105 104 104 104 106 106 107 108 108 108 108 108 108 110 110 109 111 112 111 113 113 116 116 115 115 114 115 116 117 115 113 111 111 110 110 109 109 109 111 115 123 128 125 119 115 115 119 125 126 123 121 117 109 99 90 91 93 97 100 100 102 103 106 107 111 111 111 111 111 110 110 108 106 104 101 101 100 100 102 104 106 109 111 115 118 127 133 140 143 144 142 139 132 124 116 114 110 106 105 102 101 101 102 103 104 106 105 105 107 107 108 105 98 92 86 86 84 82 79 75 70 65 60 55 51 48 46 44 52 59 66 67 66 67 65 63 60 57 52 48 44 45 47 49 51 51 51 53 58 62 66 62 57 53 52 51 51 49 47 44 42 45 48 52 51 48 45 47 51 55 59 62 65 68 69 71 72 74 76 80 79 74 69 64 66 68 70 75 81 86 90 94 96 100 108 114 123 135 149 163 171 179 185 191 195 199 204 207 209 210 213 212 212 211 210 208 205 202 198 194 191 187 187 183 177 169 162 161 158 155 145 136 127 122 128 134 137 135 131 129 134 138 143 141 136 130 127 130 136 142 137 133 128 124 121 119 114 108 102 97 101 105 108 108 109 108 104 98 90 83 81 79 75 74 72 70 72 75 78 
+46 40 35 39 45 51 56 61 65 69 70 72 75 80 86 91 93 91 88 86 91 96 101 100 98 97 97 99 101 105 111 119 126 126 126 128 126 124 122 119 114 110 105 104 101 99 97 95 92 90 87 85 85 90 94 98 96 95 93 95 96 99 99 101 102 103 101 98 98 102 107 110 114 114 114 115 113 114 113 111 107 106 106 108 112 115 116 118 120 120 120 121 123 125 127 129 131 131 134 136 138 141 139 138 138 138 140 143 144 148 155 157 163 169 175 181 186 191 199 207 216 229 228 227 227 223 224 224 221 222 224 224 221 218 213 218 224 228 235 239 240 243 232 220 208 208 212 214 212 207 199 194 198 202 206 193 178 163 156 154 152 149 143 137 131 132 132 130 128 125 122 120 120 121 122 125 126 130 132 131 134 132 130 128 126 123 123 121 118 117 113 115 116 117 118 117 116 115 115 113 113 112 112 113 111 107 106 104 104 106 105 103 99 96 92 88 84 83 91 97 107 100 93 86 86 94 102 106 105 104 103 99 94 90 92 94 96 99 101 101 104 104 108 111 111 111 112 112 112 112 113 113 112 112 111 109 108 106 102 98 97 96 96 95 113 132 149 155 156 158 151 138 124 112 104 96 90 90 93 95 99 102 107 109 107 107 105 108 109 113 110 102 94 88 85 82 78 73 68 62 58 55 52 50 49 47 46 52 56 61 62 61 60 59 57 55 53 51 48 46 45 46 46 47 50 52 55 59 63 67 63 58 53 52 53 53 52 47 42 38 42 47 53 52 51 49 50 53 56 59 61 61 63 64 64 64 67 70 74 77 76 74 73 76 80 83 84 83 82 83 88 94 101 107 115 122 134 147 162 173 178 188 195 201 203 210 211 216 219 218 222 221 219 215 214 212 208 203 197 195 189 185 176 168 158 149 143 136 129 119 111 103 100 105 110 114 115 117 117 120 122 123 123 120 119 120 123 128 133 128 124 120 118 116 115 113 107 102 97 97 98 96 97 96 94 90 82 73 65 63 62 61 61 61 61 63 67 73 
+56 48 40 43 49 55 62 71 80 88 92 95 98 98 98 99 99 98 98 97 97 97 98 101 104 105 107 108 109 111 116 120 126 126 126 128 127 127 126 123 120 116 111 109 104 101 95 91 86 81 74 68 67 73 79 87 85 84 82 84 87 89 91 91 92 91 88 85 82 88 96 104 107 107 107 106 107 106 105 105 104 103 103 105 106 109 114 119 123 125 127 129 132 133 134 136 139 140 142 145 145 147 148 150 147 150 152 156 159 164 169 174 181 182 189 193 202 208 217 227 234 240 243 247 247 247 243 242 243 242 239 240 238 237 234 232 233 234 237 239 245 249 241 235 228 230 231 229 230 225 221 217 219 220 220 212 197 185 180 179 177 175 169 163 157 156 153 149 147 143 137 135 139 140 141 142 143 144 145 144 144 141 139 135 132 130 127 126 124 123 121 120 120 120 121 120 119 119 118 117 114 114 114 113 112 111 108 106 105 104 102 100 98 95 93 90 88 86 90 95 99 94 88 82 84 89 96 101 100 101 100 97 93 91 89 89 91 91 92 92 93 95 97 100 102 104 107 109 111 114 116 118 119 120 117 114 110 105 100 96 92 94 95 96 112 127 144 148 149 148 146 135 124 114 109 106 102 105 110 114 117 115 114 111 108 104 100 102 104 105 102 96 90 83 80 77 73 67 62 56 56 58 59 59 56 55 52 53 54 54 53 50 47 46 47 48 48 49 50 52 48 44 40 42 47 53 58 61 63 66 61 57 53 52 54 56 55 47 40 34 41 47 53 53 53 52 54 55 58 60 59 59 59 58 56 55 57 64 70 75 76 78 79 83 87 90 93 94 97 99 100 100 101 110 118 128 139 155 170 182 192 200 209 212 215 217 223 227 230 234 232 232 230 227 222 219 216 209 205 198 191 181 171 160 150 139 129 121 112 103 97 92 90 93 97 102 105 109 110 113 116 117 119 119 119 120 122 125 128 125 123 119 118 117 116 113 108 102 96 91 85 79 77 76 76 73 64 54 45 45 45 45 47 50 53 58 64 69 
+67 62 56 55 54 55 58 64 70 77 85 93 100 105 108 111 112 112 112 112 109 108 107 108 110 112 114 114 115 117 119 121 124 125 125 124 124 124 123 124 123 124 124 122 121 117 115 111 108 104 97 92 87 83 81 79 74 70 66 68 72 75 78 79 80 81 78 74 71 76 84 92 96 95 96 95 97 98 99 100 100 98 100 101 101 103 112 120 127 131 134 137 139 139 140 142 144 148 150 152 154 157 161 166 169 173 180 185 191 196 201 205 210 216 221 224 229 233 237 240 242 248 249 250 253 251 250 249 248 249 247 246 247 244 243 242 244 242 243 244 249 251 248 244 241 241 242 242 240 239 235 235 237 233 234 223 212 199 192 191 190 188 185 179 175 172 169 164 161 156 149 149 151 152 155 155 155 155 154 153 152 149 145 141 136 134 132 129 129 129 129 126 123 122 121 121 122 123 122 120 119 118 116 116 116 113 112 111 107 104 100 98 99 100 99 99 98 97 97 96 95 93 90 86 88 91 95 97 98 99 100 96 92 88 86 85 84 82 82 81 79 82 85 87 91 97 102 107 110 114 120 122 125 127 121 115 111 104 98 94 91 93 96 99 111 122 135 140 139 140 139 131 123 115 115 114 113 119 125 131 132 126 120 114 108 102 95 95 96 97 93 88 83 77 74 71 68 63 59 54 56 60 64 67 64 61 59 58 58 57 54 52 49 48 49 49 50 50 50 50 48 45 43 44 47 50 52 53 54 54 53 52 50 49 48 47 46 45 43 43 46 50 53 55 56 57 58 60 62 63 60 58 55 51 47 42 45 54 64 72 75 79 83 88 91 96 101 108 115 119 113 108 102 112 123 132 146 162 177 189 203 213 221 223 225 225 230 232 236 236 234 231 228 224 220 216 209 206 203 196 187 179 169 162 154 147 138 131 124 118 112 108 103 103 103 103 105 106 108 111 114 120 122 123 123 123 124 123 122 121 120 119 118 117 115 113 106 99 92 84 75 68 66 67 69 68 60 53 45 46 46 47 50 53 57 62 66 70 
+73 69 66 61 58 54 54 57 60 66 78 91 101 110 118 124 127 129 129 131 131 131 130 124 118 112 112 113 115 115 117 118 119 121 122 123 120 119 119 117 116 117 117 118 119 120 121 121 122 118 116 112 106 94 84 72 65 57 51 53 56 59 62 66 70 72 70 67 64 67 73 77 79 79 78 79 83 87 92 94 96 97 98 102 104 108 113 117 122 125 125 127 131 135 139 143 146 150 155 158 162 163 168 173 178 185 193 202 214 217 222 229 233 240 247 250 251 252 255 251 252 254 253 255 255 254 255 254 253 252 251 248 250 251 249 249 251 253 249 250 253 253 254 249 251 250 250 251 248 249 246 245 248 245 245 228 211 196 186 182 177 174 173 172 171 170 167 164 163 160 156 153 151 147 144 141 139 136 133 130 127 122 120 115 112 109 106 103 105 105 106 108 110 113 115 116 118 118 118 118 118 117 116 114 114 111 108 106 108 109 109 109 106 104 102 101 99 97 98 98 97 95 92 90 91 94 98 100 102 103 104 101 99 95 94 93 93 92 90 89 88 89 89 89 91 91 91 95 101 108 113 116 119 121 115 108 100 94 91 88 87 92 96 101 108 114 121 124 125 126 124 119 114 108 110 113 114 116 120 120 120 116 111 106 103 98 93 92 92 91 86 79 71 65 65 65 65 63 61 59 61 65 69 71 69 68 68 68 69 69 68 67 65 63 61 59 57 52 49 45 45 46 48 49 47 46 44 44 43 41 43 45 47 45 42 38 37 42 47 51 51 52 54 55 58 60 63 64 66 67 63 59 56 50 44 39 42 53 64 74 81 86 92 94 98 101 106 111 116 118 114 110 105 119 135 150 162 175 186 201 210 217 226 227 229 234 234 233 231 229 228 224 221 217 215 209 205 200 195 190 183 178 170 163 157 153 147 140 137 131 126 120 117 114 111 107 109 111 112 115 116 118 120 121 123 126 124 121 118 117 119 120 120 115 111 107 100 91 83 76 69 62 60 63 65 66 61 55 49 49 49 49 52 57 60 64 67 69 
+71 69 66 63 59 55 53 53 53 57 66 76 86 93 100 109 115 121 124 129 132 135 137 129 123 115 115 114 117 116 116 116 117 118 119 120 117 115 113 108 103 98 97 100 104 107 111 113 115 116 117 115 114 109 104 97 94 89 85 81 79 77 78 82 85 88 86 84 81 82 84 85 85 85 85 85 88 93 96 97 99 101 103 108 110 114 114 116 118 117 115 115 122 130 138 145 149 153 157 161 165 168 172 176 177 184 193 203 211 219 226 233 237 244 252 253 253 253 254 254 254 255 255 255 255 254 254 254 252 253 253 252 253 253 253 253 254 255 254 254 254 252 252 254 253 255 251 255 253 251 253 254 250 248 247 233 218 205 196 188 182 177 174 171 169 169 168 164 164 162 160 156 150 143 135 132 126 121 116 110 107 102 97 93 88 84 81 78 80 82 83 89 96 103 108 111 113 115 115 116 115 116 115 115 113 108 104 101 108 115 122 120 116 110 105 104 99 98 97 98 99 97 95 93 94 97 101 104 105 108 110 108 105 104 104 103 105 105 103 102 100 98 97 97 91 87 80 82 91 99 105 109 112 115 107 98 89 85 83 82 82 90 96 103 105 106 106 108 110 111 110 107 104 101 105 109 113 115 113 112 110 106 104 101 97 95 90 88 86 85 79 70 62 56 58 60 62 63 64 65 67 70 73 74 74 74 74 76 77 78 76 73 72 69 63 59 53 52 50 49 49 49 49 49 48 47 46 46 46 46 47 48 48 48 48 47 47 48 48 49 50 51 53 55 59 62 65 67 68 71 67 63 59 55 51 46 49 61 71 80 88 95 102 104 106 108 110 112 115 115 113 112 110 127 146 165 177 189 198 206 212 216 221 225 227 231 228 222 217 213 212 208 204 202 199 197 193 191 190 186 181 176 172 168 163 158 155 149 146 140 137 130 124 122 119 115 118 120 122 121 118 115 114 119 123 127 123 120 116 116 118 119 117 110 104 98 90 83 77 72 69 66 65 68 69 69 64 60 55 54 54 54 55 56 57 59 63 66 
+71 70 69 65 61 58 55 52 49 49 53 61 67 72 77 83 90 99 107 113 115 119 123 126 128 129 130 128 130 128 126 123 120 119 120 121 122 122 122 119 113 107 103 108 112 115 118 118 121 122 124 126 126 125 125 122 122 120 117 112 106 100 99 104 109 113 113 113 115 114 114 112 115 119 123 124 127 128 130 130 131 132 133 134 136 138 139 139 141 139 138 137 140 143 149 154 159 165 170 174 177 184 187 188 192 198 205 215 220 226 232 239 241 247 251 251 253 254 254 252 254 255 254 255 254 253 253 254 254 254 252 254 254 254 254 254 254 252 254 254 254 252 254 254 252 255 253 250 249 252 250 250 247 243 242 237 236 231 224 219 216 208 196 186 177 171 167 163 162 160 159 157 154 153 150 148 145 141 139 137 135 128 118 109 102 98 94 90 92 94 96 96 96 96 96 98 101 104 102 100 99 99 99 99 99 100 101 104 109 112 118 117 113 111 108 105 101 100 98 98 97 94 91 89 88 90 92 94 97 99 102 100 100 99 99 99 99 100 98 98 98 97 97 97 91 86 80 80 86 94 100 102 106 109 104 99 94 90 88 86 85 90 96 103 102 102 102 104 106 107 108 105 101 98 102 106 110 112 113 115 115 111 108 104 99 94 87 83 79 76 71 66 60 56 59 61 64 66 68 71 73 73 74 75 77 78 81 80 81 81 78 75 71 65 59 51 44 49 53 57 56 53 50 48 48 49 49 50 51 53 52 52 51 52 53 55 56 53 50 47 49 50 52 56 59 63 67 70 72 75 72 69 66 61 55 49 50 58 68 76 82 90 96 98 99 101 103 105 109 112 118 124 133 145 161 175 186 194 203 208 207 205 203 206 210 210 209 200 193 189 189 189 188 184 182 181 180 181 183 182 178 176 170 169 166 163 162 157 153 148 140 132 127 126 127 126 127 127 127 127 126 126 125 125 126 124 123 122 122 120 116 110 104 95 88 80 77 75 73 74 75 78 79 77 75 73 69 65 61 60 58 59 58 58 57 58 62 67 
+73 74 74 70 67 62 65 67 69 71 72 72 75 82 89 94 98 100 103 106 109 112 117 125 131 138 140 140 140 138 132 125 122 123 123 122 127 131 135 135 132 130 130 135 139 143 143 141 141 144 145 147 147 145 142 142 141 139 139 134 128 124 123 124 128 128 128 128 128 128 128 128 129 136 139 143 144 146 147 148 148 150 152 153 155 157 161 162 164 164 165 164 163 162 161 165 171 180 188 193 196 203 209 217 223 226 230 233 237 240 240 244 244 245 246 245 249 250 251 252 254 254 252 252 252 255 254 254 255 253 255 255 253 255 255 255 253 255 254 254 252 253 252 251 248 248 248 247 244 242 242 245 241 239 236 240 237 239 237 232 231 224 210 202 189 180 176 168 166 166 161 162 162 163 164 161 159 158 157 156 156 148 137 124 114 111 105 102 103 105 108 104 95 88 84 86 89 91 87 83 80 81 81 82 86 92 99 105 108 109 111 111 111 111 109 106 105 102 99 96 93 90 87 83 81 81 81 81 85 88 92 92 92 92 91 90 89 89 90 91 92 93 94 95 92 85 80 80 84 89 94 96 100 102 102 101 102 99 94 91 88 92 96 100 100 99 99 99 101 104 105 101 99 96 99 103 106 109 113 116 117 114 111 108 100 92 85 79 74 69 65 63 59 57 61 64 68 72 74 77 79 78 79 79 80 83 84 82 81 79 75 71 67 63 57 51 46 51 56 60 57 54 50 48 47 48 48 50 50 52 52 51 50 51 52 53 53 53 52 52 53 54 55 57 61 64 68 73 77 82 79 77 74 66 57 47 45 52 58 65 71 78 84 87 87 89 92 97 103 110 124 139 155 166 177 185 192 198 204 207 198 192 185 186 187 188 185 182 176 176 176 177 178 178 177 177 179 177 179 178 172 169 166 162 160 157 153 152 149 143 134 124 116 122 130 136 135 133 131 132 135 140 141 135 128 120 124 126 128 122 113 103 94 86 79 71 72 74 74 76 79 82 83 83 82 81 78 75 72 70 70 69 67 66 66 66 72 77 
+73 76 79 78 77 75 80 86 92 93 88 85 85 96 106 116 114 110 108 109 109 111 115 123 131 136 138 139 142 139 134 128 127 128 131 133 138 145 151 153 156 154 157 161 165 167 167 166 165 166 167 170 169 165 164 160 159 159 158 154 152 149 146 145 143 141 137 136 131 132 132 135 133 132 132 130 131 132 134 131 130 128 128 128 127 130 131 134 136 140 147 152 157 164 170 176 181 187 191 196 201 205 212 219 225 231 235 240 245 244 244 243 243 242 241 242 244 246 249 248 248 251 252 252 253 253 254 254 253 253 255 255 253 255 255 255 255 255 252 251 253 251 246 247 240 239 240 238 237 233 235 232 232 231 234 229 231 227 225 223 222 221 213 211 205 205 203 200 195 188 184 179 175 174 170 161 154 146 145 144 140 138 135 129 126 122 119 117 115 115 115 113 109 104 104 104 106 107 103 97 91 89 86 83 84 86 88 91 96 102 106 105 103 101 98 96 94 91 90 89 88 87 84 81 82 85 88 91 93 96 98 96 94 92 88 84 80 79 83 86 88 88 88 88 85 80 75 76 82 88 93 96 98 101 101 102 102 97 90 83 78 88 97 105 105 105 105 105 108 110 110 106 102 99 100 103 106 108 112 114 114 111 107 102 95 88 83 78 72 68 65 63 62 62 67 72 76 80 82 86 87 87 88 88 87 85 84 79 76 71 69 65 62 60 58 56 54 57 58 60 58 53 49 47 47 46 46 47 49 50 50 50 49 50 50 51 52 53 55 57 57 57 58 59 62 65 69 73 77 80 79 77 75 67 58 49 46 51 56 60 68 76 84 90 93 97 103 112 121 132 144 155 168 174 177 182 183 189 192 193 188 179 174 168 163 157 159 162 168 173 172 175 176 178 176 178 178 177 176 175 169 162 159 156 154 152 151 147 146 140 129 120 113 120 127 132 130 126 122 123 131 136 139 132 124 117 120 124 129 124 116 107 99 93 87 82 81 80 77 78 80 83 85 86 87 88 87 85 83 82 79 78 76 74 73 72 76 80 
+73 79 85 92 97 103 108 113 118 121 121 123 123 129 134 140 136 136 130 130 131 130 130 135 140 143 145 146 148 146 139 134 133 136 139 144 151 159 167 174 178 184 186 189 191 191 190 189 187 189 189 189 188 183 182 179 178 177 174 171 166 165 161 159 157 155 150 146 140 142 141 141 136 132 128 124 125 125 126 123 118 115 113 111 110 108 108 107 107 115 125 132 149 164 180 187 187 186 187 193 197 200 204 208 209 212 220 228 232 235 238 240 239 238 238 239 239 241 239 234 230 224 227 234 241 240 240 240 239 241 244 246 248 246 246 246 246 246 244 240 237 233 229 229 227 227 223 221 217 219 216 217 216 217 218 218 218 217 217 216 216 216 216 219 221 221 222 220 216 209 203 195 192 187 178 164 152 138 137 134 131 132 133 135 135 133 132 130 127 126 123 122 121 121 121 122 123 124 117 111 104 98 92 86 81 79 77 76 84 94 101 99 95 92 88 84 81 78 79 81 82 82 81 81 85 93 99 104 105 105 107 101 97 93 86 79 71 69 74 80 84 83 82 81 78 74 71 73 79 87 92 96 98 100 102 101 102 96 85 73 67 82 96 111 111 110 110 111 112 115 115 110 104 100 101 103 104 106 109 112 110 106 101 95 92 87 84 80 76 70 68 66 65 64 70 75 80 83 85 88 90 90 90 90 86 82 78 75 73 71 67 63 58 56 56 58 58 58 59 60 57 53 49 47 47 46 46 47 48 49 48 47 46 47 47 47 49 53 56 61 62 60 60 61 63 66 68 67 68 68 67 66 65 62 57 53 52 56 58 60 70 79 88 95 102 109 119 131 143 153 164 171 178 180 179 179 180 181 184 184 179 178 175 168 162 155 161 168 176 184 184 186 183 184 184 184 183 181 179 178 172 170 166 163 159 155 150 145 141 136 129 123 117 118 118 117 115 111 107 111 118 128 133 126 119 113 117 124 130 126 119 112 105 102 99 95 93 88 84 85 87 88 90 92 92 94 91 87 83 82 78 76 74 72 69 67 71 75 
+86 92 99 108 117 127 131 136 140 145 153 160 164 164 163 164 163 164 164 164 165 167 167 165 163 162 164 165 166 167 166 164 165 166 167 171 173 178 183 188 194 197 201 201 202 203 202 204 205 203 203 203 200 199 198 193 194 194 191 187 184 176 174 171 172 168 162 159 154 152 149 147 141 135 130 127 128 129 130 130 131 132 132 135 137 137 135 134 134 137 140 144 152 164 174 181 186 189 193 197 201 205 206 206 206 207 209 212 215 219 222 225 223 221 219 220 220 225 221 211 202 195 203 214 222 223 225 224 226 231 236 236 236 236 237 237 236 235 232 223 215 208 209 208 207 203 199 194 194 194 194 194 193 190 191 198 206 214 214 215 215 217 217 221 224 224 224 225 221 215 213 208 204 196 190 180 170 159 159 160 161 161 157 157 153 154 152 149 150 149 148 145 140 136 131 129 126 123 118 113 109 103 98 92 88 85 81 79 87 94 101 99 94 90 87 84 81 79 77 74 72 72 73 73 78 83 90 96 99 100 103 99 97 93 87 78 70 67 71 76 79 78 78 77 76 76 76 80 88 98 106 107 108 108 106 104 102 97 90 84 81 85 89 93 98 102 105 107 106 106 106 106 106 105 105 104 101 102 102 103 102 98 95 92 94 96 98 94 90 84 79 72 67 63 67 72 76 78 80 83 84 84 84 83 78 72 67 69 72 75 71 63 55 51 54 56 58 58 59 58 56 52 48 46 46 47 47 47 47 47 46 45 44 43 44 44 46 53 59 65 64 62 60 61 62 65 67 66 66 65 64 61 59 58 58 59 62 67 72 78 88 98 107 115 121 127 134 145 152 162 169 176 182 185 187 189 190 189 186 189 192 197 202 199 195 191 192 197 203 208 204 201 198 196 192 192 191 185 183 179 180 177 176 171 164 157 153 145 138 133 129 125 121 117 113 111 109 108 107 110 120 128 134 130 126 123 124 128 133 131 127 122 117 116 114 112 107 103 97 95 95 97 98 98 97 98 94 89 84 80 77 74 71 67 64 60 63 66 
+113 117 122 128 133 138 142 143 147 149 153 157 160 162 165 166 168 172 174 178 180 183 185 183 180 180 181 183 187 186 191 194 198 197 198 198 197 200 202 203 204 206 208 207 207 207 207 208 206 204 203 202 199 197 195 193 189 188 185 180 178 175 172 167 161 160 158 156 156 155 154 153 151 146 142 142 143 144 145 147 150 151 156 160 163 164 164 161 157 158 156 155 159 162 168 177 185 190 199 206 209 213 215 215 212 209 201 197 194 193 195 197 187 180 174 173 173 174 170 163 155 150 154 158 161 167 171 177 182 190 198 204 204 204 204 205 204 207 206 202 203 200 202 204 204 205 200 199 198 198 197 196 194 193 191 195 200 204 206 205 205 206 208 210 215 217 218 220 219 219 218 213 208 203 197 190 182 175 177 180 183 181 177 172 172 170 169 169 170 171 172 167 158 150 141 133 128 123 119 115 111 107 103 98 93 91 87 84 90 96 102 100 95 91 87 85 83 79 74 68 62 63 64 66 70 75 80 84 89 93 98 97 95 94 88 79 70 66 68 72 75 74 73 71 74 77 81 89 99 111 120 119 118 117 112 107 99 97 96 94 92 88 82 78 84 91 100 102 99 98 98 102 107 112 107 103 100 96 96 94 93 91 90 89 95 100 106 103 99 94 89 81 73 67 70 72 75 76 79 81 83 82 83 81 78 73 69 72 75 78 74 66 58 53 56 59 60 61 61 61 59 55 52 51 53 55 57 55 54 52 51 51 51 51 51 52 53 57 60 63 60 55 50 52 57 63 68 71 74 78 71 64 58 57 61 66 72 83 94 103 113 123 132 137 144 149 153 157 164 169 174 180 184 190 196 199 200 198 195 193 204 213 222 221 216 213 211 214 218 219 215 210 206 202 201 198 194 192 190 185 184 181 181 174 167 161 155 148 141 136 129 124 118 117 115 113 113 113 114 117 124 132 139 136 133 133 134 135 138 136 133 129 128 126 124 122 116 110 105 101 100 99 97 97 96 96 90 81 73 68 65 61 59 55 53 49 51 52 
+119 126 130 135 142 145 147 149 150 151 152 154 155 158 160 163 167 173 177 179 180 181 186 190 193 195 197 196 197 198 199 200 202 200 199 199 199 197 199 198 201 199 200 198 200 198 199 200 199 194 194 188 188 186 186 183 183 179 176 176 175 172 167 157 149 145 148 150 152 153 157 158 163 166 168 171 173 173 175 178 181 182 183 185 186 189 186 189 187 185 185 184 184 188 190 194 195 200 203 204 206 206 205 203 201 194 189 182 178 177 177 176 166 156 147 142 137 135 132 128 122 119 116 113 109 116 122 128 139 148 161 170 168 168 167 169 171 173 178 182 190 194 201 204 211 216 217 220 220 219 218 217 215 215 211 208 201 196 190 183 176 175 180 183 189 190 193 198 200 200 203 200 197 193 187 184 179 174 173 173 174 174 174 176 179 180 180 180 182 183 183 180 174 169 164 158 154 149 145 142 140 139 135 132 130 123 117 113 117 120 123 120 114 108 105 103 102 99 92 83 77 79 80 83 84 84 84 85 90 95 100 97 94 90 84 76 68 64 65 65 66 70 74 78 82 86 91 96 103 111 116 118 120 121 118 114 112 109 108 108 105 98 91 85 92 98 106 108 107 105 105 108 110 112 110 108 105 100 94 90 87 87 87 88 91 94 97 97 95 92 91 87 85 82 81 80 80 81 83 85 85 87 88 88 86 85 82 82 81 80 76 70 64 60 61 63 64 64 65 64 63 60 58 58 61 64 67 64 61 58 57 57 58 58 59 60 59 60 61 62 57 52 46 48 56 65 73 76 81 86 78 70 62 63 70 77 86 97 108 117 126 134 143 150 154 160 164 169 173 180 184 186 191 198 201 210 210 207 203 202 213 220 227 226 223 219 218 220 222 221 219 213 211 209 207 203 201 197 195 190 189 188 184 176 169 159 152 144 138 131 128 122 120 120 118 117 119 120 124 126 133 135 139 137 138 137 136 135 135 132 130 129 127 126 126 124 119 114 108 102 99 96 93 93 92 93 84 73 61 55 52 50 47 45 43 40 40 40 
+111 115 122 127 132 137 141 146 150 151 155 155 155 159 163 165 167 171 174 176 178 178 182 189 193 198 201 200 200 202 203 204 203 202 199 199 195 194 192 190 190 191 188 187 187 184 184 181 179 170 163 158 156 153 151 146 143 138 135 134 133 131 130 127 125 126 135 141 149 151 156 159 165 170 175 179 185 188 193 195 196 200 200 201 202 204 207 211 212 211 212 213 216 217 216 214 210 207 202 200 196 193 188 183 178 177 174 173 171 171 170 169 165 161 155 148 139 130 129 138 144 148 142 136 131 132 135 140 145 154 161 168 168 169 168 171 172 174 174 177 181 186 190 195 199 203 201 204 207 209 212 216 213 215 214 208 202 196 188 178 169 165 166 170 171 176 179 187 189 192 194 194 192 189 186 183 178 174 173 171 166 169 173 176 181 185 187 189 190 191 191 190 190 186 185 181 180 176 173 170 169 167 167 169 164 156 148 141 143 144 147 140 134 126 123 123 122 120 110 102 94 96 99 102 100 94 90 88 94 97 103 97 93 87 80 73 67 62 60 59 58 66 75 84 90 95 100 103 107 109 113 116 119 123 123 122 122 122 120 118 117 109 102 95 100 105 112 113 114 113 113 113 113 114 111 110 107 101 94 87 82 85 85 86 88 90 91 92 92 92 92 92 92 92 88 86 83 85 86 88 89 91 93 94 93 92 91 88 84 82 79 76 74 71 70 70 68 68 67 67 64 61 58 57 61 64 67 65 63 61 62 65 67 69 67 67 67 65 63 61 59 58 56 60 68 77 83 85 86 87 83 77 72 75 84 94 102 110 119 127 134 142 148 156 162 168 174 181 186 190 191 193 197 205 210 217 220 217 214 214 219 227 234 230 229 222 221 220 219 218 214 209 208 203 201 198 196 191 188 182 177 170 163 154 144 134 128 124 121 117 119 122 127 127 127 125 128 132 136 141 140 138 139 139 139 141 138 135 132 129 128 128 126 126 125 123 118 113 106 101 96 90 86 83 81 79 69 59 49 45 45 44 44 40 36 32 31 31 
+113 117 119 122 124 127 132 137 143 148 152 155 157 161 161 166 166 169 169 169 170 171 172 175 180 181 183 185 187 189 191 193 194 195 197 193 193 191 189 184 181 174 169 164 156 152 152 151 150 142 136 127 124 123 120 117 110 104 97 95 93 91 93 94 98 106 120 135 145 149 152 156 160 164 166 168 173 177 180 181 183 184 186 187 190 189 193 194 195 194 194 194 196 199 198 199 197 196 194 194 190 188 185 181 177 176 176 176 175 174 173 171 171 170 168 161 149 139 138 152 165 174 166 158 150 151 153 152 156 159 161 168 168 173 176 177 179 180 178 175 172 171 176 180 184 177 171 165 170 180 190 196 198 201 203 203 203 203 199 192 188 183 179 175 172 177 182 187 192 193 198 199 201 201 201 196 192 188 181 177 173 169 170 169 169 168 166 165 166 167 168 171 175 180 179 175 170 169 168 169 168 170 168 169 168 165 162 160 160 160 162 159 156 153 150 149 148 147 139 132 124 124 123 124 122 120 118 117 121 121 125 119 115 109 105 100 95 90 83 78 72 81 89 97 98 100 101 102 102 102 102 104 107 110 111 113 115 115 112 113 109 108 107 106 105 108 110 112 112 113 114 114 114 114 110 107 102 97 94 89 87 86 86 87 89 90 92 92 92 91 91 90 90 89 88 87 87 88 90 92 94 96 99 100 98 97 95 91 87 82 81 83 84 85 81 77 73 71 69 68 65 61 57 56 59 62 66 65 64 64 67 72 77 79 77 74 71 67 63 59 61 63 65 71 77 84 89 89 88 87 84 81 78 81 89 96 103 111 119 127 136 146 153 160 166 171 175 183 187 192 195 198 203 209 217 221 229 226 225 225 227 229 230 229 227 223 222 219 214 208 205 203 200 198 192 188 185 181 181 178 166 155 144 135 127 119 115 114 112 113 123 130 140 139 139 135 138 143 146 146 147 144 142 141 139 136 136 133 131 129 127 126 124 122 119 117 113 106 100 94 88 83 77 73 67 62 53 45 37 35 38 40 41 37 33 30 30 30 
+124 124 123 119 117 115 112 109 107 111 117 123 126 127 127 132 139 147 154 157 157 159 162 165 169 172 174 175 175 179 181 183 185 187 190 191 189 187 185 177 169 161 148 133 118 109 110 109 109 107 103 100 101 104 108 109 109 108 106 109 109 111 114 116 119 124 131 140 146 148 150 150 154 156 160 162 165 167 169 171 173 173 173 174 175 176 177 179 179 177 177 175 175 176 175 177 178 180 182 185 185 186 188 189 190 192 190 189 189 186 183 184 184 185 189 184 182 177 174 180 184 185 181 180 175 173 174 174 175 176 176 178 182 182 184 184 183 186 182 181 177 175 176 179 179 178 172 171 176 184 192 200 204 206 207 208 210 212 209 204 202 193 188 180 176 181 186 192 195 201 204 205 208 207 209 204 200 195 187 182 175 169 164 160 157 152 147 141 143 143 146 152 160 168 172 168 163 160 163 167 170 171 171 171 171 173 176 177 178 178 178 177 176 176 176 176 175 174 168 163 157 153 148 144 144 145 147 148 149 148 147 143 139 134 131 128 125 120 109 99 90 96 103 110 108 105 102 98 95 94 92 93 95 96 100 103 107 108 107 105 104 107 110 113 112 110 109 110 112 114 116 114 115 114 108 101 95 91 90 90 89 88 86 85 87 89 90 90 91 90 91 90 89 89 90 91 92 94 95 96 99 99 100 100 97 93 89 85 81 76 76 81 85 88 83 80 76 74 71 68 64 62 58 57 58 61 63 64 66 67 69 74 78 78 73 67 62 60 57 55 60 65 71 77 81 84 88 86 85 84 82 81 81 81 86 90 94 104 114 124 135 147 157 164 167 173 177 183 188 192 198 201 207 213 219 226 230 230 228 230 226 219 212 208 205 203 198 188 181 173 175 175 176 175 173 171 170 167 167 166 159 154 148 145 142 139 137 133 129 130 138 148 156 154 153 151 151 152 153 153 151 149 146 142 138 134 132 130 129 128 125 122 119 116 112 107 101 95 89 83 76 71 64 61 57 54 49 45 40 38 38 38 39 39 39 40 40 41 
+106 111 109 104 100 95 89 83 76 81 88 94 94 93 91 95 109 123 137 139 144 144 151 160 168 175 176 175 177 178 178 180 180 180 178 176 173 168 167 159 152 143 132 120 105 96 94 93 90 88 84 81 84 89 94 99 104 109 113 119 127 133 138 142 147 148 149 149 149 150 148 146 150 154 157 160 159 159 161 163 165 169 167 165 164 166 171 174 177 180 180 181 183 184 185 184 185 182 183 184 185 187 185 188 190 189 187 186 185 184 183 183 185 185 186 186 189 189 187 187 186 186 187 190 190 193 191 194 192 191 190 190 191 192 193 190 189 188 188 187 185 183 183 179 177 184 191 197 203 206 211 213 219 225 227 225 222 220 216 209 206 199 194 185 181 189 195 202 205 205 208 208 207 206 203 197 191 185 182 179 176 171 165 158 150 143 134 128 126 126 126 128 130 136 138 141 144 146 151 155 159 161 163 165 168 171 172 173 174 173 174 173 171 171 171 169 170 168 162 156 151 148 143 140 139 139 140 139 137 135 133 132 131 130 129 128 126 123 115 109 103 107 112 117 116 114 112 109 106 104 101 99 97 95 94 93 91 88 86 83 83 88 92 97 103 109 114 119 120 125 126 120 115 112 101 92 82 82 86 91 92 86 81 76 78 81 84 86 87 88 90 90 92 94 97 100 102 102 103 102 101 99 98 96 90 84 78 74 69 63 66 73 81 86 83 80 78 75 72 67 64 62 59 57 58 58 60 63 66 69 73 75 78 77 69 63 55 56 56 57 63 69 76 81 83 83 84 83 82 81 80 80 79 80 82 84 87 97 105 116 126 137 147 154 163 168 174 181 187 192 197 203 206 209 213 214 215 217 218 219 202 186 172 163 162 161 154 145 136 126 133 142 147 150 152 152 153 153 153 154 154 153 153 155 155 154 152 148 142 139 145 152 156 156 153 151 150 150 148 146 145 144 144 137 132 127 124 124 123 121 117 114 110 105 100 94 87 82 75 69 64 57 51 49 48 48 46 45 43 41 39 38 37 40 42 46 47 47 
+67 77 77 73 66 64 66 68 69 79 88 98 103 108 111 116 124 134 142 144 145 147 151 160 168 172 172 172 173 174 176 176 173 169 167 161 154 151 145 140 133 126 119 113 105 101 100 96 95 90 86 82 80 78 77 78 80 82 87 98 109 118 115 112 109 114 122 129 133 131 131 129 131 131 133 136 137 138 139 144 150 154 152 151 148 153 160 168 175 180 184 188 191 195 193 193 191 187 186 187 186 185 184 184 181 179 173 169 166 168 169 168 163 157 152 152 147 147 145 145 141 142 150 157 164 166 171 172 174 176 176 179 179 178 180 179 177 175 175 180 180 181 184 185 188 193 199 206 207 207 211 213 217 221 224 223 222 221 218 214 213 206 200 192 191 195 201 207 207 208 208 207 203 202 198 190 187 179 179 180 179 173 165 157 148 137 127 117 114 112 109 107 106 106 110 118 127 134 139 144 150 152 155 158 160 164 168 170 169 168 166 166 167 164 162 162 160 156 154 149 148 143 138 135 132 132 129 128 124 119 116 118 122 126 125 127 126 126 122 120 118 118 121 121 122 122 121 120 117 112 107 104 100 96 89 81 73 68 66 64 64 70 76 82 95 106 118 125 126 130 131 122 114 106 96 85 76 77 84 91 93 87 79 72 76 78 82 85 86 89 91 93 95 96 99 103 106 104 103 102 100 96 93 89 84 80 75 72 69 67 68 73 79 84 83 82 81 76 72 67 64 63 60 59 58 58 57 61 66 70 71 72 71 70 68 64 63 66 70 74 77 79 81 81 80 80 79 78 78 78 77 76 74 75 77 80 82 90 97 104 114 125 135 144 153 161 168 179 185 193 199 204 207 207 204 201 200 202 202 203 185 166 148 142 139 138 133 128 124 119 127 134 143 147 150 152 154 155 156 159 159 158 159 156 156 154 152 150 149 146 146 144 144 142 143 142 140 139 136 136 137 139 139 134 125 119 117 116 117 116 111 105 99 93 88 83 79 72 65 60 54 48 43 44 45 47 46 43 41 39 38 37 36 40 42 46 47 48 
+69 76 77 72 67 65 69 72 76 85 96 106 115 126 135 143 148 154 159 159 157 156 159 163 165 168 165 163 161 159 158 158 154 152 147 144 144 142 141 135 130 125 119 114 108 102 96 90 85 82 78 74 72 70 67 66 66 65 67 79 90 103 90 76 65 71 88 102 110 109 107 104 101 97 91 93 96 99 103 108 113 118 118 119 122 125 129 134 137 139 140 143 150 157 165 164 159 156 154 154 151 150 149 148 147 146 145 143 145 147 153 153 146 139 135 129 125 121 118 117 115 116 124 133 143 147 151 155 158 162 166 168 167 166 166 164 163 161 164 169 175 180 187 193 201 202 203 204 202 205 203 203 203 204 205 208 211 215 217 217 217 216 212 208 205 202 204 201 202 201 201 200 197 196 195 192 191 185 186 187 187 180 171 162 154 146 140 131 127 122 117 114 114 113 114 119 124 127 131 134 135 137 137 138 140 141 144 143 142 141 138 138 138 137 140 144 148 152 149 148 147 143 140 136 134 133 130 130 128 126 126 125 125 125 124 126 126 126 123 121 119 118 117 116 115 116 117 116 113 109 106 105 102 100 94 85 77 71 69 67 66 70 74 77 86 96 105 111 113 114 115 111 107 102 99 94 91 91 92 93 93 90 87 83 87 88 90 91 93 95 96 96 96 95 98 99 103 101 98 95 92 88 85 80 80 79 78 78 78 77 78 80 79 81 82 83 84 78 73 68 65 64 63 62 59 57 55 60 65 70 70 68 65 64 66 68 69 74 80 84 84 82 80 79 78 77 77 77 78 79 79 77 77 80 89 97 106 115 124 133 140 148 152 157 161 166 169 170 172 173 176 179 182 183 182 181 182 179 178 178 168 158 149 143 138 134 129 131 129 128 135 141 146 150 154 155 157 157 160 161 161 161 159 156 153 148 145 144 143 142 137 132 127 126 125 124 123 123 122 122 123 123 124 119 114 109 108 111 112 112 103 93 84 81 79 78 73 66 58 51 47 43 39 41 43 46 45 42 40 38 38 37 36 38 41 43 44 45 
+94 100 105 110 113 116 118 120 122 123 124 126 122 119 116 116 119 123 127 125 125 125 132 141 148 150 150 148 147 146 144 140 137 133 129 130 132 135 137 135 131 128 123 117 112 101 87 73 63 59 56 53 60 67 72 76 79 82 85 86 90 93 82 70 58 59 68 76 82 81 79 79 77 75 72 74 77 80 83 88 92 95 97 101 103 105 106 108 106 103 100 101 110 121 132 129 123 116 113 110 108 104 103 102 101 106 110 114 121 126 132 137 137 139 137 132 127 122 124 133 139 143 144 146 147 151 155 159 162 163 165 167 167 170 171 171 171 171 169 167 162 168 179 190 199 199 197 197 193 190 187 186 190 193 194 200 205 208 208 213 213 212 211 209 207 203 198 196 194 195 194 193 192 193 191 191 191 190 191 191 193 184 177 167 162 155 151 144 138 131 126 122 121 119 119 121 122 123 125 125 126 125 124 122 121 120 119 119 117 114 113 113 112 112 118 127 136 144 145 146 147 144 140 139 135 134 132 131 133 135 137 133 129 125 124 126 126 127 124 122 120 116 112 108 109 110 112 112 109 106 104 103 103 103 95 88 79 75 74 72 71 73 75 75 82 89 94 98 99 100 101 99 99 97 99 99 101 98 96 93 94 93 94 94 96 97 99 101 101 102 102 101 98 96 96 97 98 95 91 87 84 81 76 74 77 79 81 83 84 84 86 86 87 89 88 88 87 83 80 76 72 70 66 63 64 64 64 64 64 64 64 65 66 67 69 71 73 74 74 74 73 73 70 70 73 76 78 81 83 85 86 86 86 93 110 128 145 154 165 175 178 176 174 171 171 168 166 162 158 156 156 158 162 165 166 168 167 167 163 162 158 152 144 140 136 133 132 133 134 136 136 139 140 140 143 144 145 146 148 149 146 141 138 133 127 123 120 121 120 122 116 110 107 104 103 102 103 104 106 108 108 108 106 104 101 100 100 103 106 106 95 84 72 70 70 69 66 60 55 50 47 44 42 43 44 46 45 43 42 40 38 37 34 35 36 37 38 39 
+102 110 116 122 129 135 139 142 145 145 142 140 127 111 93 85 82 82 79 77 74 72 83 99 113 121 122 125 128 130 131 133 129 127 122 124 128 132 134 133 131 127 121 115 109 97 82 68 56 54 51 48 56 67 77 83 89 95 97 93 88 83 74 64 54 50 51 51 51 51 52 52 58 63 68 73 77 81 86 90 94 97 102 106 111 113 112 113 112 111 108 108 113 118 122 119 117 114 110 110 109 109 111 111 111 114 119 123 126 131 136 138 138 140 142 138 133 128 134 143 153 158 156 153 149 154 158 162 164 164 164 164 170 174 177 179 182 183 175 165 154 154 168 181 194 191 187 184 179 173 169 169 179 184 191 195 198 201 199 199 200 197 198 194 194 192 189 186 187 188 188 189 186 183 184 185 188 192 192 193 194 190 182 177 171 167 160 154 148 142 136 133 130 128 126 127 128 129 129 129 129 129 133 132 135 134 134 134 135 135 135 137 135 137 139 143 148 152 152 153 152 153 150 148 146 144 143 140 140 139 138 136 134 132 132 130 129 127 123 120 115 111 106 101 99 96 95 94 91 91 89 88 88 87 83 79 75 74 80 85 91 94 97 100 98 96 93 92 91 91 91 93 94 96 93 90 86 87 90 94 97 99 100 102 103 105 108 109 110 112 110 106 102 98 96 93 91 87 84 79 76 73 69 68 74 79 84 86 89 90 93 95 98 100 97 94 90 88 87 85 82 76 69 65 68 71 74 69 64 58 59 63 67 71 73 75 77 75 73 70 69 68 67 68 72 77 81 83 86 89 93 95 98 108 124 139 155 163 172 179 180 181 180 181 177 172 171 172 170 170 168 169 166 168 170 175 176 170 165 160 154 144 135 131 134 135 136 138 139 140 138 134 131 130 130 130 132 133 135 136 131 126 119 115 111 107 107 108 109 112 110 109 107 107 106 106 107 110 112 114 112 109 105 103 101 98 96 97 95 93 83 75 66 62 60 59 56 54 53 52 50 48 47 47 46 46 45 45 44 42 39 36 33 34 35 36 38 39 
+100 110 108 105 102 102 102 105 105 111 113 117 114 107 101 97 92 90 85 83 80 76 84 92 104 109 114 118 122 123 124 127 125 123 119 122 125 129 132 131 128 125 119 111 103 94 82 70 63 64 64 64 69 74 79 83 85 87 89 87 85 83 81 78 75 73 73 72 72 72 72 73 77 81 86 89 92 95 98 100 103 106 110 114 118 119 119 118 118 117 118 116 114 114 113 114 113 114 115 118 123 127 135 142 149 151 154 157 158 156 155 153 151 151 150 148 147 146 142 141 140 141 144 146 148 150 154 156 157 161 163 168 171 175 178 179 179 179 174 171 165 166 175 183 192 188 186 184 171 156 141 142 159 174 187 193 199 205 204 204 203 201 199 199 199 196 192 188 188 186 185 185 181 181 181 183 186 190 193 196 199 197 192 188 183 177 171 166 159 154 148 143 138 134 132 134 135 136 136 135 134 139 141 146 148 148 148 147 151 154 154 157 159 160 161 162 160 159 159 159 158 160 158 158 156 154 151 149 146 143 139 139 139 139 136 134 131 127 122 118 111 106 100 94 89 85 80 77 76 76 75 75 74 73 73 72 71 76 86 99 107 112 116 121 112 103 92 86 85 84 84 88 92 98 92 86 79 81 88 95 100 102 104 106 108 110 114 114 113 114 111 107 103 98 94 90 86 81 77 75 72 70 69 68 72 77 81 83 84 85 88 92 97 100 98 95 93 90 87 85 81 75 69 66 69 73 76 75 73 73 73 76 78 80 82 83 84 82 80 78 77 76 75 76 79 82 85 87 88 91 98 106 116 126 136 146 156 161 166 172 176 179 184 188 183 180 176 178 179 184 182 176 172 171 174 177 178 172 165 158 151 144 138 135 137 138 139 137 137 135 131 128 125 123 124 124 125 126 127 128 124 120 117 114 117 119 121 121 121 120 122 125 126 126 126 125 125 125 126 125 120 114 106 103 100 98 94 90 87 82 75 69 62 59 58 57 57 55 54 53 49 46 41 41 41 42 41 39 38 36 35 35 34 36 39 41 43 45 
+104 116 112 108 101 96 93 89 87 89 94 98 102 106 112 113 110 109 108 108 109 109 110 113 116 121 126 130 133 134 136 136 139 138 138 137 136 135 132 124 117 110 103 95 89 82 75 67 63 65 67 70 72 75 78 79 79 80 80 81 82 84 88 93 97 99 100 101 104 107 111 114 115 118 119 119 119 119 120 122 122 124 124 127 128 127 128 127 127 127 127 127 127 129 130 129 130 131 132 135 136 138 140 143 147 145 144 142 144 144 143 144 141 139 139 142 143 145 142 136 129 127 132 137 142 142 144 147 150 156 161 166 171 175 179 177 174 173 176 179 181 182 184 184 189 188 188 190 165 138 111 113 137 161 182 194 204 217 218 219 223 223 221 220 218 214 209 207 197 193 184 182 183 185 184 185 184 186 194 203 208 209 208 205 201 195 189 183 177 170 162 156 149 140 137 144 150 156 158 160 162 164 167 169 169 163 160 155 157 158 159 160 162 163 162 161 160 159 158 153 153 152 151 149 151 149 150 147 141 138 134 134 134 135 136 134 134 130 127 123 119 112 107 99 93 86 80 76 75 73 72 76 80 83 86 87 89 92 99 105 111 116 120 125 117 107 95 91 90 89 88 96 103 110 104 97 90 90 94 96 99 102 103 105 106 109 111 111 107 104 102 101 98 98 91 86 80 77 76 75 74 72 71 70 72 74 75 76 76 76 78 85 92 98 96 95 94 90 87 83 79 74 69 66 70 74 78 80 82 84 85 86 87 88 88 87 88 86 85 83 82 82 82 83 88 93 97 98 101 104 111 122 132 141 151 160 169 174 179 184 187 190 190 189 186 182 182 185 186 190 189 187 184 182 180 176 174 168 160 155 151 153 151 149 146 141 139 136 131 128 124 121 119 117 117 119 120 120 120 120 118 116 115 119 123 127 131 129 127 128 128 127 125 125 124 124 123 121 122 120 117 113 110 106 100 95 91 90 89 87 79 71 63 62 65 68 68 63 58 53 47 41 35 34 35 37 37 35 33 31 33 34 36 38 39 40 42 44 
+111 122 125 127 127 126 123 121 118 113 110 108 105 102 98 99 101 103 104 104 106 106 109 114 118 123 127 132 136 136 139 141 144 147 150 149 144 139 132 120 106 94 86 78 70 65 64 59 58 59 60 62 64 67 69 69 71 71 72 75 76 78 80 80 84 87 89 93 95 97 101 104 106 109 112 114 117 118 121 121 124 126 124 124 124 126 128 130 130 132 133 135 138 142 145 146 149 151 150 149 148 146 139 134 129 122 112 104 105 108 111 112 110 108 107 112 117 121 122 120 118 118 120 124 126 123 121 118 126 136 143 152 159 169 175 175 177 176 181 186 188 190 192 193 193 193 192 191 173 153 133 131 147 164 177 189 197 209 211 215 217 219 223 223 223 222 223 218 213 205 198 196 195 197 197 195 192 188 199 208 219 219 219 218 219 212 205 199 192 186 180 168 159 150 147 157 166 174 181 183 187 189 191 191 189 179 173 163 163 164 164 165 165 167 165 164 163 159 157 150 148 146 145 143 146 145 147 144 138 134 129 130 130 132 134 134 137 134 132 129 126 118 112 103 96 88 80 75 73 72 71 79 85 93 99 101 105 107 110 111 114 118 123 126 119 110 101 97 95 93 95 103 110 117 112 106 101 97 99 100 103 103 104 104 105 105 105 102 97 93 90 90 90 89 86 81 76 75 76 76 75 75 73 72 71 72 70 71 73 74 79 86 94 101 98 95 92 90 87 85 82 80 77 75 77 78 80 79 76 75 75 79 81 83 83 82 82 81 79 78 80 82 85 89 99 108 118 121 123 126 132 141 150 159 168 179 188 192 195 201 201 198 195 192 189 186 186 190 194 198 198 197 195 193 187 182 177 170 163 160 159 160 163 161 154 146 140 137 133 132 128 126 124 124 124 126 127 124 124 123 125 127 128 130 130 130 131 132 132 134 126 118 109 106 110 111 113 114 114 114 114 114 113 109 101 93 87 88 88 88 80 71 64 63 66 68 66 62 57 53 48 43 39 38 39 39 39 37 36 34 36 37 39 37 34 31 30 35 
+113 119 121 123 128 128 127 128 127 123 119 113 106 97 86 85 90 94 95 92 89 87 96 104 111 115 119 120 123 124 124 127 127 126 126 124 120 114 110 104 97 90 83 76 69 65 63 60 58 57 57 57 58 60 62 62 64 64 66 68 71 72 71 70 68 70 74 76 77 77 77 78 79 80 81 87 92 99 100 101 101 100 97 93 90 96 103 109 111 114 116 116 122 128 131 130 128 127 126 124 121 119 113 106 99 94 89 84 85 90 95 97 95 93 91 95 100 105 106 106 107 107 109 110 111 106 101 97 104 115 127 140 150 162 172 175 177 182 186 189 193 197 199 200 205 200 198 191 186 180 171 167 170 172 178 180 182 187 190 189 191 194 203 208 214 219 225 229 229 229 229 229 229 229 225 220 213 208 212 219 223 229 228 231 228 226 223 220 212 204 195 190 182 175 175 181 189 195 196 202 205 204 204 204 201 190 182 177 178 181 184 186 187 189 190 189 188 186 178 169 161 158 155 154 151 153 152 152 148 146 142 143 142 143 141 141 138 138 133 129 125 117 110 103 98 93 88 86 87 89 90 92 95 98 99 100 103 104 105 107 110 112 112 115 113 111 109 107 105 104 102 107 111 115 112 109 105 106 107 110 109 110 108 108 103 98 91 87 82 77 74 74 74 74 74 73 73 74 76 77 79 77 76 74 71 69 67 68 71 74 80 90 99 107 103 97 92 88 88 87 86 86 85 85 83 83 82 78 73 69 68 72 77 80 79 79 79 79 80 80 84 87 92 99 112 125 138 141 144 146 151 157 165 172 179 188 198 202 208 211 210 210 210 207 206 206 204 210 210 210 213 211 206 205 201 198 194 187 180 172 171 173 174 172 161 152 141 141 141 142 138 135 132 130 132 132 133 131 129 126 130 133 135 133 131 126 125 126 126 127 118 108 98 97 103 107 111 110 108 107 107 110 111 106 97 87 78 78 79 78 73 69 64 62 61 58 56 55 54 53 50 47 45 44 43 42 41 40 39 37 39 41 43 40 35 32 31 35 
+113 108 105 100 98 94 91 86 85 88 91 92 91 90 87 87 85 86 84 79 75 72 80 88 97 100 101 103 104 107 108 109 105 103 101 98 94 90 87 88 87 87 84 80 76 71 67 64 60 59 57 56 57 58 59 60 60 61 62 64 67 70 73 75 77 79 80 80 78 75 72 70 70 70 70 72 76 80 82 83 83 83 80 75 72 78 85 92 96 96 98 101 107 112 118 112 106 100 97 92 90 85 78 73 66 69 71 74 79 85 91 94 92 92 91 93 96 99 96 92 89 89 92 94 96 94 92 89 98 110 121 134 145 157 167 173 176 181 181 185 187 191 194 196 197 193 190 183 183 181 181 180 178 180 180 179 178 177 174 171 168 172 181 189 196 206 215 223 229 233 242 244 242 243 240 236 228 222 224 228 229 230 233 233 233 233 233 233 223 215 206 204 199 196 199 202 207 213 214 216 218 217 217 212 211 200 192 188 191 197 202 205 207 210 210 212 213 210 200 188 174 172 166 164 160 161 161 159 158 154 154 152 152 150 149 145 141 139 133 129 124 119 113 106 102 100 97 99 102 106 109 107 104 103 102 102 103 102 105 106 108 109 109 111 112 115 118 117 115 113 111 112 114 116 113 111 108 109 112 114 116 114 112 109 102 95 86 81 78 75 73 71 72 72 75 77 79 82 84 86 87 85 84 82 80 78 75 77 80 84 89 96 104 110 107 101 96 94 92 90 88 87 86 86 87 89 90 88 85 83 81 81 80 79 81 81 82 85 89 93 97 101 106 113 127 143 159 160 161 164 168 173 179 186 192 199 205 212 215 220 223 222 224 223 224 227 226 225 227 224 222 217 216 213 209 206 201 192 187 178 173 170 167 160 151 141 134 129 125 121 121 121 122 124 125 127 126 127 128 128 125 120 115 113 110 109 108 109 109 110 103 97 90 91 98 106 112 108 103 97 99 104 108 103 91 78 69 69 68 69 66 65 62 60 57 54 52 52 54 54 52 49 46 44 43 41 40 40 39 39 42 44 47 48 47 47 46 44 
+106 102 97 91 85 80 74 67 64 68 73 77 81 84 88 86 81 76 72 67 63 60 65 71 77 78 79 79 79 80 81 83 79 76 73 76 80 83 85 86 86 87 81 77 71 67 61 56 55 55 55 55 55 55 56 57 56 57 58 60 63 66 74 80 88 88 88 88 83 78 72 68 69 70 70 68 65 62 65 69 73 77 80 82 84 85 87 89 89 90 90 91 93 95 97 93 89 86 82 79 75 71 66 61 58 63 68 72 78 83 88 91 94 95 95 98 98 100 96 94 89 87 89 90 91 89 88 86 94 105 115 128 140 151 162 167 173 177 179 179 180 182 185 187 188 184 179 173 176 178 178 180 183 186 187 182 177 172 164 156 148 149 155 160 169 181 193 203 211 218 226 227 230 233 231 230 231 229 228 227 225 226 225 223 223 220 221 219 216 208 204 202 200 201 203 207 212 216 218 220 221 222 221 218 216 209 202 197 201 205 209 210 210 210 212 212 212 212 203 194 188 185 183 180 178 177 174 174 167 162 155 150 142 137 132 131 130 129 130 130 131 130 131 132 129 126 124 122 123 124 124 122 120 118 117 117 116 117 121 125 127 130 133 135 133 129 126 124 123 124 125 122 122 120 116 110 106 105 109 113 114 113 111 109 104 96 90 88 87 86 86 85 84 83 87 90 94 96 98 99 100 98 96 94 92 91 90 92 94 96 99 105 109 112 109 106 103 99 96 92 90 88 87 85 90 95 99 98 99 98 95 92 88 86 89 92 95 101 107 112 117 121 122 129 140 155 165 169 169 168 171 178 186 191 200 207 214 216 221 224 225 228 229 230 231 230 235 231 230 228 225 220 216 212 203 194 186 183 180 174 165 154 144 134 130 126 123 113 102 90 95 102 109 117 117 119 121 124 127 128 121 111 102 97 97 99 100 101 103 105 101 96 91 90 95 100 102 97 91 86 85 86 85 81 73 64 57 58 59 61 60 58 57 56 55 54 54 54 56 57 54 50 46 44 42 40 39 40 40 40 44 48 51 53 53 53 52 48 
+96 97 94 92 89 88 87 86 86 87 91 92 83 76 71 68 65 63 61 60 58 56 59 62 65 67 68 69 69 69 69 67 61 55 49 57 67 77 82 84 85 85 77 70 63 57 51 45 44 47 50 51 52 53 53 54 55 56 56 56 57 58 62 67 72 73 72 73 72 68 66 63 63 63 63 61 58 55 57 62 67 71 77 82 87 85 82 80 80 80 81 81 79 78 76 75 73 72 70 67 64 61 60 58 57 63 70 76 80 82 84 88 95 101 106 107 108 109 112 116 117 118 115 114 111 108 106 103 108 113 118 128 138 149 160 163 167 171 171 169 166 171 176 182 185 182 178 176 176 176 177 178 179 180 180 178 175 173 167 162 158 156 160 162 165 174 182 189 198 204 213 218 216 220 220 225 228 232 229 228 226 222 221 220 217 213 209 207 202 198 196 197 199 200 205 210 217 220 225 226 230 229 228 229 224 220 213 209 213 214 216 215 214 210 210 213 212 213 208 205 202 200 199 197 193 192 189 185 174 165 156 144 133 122 118 118 118 121 127 133 138 144 149 155 153 151 147 145 144 141 140 138 137 134 133 134 133 136 139 143 148 150 155 157 153 143 135 130 133 134 134 130 127 126 119 113 108 107 111 114 118 116 115 115 109 103 97 96 96 99 98 97 97 96 100 103 106 108 109 110 111 109 108 107 106 105 104 104 104 103 105 110 114 119 116 116 115 111 107 105 101 102 101 101 106 112 117 118 118 119 119 120 121 121 125 129 133 139 143 148 148 148 144 143 151 158 165 165 165 162 167 178 189 199 208 214 224 226 227 227 230 233 235 238 236 238 237 236 232 231 226 220 213 207 197 189 179 177 175 171 165 156 147 141 139 136 134 128 123 119 121 124 128 130 127 128 127 125 123 122 118 111 108 106 105 105 105 108 109 110 109 105 99 96 93 91 87 82 77 73 69 66 63 60 56 52 49 51 53 55 55 54 53 53 52 50 49 50 50 51 49 48 47 46 45 44 44 43 43 42 46 50 55 55 52 50 47 46 
+86 88 87 87 86 86 86 87 89 93 96 97 83 68 52 49 50 51 52 54 55 56 56 57 58 64 72 78 80 79 78 76 66 56 48 55 64 74 77 79 81 80 74 67 61 56 51 46 44 46 48 49 50 50 50 52 52 54 53 53 51 51 53 55 58 57 57 56 57 57 58 57 55 53 52 54 54 54 58 61 65 68 68 69 70 66 62 59 59 61 62 63 62 61 60 60 60 60 62 65 67 70 72 74 75 79 81 85 86 86 87 89 91 94 99 102 106 110 115 122 129 131 128 125 122 121 118 116 116 118 119 126 135 147 155 158 159 163 160 155 152 157 167 175 185 183 181 179 178 176 175 173 172 167 168 171 173 176 178 183 184 184 181 179 179 183 184 186 191 198 202 204 207 211 213 216 219 224 226 227 229 228 222 217 214 206 199 195 190 184 180 182 186 187 196 206 216 225 231 236 241 242 242 242 242 236 232 231 230 227 225 219 214 210 209 212 212 212 210 212 211 210 206 206 204 198 195 185 174 161 149 137 124 110 112 117 124 129 133 139 143 150 156 164 165 164 161 159 157 155 155 155 156 155 154 155 157 157 159 161 163 165 167 169 163 154 145 140 140 139 138 135 134 132 126 121 115 114 119 125 128 128 128 128 122 117 111 109 109 109 110 111 111 112 114 115 115 116 117 118 119 120 120 121 119 118 117 114 113 110 110 115 121 126 126 127 128 123 120 116 113 113 114 116 122 130 135 140 139 142 144 147 151 156 157 162 163 166 169 173 172 164 156 153 158 163 170 169 169 170 174 182 193 201 205 209 209 208 205 204 205 212 217 223 225 225 226 222 219 212 206 204 201 198 191 185 182 178 177 175 173 173 173 170 166 161 155 156 159 162 160 155 148 142 140 137 134 128 122 117 114 115 114 115 114 114 112 114 116 116 113 105 98 92 88 83 79 75 71 67 65 63 62 61 59 58 57 56 54 53 52 52 52 50 48 45 42 42 42 42 43 45 47 49 48 48 49 48 47 46 50 55 59 60 58 56 54 54 
+75 76 77 78 78 72 66 60 61 66 71 74 66 59 50 48 46 45 47 50 52 56 59 62 64 68 74 79 80 80 79 76 68 59 49 55 62 71 74 75 77 75 71 65 60 58 56 53 51 50 49 48 49 50 50 50 49 49 51 55 57 59 59 58 58 58 57 55 56 58 59 60 59 58 57 56 56 56 58 62 65 66 63 60 58 55 52 48 49 50 52 53 51 50 47 48 48 48 55 65 73 81 87 94 98 96 95 94 94 93 93 90 84 77 75 83 93 101 103 105 107 111 113 115 117 114 111 109 110 110 110 115 125 134 142 141 144 146 146 142 140 146 152 158 164 167 169 170 173 173 177 178 181 180 179 181 181 182 186 188 195 196 194 193 193 192 194 195 197 200 199 204 208 213 217 219 220 225 230 230 238 233 228 223 217 211 204 199 191 186 181 180 182 184 191 203 216 228 236 245 253 253 253 254 251 251 249 246 240 237 231 226 219 212 210 213 213 215 215 218 220 216 216 214 211 204 198 191 175 160 146 132 119 106 108 118 129 136 140 142 147 155 162 172 174 174 172 171 170 168 166 168 168 170 171 173 173 175 175 176 178 178 177 177 170 161 152 147 144 142 142 140 140 141 135 129 122 123 130 137 144 141 143 142 136 131 126 124 125 125 124 126 125 124 125 125 127 127 127 128 129 128 130 131 130 128 125 125 125 122 124 130 139 146 145 144 142 139 137 134 131 134 138 140 149 157 169 171 172 172 172 175 177 177 177 177 177 178 178 179 175 168 162 157 165 170 177 179 183 184 186 192 198 201 196 193 189 185 178 172 176 188 199 211 211 212 211 209 201 195 190 187 185 181 175 167 161 160 161 162 164 168 170 171 166 162 157 158 156 156 152 148 145 140 140 136 132 131 130 129 128 130 129 128 126 126 124 123 122 118 112 103 92 85 81 77 73 69 66 62 61 61 61 62 62 63 64 60 56 51 50 50 49 48 45 41 38 40 42 45 47 50 52 54 55 57 59 60 60 62 64 66 67 68 70 72 73 69 
+72 72 71 70 69 62 55 46 46 50 55 57 54 51 48 46 42 40 42 47 51 56 64 71 78 74 72 70 68 66 64 64 64 64 62 66 69 74 75 74 74 73 69 66 63 62 60 59 59 57 55 55 55 56 56 54 53 51 53 58 63 66 65 62 60 59 57 56 57 60 63 64 67 67 68 65 61 57 59 62 65 66 63 59 57 59 62 64 67 70 74 76 76 75 75 77 77 77 79 83 85 88 90 92 95 95 94 94 92 91 90 85 79 72 67 72 78 83 83 83 81 86 94 103 109 108 106 105 106 106 106 110 117 125 129 129 129 130 131 129 129 131 135 141 146 150 154 159 168 173 179 186 193 200 202 198 194 190 191 191 192 194 196 200 203 207 212 214 213 212 212 215 223 231 234 237 241 242 243 248 246 246 243 243 242 238 233 229 225 220 216 209 203 197 199 209 215 225 232 238 248 250 252 254 254 253 254 250 245 239 234 229 224 220 219 222 225 228 223 221 222 219 215 213 210 207 204 198 186 176 163 153 141 129 128 132 135 137 136 137 138 148 158 172 173 173 173 171 166 162 158 161 164 167 171 173 175 177 178 179 179 175 174 171 163 158 149 144 141 139 137 141 145 149 144 139 133 134 144 156 163 164 159 157 154 148 142 142 143 144 146 142 138 133 135 136 137 138 136 137 137 138 139 140 138 136 134 134 135 137 140 150 160 167 165 163 160 157 153 151 150 154 160 161 172 185 196 201 199 198 199 198 196 193 190 189 187 184 181 178 173 169 164 159 164 168 171 173 175 177 181 185 190 194 189 184 179 172 163 156 156 169 179 189 192 193 193 185 179 170 165 161 158 152 139 126 110 116 125 132 137 142 145 149 151 152 151 147 144 135 136 136 137 138 137 135 133 134 136 137 136 135 133 130 128 125 123 118 112 106 97 88 79 72 71 70 70 70 70 72 71 70 69 68 67 67 66 63 58 54 51 49 47 44 42 38 36 41 47 52 55 57 57 59 62 65 68 70 71 73 73 72 71 72 73 73 73 68 
+72 72 66 62 58 56 53 50 52 57 63 64 57 51 44 44 43 41 43 45 48 52 58 64 71 68 64 60 58 57 55 55 61 66 71 73 74 75 74 73 71 69 69 68 67 66 65 64 65 65 66 66 68 69 70 69 67 66 65 65 66 67 68 70 72 70 69 67 68 69 70 72 73 74 75 73 70 68 67 67 67 66 63 60 59 63 68 73 78 82 87 91 93 95 97 100 103 105 103 99 97 94 90 87 85 87 89 90 88 83 80 78 77 75 73 67 62 58 55 52 49 57 71 86 98 103 109 114 117 118 122 126 131 136 140 138 135 132 131 130 130 135 140 146 151 156 161 165 171 179 186 194 203 209 214 213 210 211 211 211 210 213 216 217 218 220 223 226 223 220 217 219 222 226 231 239 249 254 252 254 255 254 254 255 254 253 252 251 248 245 242 235 223 215 208 214 214 220 228 236 245 247 248 254 253 251 253 249 246 239 235 233 231 229 230 233 234 237 231 229 223 221 217 214 211 209 207 203 195 189 180 172 162 153 148 145 142 139 136 134 131 144 155 169 171 173 174 171 166 160 156 159 166 169 174 177 182 186 184 187 189 183 178 174 165 159 148 145 142 141 139 146 153 160 155 148 141 145 156 169 181 178 175 175 172 166 161 160 164 168 170 163 156 149 150 151 153 153 151 148 145 146 146 146 143 141 139 141 147 152 158 164 168 174 172 169 165 163 162 163 163 167 173 177 185 195 201 202 204 205 207 202 202 200 195 190 185 180 176 171 167 165 163 161 160 158 156 156 156 158 160 168 178 184 180 176 172 162 150 140 139 148 158 169 171 173 174 170 162 155 148 145 143 137 124 114 104 111 118 128 131 134 132 133 136 140 143 139 134 130 126 126 124 123 123 122 123 123 122 123 121 116 110 106 103 102 100 92 86 78 73 65 60 56 59 63 68 72 77 81 81 79 75 73 72 70 69 65 61 56 54 52 50 47 44 39 35 40 44 50 52 54 56 58 61 65 67 68 67 67 68 68 69 68 66 62 58 56 
+67 66 62 58 53 53 54 54 57 62 67 68 61 53 44 43 43 43 44 45 45 47 49 50 52 53 52 52 52 52 52 53 55 58 61 61 63 64 65 67 67 69 73 74 77 76 77 76 77 78 79 79 80 81 81 80 78 76 74 73 70 70 73 78 81 80 80 79 79 80 80 80 79 80 80 81 83 84 79 74 68 65 65 65 64 66 67 69 71 73 75 76 77 77 77 81 83 85 86 84 83 83 83 83 83 84 86 87 84 78 75 73 74 75 73 66 59 51 48 43 39 47 60 74 87 98 108 118 124 128 133 139 143 147 149 144 138 134 134 133 131 136 145 151 159 166 170 175 181 189 194 200 209 216 222 227 232 235 238 240 241 240 240 236 233 234 233 232 225 221 216 213 207 203 206 225 240 252 254 254 253 251 253 253 250 252 254 252 253 252 250 245 239 234 228 220 216 211 222 227 236 237 243 247 248 244 244 243 243 240 242 240 242 242 243 245 244 246 240 237 235 229 226 221 212 207 199 194 195 196 197 188 180 170 164 159 151 148 145 141 139 149 158 170 172 174 175 176 177 178 181 186 194 200 204 205 209 210 210 208 211 206 205 199 189 173 159 151 150 149 150 160 169 176 171 160 149 151 163 174 185 187 190 191 189 186 181 183 187 193 194 185 177 170 170 171 170 169 165 159 155 154 153 151 149 145 141 146 156 166 175 178 178 180 176 174 169 167 172 173 176 183 188 192 195 200 205 206 209 209 207 205 205 202 197 192 187 183 178 174 170 169 170 169 166 160 156 158 160 162 166 172 181 187 186 184 182 178 170 163 162 167 172 175 178 179 178 177 174 170 167 162 156 152 153 156 159 157 153 149 143 136 127 121 124 127 132 131 126 125 121 117 111 107 109 110 112 113 112 113 108 103 97 93 92 92 90 85 81 77 74 70 66 64 69 73 78 79 82 81 79 76 72 70 70 69 69 66 62 60 59 59 60 58 51 44 35 38 41 45 47 51 54 57 60 64 67 65 63 61 61 63 65 66 62 58 55 55 
+59 60 58 56 53 54 56 58 59 61 63 65 65 65 63 62 62 61 61 61 62 61 61 61 61 59 59 58 56 55 54 54 55 57 57 57 57 56 59 61 65 70 77 83 88 90 92 94 93 93 92 92 91 90 89 85 82 77 79 80 80 80 76 74 72 70 69 66 68 69 70 71 73 74 75 77 78 80 77 72 67 65 67 68 70 70 71 72 70 69 67 66 64 62 61 63 66 68 68 67 68 71 75 80 81 83 85 85 80 76 72 70 71 71 70 69 66 64 63 62 61 63 68 73 80 90 101 111 117 125 132 136 139 142 144 140 138 135 134 136 136 142 149 157 164 171 178 184 193 198 205 210 214 222 227 230 236 241 243 245 247 243 243 242 238 235 237 233 232 226 223 215 209 201 205 219 232 244 239 238 235 236 239 239 241 242 245 249 252 251 252 253 250 248 243 229 220 211 217 224 227 233 238 244 245 240 240 238 242 243 246 250 253 255 252 254 255 253 249 245 241 236 233 227 218 209 197 192 199 207 215 206 196 187 179 172 163 156 155 151 149 157 166 175 180 179 179 185 192 197 202 210 219 226 229 229 232 233 231 230 229 229 226 223 210 191 176 164 163 163 161 170 179 185 177 167 159 160 174 185 196 200 202 208 205 203 200 199 205 209 213 203 194 182 183 180 182 180 173 165 162 161 161 161 160 159 160 162 163 166 168 172 177 180 179 178 177 178 182 185 188 190 191 194 197 199 203 201 198 196 194 195 194 197 197 196 196 195 196 193 191 189 185 181 176 172 164 167 173 179 185 187 190 194 196 195 195 196 192 190 189 186 186 185 186 186 186 186 186 187 184 176 169 164 170 174 180 171 159 146 137 130 123 118 119 120 121 118 115 111 109 111 112 112 114 114 114 112 109 109 105 105 104 102 101 99 96 96 95 95 94 90 87 85 87 89 91 90 86 82 78 73 70 67 68 68 68 66 63 60 60 61 62 61 55 48 41 43 45 46 48 50 52 54 57 61 64 61 57 54 53 57 60 62 61 61 62 61 
+56 57 57 57 57 58 59 60 60 59 59 61 66 72 77 78 79 79 79 79 80 81 81 82 82 79 76 75 71 67 64 64 67 70 72 76 79 81 84 87 89 91 93 95 98 97 99 101 100 100 100 100 97 96 94 89 84 79 80 84 88 86 78 72 64 61 58 54 55 56 58 59 62 65 67 66 65 65 65 65 65 67 69 72 75 80 85 89 84 80 75 71 69 67 64 62 62 61 60 61 61 64 69 73 76 75 74 74 72 72 70 70 71 73 74 76 76 76 77 79 79 79 77 76 79 87 93 102 112 120 129 134 135 135 137 137 137 136 138 138 141 145 154 162 170 177 185 194 200 208 215 220 224 227 231 233 233 236 238 239 240 239 238 236 235 234 233 232 232 231 231 229 227 226 223 222 222 222 212 205 195 197 202 207 214 225 231 237 241 246 247 248 248 250 245 238 232 229 230 228 226 233 240 247 247 248 250 248 249 249 252 252 253 254 252 255 254 254 252 250 249 246 243 241 237 232 226 222 227 232 233 222 209 195 188 181 173 170 173 176 180 185 191 196 199 202 200 205 209 214 221 225 231 238 242 242 242 245 244 243 241 243 244 242 229 214 200 191 184 180 175 179 180 180 178 174 168 173 187 202 215 219 220 225 220 216 212 214 218 224 225 213 201 188 187 188 188 185 178 172 167 168 170 170 173 179 184 180 171 162 156 164 170 179 180 181 185 188 192 195 201 198 199 196 199 199 200 196 194 190 186 191 196 199 200 205 206 206 206 210 206 202 195 187 186 184 179 182 186 191 195 196 196 198 198 200 203 203 202 202 202 203 202 205 203 200 200 202 200 201 198 189 179 171 170 163 159 149 136 124 118 117 119 120 117 114 110 106 101 97 98 105 112 119 119 116 114 112 108 106 104 105 104 105 101 98 93 93 93 94 91 85 78 74 77 81 87 82 76 69 66 66 66 67 68 67 66 64 61 58 56 58 59 60 55 52 49 49 49 49 49 50 50 51 55 58 60 56 51 47 47 51 56 59 61 63 64 63 
+54 55 59 63 65 63 61 59 59 57 56 56 57 58 60 61 62 63 66 67 70 73 78 82 84 84 83 82 81 78 76 76 78 83 86 90 96 101 104 108 112 112 109 107 105 105 106 105 105 104 103 102 98 96 94 90 85 81 80 80 80 79 78 76 73 71 67 63 64 64 63 63 64 65 65 64 63 61 63 64 67 68 71 73 76 83 89 96 92 86 82 78 75 71 68 63 59 54 54 54 55 57 63 68 70 67 62 58 62 66 69 73 75 78 82 84 88 90 91 92 93 92 91 90 89 88 86 86 97 109 120 126 130 132 134 134 131 130 124 118 114 125 139 155 167 173 182 191 198 206 214 219 223 229 231 236 239 240 241 241 242 241 240 238 236 233 234 234 233 231 233 235 237 237 238 232 226 220 211 201 189 191 197 201 207 215 226 234 238 240 246 246 249 249 251 247 246 242 237 235 232 237 243 249 252 253 255 254 255 255 253 253 254 254 255 254 254 253 255 255 255 254 253 250 250 249 251 249 250 251 248 237 222 207 201 192 186 184 192 197 203 206 209 210 214 217 221 222 225 228 231 237 242 244 248 247 249 250 249 249 249 250 249 253 245 232 221 210 205 197 192 191 192 192 189 185 182 188 202 216 228 232 234 236 233 228 223 222 228 233 235 222 212 202 198 195 195 191 185 179 174 178 182 186 187 186 183 179 170 163 160 170 181 193 191 187 186 186 188 192 193 193 194 195 198 202 204 203 203 202 200 205 208 212 213 218 219 220 219 219 216 208 200 191 194 196 200 201 201 203 203 201 199 197 201 206 208 210 211 211 216 217 219 221 218 214 211 210 211 209 206 194 185 178 170 163 155 147 137 128 126 129 133 137 133 128 123 119 114 109 108 112 114 115 115 116 115 113 110 107 104 101 96 92 88 84 79 78 77 77 73 65 58 52 60 69 78 73 64 55 53 59 65 69 69 67 67 65 62 60 60 62 63 65 63 61 59 59 59 57 56 54 52 50 50 50 49 46 44 42 44 49 54 58 60 62 64 64 
+49 50 53 56 59 58 56 55 54 53 53 52 49 47 46 47 48 49 50 53 54 60 67 75 80 82 83 83 86 87 90 91 92 92 92 91 89 90 89 90 91 91 91 92 94 96 97 97 98 97 97 96 93 91 88 86 84 80 77 75 71 72 75 78 79 76 75 72 72 72 71 70 68 67 65 65 64 63 65 67 69 70 71 72 73 77 80 84 85 86 88 85 83 80 77 71 67 61 60 59 59 58 58 58 57 55 53 51 58 64 71 75 79 81 85 85 88 90 90 91 91 91 91 90 89 85 81 77 89 102 115 121 126 130 132 130 129 125 114 102 90 104 126 149 163 170 178 184 193 201 210 214 220 225 230 235 241 246 243 248 246 247 247 244 241 239 238 234 232 233 230 235 239 247 248 245 245 243 241 236 231 229 228 226 226 227 229 231 238 241 246 247 249 248 250 247 248 247 245 246 243 247 250 252 253 251 250 252 253 255 254 255 252 254 254 252 254 253 255 253 255 254 254 251 253 251 253 255 252 250 252 242 236 230 224 218 216 210 206 200 194 197 202 205 211 215 222 226 227 233 234 236 235 235 233 233 235 235 236 237 236 241 242 246 242 233 228 220 217 212 209 213 219 221 217 210 204 206 218 229 241 244 247 247 243 236 232 232 235 241 243 236 226 217 214 208 204 198 193 186 180 190 194 203 197 186 177 171 168 164 166 179 193 206 203 194 187 185 185 185 186 189 192 193 199 202 205 207 209 208 211 213 215 217 219 220 224 221 219 218 214 206 198 190 194 197 204 201 198 191 189 188 189 189 186 181 179 180 180 182 184 190 197 207 206 203 201 199 198 196 195 187 181 176 175 175 175 170 162 155 151 155 159 161 156 149 143 138 132 126 122 119 114 112 114 113 116 113 110 107 102 96 90 85 81 76 71 72 75 78 77 71 67 62 72 82 90 87 81 75 74 77 80 83 79 76 72 71 72 71 72 72 74 74 74 73 72 71 69 66 63 59 54 49 45 42 39 39 39 40 43 48 53 57 57 57 56 56 
+44 43 44 44 45 46 46 47 47 46 47 50 53 55 57 56 55 55 55 55 55 59 64 70 74 77 79 82 85 88 92 92 93 92 91 86 82 77 75 72 70 69 73 77 80 82 85 88 87 86 85 83 82 80 79 78 77 75 71 67 62 61 63 65 65 63 60 58 58 58 57 59 60 61 61 59 56 54 58 61 65 66 66 65 66 68 69 70 75 80 85 86 85 83 81 76 72 67 66 65 64 58 52 47 44 45 45 45 56 66 75 80 81 84 84 81 78 77 76 75 74 73 73 71 73 78 80 85 96 107 118 123 128 132 136 134 134 133 131 127 123 130 142 152 161 167 172 180 186 195 204 210 211 217 222 227 234 238 242 244 245 244 247 249 249 243 241 241 239 240 237 241 246 251 255 253 249 248 249 252 251 249 246 241 240 240 236 238 238 244 248 251 250 249 251 253 251 253 252 255 254 252 254 254 254 253 252 249 252 253 254 255 254 254 254 255 254 255 255 255 255 253 255 255 255 253 255 255 255 255 255 251 248 245 242 239 238 234 217 200 187 193 199 205 212 221 227 232 235 238 238 236 234 230 230 229 228 228 230 229 233 238 240 246 242 240 234 229 229 228 224 229 233 241 235 230 221 220 231 241 250 252 251 252 249 246 241 239 242 246 247 242 234 227 219 213 210 205 200 195 194 198 202 204 198 187 179 175 175 180 183 193 203 216 207 198 187 180 180 177 177 181 187 190 193 196 200 201 202 204 205 207 208 210 208 212 210 207 207 203 200 196 192 186 188 193 197 193 184 176 168 172 174 176 168 157 147 144 144 148 155 167 179 192 191 191 189 189 189 186 183 179 175 171 173 177 180 174 166 157 153 153 155 156 150 145 138 134 131 127 123 122 122 121 118 117 115 111 105 99 94 92 89 86 82 77 73 76 82 88 92 89 87 86 93 99 107 105 100 94 92 92 94 94 88 82 75 74 75 75 76 75 73 72 69 68 66 65 63 63 60 56 52 49 46 44 42 42 44 46 48 51 54 56 52 48 44 44 
+38 38 38 39 40 42 43 45 44 43 42 45 52 59 64 63 61 59 59 58 57 59 61 64 68 71 75 78 78 77 76 76 75 74 72 70 66 62 65 68 70 70 70 69 70 71 73 74 75 75 76 77 77 78 77 75 74 71 66 61 56 54 54 54 54 50 48 45 44 43 42 45 51 55 56 51 46 41 47 53 58 58 56 54 53 53 56 57 59 61 64 66 66 67 67 65 64 62 64 65 67 66 62 58 55 54 52 52 61 69 79 81 81 82 81 77 74 71 69 68 65 64 64 63 66 73 81 88 96 106 115 122 128 134 137 138 140 140 144 149 152 154 154 154 157 162 167 172 182 192 201 203 204 205 209 218 226 233 236 238 240 244 247 251 254 252 251 251 251 250 249 253 254 254 249 246 238 237 239 242 243 245 246 246 249 247 247 248 249 250 251 251 252 250 248 249 249 253 250 252 252 253 252 254 252 254 253 255 255 255 254 252 254 254 252 252 254 255 255 255 255 253 255 255 255 255 255 255 255 255 255 253 252 250 247 243 238 230 215 198 185 196 207 218 226 231 237 244 245 244 247 248 247 246 243 241 238 240 239 242 243 244 244 249 243 240 237 237 238 235 234 236 238 240 238 236 235 234 240 246 250 252 252 252 248 248 243 245 248 250 249 244 239 234 227 219 213 208 208 208 209 208 207 207 198 189 179 179 188 197 206 212 218 222 213 199 185 177 173 170 167 174 179 185 187 188 188 190 193 195 196 199 199 202 201 197 194 191 188 184 181 182 181 181 184 187 192 186 174 160 154 160 169 177 172 169 164 160 160 158 157 163 170 175 178 177 179 179 178 178 175 170 166 161 163 161 164 160 153 144 139 139 139 138 135 132 129 127 127 123 123 126 128 129 125 119 115 109 102 95 92 93 93 94 90 85 81 84 91 97 101 99 98 97 102 106 110 108 103 99 95 95 93 92 86 80 73 70 70 69 68 65 63 60 58 56 54 53 54 55 55 53 51 49 48 47 46 48 50 52 54 54 55 55 51 47 44 45 
+31 32 35 38 41 43 47 49 45 41 38 39 42 45 48 49 50 51 49 47 47 48 52 56 60 66 70 76 71 66 62 61 62 61 60 59 56 54 59 65 70 69 66 64 61 60 59 59 63 67 70 74 78 82 82 76 71 66 64 62 60 59 57 56 54 53 52 50 53 54 55 57 61 64 64 59 55 50 53 57 60 59 56 53 51 53 54 55 55 55 55 55 56 57 58 58 60 60 65 69 72 73 73 71 70 66 62 59 67 75 83 83 80 77 76 74 72 71 69 67 65 66 67 68 69 72 76 80 87 95 102 113 125 136 142 145 146 146 147 147 146 147 149 151 152 153 152 154 165 177 188 192 192 193 195 205 214 219 221 224 226 233 237 243 246 245 246 248 248 251 249 245 245 243 242 241 239 236 240 242 245 246 248 252 251 252 255 254 252 253 255 252 254 251 249 249 250 252 252 252 250 253 253 254 254 254 252 255 254 254 252 254 252 254 254 254 254 254 254 252 255 254 254 254 254 254 255 255 255 255 255 255 255 255 253 245 239 230 217 203 191 202 216 229 236 241 246 249 248 251 251 253 253 255 250 251 249 249 249 250 248 250 250 250 247 245 242 243 245 243 245 243 240 241 243 242 242 245 245 246 247 249 251 250 251 249 247 246 248 248 250 248 242 238 229 220 214 210 211 214 214 215 217 219 217 210 204 206 211 218 220 219 215 213 205 197 189 182 178 172 170 171 173 172 172 171 168 170 175 179 184 188 190 193 188 179 172 169 164 160 157 164 170 177 180 183 187 179 165 152 142 155 167 179 183 186 188 184 178 169 162 164 164 162 165 163 166 167 168 169 169 161 154 149 147 148 145 143 138 133 128 129 128 129 132 132 135 135 133 130 129 129 128 126 122 117 112 110 109 108 107 107 107 108 104 99 96 97 101 104 107 106 107 106 108 111 113 112 106 102 99 97 94 92 85 81 76 73 72 69 68 65 63 61 58 55 51 51 52 53 55 56 58 60 59 59 58 58 59 59 59 58 56 56 54 52 51 52 
+36 36 37 38 40 44 47 50 47 43 39 37 36 36 36 38 41 43 39 36 33 36 41 46 52 60 66 72 64 57 50 51 56 60 63 65 67 68 69 70 71 69 65 61 59 58 57 55 60 64 68 72 77 82 82 78 72 68 67 66 65 63 61 57 55 56 56 56 61 65 69 71 73 75 75 72 70 67 68 67 67 66 65 63 63 66 68 71 70 69 68 68 69 70 72 76 79 83 84 86 88 89 90 91 90 85 82 79 82 86 89 88 86 82 81 80 79 77 72 67 62 64 67 71 73 73 74 75 79 84 88 102 117 133 142 144 148 150 145 144 139 142 145 148 146 144 139 138 150 162 174 175 180 179 184 189 197 204 203 209 211 214 224 229 235 237 240 237 241 239 239 234 230 225 227 235 241 251 250 251 251 252 252 251 253 255 254 254 254 254 254 254 253 255 253 253 253 254 254 254 255 254 255 254 254 254 251 252 250 251 251 251 253 251 251 251 253 252 251 252 255 254 254 252 254 255 254 255 255 253 255 253 255 255 251 247 240 233 230 226 221 224 229 235 238 236 236 238 245 248 253 253 251 254 251 253 252 252 254 251 253 252 252 253 252 251 250 252 250 250 250 248 246 243 244 248 247 245 244 240 237 242 247 254 249 248 246 245 247 249 251 248 246 239 235 224 215 209 212 212 218 223 226 235 235 234 236 235 238 234 234 225 215 205 200 196 191 188 183 180 174 173 167 166 162 158 153 154 161 167 172 177 179 182 177 169 162 159 158 160 162 171 180 188 193 194 199 192 186 175 170 180 186 193 198 200 206 203 196 188 181 175 170 166 163 163 162 160 159 157 156 147 139 130 129 128 127 126 124 123 122 123 124 123 129 134 141 143 140 137 134 131 128 124 121 116 111 111 115 116 116 112 108 105 99 96 91 93 97 101 105 103 102 100 103 106 107 106 105 103 101 99 97 94 92 91 91 88 85 80 77 75 72 70 65 60 54 52 52 53 54 60 65 69 68 67 65 64 62 59 57 55 53 51 50 49 48 48 
+44 43 41 40 40 42 45 48 49 48 48 45 42 40 39 41 44 47 46 44 42 45 52 57 61 65 70 72 63 54 46 47 52 56 62 67 72 76 74 71 70 67 64 60 59 57 57 56 60 63 67 71 75 78 81 80 78 77 75 73 71 67 63 58 57 59 59 61 63 65 67 69 70 73 74 73 72 71 70 69 69 67 66 66 67 70 73 76 77 77 77 78 79 81 84 91 97 102 102 103 102 104 108 111 111 107 103 100 98 95 94 94 93 92 92 90 90 87 76 65 55 59 65 71 75 75 75 75 75 74 74 86 99 115 122 127 128 130 129 129 127 134 139 146 151 153 157 161 169 178 185 188 192 193 195 200 199 203 204 205 207 211 217 223 229 228 230 233 232 229 230 229 226 222 225 231 232 241 244 247 251 254 254 254 255 254 255 253 248 246 246 248 251 252 255 253 255 255 255 253 255 251 249 248 246 248 251 252 251 250 249 249 247 249 249 250 252 251 252 251 255 254 254 254 254 255 252 255 255 255 255 254 254 254 249 249 243 240 242 243 247 242 243 242 241 235 231 230 234 242 248 249 250 251 251 252 253 255 251 250 249 248 250 251 252 251 255 252 254 254 254 248 244 242 245 246 250 248 243 238 233 239 246 254 250 251 246 244 248 252 251 245 243 238 233 229 230 227 227 228 230 230 231 231 231 235 234 235 237 236 235 230 222 215 213 212 213 210 204 200 192 188 181 176 171 167 160 159 160 163 165 167 169 171 168 165 160 163 171 181 190 196 202 209 213 213 217 215 214 212 209 209 211 210 214 219 224 223 215 205 198 191 180 170 166 163 159 156 153 151 148 141 134 127 126 126 126 125 123 122 122 122 121 120 127 134 142 144 141 140 137 133 129 125 121 118 115 112 111 109 105 96 87 76 74 72 71 75 83 92 97 96 95 92 95 98 101 101 102 103 102 99 98 95 97 99 101 98 93 88 83 81 78 75 70 63 57 54 53 51 51 53 56 57 55 53 52 50 47 45 42 42 43 42 41 40 39 41 
+39 39 38 38 40 44 48 51 51 52 53 50 46 42 41 45 48 51 51 52 52 58 65 72 75 76 75 74 66 59 51 48 48 47 49 54 58 61 59 57 54 55 55 55 56 55 55 55 56 57 59 63 67 72 75 77 78 79 78 76 74 69 64 59 58 60 63 65 65 64 64 66 68 70 71 70 68 69 67 67 65 65 64 63 63 64 66 68 70 73 76 79 82 85 88 93 96 100 99 98 97 101 106 111 111 109 106 105 102 100 96 94 93 91 89 86 84 80 70 58 48 54 62 71 76 77 80 79 77 73 70 79 91 104 111 112 114 117 119 122 123 132 138 147 154 164 173 184 187 193 197 201 205 209 210 209 208 207 206 206 206 209 213 218 220 222 226 228 225 223 220 224 229 234 229 222 214 211 223 236 251 253 254 254 254 254 251 250 241 236 229 234 241 253 255 255 253 255 255 255 255 243 232 222 223 232 246 255 253 252 252 254 252 252 254 252 253 253 253 251 251 251 252 254 254 254 254 255 255 255 255 254 253 255 252 250 249 249 247 247 247 247 249 249 245 241 238 233 233 235 233 235 237 242 242 243 248 251 246 243 241 241 242 243 244 251 252 255 252 254 255 250 243 239 238 243 245 246 244 241 240 242 246 252 252 250 246 247 249 251 252 245 239 232 234 238 246 250 248 246 245 239 232 226 225 226 228 229 231 234 235 232 227 225 224 228 230 230 222 217 209 201 193 186 179 173 170 165 164 163 163 162 163 160 164 164 166 174 184 198 207 209 216 218 220 223 225 226 229 228 228 229 225 226 224 228 229 228 222 216 209 199 188 178 171 167 161 157 155 153 150 146 143 141 140 140 140 138 135 130 124 123 119 118 123 132 141 144 143 143 140 135 131 127 124 122 120 116 113 109 105 96 87 80 79 80 80 83 90 95 100 98 95 93 92 90 89 88 90 91 92 93 94 95 96 98 98 97 95 91 88 85 81 77 72 67 61 57 54 51 48 47 47 46 46 46 45 44 43 41 40 42 43 44 44 44 43 44 
+32 33 35 37 41 48 54 59 56 54 52 48 45 42 42 48 52 55 51 47 44 49 55 61 65 67 68 68 62 56 50 49 48 46 46 48 50 52 48 45 42 44 47 50 52 53 53 53 51 49 47 52 58 63 67 69 71 74 74 75 74 68 61 54 53 56 60 62 60 58 56 59 62 64 67 68 70 70 69 69 67 66 65 63 63 64 65 65 69 72 75 79 83 87 91 92 95 97 96 94 92 97 103 110 111 110 109 106 103 100 97 93 89 85 80 75 69 63 57 50 42 49 58 67 74 80 85 89 88 87 85 93 100 108 114 116 118 121 134 145 155 162 170 177 183 188 192 198 202 201 205 204 207 207 208 212 212 213 215 216 214 217 220 224 226 227 230 231 230 228 225 226 225 224 220 216 213 213 226 238 253 253 252 254 254 252 251 249 238 230 219 226 234 242 246 247 250 248 250 248 246 236 224 213 215 232 244 254 254 255 254 254 253 251 253 254 254 254 255 253 250 255 253 254 255 252 254 255 255 255 255 254 253 252 252 251 255 254 254 255 251 252 254 252 249 245 241 236 234 230 227 232 233 236 240 245 246 249 244 241 237 240 242 241 246 248 252 254 254 254 254 249 241 236 235 237 240 242 240 242 244 245 248 251 251 251 250 252 253 254 252 247 241 234 237 242 249 251 251 250 248 243 236 228 226 227 225 227 232 235 241 237 239 236 233 234 233 229 222 215 207 199 192 182 180 177 174 171 169 171 167 166 161 157 163 169 175 183 195 205 214 218 218 219 224 227 231 234 236 238 240 239 239 236 238 237 234 234 229 225 219 207 195 183 175 170 167 163 161 160 158 156 155 151 151 149 147 145 139 132 127 127 125 124 130 135 141 143 145 145 145 140 137 134 132 130 129 127 125 123 122 122 120 121 118 115 110 109 109 108 106 103 99 96 90 84 76 74 78 82 85 88 91 94 95 97 98 98 95 91 87 84 79 75 72 69 65 63 62 62 61 61 61 60 60 60 59 59 57 57 57 57 56 55 55 54 53 53 
+36 38 40 42 44 48 52 55 53 51 49 47 45 43 45 50 55 58 49 42 34 36 40 44 48 52 55 57 53 48 42 48 53 58 60 60 59 59 56 53 50 50 50 51 51 52 52 53 50 48 45 49 54 59 62 63 64 65 66 67 69 63 57 49 48 52 56 59 56 52 49 51 55 60 63 68 72 74 73 72 71 69 68 67 66 67 69 70 71 71 72 76 80 83 85 87 88 88 89 87 87 86 87 87 88 89 89 90 90 90 90 88 85 83 80 77 73 69 63 56 49 55 61 68 74 82 89 96 98 99 102 107 113 118 122 126 127 133 149 165 180 188 197 205 208 209 211 209 212 213 213 212 207 203 205 210 217 219 223 223 225 228 231 235 237 239 243 242 241 239 238 225 211 198 200 212 223 232 240 247 254 252 254 252 255 254 255 251 244 234 224 225 222 222 225 231 232 233 232 230 229 230 229 231 236 244 248 254 254 255 255 254 253 253 253 253 251 253 251 253 253 253 253 255 255 254 255 253 255 253 255 252 254 252 255 254 255 255 254 254 254 251 247 246 244 246 246 245 243 241 241 244 244 246 246 251 251 251 248 248 247 248 249 250 251 254 252 251 251 254 252 247 243 235 235 234 236 233 237 238 242 244 246 246 248 251 252 253 253 253 253 250 247 244 246 246 247 248 249 249 249 243 239 231 230 226 224 226 233 242 246 246 246 243 244 239 235 229 221 211 204 199 193 186 184 185 182 180 177 174 172 166 165 162 170 180 189 200 209 217 225 226 223 222 226 232 240 242 243 244 245 240 240 237 236 237 235 232 227 219 212 200 190 176 175 175 174 175 178 179 176 171 165 157 153 150 148 146 141 135 131 132 133 134 137 139 142 146 146 148 151 147 143 139 136 136 135 134 135 133 132 134 136 137 134 129 124 118 113 108 102 101 100 100 95 93 88 88 91 93 95 95 93 91 94 98 103 102 95 89 81 78 74 70 69 69 69 70 72 73 75 74 73 72 70 69 69 67 66 64 63 61 59 58 56 55 53 52 
+43 45 46 49 47 45 44 44 44 45 45 47 48 50 49 50 51 50 44 38 31 36 40 45 47 49 51 52 50 48 46 51 58 65 67 65 63 62 60 58 56 54 53 51 50 51 52 52 51 48 47 51 54 59 60 58 57 56 55 53 53 51 48 44 44 45 47 49 48 48 47 50 53 57 61 65 69 72 70 66 63 62 61 60 61 63 65 67 68 68 69 73 78 82 83 83 84 84 84 84 83 77 71 64 63 66 69 72 75 79 81 82 82 82 83 85 86 86 79 73 68 68 69 71 77 85 93 100 105 111 116 123 129 136 141 146 151 157 163 173 181 187 192 200 199 195 192 190 191 188 186 184 183 178 180 187 192 199 202 204 207 212 217 219 221 223 224 226 224 225 225 216 209 201 205 213 222 230 235 236 240 240 244 244 248 249 251 250 247 239 234 229 225 220 221 227 228 230 229 225 224 231 238 246 249 249 251 254 252 254 255 254 253 253 253 254 252 250 251 254 254 253 251 252 250 253 254 254 254 252 254 252 254 254 255 255 253 254 252 254 254 250 245 241 243 247 248 249 248 247 248 247 247 250 248 249 251 251 251 250 250 249 253 254 254 255 253 253 253 253 253 248 244 237 233 230 226 224 231 235 243 244 247 247 249 251 255 254 254 252 254 252 251 249 249 249 250 250 252 249 247 242 239 235 232 232 233 233 237 236 235 236 236 233 229 223 218 215 210 206 203 204 200 201 199 198 196 192 183 174 165 170 176 181 192 200 211 220 226 234 240 233 228 225 226 239 247 252 253 250 248 246 239 234 233 234 234 231 222 214 205 197 185 176 175 177 180 184 185 185 185 176 168 158 154 149 146 141 133 127 120 125 130 134 134 134 133 133 131 132 133 132 131 130 132 133 137 136 134 133 130 129 130 130 128 125 124 119 110 102 94 96 99 102 102 101 100 101 102 103 104 98 93 89 92 96 102 102 94 86 79 77 74 73 73 72 71 71 71 71 71 68 64 60 60 61 63 64 60 56 53 53 53 53 52 50 47 46 
+46 47 47 49 46 43 40 38 39 40 41 44 47 51 51 48 46 43 39 34 30 36 43 50 51 49 49 49 53 56 59 60 63 64 62 59 55 52 51 49 47 49 50 51 52 54 55 55 54 52 51 53 56 58 59 58 57 55 53 51 49 48 47 46 45 44 44 43 44 44 46 49 52 55 58 63 66 68 62 57 52 51 49 48 49 51 54 57 59 63 65 72 79 86 89 92 92 93 94 93 94 90 85 80 80 80 81 83 85 88 91 89 86 84 85 87 90 91 85 79 73 74 74 74 80 89 98 105 114 120 127 135 142 149 156 160 166 169 171 171 172 177 182 188 186 180 175 169 166 164 162 158 155 151 154 160 167 173 177 182 188 191 192 194 197 196 199 200 200 200 199 207 212 219 219 217 212 210 211 214 214 219 223 231 233 237 243 248 245 246 243 241 240 236 238 239 242 244 243 240 244 245 248 249 250 252 252 252 253 253 252 255 252 254 254 255 254 253 253 253 251 253 251 253 253 251 253 253 253 253 254 254 254 254 255 253 255 254 252 253 251 250 247 244 243 246 245 245 242 244 239 241 241 241 242 244 244 245 246 246 249 247 251 254 254 254 255 253 255 253 253 251 245 243 234 223 214 214 222 234 243 246 245 246 248 252 252 254 252 254 252 254 254 253 253 251 253 250 251 252 250 244 240 236 237 240 242 242 237 232 227 225 223 221 218 210 203 199 199 199 199 202 206 208 209 208 208 200 188 177 165 175 187 195 208 215 224 228 234 240 242 238 230 226 228 235 245 250 250 250 249 245 242 240 236 236 237 230 225 218 211 199 189 177 176 179 177 179 177 175 175 169 162 159 152 146 142 133 123 114 104 112 121 129 129 126 122 119 118 115 114 116 121 122 126 130 135 135 132 128 127 126 124 123 121 120 119 114 108 100 95 95 96 96 96 95 94 93 93 94 94 91 89 88 90 94 97 98 92 85 79 80 79 79 79 75 73 72 70 68 66 61 56 51 53 57 60 62 59 57 54 53 54 53 52 49 47 46 
+49 48 47 46 44 41 39 38 36 36 34 37 40 42 43 43 44 43 40 38 36 40 44 49 50 49 49 50 53 57 60 59 58 58 55 53 50 47 45 43 41 44 48 51 54 56 58 59 57 56 55 55 56 56 58 60 62 64 64 64 64 64 64 63 64 65 67 67 64 62 60 58 57 55 57 62 66 68 63 59 55 55 55 55 54 52 51 53 57 63 67 74 81 89 93 94 98 99 100 101 102 100 99 96 95 95 94 95 98 101 104 98 93 87 86 88 90 90 83 77 70 73 75 78 85 94 104 112 119 126 131 140 146 154 157 156 155 152 145 139 132 136 142 147 150 148 147 147 151 155 156 158 160 161 164 167 172 176 178 181 182 186 189 192 195 198 199 202 205 206 209 217 224 235 234 228 224 219 219 217 219 223 228 235 237 240 244 247 246 249 250 248 246 245 245 244 248 247 247 248 248 249 250 253 251 250 249 249 251 250 252 254 254 254 255 255 255 254 254 255 251 255 251 252 251 250 247 250 250 251 253 253 254 255 253 255 255 254 252 255 250 252 248 246 245 247 247 244 243 242 239 238 239 238 238 239 240 242 239 237 235 237 238 240 245 246 251 254 254 254 254 250 245 243 237 228 220 219 227 236 245 243 244 244 247 246 247 248 246 248 249 248 252 251 252 253 253 252 251 250 246 246 243 240 240 239 242 242 239 236 233 231 225 220 216 210 203 198 194 191 189 194 197 200 204 205 207 204 193 184 172 186 197 208 218 222 229 234 234 238 240 237 230 227 228 235 240 246 247 248 249 247 244 240 238 237 237 234 230 223 217 205 194 181 178 176 177 175 170 167 164 160 153 149 144 139 134 128 122 116 110 117 123 129 127 124 119 117 119 119 119 119 119 120 121 123 124 126 124 123 122 121 118 117 115 112 109 106 103 99 97 95 92 90 88 87 87 86 86 85 86 87 87 88 89 90 91 90 86 82 78 80 80 81 78 73 68 65 65 66 66 67 67 68 68 68 67 67 67 67 67 65 61 58 54 51 49 46 
+47 47 48 48 45 43 40 37 37 36 35 35 36 38 39 41 43 44 43 41 41 43 46 48 49 50 51 51 52 53 53 49 46 42 44 47 50 51 51 50 50 51 53 54 57 59 61 62 59 57 55 55 55 55 54 56 58 60 64 67 70 71 72 72 76 79 83 84 79 76 72 66 60 54 56 61 67 69 67 66 63 67 70 73 70 64 58 57 65 72 80 84 86 90 91 92 93 93 89 85 81 84 87 89 88 87 85 84 84 84 86 87 87 88 89 92 95 96 93 90 86 88 89 91 95 101 107 112 118 124 129 136 142 149 149 146 140 135 124 114 102 107 110 114 118 123 126 130 137 144 153 160 166 171 177 180 181 184 184 183 183 188 190 194 199 205 211 217 222 227 230 239 242 246 249 247 245 242 244 244 243 244 245 250 249 250 251 252 252 252 252 250 248 246 245 245 245 244 243 242 239 242 245 244 244 246 245 246 248 251 254 254 255 254 255 255 255 254 254 252 254 252 251 249 244 242 237 237 244 247 251 252 255 254 253 255 253 254 254 254 254 250 251 249 249 250 252 250 252 249 248 246 244 242 241 240 236 233 228 220 212 214 215 216 224 235 247 254 254 254 254 251 248 245 241 237 234 235 236 241 245 245 243 239 240 240 239 237 239 242 239 244 248 252 253 252 252 251 250 251 248 247 247 246 243 244 241 238 240 241 240 233 227 222 215 210 201 195 190 186 180 186 193 199 204 210 212 211 203 195 185 197 206 216 223 225 228 230 230 231 229 229 228 226 229 234 239 243 244 248 250 247 248 247 245 244 242 239 235 228 223 211 200 190 183 181 178 174 168 165 159 149 142 134 130 129 126 124 124 124 124 127 128 130 129 122 119 115 119 121 123 120 117 115 115 114 115 114 114 113 112 110 110 109 108 105 102 101 95 90 83 86 89 94 95 94 92 91 94 95 96 93 91 88 86 82 79 76 76 76 77 79 79 80 76 69 62 58 60 63 65 70 75 80 79 75 70 67 67 67 67 62 57 52 49 47 44 43 
+44 46 49 51 48 44 41 40 40 41 41 41 41 41 43 46 50 49 46 44 41 41 41 42 43 44 45 46 46 47 47 45 42 38 41 46 50 54 54 55 56 57 58 58 59 63 65 65 62 58 55 54 53 53 50 46 44 45 51 57 63 63 64 65 67 70 72 73 69 65 62 62 62 62 63 66 68 70 68 67 67 70 74 78 75 70 66 65 73 81 89 89 90 91 90 89 89 86 79 71 65 70 76 82 81 78 74 69 68 65 63 72 80 88 93 99 102 105 110 112 114 112 113 113 110 107 104 105 111 117 121 123 123 124 122 118 116 113 115 119 120 123 125 129 135 139 143 147 150 152 157 159 158 158 161 165 169 173 177 179 184 190 194 197 205 212 220 226 232 239 243 246 249 253 255 254 253 253 255 254 255 255 255 255 253 255 253 254 254 252 254 252 250 248 247 247 244 247 244 244 241 242 242 243 243 244 245 246 250 251 254 255 252 254 255 255 255 253 255 255 255 251 248 243 242 235 231 226 235 240 248 248 252 252 255 255 255 253 255 255 255 254 253 250 255 253 254 254 252 255 253 251 251 246 243 238 234 227 218 208 199 204 207 212 219 234 246 255 255 255 255 250 249 246 242 242 238 239 241 243 245 244 244 241 239 238 238 235 234 233 231 238 240 245 246 246 246 244 245 246 243 240 241 240 240 240 238 238 238 238 234 226 222 216 209 200 192 183 183 185 185 196 202 214 221 223 226 227 222 218 212 217 218 221 220 221 221 223 221 216 217 220 226 226 230 237 238 241 244 248 251 251 251 249 252 250 246 243 238 232 228 214 204 193 187 182 179 176 172 166 163 156 148 141 141 140 143 144 138 131 126 128 131 137 135 129 122 117 115 113 111 107 104 100 99 101 103 103 99 95 90 92 96 98 99 98 98 97 86 76 65 76 88 100 104 102 97 96 98 100 101 97 93 89 84 79 73 70 72 75 76 75 73 70 66 62 58 56 59 61 64 67 69 70 70 65 61 58 55 53 50 47 44 42 40 39 38 37 
+52 50 50 49 48 46 44 43 43 43 43 43 42 42 45 49 53 53 50 46 41 38 37 35 35 36 38 39 39 40 40 43 46 48 49 50 52 52 51 51 51 56 61 65 70 73 77 79 77 75 75 74 72 72 66 58 52 49 54 59 64 62 61 60 61 64 65 65 60 55 52 58 64 70 71 71 70 70 69 68 67 69 70 73 73 73 74 75 80 87 93 92 92 92 90 88 86 82 78 74 69 71 72 74 74 73 73 72 74 76 77 80 84 89 94 99 105 109 109 110 111 111 112 111 110 107 103 100 102 103 105 106 107 108 107 105 103 105 113 122 131 133 137 141 145 150 155 160 160 159 160 155 150 145 147 151 155 160 169 178 187 192 197 205 212 221 228 235 240 245 250 251 252 254 254 255 254 254 255 254 255 255 255 255 255 255 255 254 254 255 254 255 253 255 252 252 251 251 250 248 250 250 250 250 251 251 251 251 254 253 254 252 254 254 255 255 255 255 255 255 255 251 244 241 236 228 224 221 228 235 242 245 249 253 255 255 255 255 255 255 255 254 254 254 255 254 255 254 254 252 254 252 253 249 245 238 232 225 214 203 193 203 216 228 237 244 250 255 255 255 255 254 250 248 245 242 239 237 239 242 241 241 243 241 240 240 236 233 230 226 222 227 232 237 239 241 239 238 236 237 239 237 236 234 237 238 239 239 236 233 229 221 217 212 202 192 182 177 181 184 190 201 212 225 228 229 232 231 226 221 219 218 218 216 217 218 218 214 216 216 217 222 226 234 237 236 239 243 242 242 247 246 247 245 245 241 237 233 228 224 220 210 200 191 187 185 185 184 183 181 180 175 170 168 168 170 173 173 155 138 120 127 136 144 142 136 127 118 112 106 101 97 95 91 92 96 99 100 96 92 89 94 100 106 111 110 109 107 97 90 82 88 98 107 108 101 96 90 89 87 86 85 85 85 84 79 76 74 74 75 74 70 63 56 53 53 54 56 58 60 63 64 63 63 61 58 55 53 49 45 41 41 41 42 42 42 41 41 
+59 55 50 46 47 48 49 47 45 43 42 41 40 40 41 42 45 47 52 55 56 51 47 43 41 41 40 40 40 40 41 44 48 52 52 52 51 50 48 46 46 55 63 71 78 84 89 94 96 96 98 100 101 101 95 85 75 71 72 74 74 69 66 61 63 66 70 69 64 60 57 63 69 74 74 73 72 72 76 79 83 84 85 86 85 84 83 84 87 90 94 94 93 93 91 88 83 80 77 76 73 71 69 67 68 70 72 76 83 89 95 93 91 90 94 100 107 109 103 98 92 93 95 97 98 100 102 100 93 86 80 90 99 107 114 118 123 124 122 121 120 121 125 128 128 127 124 124 129 133 136 136 135 135 132 129 127 130 146 165 179 190 199 208 215 224 232 239 243 248 252 252 253 251 253 251 251 251 248 248 247 251 249 249 249 247 248 246 247 247 247 247 248 249 249 250 250 251 252 253 255 254 254 255 254 254 255 252 254 254 253 253 255 255 251 252 250 248 246 249 244 245 240 237 232 228 225 220 228 233 241 243 249 251 255 254 254 254 254 255 253 255 253 255 255 255 253 255 255 253 253 252 249 245 244 237 231 227 218 211 204 215 226 237 243 247 251 254 254 254 255 252 250 246 246 242 242 241 241 243 239 237 235 235 232 229 228 223 221 216 213 218 223 228 230 230 228 230 232 233 233 233 230 230 232 232 234 235 230 225 221 214 207 200 194 190 184 182 186 188 195 205 213 223 224 220 217 211 207 204 201 203 207 208 209 211 212 215 217 221 225 232 237 241 243 242 242 243 240 239 238 240 241 243 240 232 225 220 218 212 210 202 193 187 183 188 189 190 190 190 190 185 179 177 176 179 182 180 165 150 136 140 146 152 152 144 136 132 132 131 130 125 117 111 109 111 113 113 114 113 113 120 127 134 135 132 129 123 118 111 105 107 112 115 111 102 93 84 82 79 76 78 79 82 81 78 75 74 73 73 73 67 59 51 49 51 54 57 60 62 65 63 61 57 55 54 55 54 51 46 43 43 46 49 50 49 48 46 
+50 47 44 41 44 48 51 49 45 42 39 41 42 42 42 42 41 44 53 62 68 63 58 52 50 47 45 44 44 44 44 46 48 50 50 50 49 48 46 43 43 48 54 59 67 75 83 88 88 90 92 97 101 105 101 95 91 87 87 86 85 78 73 66 69 73 77 77 72 67 62 68 74 79 78 74 71 74 85 94 102 104 106 107 104 99 94 92 92 92 93 93 93 94 92 90 88 85 81 78 74 76 78 79 81 84 85 88 90 92 95 95 94 93 98 104 111 112 110 105 101 101 101 101 101 103 105 102 94 85 79 88 98 109 117 125 131 133 125 116 109 113 117 121 116 107 100 96 102 109 115 118 121 125 117 106 95 97 125 149 176 188 199 211 220 228 236 240 246 250 253 251 251 246 248 246 246 245 244 242 240 240 240 240 239 238 237 236 235 234 232 234 234 238 240 241 243 245 249 252 253 254 254 253 253 253 254 254 252 254 255 255 253 255 250 244 238 231 228 225 224 227 234 240 240 238 237 236 240 247 249 253 253 254 255 253 252 251 252 251 255 253 253 253 255 255 255 255 253 255 255 249 241 237 234 232 231 231 232 233 233 235 236 237 240 244 249 252 251 254 254 252 249 246 246 247 249 249 247 244 242 237 231 226 221 217 214 209 209 205 204 208 213 217 220 220 221 222 226 230 233 228 227 221 223 226 229 231 224 218 213 205 198 190 188 185 184 185 187 190 193 201 209 218 215 210 201 195 195 195 196 199 203 208 211 210 209 211 215 219 223 227 232 234 237 235 235 233 234 235 232 232 234 232 227 222 213 206 200 192 182 183 182 185 185 187 189 192 190 189 189 182 177 170 169 172 175 176 170 162 157 157 159 160 158 153 150 146 151 153 155 149 139 130 125 126 125 125 127 127 129 134 140 146 146 139 133 129 124 119 114 115 116 119 116 107 98 91 90 88 87 84 83 81 77 75 72 70 70 70 70 65 57 50 47 51 54 58 61 63 67 63 58 53 51 53 54 55 51 48 45 47 49 51 52 50 48 46 
+41 39 38 36 42 47 52 49 44 39 37 43 48 53 53 53 54 53 52 53 54 56 58 59 56 54 51 49 49 49 49 50 51 53 51 50 48 46 43 41 40 42 45 48 56 66 77 81 80 79 80 85 90 95 97 99 99 99 99 98 96 91 85 80 84 90 96 96 92 89 86 90 92 96 92 88 83 83 87 92 96 98 98 99 96 93 89 85 84 83 83 86 88 90 91 92 92 89 83 78 73 78 83 88 91 94 98 98 96 94 92 95 97 99 103 109 113 118 121 122 124 121 120 117 116 113 110 108 106 105 103 106 108 111 114 114 118 117 113 110 105 114 121 129 126 122 117 115 116 115 115 117 118 119 122 125 129 137 157 173 191 203 213 224 232 236 242 247 249 253 253 254 248 249 245 248 245 242 239 238 237 234 232 232 230 229 229 228 229 226 225 222 223 221 227 232 240 243 249 251 254 254 252 253 253 251 254 254 255 255 251 252 248 251 243 233 224 218 219 220 220 230 236 244 244 246 243 246 250 249 253 250 252 249 246 246 243 244 244 247 245 248 250 253 254 254 254 255 251 253 251 249 243 235 234 233 236 238 240 246 250 246 244 238 241 244 248 249 252 251 254 249 246 239 239 242 244 247 243 240 239 234 229 225 222 219 210 207 202 201 196 197 195 195 196 198 201 202 205 209 211 211 214 213 216 216 219 219 216 212 207 201 194 184 179 177 173 175 177 180 180 189 195 202 201 192 187 184 190 196 203 208 211 219 217 214 211 207 210 212 216 217 221 223 223 225 224 227 227 227 225 225 223 220 215 208 199 193 183 172 161 168 174 180 183 185 183 183 181 179 177 170 164 158 157 156 154 154 154 155 154 155 157 161 159 156 152 150 154 159 162 157 150 144 141 139 137 136 136 136 135 139 142 145 144 139 132 128 125 122 120 120 121 124 121 112 103 97 95 93 92 89 84 82 78 75 71 67 68 69 69 65 59 53 50 51 50 50 55 59 64 63 59 56 53 53 52 51 51 50 50 51 52 51 52 49 47 44 
+43 42 41 40 42 45 48 46 42 37 36 44 51 58 59 62 63 59 52 45 42 49 58 66 63 59 55 55 54 53 54 56 57 59 55 51 47 45 42 40 39 42 45 47 52 57 62 65 66 67 68 72 75 79 84 88 92 95 97 98 98 97 95 93 98 103 109 110 110 107 107 107 109 111 106 101 96 91 88 84 83 80 80 79 76 74 71 69 67 65 65 70 77 82 86 90 94 91 83 74 67 68 69 71 75 80 86 90 91 92 94 98 102 106 110 113 116 120 120 121 123 120 114 111 107 103 100 101 106 111 115 117 117 117 118 116 115 115 112 109 109 117 126 132 133 131 129 126 124 118 116 117 115 114 127 145 163 179 189 200 214 222 227 239 244 243 249 251 252 253 252 252 253 253 249 249 244 243 239 236 232 228 225 221 222 221 219 223 223 222 222 216 212 203 211 225 236 243 247 251 255 255 254 254 255 254 254 255 252 251 249 247 241 237 228 220 207 206 215 230 242 245 246 253 250 251 249 251 253 251 251 246 243 236 231 232 229 231 226 226 224 232 238 251 252 254 252 251 251 252 249 247 245 245 243 244 248 247 249 252 252 248 244 240 243 247 249 250 254 253 253 245 239 231 226 230 235 235 233 231 230 231 232 233 228 223 214 209 202 194 187 182 176 169 169 171 178 182 182 188 191 194 198 203 205 206 208 207 208 208 205 195 189 176 172 169 166 163 167 168 171 176 184 193 192 187 184 181 190 199 205 211 212 217 214 210 206 204 203 205 204 205 209 213 213 214 215 214 215 216 218 217 218 219 214 208 203 198 190 180 174 174 176 177 177 171 166 162 160 154 152 148 146 145 140 135 129 126 132 136 145 149 155 159 160 156 154 153 157 162 167 163 158 150 147 144 142 138 138 137 137 138 140 140 138 133 128 124 120 118 114 114 113 112 109 104 98 92 89 85 82 81 82 84 84 78 72 66 67 68 69 67 62 58 54 50 46 42 48 55 62 63 60 57 55 53 50 48 50 52 53 53 52 51 49 47 46 43 
+45 45 44 44 43 43 43 41 38 35 35 41 47 53 56 59 63 61 57 53 53 56 60 65 64 64 63 59 56 52 52 57 62 66 61 56 51 47 44 41 40 42 44 47 47 47 47 48 52 55 57 57 59 60 64 69 73 78 83 87 92 96 100 104 105 107 111 111 110 107 106 104 102 103 102 103 103 101 97 94 90 89 88 87 84 81 78 74 70 67 65 69 74 77 81 87 92 89 81 72 64 62 61 59 63 69 76 82 85 90 95 101 108 114 115 117 118 118 115 114 111 103 96 86 83 82 79 82 92 102 111 116 122 128 130 132 134 135 133 132 132 130 129 130 124 116 109 104 107 107 109 117 125 133 145 159 173 184 193 202 211 220 225 233 237 243 246 247 249 250 252 254 251 253 252 249 249 247 245 242 241 233 228 222 217 214 210 209 213 212 216 213 209 205 211 224 233 239 243 249 253 251 253 255 253 250 248 243 239 238 234 229 224 218 211 205 197 196 213 230 245 247 248 248 249 249 250 249 247 245 243 236 230 223 222 224 226 226 224 222 218 229 239 248 253 253 251 251 251 250 249 249 247 247 250 251 254 254 253 251 253 250 245 243 245 249 250 251 251 252 252 241 236 225 223 227 230 231 228 226 225 224 225 226 224 218 215 209 199 194 184 182 180 178 181 184 186 188 187 186 183 185 187 190 192 196 200 202 202 201 200 192 185 174 169 163 158 155 158 164 169 176 185 195 196 195 193 192 195 197 201 202 202 203 202 201 197 193 195 192 190 192 194 201 201 202 201 201 204 205 206 209 211 216 215 211 206 201 194 186 180 177 174 171 168 162 155 151 146 138 132 130 131 134 133 131 129 128 134 139 146 150 152 155 156 153 149 149 151 154 159 155 149 141 136 131 129 128 128 131 134 133 132 130 128 124 120 119 115 110 108 105 103 100 98 96 93 90 84 78 73 75 80 85 86 78 71 63 66 69 71 69 65 60 57 56 55 55 57 60 61 60 57 55 53 51 49 47 49 51 53 52 51 49 47 45 44 42 
+45 45 45 45 47 49 50 47 44 40 40 43 46 50 53 56 59 61 61 61 61 61 61 62 65 69 71 65 57 48 47 56 65 72 68 62 58 54 50 46 45 47 49 52 57 62 65 67 66 65 66 68 69 71 70 70 69 71 75 79 84 88 93 99 101 103 104 105 105 105 104 101 99 94 99 104 110 110 108 104 103 104 106 107 105 103 99 97 93 90 86 83 79 77 78 80 82 81 76 72 69 72 75 78 78 77 78 80 83 86 90 93 96 100 102 105 108 106 100 93 88 88 87 86 86 86 87 89 97 105 112 120 125 132 135 139 142 144 144 144 144 138 135 130 118 107 95 91 94 99 105 121 136 149 161 171 180 191 196 202 208 214 222 227 231 235 238 240 244 247 250 250 251 251 252 252 253 253 252 254 249 243 235 230 216 206 197 193 200 205 210 214 217 220 226 228 232 237 241 245 247 249 250 252 244 238 232 227 220 213 205 201 197 192 192 191 190 196 207 219 232 232 233 233 235 239 237 239 235 232 226 224 217 213 215 226 232 238 239 239 240 244 248 254 253 253 255 253 253 253 253 253 253 253 251 251 252 255 254 254 252 253 252 252 251 250 252 249 250 250 250 242 235 225 223 225 228 233 226 221 214 217 215 215 215 213 212 209 200 190 181 184 189 192 196 198 199 199 193 185 177 177 177 179 179 187 192 195 197 197 195 187 176 170 162 158 153 153 158 162 169 176 183 190 193 195 194 195 193 194 190 192 193 193 195 194 194 195 194 194 192 196 199 202 204 205 204 209 207 209 207 207 207 206 202 194 188 181 176 169 166 164 162 163 161 159 157 154 142 132 120 120 124 127 130 134 138 143 145 146 148 148 151 152 152 149 146 144 148 150 152 147 139 131 124 123 122 120 122 125 127 125 124 122 121 119 118 116 109 103 96 94 94 94 93 92 90 88 82 78 73 73 77 80 80 73 67 59 64 68 73 72 67 62 59 62 65 69 67 64 61 59 56 54 51 50 49 48 48 48 48 46 45 42 41 42 44 45 
+43 44 45 46 51 56 60 58 55 51 49 50 50 50 51 51 52 53 54 55 55 55 56 57 63 68 74 68 59 51 49 57 66 75 73 71 69 65 62 58 55 56 56 58 67 76 85 85 81 78 78 83 89 92 86 80 73 71 72 74 74 73 73 72 74 77 81 84 88 92 95 100 105 108 110 113 115 116 117 118 118 117 116 114 112 108 106 101 97 92 88 84 81 76 76 76 76 76 74 73 74 79 85 91 87 83 77 78 80 83 84 84 83 81 86 91 95 91 79 69 61 74 86 97 104 109 115 117 117 116 118 120 122 125 127 130 132 133 135 135 135 138 141 143 134 125 113 109 113 117 121 128 137 146 152 161 170 177 181 187 191 197 203 209 213 218 224 227 233 240 242 240 239 239 240 241 245 245 242 244 244 241 235 229 220 206 190 185 194 203 214 219 224 228 230 229 227 230 231 234 236 233 228 226 224 221 221 217 209 205 199 196 194 191 192 195 198 201 210 218 225 228 229 230 232 234 238 236 234 229 223 222 219 214 221 228 237 244 246 248 248 250 251 249 251 251 251 251 252 252 253 254 252 254 254 252 254 254 251 252 252 252 253 255 254 252 251 248 248 247 245 233 222 214 213 221 227 227 224 220 212 211 209 210 211 209 210 207 195 185 175 181 185 189 194 194 195 197 192 188 184 186 186 189 191 191 192 195 193 189 189 177 164 151 149 157 164 171 173 175 177 179 179 178 180 181 181 182 181 180 179 179 183 187 190 191 195 199 200 202 203 207 205 209 208 211 214 213 213 212 210 206 201 198 190 182 173 167 164 161 159 157 157 158 157 155 156 154 142 130 118 115 115 113 114 118 123 127 132 135 138 141 142 145 147 145 144 142 144 144 144 141 133 126 123 121 121 122 123 121 120 119 117 115 115 116 116 116 107 95 85 82 84 87 89 88 86 84 79 74 69 69 72 75 77 69 62 55 58 65 70 71 68 65 64 64 65 65 65 64 64 62 58 52 49 49 51 51 48 45 40 37 36 35 34 39 43 49 
+42 43 45 46 51 54 58 58 57 56 55 55 55 55 54 53 51 50 50 51 51 51 51 52 60 68 75 70 62 54 53 60 66 73 77 80 83 84 84 83 81 77 74 72 78 85 92 90 85 82 81 84 89 92 87 82 76 75 74 74 73 69 65 60 65 66 69 74 79 83 90 99 109 120 121 120 121 124 128 132 132 127 122 117 112 107 103 95 86 79 74 73 75 75 75 77 78 79 79 80 80 77 73 71 66 63 60 61 67 73 78 78 77 78 78 78 79 78 75 72 72 82 90 101 107 112 117 120 118 115 115 117 119 121 121 123 124 124 125 125 128 134 140 148 143 136 128 126 127 132 133 136 141 143 147 151 157 161 167 170 176 182 184 188 193 201 208 215 220 228 233 229 224 220 224 225 229 233 231 228 228 230 231 230 218 204 187 184 197 209 226 230 232 236 232 223 220 215 215 218 216 205 195 182 188 198 209 215 214 214 214 216 216 217 218 219 218 220 224 229 233 236 237 240 243 244 247 245 241 238 235 234 232 231 235 236 240 241 243 247 249 247 244 242 241 243 243 243 246 250 251 252 253 254 254 254 253 250 251 249 247 251 251 254 255 252 254 252 247 244 239 223 210 198 197 210 217 224 221 216 209 207 207 208 205 204 205 200 190 179 169 173 178 185 188 189 188 190 191 194 193 193 197 197 198 195 194 192 191 185 182 172 154 141 141 156 171 182 180 179 179 173 168 164 163 164 164 166 167 167 167 169 174 178 179 182 183 184 186 189 189 191 194 198 200 204 208 211 208 210 208 203 198 191 188 183 180 178 177 176 173 170 167 165 160 157 153 151 142 132 126 116 106 96 91 94 98 101 109 117 125 131 135 140 142 140 143 142 141 140 138 135 131 125 122 121 123 121 120 119 118 116 116 116 115 115 115 116 108 99 91 89 91 94 95 88 80 73 68 63 59 59 65 70 72 64 56 48 52 58 64 67 68 69 69 67 64 60 62 64 66 64 58 53 48 50 51 53 49 43 38 36 37 39 40 43 47 49 
+41 43 44 46 48 51 53 55 56 58 60 62 63 65 65 65 65 61 58 55 54 55 55 56 57 60 63 61 59 57 57 62 67 72 80 87 94 97 99 102 101 96 92 87 90 92 96 94 90 85 82 83 84 85 83 81 78 78 79 80 79 77 74 72 77 83 89 92 93 96 97 97 100 103 102 101 101 102 103 104 106 108 109 109 104 98 92 88 85 79 76 77 79 81 82 83 84 84 87 87 85 74 63 53 51 49 46 49 57 63 70 73 74 76 71 65 61 65 76 86 94 95 97 99 101 105 106 107 104 103 103 110 116 121 122 122 121 120 119 118 118 122 126 131 131 131 129 130 131 134 135 141 144 148 150 152 154 156 159 162 166 171 176 182 186 190 196 204 209 215 219 216 213 209 210 211 209 209 206 202 198 206 208 215 209 199 189 188 200 214 225 229 231 236 234 224 219 215 209 204 199 188 177 166 172 183 193 204 206 208 210 215 222 229 230 234 231 235 237 237 240 242 242 244 247 248 249 249 247 245 242 239 236 233 232 231 230 228 230 234 236 231 228 224 223 230 231 237 238 240 244 247 248 251 246 246 246 242 241 239 238 240 242 246 244 241 244 240 233 229 223 217 207 199 200 208 216 221 213 211 201 202 203 203 200 199 197 191 179 167 154 162 174 186 188 186 185 185 188 193 198 197 195 193 191 190 188 187 185 184 181 175 165 158 156 165 170 175 169 164 158 154 152 148 147 147 146 146 149 153 157 162 165 171 172 170 165 162 163 165 166 171 175 181 187 192 202 209 207 207 204 198 195 186 184 185 184 183 180 178 177 171 168 162 159 154 149 145 138 130 125 116 107 96 91 94 96 99 109 119 128 134 138 141 144 144 144 145 143 141 142 139 135 132 129 125 121 119 119 118 115 116 117 118 118 117 116 115 110 105 99 98 100 101 99 88 77 66 62 58 54 55 61 67 71 65 60 55 57 60 62 64 65 66 68 65 61 59 58 58 58 56 53 51 49 50 50 51 48 45 42 41 44 48 51 51 49 48 
+56 57 57 59 61 62 63 64 64 64 64 65 67 69 69 70 71 67 62 57 56 57 59 59 55 51 47 51 55 58 60 64 68 73 81 91 99 104 104 108 108 106 102 100 95 91 88 81 72 65 62 64 66 68 68 68 69 72 76 81 82 80 79 79 86 93 99 101 101 102 100 95 89 84 83 82 80 77 75 71 73 82 91 97 91 85 79 82 86 91 95 94 94 93 95 96 96 96 95 94 90 77 65 53 58 61 66 70 75 80 83 81 79 78 73 68 63 65 72 81 88 94 99 104 106 106 108 108 107 104 105 109 114 118 117 115 114 112 109 107 105 108 111 114 120 122 128 131 132 134 136 142 147 152 154 152 151 153 153 154 155 160 168 174 180 185 188 194 198 201 204 205 203 203 199 194 193 185 177 169 165 173 182 191 194 194 193 197 206 213 222 225 229 233 230 229 225 222 208 198 186 177 173 164 169 173 177 181 186 188 192 202 213 225 229 235 239 241 243 244 248 246 244 242 244 246 249 250 246 248 245 238 226 220 214 210 206 204 206 208 210 203 199 192 198 208 217 227 229 232 236 237 239 238 235 232 229 222 226 223 228 228 227 229 225 224 220 219 214 210 208 207 210 210 212 214 216 215 208 201 195 195 197 200 200 193 191 185 169 154 137 150 170 188 192 188 182 177 185 192 202 199 194 190 185 184 185 183 182 181 180 177 172 169 166 164 166 163 156 150 143 143 142 144 144 143 144 145 150 153 156 159 164 169 170 165 164 161 161 163 163 168 172 180 186 186 189 189 188 190 190 184 178 172 167 164 165 161 154 150 144 144 147 152 152 146 140 131 128 125 121 115 110 106 103 103 104 103 114 124 134 138 142 144 145 146 145 145 144 145 144 142 139 136 133 129 123 119 116 113 112 112 113 116 118 117 116 115 113 111 108 106 104 100 96 90 84 79 73 68 62 61 64 69 72 72 71 72 70 66 61 60 62 64 65 62 59 56 54 52 50 49 49 49 49 48 48 48 45 42 38 38 42 45 48 47 48 47 
+70 70 72 72 75 77 79 77 75 73 70 67 64 62 63 63 62 59 56 52 51 52 52 53 52 51 50 52 54 56 58 59 61 65 73 81 91 95 99 102 105 106 108 107 98 89 79 68 55 44 40 43 46 49 51 52 54 61 70 79 82 82 81 81 85 88 93 92 91 89 86 83 77 73 73 71 70 69 68 66 69 75 83 88 84 81 78 81 87 94 98 99 100 100 100 99 99 99 95 93 88 77 66 53 64 75 85 89 92 95 95 90 84 79 75 72 68 67 68 70 74 87 100 113 116 117 119 119 118 119 117 114 113 110 107 105 102 97 91 85 83 87 91 96 104 112 121 126 129 132 136 139 143 146 147 145 143 144 146 146 147 150 150 153 157 163 168 175 179 184 188 185 182 175 172 166 161 159 160 161 166 173 184 189 195 199 202 203 205 207 208 211 214 214 214 211 209 207 201 193 186 184 180 178 180 181 184 184 188 190 195 204 211 220 227 231 234 238 241 241 240 239 238 236 237 238 242 243 240 243 240 234 222 216 210 204 202 199 200 200 201 197 191 184 186 196 205 211 214 218 221 223 229 234 235 230 227 223 225 228 230 230 232 230 226 220 216 211 210 206 201 205 207 209 212 212 211 208 202 192 185 181 182 184 183 180 177 173 169 162 156 166 177 190 191 187 181 180 182 187 189 186 182 177 175 180 185 187 189 189 190 182 175 167 159 152 147 142 139 137 136 139 144 152 156 161 162 165 166 164 163 166 167 169 172 171 172 171 168 167 166 171 176 182 184 180 172 169 171 174 176 172 165 156 152 149 147 142 137 128 120 123 130 139 140 134 127 121 119 115 113 111 107 105 103 98 94 91 102 112 125 128 126 124 124 130 135 140 141 143 142 141 138 134 131 127 126 122 116 112 105 105 109 112 116 116 116 115 115 117 118 116 107 101 94 93 91 89 84 77 71 68 69 69 70 72 75 79 75 70 65 62 63 65 66 61 57 53 50 49 48 48 47 47 46 45 44 42 39 36 33 32 35 38 42 43 44 46 
+63 62 63 65 70 75 79 79 80 79 76 71 66 63 63 62 61 59 56 52 50 48 47 47 49 51 53 53 53 53 53 52 50 51 56 60 65 68 73 77 81 86 90 91 83 75 67 64 62 59 59 62 64 65 65 63 63 68 75 82 85 86 86 87 88 90 91 89 84 80 77 73 69 64 64 61 59 61 62 65 68 72 76 79 81 82 82 84 87 89 91 94 96 98 94 91 88 84 79 75 71 66 62 57 71 82 95 96 90 85 81 80 78 78 77 77 76 74 71 68 69 82 94 106 111 117 121 120 118 114 113 106 101 95 95 93 91 88 82 77 73 77 82 87 94 105 116 122 125 129 134 135 140 142 141 140 138 138 140 142 142 140 135 132 136 141 148 154 161 168 172 166 155 146 139 136 128 134 149 164 179 184 191 198 202 203 208 207 203 199 196 194 190 189 185 184 181 180 187 193 197 199 203 204 203 205 202 203 206 209 213 214 219 223 225 227 231 229 225 223 218 221 223 228 229 226 228 228 227 229 230 227 223 222 220 216 216 213 210 210 208 206 200 197 197 196 196 196 196 195 196 207 219 230 236 239 237 240 243 242 243 246 244 243 240 231 219 213 210 210 207 206 204 203 202 202 205 204 194 183 175 170 168 167 164 164 161 161 168 176 181 185 188 190 190 186 185 182 181 181 179 175 171 167 169 177 184 191 193 193 196 186 173 162 152 144 136 132 134 135 139 147 154 163 167 170 174 175 175 174 175 173 176 178 180 181 181 181 178 174 171 174 176 179 180 176 173 169 169 172 174 171 166 162 155 149 146 138 132 125 118 117 119 121 121 117 113 109 106 106 104 102 101 99 95 88 80 71 85 99 114 117 109 103 100 112 124 134 138 138 138 137 134 131 127 124 120 117 113 109 105 106 108 110 113 113 113 112 114 116 115 113 107 101 97 95 93 91 88 85 83 79 73 67 62 67 73 78 76 72 68 66 66 66 66 60 55 50 48 47 48 48 47 47 46 45 43 42 40 38 35 34 37 39 42 42 41 41 
+56 55 54 57 62 69 75 78 81 85 81 77 73 71 73 75 77 75 75 72 67 62 56 52 52 52 53 55 56 58 56 54 51 50 51 53 55 59 63 67 70 73 77 78 71 63 55 62 69 76 81 85 89 91 87 84 81 82 85 86 88 92 94 96 97 97 98 93 88 84 82 81 80 80 81 81 83 83 84 85 86 87 88 89 84 80 77 79 83 86 87 84 82 82 80 77 75 72 68 65 62 62 61 62 74 88 101 97 86 75 69 72 74 77 80 83 86 82 76 69 67 76 85 93 101 110 118 115 109 102 94 88 81 73 77 80 84 86 85 85 86 88 92 95 101 108 115 117 119 117 121 128 135 143 145 147 148 151 151 152 152 152 150 152 152 155 158 158 162 167 167 163 158 154 152 152 149 155 165 175 184 185 187 188 190 189 189 186 183 180 176 179 179 181 182 180 182 185 191 200 207 212 215 218 220 217 216 216 217 214 216 215 211 211 215 214 217 219 217 215 212 217 219 219 215 212 208 208 210 212 214 218 222 225 224 223 222 222 221 219 213 212 209 206 202 197 196 192 190 193 193 203 217 228 234 237 242 243 242 244 242 241 237 237 231 220 214 205 204 205 202 200 197 193 194 196 199 197 185 173 161 160 161 162 161 161 161 161 165 170 174 177 176 176 177 170 165 161 158 159 159 162 166 173 176 180 185 188 186 184 182 171 161 147 140 143 145 148 153 156 162 166 169 174 175 175 175 174 179 182 185 188 189 189 191 191 191 193 188 182 176 174 177 176 178 176 172 172 171 173 172 170 165 161 157 150 142 135 129 124 117 114 114 114 112 110 108 107 103 103 101 99 98 96 93 85 77 69 78 89 100 104 102 100 101 109 118 126 127 127 128 125 123 121 119 113 108 103 103 106 107 110 111 109 109 109 110 112 111 111 112 110 107 103 99 97 96 95 94 94 93 90 80 71 63 68 73 80 79 77 74 71 69 68 66 62 59 56 55 55 54 53 53 51 50 49 49 48 47 45 42 41 42 43 44 42 38 35 
+52 49 48 48 52 57 61 65 69 73 72 69 66 68 72 77 82 83 85 86 80 72 64 57 56 53 52 56 61 65 63 60 57 56 58 61 63 69 74 80 82 81 80 78 72 65 59 60 62 64 69 75 81 85 84 84 81 79 77 74 76 82 86 90 91 92 94 91 87 82 83 87 90 93 96 100 104 106 106 105 106 104 105 103 90 77 66 70 77 83 81 71 60 51 55 58 60 64 68 72 73 70 67 65 69 74 80 81 79 79 76 75 73 73 75 77 78 76 72 68 69 74 81 87 95 102 109 108 103 97 91 85 79 73 77 81 85 87 89 92 93 96 98 101 106 111 115 117 115 115 116 125 134 143 148 152 158 159 160 161 162 164 167 169 168 167 168 166 165 164 163 164 164 166 172 180 185 189 188 189 189 183 179 171 168 164 162 157 158 155 156 165 174 184 190 194 201 204 208 214 217 220 222 225 225 226 226 223 216 210 203 199 194 190 194 197 202 207 215 219 224 221 212 209 202 195 185 183 187 191 195 205 215 225 226 227 226 225 221 223 219 217 216 212 208 204 201 196 198 200 201 209 217 226 230 233 235 236 235 233 231 229 222 217 213 205 199 195 194 194 195 191 189 185 187 188 191 189 178 162 148 151 156 163 164 164 162 161 160 162 163 163 164 164 160 151 143 138 139 139 141 150 162 174 182 182 182 182 179 176 173 163 150 139 135 144 153 161 166 171 175 179 179 179 179 178 176 175 180 186 193 193 193 193 192 193 195 193 190 186 184 181 179 178 176 178 178 179 177 179 178 174 164 158 150 144 138 132 127 123 119 116 116 116 116 114 114 112 108 104 99 98 96 95 92 85 77 69 73 80 88 91 94 97 100 106 112 119 120 119 119 118 117 115 114 108 103 98 99 104 106 107 108 106 105 109 110 112 113 113 114 112 109 107 104 105 107 108 106 105 102 96 88 80 73 76 80 84 83 82 79 78 74 70 66 64 63 62 62 61 60 59 58 57 56 56 55 55 53 50 47 45 45 45 44 43 41 41 
+48 45 41 40 41 43 45 48 51 55 53 51 48 51 56 63 69 73 76 81 75 68 61 57 56 56 55 56 58 61 59 57 55 56 60 64 69 74 80 86 86 84 81 78 73 68 64 59 55 51 54 62 69 74 75 76 77 68 60 52 52 57 62 67 68 70 72 72 72 71 76 86 95 101 97 93 90 92 92 93 94 92 92 89 81 72 63 67 74 80 79 69 58 50 53 57 61 65 70 77 79 77 75 73 70 67 64 68 75 80 83 78 73 69 69 69 69 68 68 68 69 74 79 84 88 93 98 99 97 98 96 95 92 91 92 95 96 96 94 93 92 95 97 100 107 114 122 126 130 134 136 139 145 147 151 150 154 155 154 155 156 160 163 167 168 170 173 172 173 173 174 175 176 178 179 183 186 185 185 183 182 174 166 158 156 155 154 154 158 159 161 170 179 188 195 200 208 213 216 220 224 225 227 228 229 229 229 225 215 205 196 187 179 171 172 175 179 184 194 203 212 207 202 198 187 182 172 169 171 179 183 196 205 220 221 221 215 217 214 213 212 209 207 205 202 197 193 191 193 194 198 203 210 217 222 224 227 228 227 225 224 218 211 205 200 193 190 186 186 186 185 184 183 180 181 184 186 187 175 165 153 155 160 165 169 170 170 172 165 158 152 150 150 149 149 147 146 146 150 154 159 163 166 171 172 168 169 165 169 169 172 168 160 152 150 154 159 165 168 172 175 178 179 179 177 179 176 175 178 186 191 193 190 192 192 191 189 190 190 189 189 189 184 179 178 182 184 187 184 184 181 173 164 153 144 141 135 130 126 124 123 122 122 122 124 123 120 120 115 112 108 106 106 105 105 100 97 94 96 98 101 101 103 104 105 110 116 122 124 124 124 124 121 118 115 111 108 105 103 102 100 101 101 103 104 107 111 114 114 115 115 114 112 111 109 111 115 118 117 113 109 105 97 89 83 82 82 83 82 81 79 77 73 69 64 64 64 65 65 65 64 65 65 65 65 64 62 61 58 55 52 48 47 46 44 44 45 46 
+50 45 40 40 43 45 48 51 54 56 53 50 46 47 50 56 61 65 71 76 71 64 58 56 57 58 58 56 53 53 52 52 51 54 60 66 71 73 74 76 76 76 76 75 72 69 66 62 57 53 54 59 63 66 67 69 70 63 56 47 48 54 59 63 64 67 68 70 72 71 78 88 98 104 96 87 79 79 78 79 78 76 75 73 70 67 64 67 73 78 79 78 76 74 75 76 79 77 75 74 76 83 90 96 88 83 77 80 84 86 85 75 66 58 61 64 66 65 63 61 61 65 69 73 78 83 88 92 97 99 101 101 101 100 97 95 93 91 89 88 89 94 99 103 111 118 126 135 142 149 152 153 149 149 149 148 148 148 149 148 151 155 159 165 166 170 175 178 182 184 185 188 188 189 187 183 182 180 176 173 169 161 153 145 145 151 154 159 166 173 179 183 186 193 197 204 212 217 221 226 228 229 228 232 230 228 227 222 211 201 189 177 166 154 150 150 149 154 164 174 184 183 182 181 177 171 162 160 165 169 176 184 196 206 207 204 200 195 195 194 194 192 192 190 186 183 179 177 178 179 180 190 196 205 210 213 216 220 216 217 217 212 204 198 192 185 180 178 177 178 178 178 177 175 176 180 182 184 175 167 159 161 166 171 175 177 183 184 170 156 140 137 136 134 136 141 146 154 160 167 175 172 171 166 162 157 153 148 154 163 168 167 162 158 154 158 161 165 170 173 177 180 179 179 179 177 174 174 178 181 185 186 187 185 185 185 186 186 186 186 184 186 182 180 178 179 177 177 171 165 159 154 155 153 150 143 135 128 127 128 130 132 133 135 136 131 129 127 125 124 122 121 122 121 121 123 124 126 124 120 116 113 112 112 110 114 119 125 128 130 130 128 126 121 116 116 114 115 113 110 108 107 111 113 116 118 120 122 121 121 119 118 117 116 114 116 117 118 117 114 112 109 103 97 90 87 84 81 78 77 75 74 69 66 63 64 65 66 67 67 68 68 69 67 68 66 62 60 57 54 49 45 45 44 43 44 46 47 
+51 45 39 41 46 51 55 59 63 66 63 59 55 54 56 56 59 65 70 74 67 59 50 47 50 52 54 53 53 51 53 53 53 55 61 67 71 71 70 70 70 68 68 68 68 67 66 63 59 55 54 55 56 58 60 62 64 60 57 54 59 67 75 81 85 88 90 95 99 102 99 91 85 84 86 89 90 91 92 92 89 82 75 72 75 78 81 81 82 84 82 79 77 77 81 86 90 85 79 73 76 87 98 106 100 92 85 85 88 91 86 73 59 47 52 58 63 61 56 52 51 53 56 59 65 71 78 86 95 103 108 107 106 103 94 83 73 72 74 75 80 92 106 118 121 125 130 134 140 146 148 147 145 143 141 139 137 137 138 139 142 143 144 149 151 157 158 164 169 176 178 180 180 181 178 178 176 174 170 168 167 161 157 155 157 163 170 173 177 181 188 192 197 203 207 211 217 219 224 227 230 230 232 230 228 225 220 212 199 188 177 173 168 163 159 159 157 158 166 172 177 179 180 180 178 171 165 160 164 166 168 174 181 185 187 183 181 176 177 178 177 178 178 176 177 175 173 173 174 175 175 183 189 198 204 210 214 215 217 215 216 213 210 205 202 196 190 187 184 182 182 175 171 165 163 162 160 161 157 154 153 153 155 158 162 168 173 177 163 150 134 132 129 129 129 137 142 148 151 156 162 161 159 157 154 147 141 134 138 142 144 144 142 140 143 148 155 161 167 169 175 178 180 181 179 178 177 172 176 177 178 176 176 176 176 176 180 182 182 181 181 180 178 179 176 173 169 164 156 148 140 139 143 149 152 143 136 127 127 130 131 131 132 133 133 131 130 129 129 128 128 129 129 128 128 129 129 131 128 125 122 117 115 111 107 113 120 127 128 129 130 130 127 125 123 126 127 129 128 126 123 123 126 130 135 134 131 129 127 124 122 122 121 120 118 118 117 117 116 113 110 105 101 97 93 88 80 74 70 70 70 68 65 61 57 57 60 61 63 65 65 67 65 62 59 57 56 54 51 47 43 39 40 42 43 45 46 47 
+46 41 36 39 46 52 58 63 67 71 67 62 58 55 53 52 53 60 66 72 64 54 43 41 44 46 49 51 52 53 55 57 58 60 64 67 69 69 70 70 65 59 54 52 53 54 55 56 57 57 58 58 58 60 63 68 71 69 68 67 71 78 86 91 95 99 103 108 113 119 110 95 78 70 79 89 101 103 107 109 102 89 78 73 84 94 102 101 96 94 88 77 68 64 74 84 94 89 82 74 74 78 82 86 83 79 76 76 78 79 79 79 76 74 72 68 65 60 55 50 48 52 55 60 63 67 70 80 89 99 104 104 103 103 91 80 70 68 72 74 81 97 112 128 130 129 130 132 138 140 143 140 137 135 132 129 126 126 128 130 131 132 132 133 136 139 144 150 157 167 173 172 170 170 170 169 172 169 168 168 167 167 169 172 175 181 185 188 189 191 191 197 207 212 216 221 222 224 227 229 231 231 228 225 223 215 209 199 186 173 161 172 180 188 192 192 193 192 192 190 189 193 192 191 189 182 176 171 167 162 160 159 161 162 162 161 161 159 161 164 162 164 168 170 172 173 175 174 176 178 177 183 189 196 201 206 213 213 216 218 217 219 221 223 220 215 206 199 196 190 187 177 164 151 143 141 136 134 137 141 147 147 144 143 147 153 163 169 155 144 132 127 124 123 125 129 136 142 144 146 148 148 148 147 144 138 132 126 128 129 130 129 130 127 131 139 148 155 160 165 170 174 176 176 175 170 168 165 166 169 171 174 174 174 173 175 176 178 175 177 176 177 176 178 178 174 171 166 158 153 145 143 144 144 144 137 131 126 122 121 118 115 115 115 114 119 124 129 131 132 134 133 131 133 130 130 130 129 128 126 126 123 118 110 105 110 118 125 127 127 126 125 124 122 121 124 128 131 132 129 128 128 130 132 136 134 130 129 128 128 129 127 123 118 114 114 115 117 112 105 95 87 89 91 94 86 76 64 59 62 63 64 60 56 50 51 54 57 59 61 63 65 61 58 55 53 52 51 49 46 44 42 43 44 45 47 49 52 
+42 37 33 37 46 54 60 65 70 74 67 62 55 50 45 40 40 48 56 63 62 60 57 57 59 60 61 57 54 52 52 53 54 56 59 61 63 65 67 69 64 57 50 47 49 49 52 55 58 62 61 61 60 63 70 77 83 83 83 83 84 87 89 92 95 97 100 102 104 106 102 97 90 86 89 91 94 94 92 90 86 79 72 70 77 85 94 97 98 100 93 81 70 63 69 77 84 79 74 68 66 67 68 69 68 69 69 68 68 68 73 83 93 100 88 78 67 60 54 47 47 53 58 63 63 64 64 72 82 92 97 97 98 97 91 88 81 82 84 87 94 107 120 133 129 128 126 126 127 128 129 124 121 115 118 118 119 120 124 125 127 131 137 141 142 142 142 145 148 150 154 154 154 154 160 166 171 176 175 178 177 180 181 181 184 185 186 187 188 189 191 198 203 208 213 212 217 218 218 219 218 210 201 195 187 181 175 169 164 159 155 166 176 187 192 192 192 193 195 195 198 198 198 198 193 187 180 174 170 166 160 162 161 161 162 164 165 167 168 168 169 169 171 171 172 173 174 174 174 176 177 180 183 187 190 193 197 201 202 205 207 211 214 218 216 208 205 197 193 191 187 174 160 146 137 134 132 129 131 132 133 134 133 135 137 143 150 154 145 136 127 121 119 117 117 125 132 139 140 140 141 142 141 137 138 138 140 139 141 140 141 135 131 126 124 131 136 144 149 155 162 164 166 168 166 162 153 147 155 162 170 174 175 176 176 176 173 171 171 172 173 173 176 178 179 175 170 168 162 156 151 146 143 141 139 134 129 126 121 117 111 109 108 107 107 113 116 120 121 121 121 122 123 127 130 122 118 111 112 117 122 122 115 107 97 103 111 117 118 116 112 110 110 111 111 113 117 120 122 125 126 128 131 132 133 131 129 127 129 132 134 135 126 117 107 106 109 110 106 95 84 75 79 84 88 80 69 58 52 54 56 57 53 49 45 46 50 54 57 58 59 59 59 58 57 55 52 50 48 48 48 49 49 48 47 49 53 57 
+44 39 33 36 42 49 54 58 62 66 61 57 52 47 43 39 38 44 50 56 60 64 68 70 72 73 72 64 56 49 48 47 46 48 51 52 56 58 62 64 67 69 71 73 77 79 82 84 87 89 89 88 87 87 87 89 89 90 90 92 92 91 92 95 97 100 102 100 98 96 96 98 99 99 95 92 88 83 78 73 70 68 66 65 68 72 75 85 94 103 100 89 79 70 65 61 58 54 50 45 47 52 57 61 63 65 66 66 65 64 66 69 74 77 74 69 65 60 55 51 50 55 60 64 65 65 66 71 78 86 92 96 100 103 101 100 98 98 100 101 104 112 121 129 126 122 119 117 117 116 116 112 108 105 108 111 114 117 118 121 126 132 141 148 144 144 140 138 138 134 134 135 137 138 151 162 174 183 186 190 194 192 194 194 192 186 184 182 184 185 189 192 196 201 204 205 208 208 207 203 199 180 163 143 138 134 130 130 138 146 154 158 165 172 172 170 170 174 183 193 202 201 198 196 193 185 179 175 173 169 166 169 174 177 179 181 185 186 187 189 189 186 182 178 176 173 173 173 174 174 177 176 175 174 174 175 176 176 182 187 192 196 202 204 203 198 195 191 188 186 184 170 157 142 135 133 134 132 128 124 121 122 124 128 130 133 137 139 133 127 122 117 115 110 111 121 128 138 138 137 138 135 132 131 131 136 141 146 144 142 142 135 129 122 119 124 130 135 140 145 149 151 154 154 153 148 144 140 144 149 154 156 155 155 155 153 152 150 151 151 151 154 155 159 161 160 159 157 155 150 148 145 146 145 145 143 140 136 131 125 120 115 115 114 113 110 109 107 104 102 100 102 109 117 126 115 104 92 95 106 118 123 113 103 92 99 105 111 111 107 102 100 102 104 106 107 108 109 109 111 114 115 112 110 107 108 109 111 114 118 122 124 114 103 92 91 94 96 94 85 76 69 72 76 80 72 63 52 45 47 49 50 47 43 40 42 47 51 54 54 54 54 55 55 56 55 52 49 47 46 45 43 44 46 48 50 52 54 
+45 39 33 35 38 42 46 49 52 55 52 50 47 47 49 49 50 51 54 56 59 63 65 65 65 64 63 60 57 52 53 53 54 55 57 60 61 62 63 65 71 76 84 89 93 97 102 105 108 112 114 115 115 111 104 98 94 94 95 95 95 95 95 98 101 106 109 103 99 96 94 95 96 92 87 79 74 72 71 68 67 65 64 62 64 65 66 76 86 97 94 85 77 69 62 55 48 46 43 40 42 48 53 58 59 61 63 63 62 61 61 58 57 56 58 61 63 60 56 53 53 58 62 66 67 69 70 73 77 81 89 97 107 116 116 116 117 117 115 114 113 114 114 113 110 107 103 104 104 102 105 109 111 114 116 118 120 121 121 121 121 125 125 128 124 118 114 112 114 115 117 124 132 138 143 151 156 158 160 160 164 168 173 178 177 180 177 177 180 182 182 184 186 188 190 195 196 197 192 188 182 169 154 139 136 134 130 132 137 142 147 152 154 159 161 164 167 170 183 194 205 204 204 205 199 194 191 187 183 182 179 181 181 183 187 190 194 201 200 200 200 196 192 187 185 180 176 173 171 173 171 170 170 169 169 172 174 175 181 186 191 197 201 207 205 202 196 191 190 188 186 174 158 141 132 134 131 131 129 128 127 125 126 125 126 128 128 129 125 120 115 115 114 113 116 120 127 132 131 134 133 132 131 130 129 128 126 125 124 124 122 119 119 117 115 121 126 130 133 135 136 136 136 136 134 135 136 138 136 134 133 130 128 125 125 126 126 128 127 127 127 129 132 138 143 144 145 146 145 143 143 141 143 146 147 147 144 144 138 133 126 121 120 118 116 112 108 105 100 97 94 94 101 108 116 106 96 85 90 100 112 116 107 96 87 93 101 107 110 106 103 102 103 105 109 105 100 96 94 94 94 93 88 80 75 78 85 92 98 104 111 115 102 89 77 75 78 82 80 73 67 60 64 66 69 66 60 55 53 53 53 52 49 46 42 43 45 47 49 50 50 50 51 52 53 52 50 47 45 42 38 34 38 43 48 51 52 51 
+40 39 38 38 39 39 40 41 42 44 46 48 49 52 54 56 57 57 55 55 57 59 61 59 58 56 55 56 57 58 61 64 66 69 72 75 77 74 72 70 72 75 78 78 78 77 77 77 77 76 81 85 90 91 91 91 90 93 96 98 96 94 93 95 100 106 110 104 98 93 91 91 91 88 80 72 63 63 65 65 65 63 62 62 60 59 58 67 76 86 83 75 67 62 60 58 55 56 56 56 57 59 61 63 59 57 55 60 64 68 68 63 60 57 57 57 57 58 59 59 60 62 64 66 71 75 78 81 84 87 91 99 107 115 114 115 115 115 114 113 112 109 106 103 102 102 101 100 100 98 101 109 117 125 125 125 126 126 123 121 119 117 115 112 106 98 90 91 93 97 103 115 128 141 140 137 133 131 129 126 127 138 147 157 163 169 174 178 175 175 175 174 176 175 179 181 184 182 179 175 170 164 157 152 152 153 154 152 149 143 141 142 145 149 156 162 172 182 189 198 204 207 211 213 213 212 210 209 205 201 197 194 190 187 188 195 201 205 205 204 205 204 202 202 195 186 182 175 170 167 165 165 167 168 170 174 178 182 186 193 198 203 207 209 211 206 203 197 196 191 190 175 159 144 134 132 130 129 131 133 135 133 128 124 121 122 122 120 117 114 111 112 114 119 120 123 125 126 128 128 129 129 128 129 126 122 118 114 113 112 111 111 112 111 112 118 121 125 125 124 123 123 123 124 125 127 128 130 126 123 120 118 116 114 112 113 114 113 114 114 114 117 120 122 123 127 130 134 133 130 130 129 132 136 139 138 139 142 138 134 131 128 124 121 118 115 113 110 104 99 94 93 96 99 102 96 88 81 84 95 105 110 102 91 81 88 95 102 104 100 97 94 97 100 104 100 96 92 91 90 90 90 85 80 75 78 80 83 86 89 92 93 82 72 60 58 61 63 63 58 54 49 52 55 58 59 61 64 65 63 60 56 53 49 46 45 45 44 44 45 46 46 47 49 49 49 48 47 45 40 36 32 35 39 42 45 47 49 
+38 41 45 42 40 36 35 34 32 33 40 48 54 57 58 60 60 58 56 53 51 49 47 49 52 55 55 53 52 51 54 57 61 64 66 69 70 70 70 69 70 72 72 71 66 62 57 54 49 45 50 56 63 70 75 80 85 90 95 100 96 92 88 89 93 99 102 98 94 90 88 87 86 85 84 82 80 75 70 66 67 70 73 73 70 66 64 68 73 77 74 68 63 60 62 64 64 65 66 67 69 70 70 69 62 56 49 57 66 74 75 69 63 58 56 54 52 56 61 65 68 67 66 67 74 82 89 91 94 96 99 100 103 105 102 99 96 97 99 101 100 100 99 99 104 111 116 115 113 111 112 122 128 137 133 132 128 126 125 124 125 124 124 124 123 122 121 122 124 127 130 133 139 143 140 137 134 134 137 138 141 146 150 154 157 159 163 166 168 170 170 169 168 166 167 166 166 164 162 157 156 155 155 155 157 162 167 165 159 152 145 150 151 154 165 175 184 193 201 204 212 214 216 218 218 219 219 217 217 216 214 211 208 203 207 212 217 220 220 221 221 218 220 217 212 207 200 191 187 184 178 179 179 179 181 181 181 184 188 191 196 199 205 207 209 208 208 205 201 198 192 180 164 149 138 136 134 132 132 132 130 126 121 115 111 112 113 114 113 112 112 114 117 121 123 124 125 125 126 127 128 127 125 124 123 126 127 129 125 124 119 117 112 109 108 112 115 120 118 114 110 112 116 118 121 120 119 118 116 112 112 109 108 108 107 105 103 101 102 103 106 105 106 105 105 112 118 121 123 121 120 119 123 127 129 132 133 134 133 129 126 123 120 117 114 114 113 113 110 106 102 99 100 100 99 96 93 91 92 98 103 106 97 89 81 83 87 90 89 84 79 75 80 84 89 91 93 96 98 97 96 96 92 87 83 81 79 77 75 75 75 75 65 55 45 44 47 50 51 48 46 43 45 47 50 54 58 63 65 62 58 55 53 51 48 46 45 44 43 43 44 43 45 45 46 46 45 45 44 40 36 31 32 34 36 38 42 45 
+46 52 57 56 53 51 49 46 44 42 47 50 56 58 60 62 63 61 59 56 50 46 40 43 49 54 54 49 45 41 45 48 51 51 50 50 51 55 59 62 64 67 69 69 67 65 61 56 51 46 53 60 66 72 78 83 89 94 100 105 98 90 84 84 88 92 96 95 93 91 88 84 81 82 85 88 91 83 75 67 70 78 84 86 81 76 72 71 69 68 66 63 60 60 65 71 76 75 74 73 74 77 80 78 67 58 48 56 63 72 73 73 72 70 66 63 60 63 67 71 74 78 81 83 85 87 89 92 94 97 99 100 104 105 100 96 92 94 96 100 102 102 103 104 110 118 125 125 122 120 121 129 134 140 139 136 133 131 133 132 132 134 138 139 141 146 150 152 153 158 157 153 149 143 141 138 135 139 148 156 161 158 156 152 152 151 152 157 159 166 169 165 163 159 154 149 145 142 140 137 138 142 148 155 160 167 173 175 170 165 161 164 167 170 179 190 201 207 212 216 222 220 218 219 218 222 221 220 227 228 231 231 232 229 233 237 237 241 239 240 242 239 237 236 234 228 222 218 214 211 207 203 199 195 192 190 187 187 186 185 187 190 196 201 205 208 212 216 211 204 200 186 169 157 145 141 139 135 133 129 126 119 113 104 101 103 104 106 109 111 112 116 118 122 124 124 123 125 126 126 127 126 124 120 121 127 133 137 132 129 122 116 109 102 98 102 106 111 110 108 106 107 110 115 117 116 113 112 112 111 113 113 113 114 113 111 108 105 106 109 110 112 113 113 114 117 121 125 124 123 118 118 119 120 121 120 118 118 117 113 109 108 106 106 104 108 110 115 117 114 112 110 106 103 98 98 99 100 101 102 101 100 94 88 83 80 80 79 75 70 66 63 70 77 83 88 92 96 98 97 97 97 92 86 81 77 75 73 72 72 73 73 63 52 41 39 43 46 47 45 43 41 43 45 47 50 54 57 60 58 56 53 52 51 49 47 46 44 43 43 42 42 43 43 43 43 44 45 46 41 37 32 33 35 38 40 43 45 
+55 61 68 68 67 66 63 61 58 56 55 54 54 56 59 61 64 67 69 69 65 60 54 56 59 62 61 56 51 47 50 53 57 56 56 55 56 60 62 66 66 66 68 67 66 65 62 57 52 48 55 62 70 76 82 87 94 100 105 110 100 89 79 77 81 85 91 94 97 100 93 85 77 73 71 70 70 71 73 74 75 76 78 81 84 85 87 82 78 73 71 70 68 69 74 79 83 83 83 82 83 85 86 84 73 63 54 59 64 69 73 76 80 81 77 72 68 70 73 75 82 89 98 102 97 91 87 90 91 94 97 102 105 106 104 100 97 102 106 112 115 116 115 116 120 123 127 126 124 125 123 125 127 129 137 142 149 153 156 159 164 163 166 166 166 167 171 170 170 171 170 164 163 161 156 151 149 149 148 150 148 148 145 143 143 144 143 146 153 159 163 161 158 155 153 151 147 148 149 149 151 158 164 172 176 182 185 182 176 171 164 168 172 173 181 190 200 206 210 212 215 214 215 212 214 217 218 224 227 230 237 237 240 244 242 245 245 246 248 246 246 244 244 240 239 234 231 228 225 219 213 210 203 198 196 194 189 186 185 186 186 187 191 193 196 203 208 211 207 203 198 185 170 153 143 140 136 132 128 126 121 119 114 111 108 108 109 110 105 99 96 97 100 104 110 113 118 124 127 128 130 128 127 124 124 127 130 132 127 120 113 108 97 89 83 87 91 94 98 104 108 111 111 113 111 110 109 105 109 114 118 121 121 124 124 119 115 111 112 113 118 119 121 121 123 123 125 125 124 120 119 116 116 114 113 109 107 107 104 101 97 96 97 98 100 103 104 105 105 103 100 97 94 91 88 90 92 94 95 95 95 94 89 83 78 75 72 69 66 64 63 62 71 79 88 90 91 91 93 93 95 96 90 84 76 72 70 68 68 69 70 71 60 49 38 36 40 43 45 45 45 45 46 47 47 48 49 50 50 51 51 52 51 49 47 46 46 47 47 47 46 45 43 42 41 40 43 45 48 43 38 33 33 36 39 42 43 45 
+67 69 72 76 79 82 80 76 73 71 69 70 68 68 70 72 73 76 78 79 76 72 68 68 69 69 67 62 57 54 57 62 65 68 71 73 74 76 78 79 76 73 71 67 61 57 55 57 58 59 61 64 67 71 75 80 85 93 99 106 97 88 79 78 82 85 88 93 97 102 94 86 77 70 65 60 57 65 72 79 79 75 71 76 86 97 103 97 89 83 82 83 83 85 85 86 88 92 95 99 97 92 88 85 82 78 74 73 71 70 74 78 83 85 81 79 75 73 70 67 69 74 79 82 78 75 71 74 79 83 88 93 97 101 99 99 97 99 102 105 107 110 112 114 116 118 122 121 121 121 121 121 120 121 133 146 158 166 173 179 184 185 185 186 187 187 186 184 185 181 178 177 175 175 171 167 164 157 148 141 133 132 133 132 134 136 137 141 146 153 158 156 156 154 154 155 155 158 163 168 175 182 190 197 198 198 199 191 183 175 167 168 168 169 175 183 189 196 198 200 201 200 203 203 207 211 216 222 227 232 237 240 243 247 247 246 247 246 246 243 245 242 239 237 233 233 231 229 224 221 216 211 205 198 197 193 190 187 187 186 186 183 183 182 186 193 200 206 203 199 196 184 168 153 142 138 132 127 124 120 117 118 117 117 117 115 114 113 101 90 78 79 85 89 96 105 114 121 123 126 128 128 126 124 123 124 124 124 119 113 107 101 93 85 81 82 85 87 93 98 103 106 106 105 106 106 105 105 107 112 116 117 119 119 121 118 116 113 114 116 119 119 118 118 116 115 113 112 113 114 117 116 113 109 105 104 102 102 99 95 92 90 93 97 101 99 95 92 87 83 79 76 76 77 76 80 82 86 88 88 89 87 83 80 75 71 66 62 59 59 58 59 67 74 82 85 88 90 93 94 95 96 87 80 70 67 66 65 64 66 66 67 58 48 38 36 39 43 46 49 51 55 54 52 50 48 45 41 38 42 46 50 50 48 45 45 47 49 51 49 48 45 44 43 42 42 45 47 51 48 44 42 43 46 50 52 53 55 
+73 73 73 81 90 98 97 93 89 86 88 88 89 90 90 90 89 88 87 85 80 77 73 72 71 71 68 64 60 57 59 60 62 66 71 75 79 82 85 86 81 77 72 66 59 53 51 57 62 66 66 65 64 64 66 69 75 83 91 99 94 89 83 84 86 89 90 91 92 95 92 89 85 83 83 82 81 81 81 82 84 85 85 86 85 86 85 80 75 69 71 75 79 82 86 90 94 93 93 95 94 93 91 90 91 91 91 85 77 71 74 80 85 89 88 86 84 76 66 57 55 56 57 57 55 53 51 57 65 71 76 81 86 89 90 91 93 89 86 82 83 86 90 95 99 102 107 107 107 107 110 114 118 122 133 141 150 158 164 171 173 177 179 181 180 178 177 177 174 173 169 162 153 146 147 147 150 148 148 147 147 147 149 152 157 160 164 166 173 175 179 177 175 173 170 167 164 162 164 164 165 176 187 198 198 200 202 198 188 179 173 172 172 172 179 184 192 195 196 194 193 195 197 199 202 207 212 216 223 225 232 233 239 240 241 240 240 239 238 237 236 230 226 218 215 215 217 214 208 202 197 190 185 182 178 175 171 171 170 169 168 169 169 167 172 181 190 198 193 188 183 170 159 143 136 133 131 128 121 115 110 106 103 100 100 100 103 106 95 85 75 78 87 98 104 106 108 110 110 111 110 113 112 113 114 114 114 113 109 105 102 99 98 97 96 94 91 89 90 91 93 94 96 96 98 99 101 104 107 108 110 112 113 113 115 115 116 116 117 119 120 119 117 115 111 109 105 102 104 109 113 114 110 106 102 102 102 102 100 97 93 91 95 98 102 98 93 87 84 78 72 68 72 76 80 82 82 83 82 83 84 83 80 76 72 69 65 61 58 56 53 51 56 61 66 74 82 91 96 96 95 95 85 75 65 60 60 60 61 62 64 64 57 49 41 40 44 48 51 54 55 57 56 55 54 52 48 44 40 44 48 52 51 48 46 45 47 49 51 49 46 44 44 44 45 46 49 51 52 52 53 52 55 58 60 63 64 64 
+67 68 69 73 75 79 79 77 76 76 80 84 88 89 92 94 94 94 92 90 85 81 76 75 73 71 69 66 63 60 59 58 57 61 65 69 74 80 84 87 82 76 70 67 62 58 57 59 61 63 62 61 60 60 62 63 65 69 74 79 76 74 72 74 77 80 82 82 82 82 84 87 89 92 96 99 99 95 89 83 88 95 101 96 84 73 63 60 55 50 56 60 66 73 83 92 97 89 79 70 78 88 98 102 101 101 100 91 82 73 75 82 89 94 98 102 105 94 82 70 67 66 65 64 61 59 57 64 72 80 83 84 84 84 86 87 88 87 87 84 86 90 94 98 97 99 100 99 98 96 97 103 110 117 125 133 139 145 149 153 157 162 163 167 165 165 163 163 163 160 157 145 133 120 127 131 135 141 148 155 160 166 170 174 181 189 195 199 202 204 208 201 200 194 187 180 171 165 156 149 146 161 178 193 194 198 200 198 194 186 180 180 179 178 183 191 195 199 194 190 185 191 195 201 202 204 208 209 213 221 224 228 225 228 232 231 232 234 230 227 222 214 203 192 187 192 192 191 184 177 171 165 161 154 151 151 149 151 150 147 146 147 148 151 155 167 178 186 183 174 172 160 147 134 128 129 129 130 120 111 100 94 88 83 82 88 94 98 90 81 72 76 90 102 110 106 102 99 99 100 100 102 104 107 107 106 104 102 99 96 93 94 96 98 100 96 92 91 90 88 88 88 89 89 90 95 99 103 106 108 110 111 114 116 119 120 124 126 127 129 131 131 131 132 130 126 121 116 114 113 111 110 110 110 109 110 111 113 112 108 104 101 101 102 100 98 95 91 86 77 70 63 71 79 86 86 83 80 79 80 80 81 78 74 70 66 64 60 57 54 51 49 53 58 62 69 78 86 92 91 91 90 83 76 70 67 66 65 66 67 69 70 65 59 53 52 56 60 63 61 59 55 55 57 59 58 54 50 45 48 50 53 52 49 46 45 47 48 49 48 47 46 47 49 50 51 52 52 53 53 54 55 57 60 63 66 64 63 
+59 62 63 62 62 61 60 59 58 60 66 70 75 78 82 85 89 91 95 94 89 82 77 72 68 64 64 67 68 69 69 69 68 71 75 78 81 84 87 89 85 80 74 72 69 66 64 63 63 62 61 59 57 56 56 57 56 56 55 54 54 53 52 56 60 65 65 64 63 62 69 75 82 87 91 96 96 91 86 80 76 75 72 73 74 75 75 73 71 69 67 63 61 64 71 78 83 75 68 61 71 86 99 106 103 101 99 91 83 74 76 81 87 94 103 113 120 109 98 84 79 78 76 74 71 68 66 76 86 96 96 91 85 82 82 84 85 92 100 107 113 116 119 121 115 109 104 98 92 87 86 90 92 98 106 115 124 122 117 112 109 113 117 119 120 121 123 123 123 122 122 123 124 123 130 136 142 146 152 157 163 169 177 182 185 191 196 198 198 202 200 194 188 182 175 167 160 158 159 163 165 177 188 199 199 200 200 199 198 194 191 189 188 184 189 195 198 204 200 198 197 202 207 212 215 218 218 220 225 226 229 228 230 227 228 230 229 229 226 222 219 213 207 203 197 198 197 194 188 182 175 172 171 167 166 165 165 166 165 164 162 162 159 158 159 165 170 173 167 161 155 148 138 130 124 121 117 115 109 101 94 89 86 81 81 84 88 91 84 77 69 73 83 93 100 98 96 95 100 105 109 112 112 112 110 105 99 93 88 86 82 81 84 86 89 89 90 91 90 89 89 87 85 84 83 89 94 102 105 108 110 113 116 120 123 126 132 136 139 141 142 143 146 146 147 141 134 127 122 116 111 107 108 109 110 110 112 114 113 111 107 105 102 101 101 100 98 96 92 86 81 76 83 90 98 97 93 90 87 88 87 87 80 73 66 62 58 55 53 53 54 54 59 63 67 73 78 82 85 85 85 85 82 79 76 74 73 72 71 72 73 74 71 65 61 59 62 65 67 62 57 52 52 56 60 60 54 48 42 44 45 46 46 46 46 47 47 47 47 49 52 54 56 56 57 57 55 54 52 53 55 55 58 62 66 69 65 61 
+52 51 51 51 50 49 49 48 49 50 54 60 64 68 72 77 82 88 92 93 87 81 77 72 67 61 63 69 75 79 81 83 83 87 90 93 93 92 91 90 89 88 86 84 81 79 77 75 74 73 77 80 83 81 78 76 75 71 70 67 66 65 64 65 68 69 69 68 66 65 69 75 79 83 87 91 92 86 81 76 66 56 45 50 65 80 90 93 95 98 85 72 60 54 56 56 58 59 61 62 72 84 96 97 89 81 75 75 75 75 73 71 71 73 79 87 93 93 92 90 90 90 90 88 84 80 77 79 83 86 88 84 82 79 81 83 83 94 104 115 123 125 130 131 125 118 111 105 97 90 87 87 86 88 97 104 114 108 98 87 82 84 84 84 87 90 93 93 92 91 94 106 117 129 136 142 149 154 157 159 163 171 181 189 191 193 193 196 194 191 189 181 173 164 157 151 143 149 166 183 197 198 203 206 205 203 201 200 203 202 202 200 196 194 198 200 203 206 208 211 214 217 224 230 234 237 237 238 238 238 237 235 233 231 229 230 230 226 223 218 217 219 221 223 221 217 214 207 200 195 189 189 192 192 192 190 189 188 189 188 191 185 178 170 165 165 162 159 153 146 140 134 131 128 121 114 107 99 95 90 87 84 82 81 79 81 83 85 80 74 69 71 79 86 91 92 93 93 101 110 116 118 116 113 109 100 92 83 80 78 77 76 79 82 83 86 89 91 91 89 89 87 86 84 83 87 90 92 98 103 109 112 115 116 119 124 129 133 136 136 137 136 139 140 142 139 135 133 129 122 117 112 106 100 95 95 98 102 103 101 101 100 100 101 103 102 103 101 100 98 95 93 98 103 108 107 104 100 97 95 93 91 81 70 61 56 53 51 50 52 53 54 58 63 69 73 77 79 83 83 82 83 80 76 74 72 72 73 74 74 74 74 70 65 59 56 58 59 60 56 51 47 49 54 59 61 53 46 38 39 39 39 41 44 46 47 47 46 47 50 54 58 59 59 58 58 55 52 49 49 48 47 49 52 56 58 56 54 
+47 44 42 41 40 39 38 38 38 40 45 49 53 58 63 68 73 78 83 84 81 78 76 77 78 77 78 80 81 82 84 85 86 88 89 91 91 90 88 87 89 89 89 87 85 84 82 81 80 81 89 97 106 104 101 97 94 93 90 90 91 90 90 90 88 88 88 91 92 93 89 86 82 83 84 86 84 78 72 66 64 61 58 58 62 65 71 76 79 85 78 70 62 59 59 59 61 66 73 79 82 85 89 88 80 73 66 69 72 75 71 64 57 56 60 64 70 78 88 96 100 101 103 102 97 92 86 82 76 72 72 75 77 79 80 82 83 93 104 114 120 124 127 128 126 124 121 118 115 112 108 103 99 96 104 111 118 118 115 111 108 105 102 100 104 107 110 113 116 118 122 129 133 142 150 161 170 178 180 182 186 191 195 198 198 195 197 193 190 187 182 173 165 156 151 150 147 152 162 174 184 187 190 193 195 198 202 200 202 203 204 201 202 200 201 205 208 211 216 218 224 223 230 232 233 234 235 235 233 232 230 230 230 230 229 228 227 227 228 223 226 226 231 231 230 226 220 216 214 208 206 206 207 206 210 208 208 209 210 212 213 211 206 204 199 191 181 176 171 165 161 153 143 134 126 116 109 101 97 92 86 83 82 80 79 83 86 91 88 88 85 86 88 89 91 94 98 101 105 108 112 111 109 105 101 91 81 71 73 77 81 84 84 84 84 87 89 91 92 91 90 89 89 88 86 86 85 84 88 96 105 110 111 114 113 119 124 129 130 129 129 129 133 134 137 136 136 135 130 125 119 112 104 95 86 87 88 90 90 89 88 87 90 92 95 96 98 100 100 98 96 96 97 102 105 100 94 88 83 82 82 81 73 64 55 51 51 51 50 49 48 47 52 59 66 72 75 81 83 84 84 83 79 75 70 69 72 74 77 75 74 72 68 64 60 57 56 56 55 53 51 49 51 55 58 59 53 47 41 42 43 44 44 42 40 38 42 46 51 53 55 56 57 56 55 55 52 49 46 44 41 38 38 41 45 48 48 48 
+48 48 46 44 42 40 39 38 38 42 48 54 58 60 62 64 66 69 74 74 74 74 74 78 83 88 89 88 87 87 86 86 86 85 84 85 83 82 81 80 82 83 83 78 74 70 70 72 73 75 80 84 90 92 94 96 93 86 82 80 85 91 95 93 89 86 87 92 96 100 97 93 88 86 83 81 78 72 65 60 62 66 70 65 57 49 47 52 57 64 64 65 65 68 72 76 82 90 100 108 99 88 79 78 81 84 86 83 80 77 73 68 62 62 66 69 74 79 85 91 95 98 102 103 101 99 96 91 86 81 81 85 88 90 91 93 93 100 107 115 119 124 127 129 128 129 128 128 128 128 127 120 115 111 116 124 127 130 131 133 131 124 121 117 121 124 128 133 137 142 146 146 149 151 164 177 189 198 201 208 211 209 210 211 205 203 197 192 187 181 173 165 156 147 149 152 156 157 160 160 163 165 169 173 183 189 200 203 203 202 204 204 206 208 210 213 213 214 218 223 225 228 228 228 228 227 226 226 222 222 217 223 224 229 228 228 228 228 230 232 232 235 233 234 235 234 230 228 226 225 225 223 223 222 225 223 228 227 229 231 235 237 241 242 239 222 207 194 191 188 184 173 157 141 129 122 113 106 99 93 88 84 81 79 79 84 90 95 97 98 101 100 96 93 90 95 100 105 105 104 104 103 100 97 93 86 77 69 72 78 83 85 85 85 85 85 85 86 87 90 92 95 95 95 96 95 93 92 95 99 104 108 110 114 116 119 118 118 119 120 121 123 128 133 137 134 131 127 122 117 113 108 103 98 94 89 86 82 77 73 70 66 72 77 84 87 91 94 96 95 94 94 95 97 98 93 84 76 70 70 71 72 65 59 53 51 51 52 51 48 44 41 46 54 61 66 68 71 73 73 72 72 69 64 61 60 61 63 66 65 66 66 65 64 64 62 60 57 54 55 55 55 56 56 57 56 52 48 44 45 47 49 46 41 36 34 40 47 53 55 56 58 59 58 58 59 55 51 47 43 41 39 38 40 42 44 45 46 
+52 52 51 48 45 42 41 39 38 44 54 62 67 65 63 62 61 61 61 63 65 67 69 68 69 70 74 79 85 87 88 90 91 88 85 84 81 79 78 78 78 79 79 73 67 61 60 62 64 67 69 71 72 80 87 93 89 78 67 62 74 83 92 85 77 69 69 73 78 83 89 95 101 95 87 80 76 73 71 68 65 63 62 60 58 55 55 58 61 65 70 74 78 81 84 85 89 96 102 110 100 89 78 76 83 90 95 89 83 77 73 69 66 66 70 74 76 79 82 86 91 95 99 101 104 105 105 102 98 94 96 100 103 107 106 107 107 109 113 116 120 123 129 131 131 132 133 133 135 139 141 141 140 141 142 145 147 149 149 147 146 143 141 137 142 143 145 144 141 140 140 142 144 147 157 170 181 187 191 194 197 194 193 194 190 186 184 181 178 176 173 167 161 154 153 153 153 155 159 164 168 172 177 181 188 196 203 206 205 202 203 204 206 204 204 203 203 205 211 217 222 222 222 221 220 213 209 203 195 185 177 188 200 210 215 216 220 220 224 227 231 232 233 234 233 232 231 230 230 227 225 224 225 225 225 226 226 227 227 228 228 231 234 237 235 226 217 209 204 198 193 179 163 147 132 121 111 102 96 91 87 85 85 84 86 91 95 101 103 104 105 104 100 96 94 95 97 96 95 92 90 88 89 90 89 87 85 84 83 82 80 79 80 82 85 81 78 75 80 87 96 102 103 104 107 107 107 108 106 105 104 105 110 115 121 117 112 106 107 111 114 118 124 129 136 133 126 119 115 110 107 104 102 99 97 91 85 79 76 72 70 68 71 76 78 80 83 84 84 84 83 83 85 87 90 85 78 72 66 64 63 62 61 60 61 60 58 55 52 47 42 37 41 47 53 56 57 57 58 58 58 58 56 53 51 49 51 53 54 57 59 62 64 65 65 66 62 58 55 56 56 58 57 55 54 54 53 53 54 54 53 53 52 50 49 49 52 53 56 58 60 63 65 65 66 67 61 55 48 45 43 40 39 39 41 42 43 45 
+61 59 57 57 55 54 50 46 42 45 52 59 62 60 58 56 54 54 53 54 57 59 61 60 58 55 63 71 81 86 91 94 95 91 89 86 83 80 77 77 77 77 76 70 64 57 54 51 51 51 53 55 57 65 74 83 83 80 76 74 75 78 82 77 71 65 66 70 76 81 88 97 105 100 91 82 76 76 75 74 68 63 55 56 59 61 64 66 68 70 79 87 95 95 93 91 89 89 91 91 89 86 83 82 84 85 87 82 79 75 71 68 66 65 68 71 73 71 68 67 74 82 90 96 97 96 97 95 93 91 92 96 99 102 101 102 101 101 102 103 109 118 128 134 135 135 137 140 143 148 150 152 155 157 159 161 162 163 163 163 162 160 161 162 161 162 163 157 150 143 139 141 143 145 155 163 173 178 179 184 183 181 178 177 173 169 167 166 170 173 173 170 165 163 158 153 148 152 161 171 178 182 190 194 197 203 206 211 209 206 205 204 198 197 195 193 189 192 197 207 212 214 214 213 208 201 193 180 163 145 126 148 170 190 201 203 206 209 214 219 223 227 227 232 231 232 230 229 226 228 224 224 227 228 224 224 220 220 221 216 217 221 222 225 225 224 225 225 215 208 199 185 167 148 134 121 109 97 93 90 87 87 87 89 91 95 101 105 106 107 107 106 102 99 96 94 91 90 86 83 81 81 84 87 90 92 94 96 91 85 78 77 79 82 85 82 79 76 82 91 100 107 107 106 107 111 113 117 116 117 117 117 119 121 121 118 114 111 108 110 112 114 119 125 131 126 120 114 111 108 107 105 101 97 94 90 86 83 82 83 85 87 84 80 76 75 73 70 70 70 70 70 73 77 79 77 73 68 62 62 59 58 61 66 70 70 66 61 55 51 46 41 44 48 52 55 56 57 58 57 56 56 55 54 53 53 55 57 58 61 64 67 68 66 65 64 61 58 55 56 57 58 56 54 52 51 55 59 63 63 60 57 57 58 60 60 59 58 57 58 60 62 63 63 63 64 59 53 47 44 44 43 44 45 46 47 48 50 
+65 63 63 63 64 64 58 53 46 46 48 51 52 51 49 48 48 48 48 48 49 49 51 54 57 59 61 63 66 71 76 81 84 80 75 72 69 68 66 66 66 66 65 64 60 56 51 46 41 39 41 42 44 54 63 72 78 84 89 88 80 73 66 68 68 70 74 82 88 94 95 97 98 96 94 91 86 81 76 72 72 72 71 69 67 65 65 67 68 71 77 83 89 91 91 93 90 87 83 79 79 79 79 79 79 79 78 77 77 76 72 68 65 64 65 67 68 62 56 49 58 71 82 88 88 87 85 86 85 84 85 88 90 92 89 89 86 85 82 81 93 110 127 139 140 141 140 145 150 154 156 155 155 157 161 165 171 174 177 179 180 181 182 182 182 181 182 179 174 170 168 167 171 172 174 177 184 184 182 181 179 171 164 156 152 146 141 145 155 165 172 178 179 182 179 176 173 172 171 169 170 170 170 169 177 185 195 198 198 196 192 189 184 179 179 179 182 186 194 201 211 209 211 209 205 201 195 187 178 168 159 173 187 201 207 209 210 212 216 217 221 219 221 221 221 218 219 217 217 217 215 215 214 211 210 203 200 196 193 190 187 186 190 192 196 203 210 217 212 208 200 186 165 145 128 113 100 85 86 87 89 88 88 88 89 91 95 100 100 98 98 97 97 96 95 90 86 82 82 84 85 88 94 98 102 101 103 103 97 88 80 76 79 82 84 86 87 88 92 99 106 109 106 105 101 110 116 124 128 130 132 134 130 126 120 118 116 113 111 112 111 110 116 122 127 123 117 112 110 109 108 106 100 94 88 86 85 84 85 87 89 91 86 81 77 73 67 63 59 60 61 61 66 72 77 80 78 76 74 74 74 74 77 81 84 83 76 68 62 60 58 55 55 57 57 58 60 62 63 61 59 56 56 56 56 57 58 60 61 64 65 68 67 64 61 58 56 55 53 54 55 56 55 53 51 51 52 54 55 54 53 52 52 52 51 52 53 54 56 56 55 53 52 53 54 56 52 48 44 43 45 47 49 50 51 52 51 52 
+63 65 64 62 61 60 61 62 62 58 54 50 49 49 49 49 48 48 47 48 47 48 50 53 59 63 60 56 53 56 62 68 71 65 58 52 51 51 50 49 48 47 47 52 57 60 57 52 46 45 48 51 54 62 70 79 81 80 81 79 73 67 60 66 71 75 83 90 98 102 99 94 91 92 94 96 93 86 78 73 77 82 85 82 75 68 65 67 69 70 72 74 76 80 87 92 93 86 79 72 70 67 66 67 70 71 74 78 81 84 78 71 65 61 60 59 57 55 53 50 55 61 67 71 71 71 72 73 75 76 78 80 83 84 82 80 79 79 80 82 91 105 119 128 129 129 129 134 139 144 147 147 149 151 157 164 171 175 181 185 185 191 194 194 194 194 194 194 190 189 189 189 189 190 189 189 190 186 183 179 172 161 150 139 130 122 114 122 140 159 174 183 192 201 201 201 200 194 184 171 159 152 146 138 150 167 179 185 185 183 179 172 167 158 163 170 176 183 192 199 208 209 210 210 208 204 200 198 205 209 214 215 217 217 220 221 222 222 221 220 218 214 213 211 208 208 206 203 206 206 206 204 201 195 189 185 176 168 163 157 152 154 157 156 163 178 193 207 206 205 205 188 163 140 121 105 90 76 80 85 90 91 89 86 86 88 90 92 91 90 89 90 91 93 93 89 85 82 84 87 88 94 99 104 108 106 104 102 96 88 81 78 82 86 89 90 91 92 96 102 107 111 109 107 107 112 117 122 125 127 131 134 132 129 128 123 119 115 114 116 119 122 126 131 136 134 129 126 122 118 113 108 101 93 84 81 83 83 83 83 84 84 82 81 79 73 65 56 50 51 52 53 61 68 76 80 81 83 83 85 86 88 89 91 91 88 81 74 69 67 67 65 63 62 60 59 59 59 59 56 52 48 49 52 56 59 59 59 59 59 59 58 56 53 49 47 47 48 50 51 51 52 53 52 51 50 48 46 44 44 46 47 48 47 46 45 49 51 54 53 50 48 46 47 48 48 46 44 43 43 45 46 47 47 46 45 46 45 
+60 63 63 60 57 57 64 72 78 70 60 50 48 51 54 55 53 51 50 52 56 60 62 63 64 65 62 59 56 56 57 58 60 60 61 59 59 59 60 55 49 44 41 47 53 60 58 55 50 50 53 57 61 69 77 85 82 75 70 66 63 60 59 67 75 83 90 97 104 107 99 90 83 86 89 92 91 88 83 81 84 86 89 85 80 74 71 69 66 65 66 68 68 74 80 86 88 85 82 78 76 73 70 71 72 74 75 77 80 83 77 70 64 59 56 53 51 50 51 51 53 53 53 54 54 54 56 60 64 68 71 74 76 79 77 75 74 81 88 93 98 102 107 109 106 104 101 107 112 116 122 127 133 141 147 153 159 161 164 165 168 170 177 180 178 178 178 178 180 179 179 178 177 178 176 179 180 178 174 171 166 157 149 141 132 123 114 120 133 145 156 164 168 176 178 178 181 177 170 163 156 152 146 143 154 166 177 183 182 178 174 164 155 144 152 163 174 185 193 200 208 208 209 208 208 211 210 211 214 218 222 222 223 223 223 226 222 223 224 224 223 222 221 219 215 212 209 205 205 204 202 200 198 194 189 185 180 175 172 171 169 170 170 171 175 183 194 202 200 203 202 188 168 149 129 114 97 81 85 91 97 97 93 89 86 86 85 86 85 85 86 86 87 87 88 92 95 100 99 95 93 93 98 102 106 100 96 91 86 83 81 81 88 93 99 97 94 93 96 102 108 112 114 114 115 116 117 118 119 123 127 130 132 132 133 128 123 117 115 120 127 132 136 137 141 139 136 133 130 122 116 110 102 95 88 86 84 84 81 80 78 76 76 75 75 72 68 64 60 59 58 56 60 65 70 71 72 72 72 78 83 89 87 85 81 77 76 75 73 72 71 70 68 65 62 59 57 55 53 48 44 39 41 48 55 60 60 59 58 57 53 50 47 45 42 40 43 45 48 49 48 48 48 49 50 52 50 47 45 45 46 48 48 48 49 49 50 50 50 49 47 46 45 43 42 40 40 41 43 44 44 45 45 44 42 40 40 40 
+54 56 55 52 50 50 57 64 71 66 60 53 50 51 51 53 51 51 50 53 57 62 65 67 66 66 64 62 60 56 52 48 49 58 66 73 77 79 82 75 64 54 47 48 49 51 53 53 53 52 52 51 52 58 65 71 74 74 75 74 72 69 67 77 85 93 99 104 109 111 103 96 88 89 89 92 91 89 87 85 87 89 91 88 84 80 75 70 65 60 61 62 62 67 71 77 81 85 89 93 92 90 89 89 88 87 85 77 71 64 63 61 59 60 62 64 63 60 57 53 59 65 71 72 69 66 63 64 64 65 68 71 74 77 80 82 85 87 91 95 97 96 99 97 95 92 88 92 94 96 102 110 117 125 129 134 139 141 143 143 148 154 159 163 161 162 160 162 164 165 168 166 165 164 165 169 171 169 164 162 157 151 145 140 133 125 117 118 126 131 137 139 144 148 151 154 157 158 156 153 151 151 154 153 162 170 179 181 177 174 168 156 147 135 144 159 174 184 193 200 208 208 209 211 211 214 219 223 218 219 218 220 221 226 225 223 223 227 227 228 230 230 231 228 227 221 217 213 209 201 198 196 195 193 191 189 189 186 189 187 189 191 191 190 191 193 196 198 198 197 198 188 174 156 140 122 104 86 90 96 103 102 95 90 85 83 81 79 80 82 84 84 84 84 85 93 100 108 105 99 93 90 94 96 99 93 88 84 82 81 81 82 89 94 98 97 95 94 96 98 102 105 104 103 103 103 103 103 106 109 114 117 118 120 123 120 116 113 113 119 125 131 131 131 130 131 130 130 128 122 116 110 108 106 104 98 92 86 79 75 71 68 67 68 69 70 72 74 75 71 66 61 62 63 63 63 63 62 62 70 78 86 84 78 72 69 69 71 71 70 70 71 67 63 59 56 56 56 55 53 52 51 52 55 58 61 62 63 64 60 54 48 44 43 41 40 43 48 52 50 47 43 41 45 49 53 51 49 46 46 47 48 50 50 51 52 50 49 46 44 44 43 42 40 38 37 38 41 43 43 42 40 38 39 39 41 41 42 
+52 53 51 49 46 47 51 57 62 61 59 57 54 50 48 45 46 47 47 48 49 49 53 58 64 67 64 61 58 58 58 58 59 61 64 68 70 74 77 74 67 59 53 55 56 56 57 59 61 59 55 50 47 51 54 58 65 74 81 84 82 80 78 87 96 105 110 110 114 115 112 109 106 101 96 92 87 82 77 75 78 82 85 83 81 78 74 69 65 61 63 65 68 71 74 79 81 83 85 87 90 95 97 97 95 92 87 76 65 54 55 55 55 60 67 73 76 69 61 54 64 75 88 89 84 77 72 68 65 62 65 70 72 79 87 96 101 98 95 92 90 91 90 90 89 88 86 85 82 81 85 92 98 103 105 105 107 111 117 122 128 134 140 145 140 138 137 140 146 149 152 155 155 156 155 155 156 152 148 144 139 132 122 115 119 122 127 130 130 130 130 130 130 130 132 135 140 141 144 147 150 154 161 164 168 177 181 180 174 167 162 154 145 136 141 153 161 169 176 184 191 193 193 193 197 200 204 207 208 210 211 213 215 216 218 220 223 223 227 228 228 227 225 224 221 219 212 210 205 202 197 193 193 192 190 189 183 182 185 183 185 188 191 194 198 197 198 200 198 197 194 184 171 158 141 123 106 89 92 96 99 96 88 80 75 77 79 82 84 88 90 90 90 88 87 90 92 96 93 90 86 84 85 85 85 84 84 82 81 80 79 80 83 88 91 93 93 94 94 94 92 92 90 88 86 87 87 88 89 95 98 101 105 108 111 111 111 108 112 115 121 126 124 124 122 122 123 123 122 119 115 111 111 110 110 105 98 91 83 79 74 70 68 66 64 64 66 69 72 69 68 66 66 65 65 64 61 59 57 62 66 70 69 66 63 61 60 59 57 60 62 65 64 59 56 52 55 57 59 61 63 64 65 64 62 61 63 65 67 62 55 48 45 45 44 45 47 50 52 52 50 48 49 53 56 60 57 53 50 50 51 54 55 53 52 51 49 45 43 41 40 39 37 37 36 36 38 41 44 44 39 35 31 35 37 40 41 43 
+55 59 60 61 61 60 58 57 56 56 56 56 52 48 44 41 43 45 46 46 44 44 47 53 60 65 62 59 56 60 65 70 70 64 59 55 57 59 62 62 62 61 62 68 74 80 78 77 76 75 73 71 70 70 70 71 75 80 85 89 92 95 96 101 104 109 111 112 113 112 108 106 103 98 93 88 83 79 74 71 73 77 81 79 77 75 73 69 64 62 67 71 75 78 81 85 83 78 74 71 80 87 96 95 92 89 83 75 67 58 57 56 55 60 69 77 81 73 66 58 64 70 77 78 74 70 67 71 75 78 78 78 77 83 93 104 113 109 105 102 103 104 104 104 101 98 97 92 89 86 87 89 92 95 96 97 96 103 111 117 121 125 129 131 128 125 124 128 131 137 142 145 148 150 148 146 143 139 135 130 124 114 103 93 108 123 136 138 134 130 126 120 115 110 112 116 119 126 132 140 147 156 167 177 179 181 184 179 170 162 151 147 145 140 141 145 147 151 159 164 169 173 171 173 176 180 183 187 193 197 204 203 206 207 210 214 218 221 220 225 222 222 221 217 215 214 209 206 203 195 191 193 191 190 189 184 181 178 178 176 176 183 188 196 199 200 199 200 198 195 192 183 170 156 141 126 109 91 92 94 95 90 81 72 66 72 78 84 88 91 94 93 91 91 89 86 86 85 83 81 79 78 79 79 79 80 80 80 79 79 78 78 79 80 82 83 84 86 86 88 90 90 86 83 80 81 83 85 87 90 92 95 101 107 112 113 109 107 105 107 109 111 112 111 111 111 110 110 109 110 109 109 109 109 107 105 100 97 93 87 84 79 73 66 59 57 59 62 64 67 69 72 70 69 67 64 61 58 55 57 58 59 59 59 57 56 54 52 49 53 58 62 62 59 56 55 55 56 56 59 62 64 65 62 58 56 58 60 63 60 57 54 53 54 55 56 54 52 50 52 55 60 64 65 66 67 63 58 54 53 56 58 60 56 53 51 47 44 41 39 38 39 39 39 38 37 38 40 42 43 42 41 41 41 40 39 39 41 
+58 62 65 67 69 68 62 56 50 52 53 55 51 45 40 38 41 44 46 47 47 47 49 51 54 56 55 53 51 57 62 69 69 61 55 50 55 60 64 64 63 61 63 71 77 86 86 85 83 84 85 85 86 85 84 83 84 86 89 94 103 111 116 114 111 110 109 108 108 104 93 84 77 77 76 74 79 83 89 89 88 85 82 78 75 72 71 73 73 74 74 75 76 77 79 81 81 77 73 70 73 77 80 80 78 76 73 69 65 60 59 58 57 63 72 82 85 80 73 66 67 67 68 68 65 62 63 75 86 96 92 88 83 87 100 112 122 121 120 119 122 126 129 131 123 117 111 110 110 109 106 103 100 101 107 112 118 126 132 138 138 135 132 131 133 135 133 138 142 145 148 150 151 154 155 157 157 156 150 148 141 132 123 115 121 127 133 135 136 136 134 133 134 131 134 137 138 140 141 142 144 150 156 163 162 164 162 161 158 151 148 144 139 135 135 135 136 140 148 157 167 171 175 179 185 187 192 195 196 199 199 203 203 206 208 207 210 210 211 212 214 209 207 204 199 191 184 178 170 165 160 157 161 160 156 152 144 139 142 145 149 157 167 177 183 188 192 194 193 187 183 173 159 145 130 115 100 85 85 86 86 85 80 78 75 79 83 87 88 91 92 92 89 86 82 82 79 77 75 73 72 72 76 81 84 81 78 75 74 75 77 77 75 70 68 69 71 73 76 83 89 93 88 82 77 79 82 84 87 88 88 90 99 107 115 113 109 105 101 100 101 99 100 101 101 101 100 99 98 100 101 102 103 103 105 103 100 96 93 89 83 78 71 65 58 54 54 53 53 58 64 69 71 71 69 70 69 68 68 68 69 68 67 62 59 54 52 50 47 50 55 60 62 61 60 60 57 55 52 55 59 63 64 59 55 51 53 55 57 57 57 56 56 59 61 64 59 55 50 52 58 63 67 66 65 64 60 57 54 54 55 57 56 55 54 52 49 44 39 37 41 43 46 44 41 39 38 38 40 41 44 48 51 47 42 38 38 40 
+58 58 58 58 58 56 51 46 42 46 50 54 51 46 40 38 42 45 48 48 49 50 50 51 50 50 49 48 46 52 61 68 67 59 51 46 56 66 76 72 66 60 58 61 65 69 72 75 78 78 78 78 78 80 81 82 83 84 85 90 97 104 108 103 97 93 94 97 100 99 89 80 71 72 71 72 77 87 98 100 93 86 80 76 71 67 69 76 82 85 81 78 75 75 75 76 77 77 78 76 68 62 55 55 55 56 56 58 59 60 62 63 64 70 77 86 91 92 92 93 86 79 73 70 70 69 71 78 84 92 91 90 90 96 107 119 129 130 130 130 133 137 143 142 135 128 121 119 116 116 112 107 101 101 110 117 125 128 134 139 138 134 129 126 129 134 138 141 143 146 148 147 148 149 155 158 164 162 160 158 154 146 139 132 130 131 130 133 137 142 145 148 151 153 155 157 159 156 150 144 140 140 144 145 143 142 141 141 143 144 144 139 135 130 127 125 122 127 140 153 166 174 183 191 196 200 203 204 203 199 196 199 203 204 204 203 200 198 200 201 203 198 192 187 178 167 156 146 138 130 123 123 124 126 123 114 104 97 105 111 119 131 143 156 167 175 183 190 186 181 175 165 149 134 119 106 92 80 79 79 80 80 80 80 80 82 86 88 88 88 89 87 83 80 78 77 76 77 75 75 73 73 77 80 84 81 78 74 74 76 78 78 74 71 68 70 73 75 79 84 89 92 88 85 81 82 84 87 88 89 89 91 96 103 108 109 109 109 109 107 106 104 103 101 99 98 95 94 92 90 90 88 92 96 100 101 97 94 89 84 77 71 67 63 59 54 50 45 41 49 58 67 70 71 73 74 74 76 77 75 74 74 71 65 59 56 55 55 54 57 59 62 62 63 65 66 64 64 62 62 62 63 60 56 51 47 48 50 52 52 51 50 51 56 61 66 62 57 53 54 59 64 67 64 60 58 57 56 55 55 54 53 54 54 53 52 49 44 39 38 41 43 45 42 39 36 36 38 41 44 46 48 50 47 43 40 39 42 
+56 54 53 52 50 47 42 38 35 41 48 54 51 46 41 40 43 47 51 51 51 52 51 51 51 50 47 45 42 50 58 66 66 61 55 51 54 57 62 61 59 55 54 54 55 57 59 63 66 68 68 69 70 74 77 81 81 82 81 84 88 94 94 84 75 67 75 84 94 97 93 90 86 84 83 81 85 87 92 90 79 70 60 61 62 62 64 68 72 74 74 73 72 73 74 75 76 75 75 73 65 57 48 48 50 51 54 56 60 64 68 72 77 81 85 90 95 101 105 111 100 88 76 73 75 77 78 81 82 86 89 92 96 102 114 126 136 136 137 139 142 145 149 147 139 132 126 121 116 111 106 100 96 94 101 108 115 113 111 107 106 106 106 107 114 121 126 127 126 126 124 120 116 113 119 123 129 130 132 135 134 130 128 125 126 132 135 139 142 146 152 157 162 167 168 165 166 160 151 144 137 144 147 153 158 163 168 170 170 168 168 163 159 155 152 153 149 151 159 166 173 177 181 184 183 184 185 185 177 170 162 170 177 185 188 190 193 199 201 203 203 200 197 192 185 179 167 160 154 149 144 142 142 140 136 127 118 110 111 115 117 126 135 146 155 161 171 178 171 165 158 147 136 125 114 107 97 90 88 85 83 80 75 70 68 72 77 81 80 78 76 74 73 72 71 78 83 88 89 86 84 82 82 81 79 78 78 77 79 79 81 81 79 78 77 78 81 85 87 89 90 91 89 88 87 87 87 87 89 90 92 94 96 99 101 106 110 114 116 114 111 109 105 103 99 97 96 95 94 89 87 83 87 90 95 95 91 86 82 78 74 69 67 64 62 58 55 53 50 55 59 62 65 67 70 71 70 69 68 67 67 66 65 63 62 61 64 67 71 70 67 65 64 67 71 73 73 73 74 72 67 62 56 53 48 44 46 48 48 48 47 46 46 52 56 62 58 55 52 52 57 59 62 58 55 51 50 49 47 46 47 48 49 49 48 48 46 44 41 40 40 39 38 35 33 31 33 38 43 47 48 48 49 47 44 42 42 45 
+51 49 52 54 56 54 50 46 43 45 48 50 49 47 44 45 48 52 55 55 54 52 52 51 50 49 47 44 41 48 55 63 66 63 61 56 50 44 39 42 46 49 50 50 49 49 47 46 46 49 54 58 62 64 68 71 73 75 76 77 76 76 75 71 67 63 67 74 81 85 88 90 91 88 86 84 84 85 86 82 71 59 48 52 55 59 60 61 61 63 65 67 70 72 75 77 76 72 69 66 62 58 53 55 57 60 63 66 69 72 81 89 96 98 95 94 93 93 94 94 88 81 74 75 80 85 89 89 89 90 91 93 95 101 111 122 130 132 132 134 137 141 146 143 138 132 128 123 117 112 107 103 99 98 100 104 108 102 97 91 89 92 94 97 104 112 118 118 114 112 108 100 95 90 93 96 101 106 109 114 115 117 116 117 123 129 136 141 145 150 157 164 172 179 178 174 171 164 151 140 135 144 153 163 173 186 198 202 198 195 192 188 187 184 182 185 183 183 182 182 179 179 175 171 170 169 167 162 148 137 124 137 148 162 173 182 192 198 202 205 204 204 203 202 198 192 183 178 175 171 169 165 161 157 151 143 133 126 122 119 116 119 126 135 141 150 158 164 157 149 142 133 125 117 110 105 101 97 93 89 84 78 71 65 60 64 69 75 73 69 67 66 67 70 71 79 86 93 94 92 90 89 86 83 80 78 76 75 75 78 82 84 82 80 79 80 83 85 88 87 87 87 86 88 87 86 84 82 83 86 90 94 98 103 108 111 114 117 119 117 115 113 111 107 105 105 107 109 108 102 96 89 88 88 87 84 80 77 73 72 71 70 68 67 65 64 64 63 63 61 60 58 60 63 67 68 65 63 60 60 61 62 63 63 64 65 69 73 77 75 71 67 66 69 73 76 76 76 76 74 73 72 71 67 64 62 59 56 53 50 49 46 45 47 49 50 50 50 49 51 52 54 55 51 49 45 43 41 39 38 41 44 46 45 45 45 44 43 42 41 39 38 36 35 35 34 36 39 43 45 46 47 48 48 48 48 48 50 
+37 37 42 47 53 54 52 50 48 48 47 46 47 47 49 50 54 58 62 58 55 52 50 49 48 48 49 50 51 49 48 49 50 53 55 56 53 49 44 46 48 50 50 49 48 46 43 41 38 41 47 53 57 58 60 62 65 67 72 69 63 58 56 60 65 68 65 64 64 68 75 80 85 81 77 73 76 79 83 83 78 73 69 70 71 73 73 73 73 72 73 74 75 73 73 71 71 70 70 70 67 65 62 66 71 75 77 78 79 80 89 97 107 106 104 100 96 93 88 84 80 76 73 77 85 93 97 97 96 94 95 95 94 99 107 116 123 124 125 126 129 133 136 137 134 132 129 123 120 116 113 114 114 113 110 108 104 101 100 95 94 97 96 101 107 112 119 117 116 116 113 108 104 101 102 102 104 106 109 112 113 112 112 111 110 110 109 111 113 113 118 128 138 149 149 153 152 149 143 137 133 135 137 139 151 163 176 179 178 173 171 173 174 174 176 175 173 171 170 164 164 164 167 170 171 176 178 178 174 170 167 173 181 188 195 202 206 212 212 211 215 210 210 206 201 198 193 184 182 178 174 171 170 166 162 158 153 149 148 148 148 149 152 155 157 158 155 154 145 136 127 120 115 109 103 98 93 87 84 80 76 74 73 71 71 70 69 69 68 67 68 69 72 76 81 82 84 85 85 89 90 92 92 89 88 82 75 67 68 74 80 87 83 80 77 79 81 83 83 83 83 83 84 86 87 85 81 77 76 83 89 94 100 107 112 116 118 120 121 118 117 114 113 112 110 111 115 116 118 109 102 93 90 87 83 80 76 71 67 67 66 66 65 65 66 66 67 67 67 65 62 59 59 60 60 60 59 58 57 60 64 68 70 68 67 66 68 71 72 71 69 68 68 71 74 78 77 75 75 76 79 82 84 81 79 76 70 63 57 52 49 46 42 42 41 41 42 43 44 45 46 47 47 46 46 46 45 45 44 44 45 46 47 46 45 45 43 42 40 38 38 38 39 39 39 40 41 41 42 43 44 45 45 46 46 46 46 45 
+12 14 16 19 22 23 23 22 22 23 23 24 25 27 29 32 36 40 44 42 40 38 38 38 38 39 44 48 52 46 40 33 36 43 51 55 57 59 60 59 56 55 53 52 50 49 51 52 53 55 58 61 62 62 61 61 59 58 57 57 56 54 55 57 59 62 61 58 56 58 62 67 71 71 71 70 72 74 76 78 80 80 82 83 84 85 85 84 82 82 82 81 81 75 68 63 65 70 74 78 76 75 74 81 87 95 96 93 91 89 93 96 100 105 109 115 114 110 103 99 91 83 76 78 82 87 91 94 96 97 97 99 100 105 111 117 122 125 127 130 132 134 137 137 135 132 129 124 121 115 116 117 119 118 113 109 105 104 102 101 101 102 103 104 109 112 117 118 118 118 118 117 115 113 112 111 111 114 113 116 116 113 112 109 103 97 92 87 84 81 85 97 109 122 126 130 134 136 135 134 132 126 121 115 126 138 153 155 153 147 147 153 160 165 164 162 161 155 152 147 144 151 160 166 174 183 191 197 205 211 217 218 219 219 221 222 222 223 224 223 223 219 214 207 206 201 197 193 190 183 178 175 177 175 175 173 172 172 174 176 179 178 177 176 171 163 156 149 137 126 115 108 106 103 100 93 87 81 78 75 73 73 75 79 80 75 71 67 66 67 67 69 74 80 84 81 80 77 79 83 86 90 91 91 93 84 76 68 68 74 80 84 80 75 71 74 79 82 84 83 82 81 82 83 84 79 73 67 66 73 81 90 95 99 103 106 110 115 116 113 111 107 109 113 116 118 117 118 117 111 105 97 93 89 84 79 74 70 65 63 61 59 60 63 65 68 68 69 70 67 64 60 57 56 55 55 55 55 55 59 65 70 71 70 67 65 66 68 69 68 66 65 64 67 70 72 72 73 74 75 78 80 80 77 75 72 67 63 58 53 48 43 38 37 35 33 34 35 36 38 38 39 39 42 44 47 49 49 49 47 46 44 43 41 39 37 35 32 30 27 27 27 27 26 26 25 25 24 23 22 22 22 21 21 20 19 19 18 
diff -ruN rodinia_3.1/cuda/srad/srad_v1/main.cu rodinia_backup/cuda/srad/srad_v1/main.cu
--- rodinia_3.1/cuda/srad/srad_v1/main.cu	2015-12-11 07:46:15.000000000 -0800
+++ rodinia_backup/cuda/srad/srad_v1/main.cu	2024-09-26 12:55:55.464242061 -0700
@@ -24,7 +24,7 @@
 #include <stdlib.h>
 #include <math.h>
 #include <string.h>
-#include <cuda.h>
+#include <hip/hip_runtime.h>
 
 #include "define.c"
 #include "extract_kernel.cu"
@@ -165,7 +165,7 @@
 
 	image_ori = (fp*)malloc(sizeof(fp) * image_ori_elem);
 
-	read_graphics(	"../../../data/srad/image.pgm",
+	read_graphics(	"./image.pgm",
 								image_ori,
 								image_ori_rows,
 								image_ori_cols,
@@ -233,30 +233,30 @@
 
 	// allocate memory for entire IMAGE on DEVICE
 	mem_size = sizeof(fp) * Ne;																		// get the size of float representation of input IMAGE
-	cudaMalloc((void **)&d_I, mem_size);														//
+	hipMalloc((void **)&d_I, mem_size);														//
 
 	// allocate memory for coordinates on DEVICE
-	cudaMalloc((void **)&d_iN, mem_size_i);													//
-	cudaMemcpy(d_iN, iN, mem_size_i, cudaMemcpyHostToDevice);				//
-	cudaMalloc((void **)&d_iS, mem_size_i);													// 
-	cudaMemcpy(d_iS, iS, mem_size_i, cudaMemcpyHostToDevice);				//
-	cudaMalloc((void **)&d_jE, mem_size_j);													//
-	cudaMemcpy(d_jE, jE, mem_size_j, cudaMemcpyHostToDevice);				//
-	cudaMalloc((void **)&d_jW, mem_size_j);													// 
-	cudaMemcpy(d_jW, jW, mem_size_j, cudaMemcpyHostToDevice);			//
+	hipMalloc((void **)&d_iN, mem_size_i);													//
+	hipMemcpy(d_iN, iN, mem_size_i, hipMemcpyHostToDevice);				//
+	hipMalloc((void **)&d_iS, mem_size_i);													// 
+	hipMemcpy(d_iS, iS, mem_size_i, hipMemcpyHostToDevice);				//
+	hipMalloc((void **)&d_jE, mem_size_j);													//
+	hipMemcpy(d_jE, jE, mem_size_j, hipMemcpyHostToDevice);				//
+	hipMalloc((void **)&d_jW, mem_size_j);													// 
+	hipMemcpy(d_jW, jW, mem_size_j, hipMemcpyHostToDevice);			//
 
 	// allocate memory for partial sums on DEVICE
-	cudaMalloc((void **)&d_sums, mem_size);													//
-	cudaMalloc((void **)&d_sums2, mem_size);												//
+	hipMalloc((void **)&d_sums, mem_size);													//
+	hipMalloc((void **)&d_sums2, mem_size);												//
 
 	// allocate memory for derivatives
-	cudaMalloc((void **)&d_dN, mem_size);														// 
-	cudaMalloc((void **)&d_dS, mem_size);														// 
-	cudaMalloc((void **)&d_dW, mem_size);													// 
-	cudaMalloc((void **)&d_dE, mem_size);														// 
+	hipMalloc((void **)&d_dN, mem_size);														// 
+	hipMalloc((void **)&d_dS, mem_size);														// 
+	hipMalloc((void **)&d_dW, mem_size);													// 
+	hipMalloc((void **)&d_dE, mem_size);														// 
 
 	// allocate memory for coefficient on DEVICE
-	cudaMalloc((void **)&d_c, mem_size);														// 
+	hipMalloc((void **)&d_c, mem_size);														// 
 
 	checkCUDAError("setup");
 
@@ -280,7 +280,7 @@
 	// 	COPY INPUT TO CPU
 	//================================================================================80
 
-	cudaMemcpy(d_I, image, mem_size, cudaMemcpyHostToDevice);
+	hipMemcpy(d_I, image, mem_size, hipMemcpyHostToDevice);
 
 	time6 = get_time();
 
@@ -357,8 +357,8 @@
 
 		// copy total sums to device
 		mem_size_single = sizeof(fp) * 1;
-		cudaMemcpy(&total, d_sums, mem_size_single, cudaMemcpyDeviceToHost);
-		cudaMemcpy(&total2, d_sums2, mem_size_single, cudaMemcpyDeviceToHost);
+		hipMemcpy(&total, d_sums, mem_size_single, hipMemcpyDeviceToHost);
+		hipMemcpy(&total2, d_sums2, mem_size_single, hipMemcpyDeviceToHost);
 
 		checkCUDAError("copy sum");
 
@@ -426,7 +426,7 @@
 	// 	COPY RESULTS BACK TO CPU
 	//================================================================================80
 
-	cudaMemcpy(image, d_I, mem_size, cudaMemcpyDeviceToHost);
+	hipMemcpy(image, d_I, mem_size, hipMemcpyDeviceToHost);
 
 	checkCUDAError("copy back");
 
@@ -456,18 +456,18 @@
 	free(jW); 
 	free(jE);
 
-	cudaFree(d_I);
-	cudaFree(d_c);
-	cudaFree(d_iN);
-	cudaFree(d_iS);
-	cudaFree(d_jE);
-	cudaFree(d_jW);
-	cudaFree(d_dN);
-	cudaFree(d_dS);
-	cudaFree(d_dE);
-	cudaFree(d_dW);
-	cudaFree(d_sums);
-	cudaFree(d_sums2);
+	hipFree(d_I);
+	hipFree(d_c);
+	hipFree(d_iN);
+	hipFree(d_iS);
+	hipFree(d_jE);
+	hipFree(d_jW);
+	hipFree(d_dN);
+	hipFree(d_dS);
+	hipFree(d_dE);
+	hipFree(d_dW);
+	hipFree(d_sums);
+	hipFree(d_sums2);
 
 	time12 = get_time();
 
Binary files rodinia_3.1/cuda/srad/srad_v1/main.o and rodinia_backup/cuda/srad/srad_v1/main.o differ
diff -ruN rodinia_3.1/cuda/srad/srad_v1/makefile rodinia_backup/cuda/srad/srad_v1/makefile
--- rodinia_3.1/cuda/srad/srad_v1/makefile	2015-12-11 07:46:15.000000000 -0800
+++ rodinia_backup/cuda/srad/srad_v1/makefile	2024-09-26 12:55:55.464242061 -0700
@@ -1,8 +1,6 @@
 include ../../../common/make.config
 
-CC := $(CUDA_DIR)/bin/nvcc
-
-INCLUDE := $(CUDA_DIR)/include
+CC := hipcc
 
 # Example
 # target: dependencies
@@ -16,9 +14,7 @@
 # link objects(binaries) together
 a.out:		main.o
 	$(CC)	main.o \
-				-I$(INCLUDE) \
-				-L$(CUDA_LIB_DIR)  \
-				-lm -lcuda -lcudart -o srad
+				-o srad
 
 # compile main function file into object (binary)
 main.o: 	main.cu \
@@ -30,8 +26,8 @@
 				srad_kernel.cu \
 				srad2_kernel.cu \
 				compress_kernel.cu
-	nvcc	main.cu \
-				-c -O3 -arch sm_35
+	hipcc	$(INST_FLAGS) main.cu \
+				-c -O3
 
 # delete all object files
 clean:
Binary files rodinia_3.1/cuda/srad/srad_v1/srad and rodinia_backup/cuda/srad/srad_v1/srad differ
diff -ruN rodinia_3.1/cuda/srad/srad_v2/Makefile rodinia_backup/cuda/srad/srad_v2/Makefile
--- rodinia_3.1/cuda/srad/srad_v2/Makefile	2015-12-11 07:46:16.000000000 -0800
+++ rodinia_backup/cuda/srad/srad_v2/Makefile	2024-09-26 12:55:55.464242061 -0700
@@ -1,24 +1,22 @@
 include ../../../common/make.config
 
-CC := $(CUDA_DIR)/bin/nvcc
-
-INCLUDE := $(CUDA_DIR)/include
+CC := hipcc
 
 SRC = srad.cu
 
 EXE = srad
 
 release: $(SRC)
-	$(CC) $(KERNEL_DIM) $(SRC) -o $(EXE) -I$(INCLUDE) -L$(CUDA_LIB_DIR) 
+	$(CC) $(INST_FLAGS) $(KERNEL_DIM) $(SRC) -o $(EXE)
 
 enum: $(SRC)
-	$(CC) $(KERNEL_DIM) -deviceemu $(SRC) -o $(EXE) -I$(INCLUDE) -L$(CUDA_LIB_DIR) 
+	$(CC) $(INST_FLAGS) $(KERNEL_DIM) -deviceemu $(SRC) -o $(EXE)
 
 debug: $(SRC)
-	$(CC) $(KERNEL_DIM) -g $(SRC) -o $(EXE) -I$(INCLUDE) -L$(CUDA_LIB_DIR) 
+	$(CC) $(INST_FLAGS) $(KERNEL_DIM) -g $(SRC) -o $(EXE)
 
 debugenum: $(SRC)
-	$(CC) $(KERNEL_DIM) -g -deviceemu $(SRC) -o $(EXE) -I$(INCLUDE) -L$(CUDA_LIB_DIR) 
+	$(CC) $(INST_FLAGS) $(KERNEL_DIM) -g -deviceemu $(SRC) -o $(EXE) 
 
 clean: $(SRC)
 	rm -f $(EXE) $(EXE).linkinfo result.txt
Binary files rodinia_3.1/cuda/srad/srad_v2/srad and rodinia_backup/cuda/srad/srad_v2/srad differ
diff -ruN rodinia_3.1/cuda/srad/srad_v2/srad.cu rodinia_backup/cuda/srad/srad_v2/srad.cu
--- rodinia_3.1/cuda/srad/srad_v2/srad.cu	2015-12-11 07:46:16.000000000 -0800
+++ rodinia_backup/cuda/srad/srad_v2/srad.cu	2024-09-26 12:55:55.464242061 -0700
@@ -6,7 +6,7 @@
 #include "srad.h"
 
 // includes, project
-#include <cuda.h>
+#include <hip/hip_runtime.h>
 
 // includes, kernels
 #include "srad_kernel.cu"
@@ -128,12 +128,12 @@
 #ifdef GPU
 
 	//Allocate device memory
-    cudaMalloc((void**)& J_cuda, sizeof(float)* size_I);
-    cudaMalloc((void**)& C_cuda, sizeof(float)* size_I);
-	cudaMalloc((void**)& E_C, sizeof(float)* size_I);
-	cudaMalloc((void**)& W_C, sizeof(float)* size_I);
-	cudaMalloc((void**)& S_C, sizeof(float)* size_I);
-	cudaMalloc((void**)& N_C, sizeof(float)* size_I);
+    hipMalloc((void**)& J_cuda, sizeof(float)* size_I);
+    hipMalloc((void**)& C_cuda, sizeof(float)* size_I);
+	hipMalloc((void**)& E_C, sizeof(float)* size_I);
+	hipMalloc((void**)& W_C, sizeof(float)* size_I);
+	hipMalloc((void**)& S_C, sizeof(float)* size_I);
+	hipMalloc((void**)& N_C, sizeof(float)* size_I);
 
 	
 #endif 
@@ -225,19 +225,19 @@
     
 
 	//Copy data from main memory to device memory
-	cudaMemcpy(J_cuda, J, sizeof(float) * size_I, cudaMemcpyHostToDevice);
+	hipMemcpy(J_cuda, J, sizeof(float) * size_I, hipMemcpyHostToDevice);
 
 	//Run kernels
 	srad_cuda_1<<<dimGrid, dimBlock>>>(E_C, W_C, N_C, S_C, J_cuda, C_cuda, cols, rows, q0sqr); 
 	srad_cuda_2<<<dimGrid, dimBlock>>>(E_C, W_C, N_C, S_C, J_cuda, C_cuda, cols, rows, lambda, q0sqr); 
 
 	//Copy data from device memory to main memory
-    cudaMemcpy(J, J_cuda, sizeof(float) * size_I, cudaMemcpyDeviceToHost);
+    hipMemcpy(J, J_cuda, sizeof(float) * size_I, hipMemcpyDeviceToHost);
 
 #endif   
 }
 
-    cudaThreadSynchronize();
+    hipDeviceSynchronize();
 
 #ifdef OUTPUT
     //Printing output	
@@ -259,12 +259,12 @@
     free(dN); free(dS); free(dW); free(dE);
 #endif
 #ifdef GPU
-    cudaFree(C_cuda);
-	cudaFree(J_cuda);
-	cudaFree(E_C);
-	cudaFree(W_C);
-	cudaFree(N_C);
-	cudaFree(S_C);
+    hipFree(C_cuda);
+	hipFree(J_cuda);
+	hipFree(E_C);
+	hipFree(W_C);
+	hipFree(N_C);
+	hipFree(S_C);
 #endif 
 	free(c);
   
diff -ruN rodinia_3.1/cuda/streamcluster/Makefile rodinia_backup/cuda/streamcluster/Makefile
--- rodinia_3.1/cuda/streamcluster/Makefile	2015-12-11 07:46:09.000000000 -0800
+++ rodinia_backup/cuda/streamcluster/Makefile	2024-09-26 12:55:55.464242061 -0700
@@ -1,8 +1,6 @@
 include ../../common/make.config
 
-NVCC = $(CUDA_DIR)/bin/nvcc
-
-NVCC_FLAGS = -I$(CUDA_DIR)/include
+NVCC = hipcc
 
 TARGET_G = sc_gpu
 
@@ -19,14 +17,9 @@
 	NVCC_FLAGS += -deviceemu
 endif
 
-# make dp=1 compiles the CUDA kernels with double-precision support
-ifeq ($(dp),1)
-	NVCC_FLAGS += --gpu-name sm_13
-endif
-
 
 $(TARGET_G): streamcluster_cuda_cpu.cpp streamcluster_cuda.cu streamcluster_header.cu
-	$(NVCC) $(NVCC_FLAGS) streamcluster_cuda_cpu.cpp streamcluster_cuda.cu streamcluster_header.cu -o $(TARGET_G) -lcuda
+	$(NVCC) $(NVCC_FLAGS) $(INST_FLAGS) ${HOME}/hipec/inst_pass/Inst/InstStub.o streamcluster_cuda_cpu.cpp streamcluster_cuda.cu streamcluster_header.cu -o $(TARGET_G)
 	
 
 clean:
diff -ruN rodinia_3.1/cuda/streamcluster/setup.ini rodinia_backup/cuda/streamcluster/setup.ini
--- rodinia_3.1/cuda/streamcluster/setup.ini	1969-12-31 16:00:00.000000000 -0800
+++ rodinia_backup/cuda/streamcluster/setup.ini	2024-09-26 12:55:55.464242061 -0700
@@ -0,0 +1,7 @@
+[DEFAULT]
+compile = make
+run = ./sc_gpu 10 20 256 65536 65536 1000 none output.txt 1
+use_clang_plugin = false
+clang_convert = make INJECT_CODE_CLANG=1
+llvm_pass = make INJECT_CODE_LLVM=1
+clean = make clean
\ No newline at end of file
diff -ruN rodinia_3.1/cuda/streamcluster/streamcluster_cuda.cu rodinia_backup/cuda/streamcluster/streamcluster_cuda.cu
--- rodinia_3.1/cuda/streamcluster/streamcluster_cuda.cu	2015-12-11 07:46:09.000000000 -0800
+++ rodinia_backup/cuda/streamcluster/streamcluster_cuda.cu	2024-09-26 12:55:55.464242061 -0700
@@ -1,3 +1,4 @@
+#include "hip/hip_runtime.h"
 /***********************************************
 	streamcluster_cuda.cu
 	: parallelized code of streamcluster
@@ -17,10 +18,10 @@
 
 // AUTO-ERROR CHECK FOR ALL CUDA FUNCTIONS
 #define CUDA_SAFE_CALL( call) do {										\
-   cudaError err = call;												\
-   if( cudaSuccess != err) {											\
+   hipError_t err = call;												\
+   if( hipSuccess != err) {											\
        fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n",	\
-               __FILE__, __LINE__, cudaGetErrorString( err) );			\
+               __FILE__, __LINE__, hipGetErrorString( err) );			\
    exit(EXIT_FAILURE);													\
    } } while (0)
 
@@ -93,10 +94,10 @@
 //=======================================
 void allocDevMem(int num, int dim)
 {
-	CUDA_SAFE_CALL( cudaMalloc((void**) &center_table_d,	  num * sizeof(int))   );
-	CUDA_SAFE_CALL( cudaMalloc((void**) &switch_membership_d, num * sizeof(bool))  );
-	CUDA_SAFE_CALL( cudaMalloc((void**) &p,					  num * sizeof(Point)) );
-	CUDA_SAFE_CALL( cudaMalloc((void**) &coord_d,		num * dim * sizeof(float)) );
+	CUDA_SAFE_CALL( hipMalloc((void**) &center_table_d,	  num * sizeof(int))   );
+	CUDA_SAFE_CALL( hipMalloc((void**) &switch_membership_d, num * sizeof(bool))  );
+	CUDA_SAFE_CALL( hipMalloc((void**) &p,					  num * sizeof(Point)) );
+	CUDA_SAFE_CALL( hipMalloc((void**) &coord_d,		num * dim * sizeof(float)) );
 }
 
 //=======================================
@@ -112,10 +113,10 @@
 //=======================================
 void freeDevMem()
 {
-	CUDA_SAFE_CALL( cudaFree(center_table_d)	  );
-	CUDA_SAFE_CALL( cudaFree(switch_membership_d) );
-	CUDA_SAFE_CALL( cudaFree(p)					  );
-	CUDA_SAFE_CALL( cudaFree(coord_d)			  );
+	CUDA_SAFE_CALL( hipFree(center_table_d)	  );
+	CUDA_SAFE_CALL( hipFree(switch_membership_d) );
+	CUDA_SAFE_CALL( hipFree(p)					  );
+	CUDA_SAFE_CALL( hipFree(coord_d)			  );
 }
 
 //=======================================
@@ -134,14 +135,14 @@
 {	
 #ifdef CUDATIME
 	float tmp_t;
-	cudaEvent_t start, stop;
-	cudaEventCreate(&start);
-	cudaEventCreate(&stop);
+	hipEvent_t start, stop;
+	hipEventCreate(&start);
+	hipEventCreate(&stop);
 	
-	cudaEventRecord(start, 0);
+	hipEventRecord(start, 0);
 #endif
 
-	cudaError_t error;
+	hipError_t error;
 	
 	int stride	= *numcenters + 1;			// size of each work_mem segment
 	int K		= *numcenters ;				// number of centers
@@ -183,18 +184,18 @@
 	}
 	
 #ifdef CUDATIME
-	cudaEventRecord(stop,0);
-	cudaEventSynchronize(stop);
-	cudaEventElapsedTime(&tmp_t, start, stop);
+	hipEventRecord(stop,0);
+	hipEventSynchronize(stop);
+	hipEventElapsedTime(&tmp_t, start, stop);
 	*serial_t += (double) tmp_t;
 	
-	cudaEventRecord(start,0);
+	hipEventRecord(start,0);
 #endif
 
 	//=======================================
 	// ALLOCATE GPU MEMORY
 	//=======================================
-	CUDA_SAFE_CALL( cudaMalloc((void**) &work_mem_d,  stride * (nThread + 1) * sizeof(float)) );
+	CUDA_SAFE_CALL( hipMalloc((void**) &work_mem_d,  stride * (nThread + 1) * sizeof(float)) );
 	// Only on the first iteration
 	if( iter == 0 )
 	{
@@ -202,12 +203,12 @@
 	}
 	
 #ifdef CUDATIME
-	cudaEventRecord(stop,0);
-	cudaEventSynchronize(stop);
-	cudaEventElapsedTime(&tmp_t, start, stop);
+	hipEventRecord(stop,0);
+	hipEventSynchronize(stop);
+	hipEventElapsedTime(&tmp_t, start, stop);
 	*alloc_t += (double) tmp_t;
 	
-	cudaEventRecord(start,0);
+	hipEventRecord(start,0);
 #endif
 
 	//=======================================
@@ -216,21 +217,21 @@
 	// Only if first iteration OR coord has changed
 	if(isCoordChanged || iter == 0)
 	{
-		CUDA_SAFE_CALL( cudaMemcpy(coord_d,  coord_h,	 num * dim * sizeof(float), cudaMemcpyHostToDevice) );
+		CUDA_SAFE_CALL( hipMemcpy(coord_d,  coord_h,	 num * dim * sizeof(float), hipMemcpyHostToDevice) );
 	}
-	CUDA_SAFE_CALL( cudaMemcpy(center_table_d,  center_table,  num * sizeof(int),   cudaMemcpyHostToDevice) );
-	CUDA_SAFE_CALL( cudaMemcpy(p,  points->p,				   num * sizeof(Point), cudaMemcpyHostToDevice) );
+	CUDA_SAFE_CALL( hipMemcpy(center_table_d,  center_table,  num * sizeof(int),   hipMemcpyHostToDevice) );
+	CUDA_SAFE_CALL( hipMemcpy(p,  points->p,				   num * sizeof(Point), hipMemcpyHostToDevice) );
 	
-	CUDA_SAFE_CALL( cudaMemset((void*) switch_membership_d, 0,			num * sizeof(bool))  );
-	CUDA_SAFE_CALL( cudaMemset((void*) work_mem_d,  		0, stride * (nThread + 1) * sizeof(float)) );
+	CUDA_SAFE_CALL( hipMemset((void*) switch_membership_d, 0,			num * sizeof(bool))  );
+	CUDA_SAFE_CALL( hipMemset((void*) work_mem_d,  		0, stride * (nThread + 1) * sizeof(float)) );
 	
 #ifdef CUDATIME
-	cudaEventRecord(stop,0);
-	cudaEventSynchronize(stop);
-	cudaEventElapsedTime(&tmp_t, start, stop);
+	hipEventRecord(stop,0);
+	hipEventSynchronize(stop);
+	hipEventElapsedTime(&tmp_t, start, stop);
 	*cpu_to_gpu_t += (double) tmp_t;
 	
-	cudaEventRecord(start,0);
+	hipEventRecord(start,0);
 #endif
 	
 	//=======================================
@@ -254,38 +255,38 @@
 															center_table_d,			// in:	center index table
 															switch_membership_d		// out:  changes in membership
 															);
-	cudaThreadSynchronize();
+	hipDeviceSynchronize();
 	
 	// error check
-	error = cudaGetLastError();
-	if (error != cudaSuccess)
+	error = hipGetLastError();
+	if (error != hipSuccess)
 	{
-		printf("kernel error: %s\n", cudaGetErrorString(error));
+		printf("kernel error: %s\n", hipGetErrorString(error));
 		exit(EXIT_FAILURE);
 	}
 	
 #ifdef CUDATIME
-	cudaEventRecord(stop,0);
-	cudaEventSynchronize(stop);
-	cudaEventElapsedTime(&tmp_t, start, stop);
+	hipEventRecord(stop,0);
+	hipEventSynchronize(stop);
+	hipEventElapsedTime(&tmp_t, start, stop);
 	*kernel_t += (double) tmp_t;
 	
-	cudaEventRecord(start,0);
+	hipEventRecord(start,0);
 #endif
 	
 	//=======================================
 	// GPU-TO-CPU MEMORY COPY
 	//=======================================
-	CUDA_SAFE_CALL( cudaMemcpy(work_mem_h, 		  work_mem_d, 	stride * (nThread + 1) * sizeof(float), cudaMemcpyDeviceToHost) );
-	CUDA_SAFE_CALL( cudaMemcpy(switch_membership, switch_membership_d,	 num * sizeof(bool),  cudaMemcpyDeviceToHost) );
+	CUDA_SAFE_CALL( hipMemcpy(work_mem_h, 		  work_mem_d, 	stride * (nThread + 1) * sizeof(float), hipMemcpyDeviceToHost) );
+	CUDA_SAFE_CALL( hipMemcpy(switch_membership, switch_membership_d,	 num * sizeof(bool),  hipMemcpyDeviceToHost) );
 	
 #ifdef CUDATIME
-	cudaEventRecord(stop,0);
-	cudaEventSynchronize(stop);
-	cudaEventElapsedTime(&tmp_t, start, stop);
+	hipEventRecord(stop,0);
+	hipEventSynchronize(stop);
+	hipEventElapsedTime(&tmp_t, start, stop);
 	*gpu_to_cpu_t += (double) tmp_t;
 	
-	cudaEventRecord(start,0);
+	hipEventRecord(start,0);
 #endif
 	
 	//=======================================
@@ -355,24 +356,24 @@
 	
 	
 #ifdef CUDATIME
-	cudaEventRecord(stop,0);
-	cudaEventSynchronize(stop);
-	cudaEventElapsedTime(&tmp_t, start, stop);
+	hipEventRecord(stop,0);
+	hipEventSynchronize(stop);
+	hipEventElapsedTime(&tmp_t, start, stop);
 	*serial_t += (double) tmp_t;
 	
-	cudaEventRecord(start,0);
+	hipEventRecord(start,0);
 #endif
 
 	//=======================================
 	// DEALLOCATE GPU MEMORY
 	//=======================================
-	CUDA_SAFE_CALL( cudaFree(work_mem_d) );
+	CUDA_SAFE_CALL( hipFree(work_mem_d) );
 	
 	
 #ifdef CUDATIME
-	cudaEventRecord(stop,0);
-	cudaEventSynchronize(stop);
-	cudaEventElapsedTime(&tmp_t, start, stop);
+	hipEventRecord(stop,0);
+	hipEventSynchronize(stop);
+	hipEventElapsedTime(&tmp_t, start, stop);
 	*free_t += (double) tmp_t;
 #endif
 	iter++;
diff -ruN rodinia_3.1/cuda/streamcluster/streamcluster_header.cu rodinia_backup/cuda/streamcluster/streamcluster_header.cu
--- rodinia_3.1/cuda/streamcluster/streamcluster_header.cu	2015-12-11 07:46:09.000000000 -0800
+++ rodinia_backup/cuda/streamcluster/streamcluster_header.cu	2024-09-26 12:55:55.464242061 -0700
@@ -26,7 +26,7 @@
 #include <sys/resource.h>
 #include <limits.h>
 
-#include <cuda.h>
+#include <hip/hip_runtime.h>
 
 #ifdef ENABLE_PARSEC_HOOKS
 #include <hooks.h>
diff -ruN rodinia_3.1/.gitattributes rodinia_backup/.gitattributes
--- rodinia_3.1/.gitattributes	1969-12-31 16:00:00.000000000 -0800
+++ rodinia_backup/.gitattributes	2024-09-26 12:55:55.235230740 -0700
@@ -0,0 +1,8 @@
+openmp/leukocyte/testfile.avi filter=lfs diff=lfs merge=lfs -text
+openmp/kmeans/kdd_cup filter=lfs diff=lfs merge=lfs -text
+openmp/heartwall/test.avi filter=lfs diff=lfs merge=lfs -text
+openmp/hotspot3D/temp_512x8 filter=lfs diff=lfs merge=lfs -text
+openmp/hotspot3D/power_512x8 filter=lfs diff=lfs merge=lfs -text
+openmp/hotspot/output.out filter=lfs diff=lfs merge=lfs -text
+openmp/hotspot/temp_1024 filter=lfs diff=lfs merge=lfs -text
+openmp/hotspot/power_1024 filter=lfs diff=lfs merge=lfs -text
